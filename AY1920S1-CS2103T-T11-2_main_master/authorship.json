[
  {
    "path": "README.adoc",
    "fileType": "docs",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": "\u003d Dukemon"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": "ifdef::env-github,env-browser[:relfileprefix: docs/]"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": "https://travis-ci.org/AY1920S1-CS2103T-T11-2/main[image:https://travis-ci.org/AY1920S1-CS2103T-T11-2/main.svg?branch\u003dmaster[Build Status]]"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": "https://coveralls.io/github/AY1920S1-CS2103T-T11-2/main?branch\u003dmaster[image:https://coveralls.io/repos/AY1920S1-CS2103T-T11-2/main/badge.svg?branch\u003dmaster[Coverage Status]]"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": "https://www.codacy.com/manual/kohyida1997/main?utm_source\u003dgithub.com\u0026amp;utm_medium\u003dreferral\u0026amp;utm_content\u003dAY1920S1-CS2103T-T11-2/main\u0026amp;utm_campaign\u003dBadge_Grade[image:https://api.codacy.com/project/badge/Grade/cd0b23e15b6a4fbca82036bdf5952fb1[Codacy Badge]]"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "ifdef::env-github[]"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "image::docs/images/Ui.png[width\u003d\"600\"]"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "endif::[]"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "ifndef::env-github[]"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "image::images/Ui.png[width\u003d\"600\"]"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "endif::[]"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": "* Dukemon is a desktop Flashcard style program designed to help YOU revise your work. It has a GUI but most of the user interactions happen using a CLI (Command Line Interface)."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": "* It is a program intended to help *troubled students* revise definitions and important keywords that they encounter in their studies."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": "* Subjects like Biology, Physics and Chemistry are especially compatible with our program. You will be able to create and save your own flashcards and wordbanks to test yourself."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": "* The flow of the program is simple - the question appears and you type in the matching answer."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": "* There are different game modes (Timed vs. Non-Timed, Hints vs. No-Hints) and difficulties that you can configure to challenge yourself."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": "* You will also be able to keep track of your statistics and progress."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": "* *Use the Flashcard app of the future*,"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": " use *Dukemon* !"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Site Map"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "* \u003c\u003cUserGuide#, User Guide\u003e\u003e"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "* \u003c\u003cDeveloperGuide#, Developer Guide\u003e\u003e"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "* \u003c\u003cAboutUs#, About Us\u003e\u003e"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "* \u003c\u003cContactUs#, Contact Us\u003e\u003e"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Acknowledgements"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": "* Adapted from source code of the AddressBook-Level3 project created by SE-EDU initiative at https://se-education.org"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "* Some parts of this sample application were inspired by the excellent http://code.makery.ch/library/javafx-8-tutorial/[Java FX tutorial] by"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "_Marco Jakob_."
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": "* Libraries used: https://openjfx.io/[JavaFX], https://github.com/FasterXML/jackson[Jackson], https://github.com/junit-team/junit5[JUnit5], https://github.com/TestFX/TestFX[TextFX]"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Licence : link:LICENSE[MIT]"
      }
    ],
    "authorContributionMap": {
      "kohyida1997": 14,
      "-": 25
    }
  },
  {
    "path": "build.gradle",
    "fileType": "other",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "// Gradle Configuration File"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": "// For more details take a look at the Java Quickstart chapter in the Gradle"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "// user guide available at http://gradle.org/docs/5.2.1/userguide/tutorial_java_projects.html"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import org.gradle.api.tasks.testing.logging.TestLogEvent"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "sreesubbash"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "plugins {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "    id \u0027java\u0027"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "    id \u0027jacoco\u0027"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "    id \u0027checkstyle\u0027"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    id \u0027com.github.kt3k.coveralls\u0027 version \u00272.4.0\u0027"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "    id \u0027com.github.johnrengelman.shadow\u0027 version \u00274.0.4\u0027"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    id \u0027org.asciidoctor.convert\u0027 version \u00271.5.6\u0027"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    id \u0027application\u0027"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "// Specifies the entry point of the application"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "mainClassName \u003d \u0027seedu.address.Main\u0027"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "sourceCompatibility \u003d JavaVersion.VERSION_11"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "targetCompatibility \u003d JavaVersion.VERSION_11"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "repositories {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    mavenCentral()"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    maven { url \u0027https://oss.sonatype.org/content/repositories/snapshots/\u0027 }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "checkstyle {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    toolVersion \u003d \u00278.1\u0027"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "jacocoTestReport {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    reports {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "        xml.enabled false"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        csv.enabled false"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        html.destination file(\"${buildDir}/jacocoHtml\")"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "test {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    useJUnitPlatform()"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "dependencies {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    String jUnitVersion \u003d \u00275.4.0\u0027"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    String javaFxVersion \u003d \u002711\u0027"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-base\u0027, version: javaFxVersion, classifier: \u0027win\u0027"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-base\u0027, version: javaFxVersion, classifier: \u0027mac\u0027"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-base\u0027, version: javaFxVersion, classifier: \u0027linux\u0027"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-controls\u0027, version: javaFxVersion, classifier: \u0027win\u0027"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-controls\u0027, version: javaFxVersion, classifier: \u0027mac\u0027"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-controls\u0027, version: javaFxVersion, classifier: \u0027linux\u0027"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-fxml\u0027, version: javaFxVersion, classifier: \u0027win\u0027"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-fxml\u0027, version: javaFxVersion, classifier: \u0027mac\u0027"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-fxml\u0027, version: javaFxVersion, classifier: \u0027linux\u0027"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-graphics\u0027, version: javaFxVersion, classifier: \u0027win\u0027"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-graphics\u0027, version: javaFxVersion, classifier: \u0027mac\u0027"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-graphics\u0027, version: javaFxVersion, classifier: \u0027linux\u0027"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "    implementation group: \u0027com.fasterxml.jackson.core\u0027, name: \u0027jackson-databind\u0027, version: \u00272.7.0\u0027"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "    implementation group: \u0027com.fasterxml.jackson.datatype\u0027, name: \u0027jackson-datatype-jsr310\u0027, version: \u00272.7.4\u0027"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "    testImplementation group: \u0027org.junit.jupiter\u0027, name: \u0027junit-jupiter-api\u0027, version: jUnitVersion"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "    testRuntimeOnly group: \u0027org.junit.jupiter\u0027, name: \u0027junit-jupiter-engine\u0027, version: jUnitVersion"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": "    testCompile \"org.testfx:testfx-core:4.0.16-alpha\""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": "    testCompile \"org.testfx:testfx-junit5:4.0.16-alpha\""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": "    testCompile group: \u0027org.assertj\u0027, name: \u0027assertj-core\u0027, version: \u00273.13.2\u0027"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "shadowJar {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": "    archiveName \u003d \u0027Dukemon.jar\u0027"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "    destinationDir \u003d file(\"${buildDir}/jar/\")"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "task coverage(type: JacocoReport) {"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "    sourceDirectories.from files(sourceSets.main.allSource.srcDirs)"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "    classDirectories.from files(sourceSets.main.output)"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "    executionData.from files(jacocoTestReport.executionData)"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "    afterEvaluate {"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "        classDirectories.from files(classDirectories.files.collect {"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "            fileTree(dir: it, exclude: [\u0027**/*.jar\u0027])"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "        })"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "    reports {"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "        html.enabled \u003d true"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "        xml.enabled \u003d true"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "coveralls {"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "    sourceDirs \u003d sourceSets.main.allSource.srcDirs.absolutePath"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "    jacocoReportPath \u003d \"${buildDir}/reports/jacoco/coverage/coverage.xml\""
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "tasks.coveralls {"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "    dependsOn coverage"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "    onlyIf { System.env.\u0027CI\u0027 }"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "test {"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "    testLogging {"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "        events TestLogEvent.FAILED, TestLogEvent.SKIPPED"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "        // Prints the currently running test\u0027s name in the CI\u0027s build log,"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "        // so that we can check if tests are being silently skipped or"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "        // stalling the build."
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "        if (System.env.\u0027CI\u0027) {"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "            events \u003c\u003c TestLogEvent.STARTED"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "    jacoco {"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "        destinationFile \u003d new File(\"${buildDir}/jacoco/test.exec\")"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "asciidoctor {"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "    backends \u0027html5\u0027"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "    sourceDir \u0027docs\u0027"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "    outputDir \"${buildDir}/docs\""
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "    options \u003d ["
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "        template_dirs: [file(\"${sourceDir}/templates\")],"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "    ]"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "    attributes \u003d ["
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "        linkcss: true,"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "        stylesheet: \u0027gh-pages.css\u0027,"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": "        \u0027source-highlighter\u0027: \u0027coderay\u0027,"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "        icons: \u0027font\u0027,"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": "        experimental: true,"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": "        sectlinks: true,"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": "        idprefix: \u0027\u0027,  // for compatibility with GitHub preview"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": "        idseparator: \u0027-\u0027,"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": "        \u0027site-root\u0027: \"${sourceDir}\",  // must be the same as sourceDir, do not modify"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": "        \u0027site-name\u0027: \u0027AddressBook-Level3\u0027,"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": "        \u0027site-githuburl\u0027: \u0027https://github.com/se-edu/addressbook-level3\u0027,"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": "        \u0027site-seedu\u0027: true,  // delete this line if your project is not a fork (not a SE-EDU project)"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": "    ]"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": "    options[\u0027template_dirs\u0027].each {"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": "        inputs.files fileTree(it)"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": "// Copies stylesheets into the directory containing generated HTML files as"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": "// Asciidoctor does not copy linked CSS files to the output directory when rendering."
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "-"
        },
        "content": "// This is needed for linked stylesheets and embedded stylesheets which import other files."
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "-"
        },
        "content": "task copyStylesheets(type: Copy) {"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "-"
        },
        "content": "    from \"${asciidoctor.sourceDir}/stylesheets\""
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "-"
        },
        "content": "    into \"${asciidoctor.outputDir}/html5/stylesheets\""
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "-"
        },
        "content": "asciidoctor.dependsOn copyStylesheets"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "-"
        },
        "content": "defaultTasks \u0027clean\u0027, \u0027test\u0027, \u0027coverage\u0027, \u0027asciidoctor\u0027"
      }
    ],
    "authorContributionMap": {
      "sreesubbash": 1,
      "kohyida1997": 6,
      "-": 154
    }
  },
  {
    "path": "docs/AboutUs.adoc",
    "fileType": "docs",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d About Us"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ":site-section: AboutUs"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": ":relfileprefix: team/"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ":imagesDir: images"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ":stylesDir: stylesheets"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": "Dukemon was developed by the https://se-edu.github.io/docs/Team.html[se-edu] team. +"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "We are a team based in the http://www.comp.nus.edu.sg[School of Computing, National University of Singapore]."
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": "\u003d\u003d CS2103T-T11-2"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": "\u003d\u003d\u003d James Pang"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": "image::jamessspanggg.png[width\u003d\"150\", align\u003d\"left\"]"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": "{empty}[http://github.com/jamessspanggg[homepage]] [https://github.com/jamessspanggg[github]] [\u003c\u003cjamessspanggg#, portfolio\u003e\u003e]"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": "Role: Project Advisor + TA"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "\u0027\u0027\u0027"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": "\u003d\u003d\u003d Chen Hui"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": "image::chrischenhui.png[width\u003d\"150\", align\u003d\"left\"]"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": "{empty}[http://github.com/chrischenhui[github]] [\u003c\u003cchrischenhui#, portfolio\u003e\u003e]"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "Role: Team Lead +"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": "Responsibilities: UI + Game Logic"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "\u0027\u0027\u0027"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": "\u003d\u003d\u003d Koh Yi Da"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": "image::kohyida1997.png[width\u003d\"150\", align\u003d\"left\"]"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": "{empty}[http://github.com/kohyida1997[github]] [\u003c\u003ckohyida1997#, portfolio\u003e\u003e]"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "Role: Developer +"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": "Responsibilities: Game + Timer + Threading"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "\u0027\u0027\u0027"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": "\u003d\u003d\u003d Sree Subbash"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": "image::sreesubbash.png[width\u003d\"150\", align\u003d\"left\"]"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": "{empty}[http://github.com/sreesubbash[github]] [\u003c\u003csreesubbash#, portfolio\u003e\u003e]"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "Role: Developer +"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": "Responsibilities: Dev Ops + Game Logic"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "\u0027\u0027\u0027"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": "\u003d\u003d\u003d Jason Sathya Citro"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": "image::jascxx.png[width\u003d\"150\", align\u003d\"left\"]"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": "{empty}[http://github.com/jascxx[github]] [\u003c\u003cjascxx#, portfolio\u003e\u003e]"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "Role: Developer +"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": "Responsibilities: UI + Data"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": "\u0027\u0027\u0027"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": "\u003d\u003d\u003d Paul Tho"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": "image::dragontho.png[width\u003d\"150\", align\u003d\"left\"]"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": "{empty}[http://github.com/dragontho[github]] [\u003c\u003cdragontho#, portfolio\u003e\u003e]"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": "Role: Developer +"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": "Responsibilities: UI + Data"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "\u0027\u0027\u0027"
      }
    ],
    "authorContributionMap": {
      "kohyida1997": 31,
      "-": 32
    }
  },
  {
    "path": "docs/ContactUs.adoc",
    "fileType": "docs",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d Contact Us"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ":site-section: ContactUs"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": ":stylesDir: stylesheets"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "jascxx"
        },
        "content": "* *Bug reports, Suggestions* : Post in our https://github.com/AY1920S1-CS2103T-T11-2/main/issues[issue tracker] if you noticed bugs or have suggestions on how to improve."
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "* *Contributing* : We welcome pull requests. Follow the process described https://github.com/oss-generic/process[here]"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "jascxx"
        },
        "content": "* *Email us* : You can also reach us at +"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "jascxx"
        },
        "content": "oranged97@gmail.com +"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "jascxx"
        },
        "content": "kohyida1997@gmail.com +"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "jascxx"
        },
        "content": "sreesubbash@gmail.com +"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "jascxx"
        },
        "content": "jasonsathyacitro@gmail.com +"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "jascxx"
        },
        "content": "paultho97@gmail.com"
      }
    ],
    "authorContributionMap": {
      "jascxx": 7,
      "-": 5
    }
  },
  {
    "path": "docs/DeveloperGuide.adoc",
    "fileType": "docs",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "chrischenhui"
        },
        "content": "\u003d Dukemon - Developer Guide"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ":site-section: DeveloperGuide"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": ":toc:"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ":toc-title:"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ":toc-placement: preamble"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ":sectnums:"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ":imagesDir: images"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ":stylesDir: stylesheets"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ":xrefstyle: full"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "ifdef::env-github[]"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ":tip-caption: :bulb:"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ":note-caption: :information_source:"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ":warning-caption: :warning:"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "endif::[]"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": ":repoURL: https://github.com/AY1920S1-CS2103T-T11-2/main"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "By: `Team SE-EDU`      Since: `Jun 2016`      Licence: `MIT`"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Setting up"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "Refer to the guide \u003c\u003cSettingUp#, here\u003e\u003e."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Design"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "[[Design-Architecture]]"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Architecture"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": ".Dukemon Architecture Diagram"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "image::ArchitectureDiagram.png[]"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "jascxx"
        },
        "content": "The *_Architecture Diagram_* given above explains the high-level design of Dukemon. Given below is a quick overview of each component."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "[TIP]"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "The `.puml` files used to create diagrams in this document can be found in the link:{repoURL}/docs/diagrams/[diagrams] folder."
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "Refer to the \u003c\u003cUsingPlantUml#, Using PlantUML guide\u003e\u003e to learn how to create and edit diagrams."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": "`Main` has two classes called link:{repoURL}/blob/master/src/main/java/seedu/address/Main.java[`Main`] and link:{repoURL}/blob/master/src/main/java/seedu/address/MainApp.java[`MainApp`]. It is responsible for,"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "* At app launch: Initializes the components in the correct sequence, and connects them up with each other."
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "* At shut down: Shuts down the components and invokes cleanup method where necessary."
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c\u003cDesign-Commons,*`Commons`*\u003e\u003e represents a collection of classes used by multiple other components."
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "The following class plays an important role at the architecture level:"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "* `LogsCenter` : Used by many classes to write log messages to the App\u0027s log file."
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": "The rest of *Dukemon* contains _seven_ componenets."
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": "* \u003c\u003cDesign-Ui,*`UI`*\u003e\u003e: +"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": "The Graphical UI of Dukemon that interacts with the user."
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": "* \u003c\u003cDesign-AppManager, *`AppManager`*\u003e\u003e: +"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": "The buffer between the User and Dukemon\u0027s internal components."
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": "* \u003c\u003cDesign-Timer, *`Timer`*\u003e\u003e: +"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": "The internal Timer that triggers events based on time elapsed."
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": "* \u003c\u003cDesign-Logic,*`Logic`*\u003e\u003e: +"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": "The main command executor and performer of operations."
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": "* \u003c\u003cDesign-Model,*`Model`*\u003e\u003e: +"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": "Holds the non-game data in-memory."
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": "* \u003c\u003cDesign-Game,*`Game`*\u003e\u003e: +"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": "Holds the data of live game sessions in-memory."
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": "* \u003c\u003cDesign-Storage,*`Storage`*\u003e\u003e: +"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": "Reads data from, and writes data to, the local hard disk."
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": "For the components UI, Logic, Model, Timer and Game:"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "* Defines its _API_ in an `interface` with the same name as the Component."
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "* Exposes its functionality using a `{Component Name}Manager` class."
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "jascxx"
        },
        "content": "For example, the `Logic` component (see the class diagram given below) defines its API in the `Logic.java` interface and exposes its functionality using the `LogicManager.java` class."
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": ".Class Diagram of the Logic Component"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "image::LogicClassDiagram.png[]"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "[discrete]"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d\u003d How the architecture components interact with each other"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "The _Sequence Diagram_ below shows how the components interact with each other for the scenario where the user issues the command `delete 1`."
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": ".Component interactions for `delete 1` command"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "image::ArchitectureSequenceDiagram.png[]"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "The sections below give more details of each component."
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "[[Design-Ui]]"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d UI component"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": ".Structure of the UI Component"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "image::UiClassDiagram.png[]"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "*API* : link:{repoURL}/src/main/java/seedu/address/ui/Ui.java[`Ui.java`]"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "The UI consists of a `MainWindow` that is made up of parts e.g.`CommandBox`, `ResultDisplay`, `PersonListPanel`, `StatusBarFooter` etc. All these, including the `MainWindow`, inherit from the abstract `UiPart` class."
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "The `UI` component uses JavaFx UI framework. The layout of these UI parts are defined in matching `.fxml` files that are in the `src/main/resources/view` folder. For example, the layout of the link:{repoURL}/src/main/java/seedu/address/ui/MainWindow.java[`MainWindow`] is specified in link:{repoURL}/src/main/resources/view/MainWindow.fxml[`MainWindow.fxml`]"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "The `UI` component,"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "* Executes user commands using the `Logic` component."
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "* Listens for changes to `Model` data so that the UI can be updated with the modified data."
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": "[[Design-AppManager]]"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": "\u003d\u003d\u003d AppManager component"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": ""
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": "\"Explain AppManager component\""
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": ""
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": "[[Design-Timer]]"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": "\u003d\u003d\u003d Timer component"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": ""
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": "[[fig-TimerClassDiagram]]"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": ".Structure of the Timer Component"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": "image::TimerClassDiagram.png[]"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": ""
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": "*API* :"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": "link:{repoURL}/blob/master/src/main/java/seedu/address/appmanager/timer/GameTimer.java[`GameTimer.java`]"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": ""
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": "The `Timer` consists of a `GameTimer` that will keep track of time elapsed via an internal countdown timer"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": "and notify the `AppManager`, who will notify the `UI` components."
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": ""
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": "* Dealing with the internal countdown timer that runs during a game session."
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "jascxx"
        },
        "content": "* Periodically triggering _callbacks_ that will notify the `AppManager` component."
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": "* Gets timestamps to trigger `Hints` via a `HintTimingQueue`"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": ""
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": "_Due to the fact that the timer has to work closely with the `UI` and `AppManager` (without being"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": "coupled directly), it is separated from the `Logic`, `Model` and `Game` components._"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": ""
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "[[Design-Logic]]"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Logic component"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "[[fig-LogicClassDiagram]]"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": ".Structure of the Logic Component"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "image::LogicClassDiagram.png[]"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "*API* :"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "link:{repoURL}/src/main/java/seedu/address/logic/Logic.java[`Logic.java`]"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "sreesubbash"
        },
        "content": ".  `Logic` uses the `ParserManager` class to parse the user command."
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": ".  This results in a `Command` object which is executed by the `LogicManager`."
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": ".  The command execution can affect the `Model` (e.g. adding a person)."
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "sreesubbash"
        },
        "content": ".  The result of the command execution is encapsulated as a `CommandResult` object which is passed back to the `Ui` and `AppManager`."
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": ".  In addition, the `CommandResult` object can also instruct the `Ui` to perform certain actions, such as displaying help to the user."
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "sreesubbash"
        },
        "content": ".  Furthermore, through the UiLogicHelper Interface, it updates the AutoComplete suggestions for every keystroke."
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "sreesubbash"
        },
        "content": "Given below is the Activity Diagram that shows the workflows that change state of `ParserManager` that produce different outcomes for commands entered."
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "sreesubbash"
        },
        "content": ".Activity diagram of Application flow"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "sreesubbash"
        },
        "content": "image::ParserManagerActivityDiagram.png[]"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": "NOTE: The lifeline for `DeleteCommandParser` should end at the destroy marker (X) but due to a limitation of PlantUML, the lifeline reaches the end of diagram."
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": "[[Design-Model]]"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Model component"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": ".Structure of the Model Component"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "-"
        },
        "content": "image::ModelClassDiagram.png[]"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "-"
        },
        "content": "*API* : link:{repoURL}/src/main/java/seedu/address/model/Model.java[`Model.java`]"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "-"
        },
        "content": "The `Model`,"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "-"
        },
        "content": "* stores a `UserPref` object that represents the user\u0027s preferences."
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "-"
        },
        "content": "* stores the Address Book data."
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "-"
        },
        "content": "* exposes an unmodifiable `ObservableList\u003cPerson\u003e` that can be \u0027observed\u0027 e.g. the UI can be bound to this list so that the UI automatically updates when the data in the list change."
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "-"
        },
        "content": "* does not depend on any of the other three components."
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "-"
        },
        "content": "[NOTE]"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "-"
        },
        "content": "As a more OOP model, we can store a `Tag` list in `Address Book`, which `Person` can reference. This would allow `Address Book` to only require one `Tag` object per unique `Tag`, instead of each `Person` needing their own `Tag` object. An example of how such a model may look like is given below. +"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "-"
        },
        "content": " +"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "-"
        },
        "content": "image:BetterModelClassDiagram.png[]"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": "[[Design-Game]]"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": "\u003d\u003d\u003d Game component"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": ""
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": ""
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": ".Structure of the Game Component"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": "image::GameClassDiagram.png[]"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": ""
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": "The `Game`,"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": ""
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": "* stores a _shuffled_ `List\u003cCard\u003e` that is cloned/copied from a `ReadOnlyWordBank`."
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": "* maintains an `Index` to keep track of the state of the game."
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": "* has an associated `DifficultyEnum` that dictates the time allowed for each question."
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": "* verifies `Guess` that are sent by `Logic` (User\u0027s guesses)"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": ""
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "-"
        },
        "content": "[[Design-Storage]]"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Storage component"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "-"
        },
        "content": ".Structure of the Storage Component"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "-"
        },
        "content": "image::StorageClassDiagram.png[]"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "-"
        },
        "content": "*API* : link:{repoURL}/src/main/java/seedu/address/storage/Storage.java[`Storage.java`]"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "-"
        },
        "content": "The `Storage` component,"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "-"
        },
        "content": "* can save `UserPref` objects in json format and read it back."
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "-"
        },
        "content": "* can save the Address Book data in json format and read it back."
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "-"
        },
        "content": "[[Design-Commons]]"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Common classes"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "chrischenhui"
        },
        "content": "Classes used by multiple components are in the `seedu.Dukemon.commons` package."
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Implementation"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "-"
        },
        "content": "This section describes some noteworthy details on how certain features are implemented."
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "-"
        },
        "content": "// tag::undoredo[]"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": "\u003d\u003d\u003d [underline]#AutoComplete Feature# (for command execution)"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "sreesubbash"
        },
        "content": "\u003d\u003d\u003d\u003d Implementation"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "sreesubbash"
        },
        "content": "The AutoComplete is facilitated by `ParserManager`."
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "sreesubbash"
        },
        "content": "It dynamically changes parser depending on current mode the game is at. When updating the User Interface for every keystroke, it ensures only the right commands get parsed and autocompleted at each moment."
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "sreesubbash"
        },
        "content": "For the UI package to have access to this information, it exposes its functionality through `LogicManager` as `UiLogicHelper` interface with the following getter methods:"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "sreesubbash"
        },
        "content": "* `List\u003cAutoFillAction\u003e#getMenuItems(String text)` -- Gets an List of AutoFillActions to fill up AutoComplete display based on current user input given in text"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "sreesubbash"
        },
        "content": "* `ModeEnum#getMode()` -- Retrieves the application mode to display visually to the user (represented by enumeration object ModeEnum)"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "sreesubbash"
        },
        "content": "* `List\u003cModeEnum\u003e#getModes()` -- Retrieves the possible modes the user can transition to from current mode"
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "sreesubbash"
        },
        "content": "These operations are implemented in `SpecificModeParser` aided by `ClassUtil` to handle instantiation of Parser and Command objects."
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "sreesubbash"
        },
        "content": "Given below is an example usage scenario and how the AutoCompletion mechanism behaves at each step."
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "chrischenhui"
        },
        "content": "Step 1. The user launches the application. The `VersionedDukemon` will be initialized with the initial address book state, and the `currentStatePointer` pointing to that single address book state."
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "sreesubbash"
        },
        "content": "Replace image with state of ParserManager"
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "chrischenhui"
        },
        "content": "Step 2. The user enters `start difficult` command to begin the game. The `LogicManager` passes string to `Model#commitDukemon()`, causing the modified state of the address book after the `delete 5` command executes to be saved in the `DukemonStateList`, and the `currentStatePointer` is shifted to the newly inserted address book state."
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "chrischenhui"
        },
        "content": "Step 3. The user executes `stop` to abruptly end the game. The `add` command also calls `Model#commitDukemon()`, causing another modified address book state to be saved into the `DukemonStateList`."
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "chrischenhui"
        },
        "content": "Step 4. The user now decides that adding the person was a mistake, and decides to undo that action by executing the `undo` command. The `undo` command will call `Model#undoDukemon()`, which will shift the `currentStatePointer` once to the left, pointing it to the previous address book state, and restores the address book to that state."
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "sreesubbash"
        },
        "content": "The following sequence diagram shows how the AutoComplete operation works:"
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "sreesubbash"
        },
        "content": "image::AutoCompleteSequenceDiagram.png[]"
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "-"
        },
        "content": "NOTE: The lifeline for `UndoCommand` should end at the destroy marker (X) but due to a limitation of PlantUML, the lifeline reaches the end of diagram."
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "chrischenhui"
        },
        "content": "The `redo` command does the opposite -- it calls `Model#redoDukemon()`, which shifts the `currentStatePointer` once to the right, pointing to the previously undone state, and restores the address book to that state."
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "-"
        },
        "content": "The `redo` command does the opposite -- it calls `Model#redoAddressBook()`, which shifts the `currentStatePointer` once to the right, pointing to the previously undone state, and restores the address book to that state."
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 248,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d\u003d Design Considerations"
      },
      {
        "lineNumber": 249,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 250,
        "author": {
          "gitId": "sreesubbash"
        },
        "content": "\u003d\u003d\u003d\u003d\u003d Aspect: How parser and command objects are instantiated in SpecificModeParser"
      },
      {
        "lineNumber": 251,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 252,
        "author": {
          "gitId": "sreesubbash"
        },
        "content": "* **Alternative 1 (current choice):** Use java reflections to hold a List of Classes and iterate through them to pick the matching Classes"
      },
      {
        "lineNumber": 253,
        "author": {
          "gitId": "sreesubbash"
        },
        "content": "** Pros: Open Close Principle strictly followed. Adding a command with a parser takes only one line of code."
      },
      {
        "lineNumber": 254,
        "author": {
          "gitId": "sreesubbash"
        },
        "content": "** Cons: It is developer responsibility to ensure classes subclass Command object as compile time errors would not be thrown."
      },
      {
        "lineNumber": 255,
        "author": {
          "gitId": "sreesubbash"
        },
        "content": "* **Alternative 2:** Use switches in Parser to match Command Word to create Parser objects if necessary else directly create Command object."
      },
      {
        "lineNumber": 256,
        "author": {
          "gitId": "sreesubbash"
        },
        "content": "** Pros: Compile time error would be thrown if new command or parser does not subclass correctly."
      },
      {
        "lineNumber": 257,
        "author": {
          "gitId": "sreesubbash"
        },
        "content": "** Cons: Adding a new command with parser would require the developer to insert it into multiple locations as the autocomplete feature needs an iterable command list."
      },
      {
        "lineNumber": 258,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 259,
        "author": {
          "gitId": "sreesubbash"
        },
        "content": "\u003d\u003d\u003d\u003d\u003d Aspect: Single Parser vs Parser Manager"
      },
      {
        "lineNumber": 260,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 261,
        "author": {
          "gitId": "sreesubbash"
        },
        "content": "* **Alternative 1 (current choice):** Using a ParserManager to dynamically switch between Parsers based on current state"
      },
      {
        "lineNumber": 262,
        "author": {
          "gitId": "sreesubbash"
        },
        "content": "** Pros: Commands not belonging to specific mode would not be parsed"
      },
      {
        "lineNumber": 263,
        "author": {
          "gitId": "sreesubbash"
        },
        "content": "** Cons: More code to right for initial developer. However it is easily extnensible for new modes and parsers by the Open Close Principle"
      },
      {
        "lineNumber": 264,
        "author": {
          "gitId": "-"
        },
        "content": "* **Alternative 2:** Use `HistoryManager` for undo/redo"
      },
      {
        "lineNumber": 265,
        "author": {
          "gitId": "-"
        },
        "content": "** Pros: We do not need to maintain a separate list, and just reuse what is already in the codebase."
      },
      {
        "lineNumber": 266,
        "author": {
          "gitId": "-"
        },
        "content": "** Cons: Requires dealing with commands that have already been undone: We must remember to skip these commands. Violates Single Responsibility Principle and Separation of Concerns as `HistoryManager` now needs to do two different things."
      },
      {
        "lineNumber": 267,
        "author": {
          "gitId": "-"
        },
        "content": "// end::undoredo[]"
      },
      {
        "lineNumber": 268,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 269,
        "author": {
          "gitId": "dragontho"
        },
        "content": "// tag::settings[]"
      },
      {
        "lineNumber": 270,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": "\u003d\u003d\u003d [underline]#Settings Feature#"
      },
      {
        "lineNumber": 271,
        "author": {
          "gitId": "dragontho"
        },
        "content": "\u003d\u003d\u003d\u003d Implementation"
      },
      {
        "lineNumber": 272,
        "author": {
          "gitId": "dragontho"
        },
        "content": "`AppSettings` was a class that was created to be integrated into the `Model` of the app. It currently contains these functionalities:"
      },
      {
        "lineNumber": 273,
        "author": {
          "gitId": "dragontho"
        },
        "content": ""
      },
      {
        "lineNumber": 274,
        "author": {
          "gitId": "dragontho"
        },
        "content": "* `difficulty [EASY/MEDIUM/HARD]` to change the difficulty of the game."
      },
      {
        "lineNumber": 275,
        "author": {
          "gitId": "dragontho"
        },
        "content": "* `hints [ON/OFF]` to turn hints on or off."
      },
      {
        "lineNumber": 276,
        "author": {
          "gitId": "dragontho"
        },
        "content": "* `theme [DARK/LIGHT]` to change the theme of the app. Currently only supporting dark and light themes."
      },
      {
        "lineNumber": 277,
        "author": {
          "gitId": "dragontho"
        },
        "content": ""
      },
      {
        "lineNumber": 278,
        "author": {
          "gitId": "dragontho"
        },
        "content": "This feature provides the user an interface to make their own changes to the state of the machine. The settings set by the user will also be saved to a `.json` file under `data/appsettings.json`."
      },
      {
        "lineNumber": 279,
        "author": {
          "gitId": "dragontho"
        },
        "content": ""
      },
      {
        "lineNumber": 280,
        "author": {
          "gitId": "dragontho"
        },
        "content": "The activity diagram below summarizes what happens in the execution of a settings command:"
      },
      {
        "lineNumber": 281,
        "author": {
          "gitId": "dragontho"
        },
        "content": ""
      },
      {
        "lineNumber": 282,
        "author": {
          "gitId": "dragontho"
        },
        "content": ".Activity diagram of the execution of a settings command."
      },
      {
        "lineNumber": 283,
        "author": {
          "gitId": "dragontho"
        },
        "content": "image::SettingsActivityDiagram.png[]"
      },
      {
        "lineNumber": 284,
        "author": {
          "gitId": "dragontho"
        },
        "content": ""
      },
      {
        "lineNumber": 285,
        "author": {
          "gitId": "dragontho"
        },
        "content": "[NOTE]"
      },
      {
        "lineNumber": 286,
        "author": {
          "gitId": "dragontho"
        },
        "content": "Take note that \"mode\" as defined in our project is the state in which the application is able to take commands specific to that mode."
      },
      {
        "lineNumber": 287,
        "author": {
          "gitId": "dragontho"
        },
        "content": ""
      },
      {
        "lineNumber": 288,
        "author": {
          "gitId": "dragontho"
        },
        "content": "Given below is a step by step walk-through of what happens when a user executes a difficulty command while in settings mode:"
      },
      {
        "lineNumber": 289,
        "author": {
          "gitId": "dragontho"
        },
        "content": ""
      },
      {
        "lineNumber": 290,
        "author": {
          "gitId": "dragontho"
        },
        "content": "1. Let us assume that the current difficulty of the application is \"EASY\". The object diagram below shows the current state of `AppSettings`."
      },
      {
        "lineNumber": 291,
        "author": {
          "gitId": "dragontho"
        },
        "content": "2. When the user enters `difficulty hard`, the command gets passed into Ui first, which executes `AppManager#execute()`, which passes straight to `LogicManager#execute()` without any logic conditions to determine its execution path."
      },
      {
        "lineNumber": 292,
        "author": {
          "gitId": "dragontho"
        },
        "content": "3. At `LogicManager#execute()` however, the command gets passed into a parser manager which filters out the `DifficultyCommand` as a non-switch command and it creates a `DifficultyCommand` to be executed."
      },
      {
        "lineNumber": 293,
        "author": {
          "gitId": "dragontho"
        },
        "content": "4. Upon execution of the `DifficultyCommand`, the state of the model is changed such that the `DifficultyEnum` in `AppSettings` is now set to `HARD`."
      },
      {
        "lineNumber": 294,
        "author": {
          "gitId": "dragontho"
        },
        "content": "5. Since the main function of the `difficulty` command is accomplished and all that is left is to update the ui, the `CommandResult` that is produced by the execution of the command goes back to `Ui` without much problem."
      },
      {
        "lineNumber": 295,
        "author": {
          "gitId": "dragontho"
        },
        "content": "6. Assuming that there were no errors thrown during the execution of the `difficulty` command, the execution calls `updateModularDisplay` in `UpdateUi`. In here, the `ModeEnum.SETTINGS` is registered and it updates the settings display to properly reflect the change in difficulty."
      },
      {
        "lineNumber": 296,
        "author": {
          "gitId": "dragontho"
        },
        "content": ""
      },
      {
        "lineNumber": 297,
        "author": {
          "gitId": "dragontho"
        },
        "content": "\u003d\u003d\u003d\u003d Design Considerations"
      },
      {
        "lineNumber": 298,
        "author": {
          "gitId": "dragontho"
        },
        "content": ""
      },
      {
        "lineNumber": 299,
        "author": {
          "gitId": "dragontho"
        },
        "content": "There were a few considerations for implementing an interface that essentially allows users to touch a lot of parts of the application through settings and some of these methods break software design principles. These are the considerations we came across:"
      },
      {
        "lineNumber": 300,
        "author": {
          "gitId": "dragontho"
        },
        "content": ""
      },
      {
        "lineNumber": 301,
        "author": {
          "gitId": "dragontho"
        },
        "content": "|\u003d\u003d\u003d"
      },
      {
        "lineNumber": 302,
        "author": {
          "gitId": "dragontho"
        },
        "content": "||**Alternative 1**|**Alternative 2**"
      },
      {
        "lineNumber": 303,
        "author": {
          "gitId": "dragontho"
        },
        "content": "|**Aspect 1**: +"
      },
      {
        "lineNumber": 304,
        "author": {
          "gitId": "dragontho"
        },
        "content": "Where to effect change when a setting is changed by the user"
      },
      {
        "lineNumber": 305,
        "author": {
          "gitId": "dragontho"
        },
        "content": "| **Effecting the change inside the `execute()` command of the settings commands**: +"
      },
      {
        "lineNumber": 306,
        "author": {
          "gitId": "dragontho"
        },
        "content": "_Pros:_ +"
      },
      {
        "lineNumber": 307,
        "author": {
          "gitId": "dragontho"
        },
        "content": "Since the Command is taking care of all the execution, there is no need to worry about extra implementation of the settings\u0027 effects in their classes. +"
      },
      {
        "lineNumber": 308,
        "author": {
          "gitId": "dragontho"
        },
        "content": "_Cons:_ +"
      },
      {
        "lineNumber": 309,
        "author": {
          "gitId": "dragontho"
        },
        "content": "However, there are certain situations that will break software design principles, such as the *Single Responsibility Principle* by doing the job of already existing classes."
      },
      {
        "lineNumber": 310,
        "author": {
          "gitId": "dragontho"
        },
        "content": "|**Effecting the change in the part of the architecture that the setting is affecting. E.g, Changing the theme inside Ui or changing the difficulty inside model** +"
      },
      {
        "lineNumber": 311,
        "author": {
          "gitId": "dragontho"
        },
        "content": "_Pros:_ +"
      },
      {
        "lineNumber": 312,
        "author": {
          "gitId": "dragontho"
        },
        "content": "This method practises good software engineering principles and it abides by the architecture diagram shown above as to where the changes of the settings are being effected. +"
      },
      {
        "lineNumber": 313,
        "author": {
          "gitId": "dragontho"
        },
        "content": "_Cons:_ +"
      },
      {
        "lineNumber": 314,
        "author": {
          "gitId": "dragontho"
        },
        "content": "This method however requires that the reader gets familiar with the whole architecture diagram as they need to know where to implement the actual change in settings as opposed to creating a new class that performs the same functionality of an existing class."
      },
      {
        "lineNumber": 315,
        "author": {
          "gitId": "dragontho"
        },
        "content": ""
      },
      {
        "lineNumber": 316,
        "author": {
          "gitId": "dragontho"
        },
        "content": "3+|**Why did we choose Alternative 2:** +"
      },
      {
        "lineNumber": 317,
        "author": {
          "gitId": "dragontho"
        },
        "content": "We believe that software design principles exist for a reason. Furthermore, while alternative 1 may seem a lot simpler, Alternative 2 allows for extension just by adding new methods and refrains the user from having to extensively rework the structure of the application in order to add a new setting."
      },
      {
        "lineNumber": 318,
        "author": {
          "gitId": "dragontho"
        },
        "content": ""
      },
      {
        "lineNumber": 319,
        "author": {
          "gitId": "dragontho"
        },
        "content": "|**Aspect 2:** +"
      },
      {
        "lineNumber": 320,
        "author": {
          "gitId": "dragontho"
        },
        "content": "How to store information regarding the different settings"
      },
      {
        "lineNumber": 321,
        "author": {
          "gitId": "dragontho"
        },
        "content": "| **Storing it inside the enumerations that make up the choices for the settings** +"
      },
      {
        "lineNumber": 322,
        "author": {
          "gitId": "dragontho"
        },
        "content": "_Pros:_ +"
      },
      {
        "lineNumber": 323,
        "author": {
          "gitId": "dragontho"
        },
        "content": "Having the information stored inside the enum allows for immutablilty, such that no other class can change the properties of the enums. Only the developer can change the values of the enums and it will subsequently affect all the methods and functionality that relies on said enum. +"
      },
      {
        "lineNumber": 324,
        "author": {
          "gitId": "dragontho"
        },
        "content": "_Cons:_ +"
      },
      {
        "lineNumber": 325,
        "author": {
          "gitId": "dragontho"
        },
        "content": "In the case that the user wants to customise certain continuous settings such as time limit, they are unable to as those settings are already defined by the developer to be discrete options."
      },
      {
        "lineNumber": 326,
        "author": {
          "gitId": "dragontho"
        },
        "content": "| **Storing it inside the classes that implement the settings** +"
      },
      {
        "lineNumber": 327,
        "author": {
          "gitId": "dragontho"
        },
        "content": "_Pros_ +"
      },
      {
        "lineNumber": 328,
        "author": {
          "gitId": "dragontho"
        },
        "content": "The information is easily accessible from within the class itself and there is no need for extra import classes to handle the enums in alternative 1. +"
      },
      {
        "lineNumber": 329,
        "author": {
          "gitId": "dragontho"
        },
        "content": "_Cons_ +"
      },
      {
        "lineNumber": 330,
        "author": {
          "gitId": "dragontho"
        },
        "content": "Unlike Alternative 1, the developer can create an extension to the class implementing the setting to allow the user to customise their settings even further, allowing for continuous values to be used rather than discrete values."
      },
      {
        "lineNumber": 331,
        "author": {
          "gitId": "dragontho"
        },
        "content": "3+| **Why did we choose Alternative 1:** +"
      },
      {
        "lineNumber": 332,
        "author": {
          "gitId": "dragontho"
        },
        "content": "The considerations for this aspect was mainly down to how much customisability we wanted to grant our users. While having more customisability is better in some cases,"
      },
      {
        "lineNumber": 333,
        "author": {
          "gitId": "dragontho"
        },
        "content": "in this one, we do not think the added functionality of allowing the user to extensively customise their experience with our application to be particularly impactful not necessary. Moreover, alternative 2 makes for a less organised code base and we wanted to avoid that as much as possible."
      },
      {
        "lineNumber": 334,
        "author": {
          "gitId": "dragontho"
        },
        "content": "|\u003d\u003d\u003d"
      },
      {
        "lineNumber": 335,
        "author": {
          "gitId": "dragontho"
        },
        "content": ""
      },
      {
        "lineNumber": 336,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": "\u003d\u003d\u003d [underline]#Timer Feature#"
      },
      {
        "lineNumber": 337,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": ""
      },
      {
        "lineNumber": 338,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": ".Screenshot of the `Timer` component in action as seen through the `UI`."
      },
      {
        "lineNumber": 339,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": "image::TimerDGScreenshot.png[]"
      },
      {
        "lineNumber": 340,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": ""
      },
      {
        "lineNumber": 341,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": "\u003d\u003d\u003d\u003d Implementation Overview"
      },
      {
        "lineNumber": 342,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": ""
      },
      {
        "lineNumber": 343,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": "The `Timer` component utilizes the `java.util.Timer` API to simulate a stopwatch during a `Game`. It also relies on"
      },
      {
        "lineNumber": 344,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": "using _Functional Interfaces_ as _callbacks_ to periodically notify other components in the system. Using _callbacks_"
      },
      {
        "lineNumber": 345,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": "allows the `Timer` to enact changes in other components of the system without directly holding a reference to those"
      },
      {
        "lineNumber": 346,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": "components."
      },
      {
        "lineNumber": 347,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": ""
      },
      {
        "lineNumber": 348,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": "Internally, the `Timer`"
      },
      {
        "lineNumber": 349,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": "works by using the method `java.util.Timer.schedule()` that will schedule `java.util.TimerTasks` at a fixed rate."
      },
      {
        "lineNumber": 350,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": ""
      },
      {
        "lineNumber": 351,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": "An _Observer Pattern_ is loosly followed between the `Timer` and the other components. As opposed to defining an"
      },
      {
        "lineNumber": 352,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": "_Observable_ interface, the `AppManager` simply passes in _method pointers_ into the `Timer` to _callback_ when an"
      },
      {
        "lineNumber": 353,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": "event is triggered. The `AppManager` thus works closely with the `Timer` as the main hub to enact changes based on"
      },
      {
        "lineNumber": 354,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": "signals given by the `Timer`."
      },
      {
        "lineNumber": 355,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": ""
      },
      {
        "lineNumber": 356,
        "author": {
          "gitId": "-"
        },
        "content": "[NOTE]"
      },
      {
        "lineNumber": 357,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": "To avoid"
      },
      {
        "lineNumber": 358,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": "synchronization issues with the `UI` component, all"
      },
      {
        "lineNumber": 359,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": "`TimerTasks` (such as requesting to refresh a component of the `UI`) are forced to run on the *JavaFX Application Thread* using"
      },
      {
        "lineNumber": 360,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": "`Platform.runLater()`."
      },
      {
        "lineNumber": 361,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": ""
      },
      {
        "lineNumber": 362,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": ""
      },
      {
        "lineNumber": 363,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": ".Class diagram reflecting how the callback-functions are organized in the Timer component."
      },
      {
        "lineNumber": 364,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": "image::TimerClassDiagramCallbacks.png[]"
      },
      {
        "lineNumber": 365,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": ""
      },
      {
        "lineNumber": 366,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": "The three main events that are currently triggered by the `Timer` component which require a _callback_ are:"
      },
      {
        "lineNumber": 367,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 368,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": "1. Time has elapsed, _callback_ to `AppManager` to update and display the new timestamp on the `UI`."
      },
      {
        "lineNumber": 369,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": "2. Time has run out (_reached zero_), _callback_ to `AppManager` to skip over to next `Card`."
      },
      {
        "lineNumber": 370,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": "3. Time has reached a point where `Hints` are to be given to the User, _callback_ to `AppManager` to retrieve a hint"
      },
      {
        "lineNumber": 371,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": "and display accordingly on the `UI`."
      },
      {
        "lineNumber": 372,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 373,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": "The call-backs for each of these events are implemented as nested _Functional Interfaces_"
      },
      {
        "lineNumber": 374,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": "within the  `GameTimer` interface, which is concretized via the `GameTimerManager`."
      },
      {
        "lineNumber": 375,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 376,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": "\u003d\u003d\u003d\u003d Flow of Events"
      },
      {
        "lineNumber": 377,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 378,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": "This section describes the sequential flow of events in the life cycle of a `GameTimer` object."
      },
      {
        "lineNumber": 379,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 380,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": ".Sequence diagram describing the flow of registering and executing callbacks between the different components"
      },
      {
        "lineNumber": 381,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": "image::TimerSequenceDiagram1.png[]"
      },
      {
        "lineNumber": 382,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 383,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": "The `UI` component first registers callbacks with the `AppManager`, who then registers callbacks with"
      },
      {
        "lineNumber": 384,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": "the `Timer` component. Periodically, the `Timer` will notify the `AppManager` to perform tasks to notify"
      },
      {
        "lineNumber": 385,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": "the `UI` component. This is to provide better abstraction between the `UI` and `Timer`."
      },
      {
        "lineNumber": 386,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": ""
      },
      {
        "lineNumber": 387,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": "A `GameTimer` instance is created by the `AppManager` for every `Card` of a `Game`."
      },
      {
        "lineNumber": 388,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": "The `AppManager` provides information regarding the duration in which the `Timer` should run for, and whether"
      },
      {
        "lineNumber": 389,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": "to trigger `Hints` at the point when a `GameTimer` instance is created."
      },
      {
        "lineNumber": 390,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 391,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d\u003d Design Considerations"
      },
      {
        "lineNumber": 392,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 393,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": "There were a few considerations for designing the `Timer` this way."
      },
      {
        "lineNumber": 394,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 395,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": "|\u003d\u003d\u003d"
      },
      {
        "lineNumber": 396,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": "||**Alternative 1**|**Alternative 2**"
      },
      {
        "lineNumber": 397,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": "|**Aspect 1**: +"
      },
      {
        "lineNumber": 398,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": "Where and How to effect changes to the `Ui` and other components when the `Timer` triggers an event."
      },
      {
        "lineNumber": 399,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": "| **Holding a reference to `Ui` and other components directly inside `GameTimer` itself**: +"
      },
      {
        "lineNumber": 400,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 401,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": "_Pros:_ +"
      },
      {
        "lineNumber": 402,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": "Straightforward and direct, can perform many different tasks on the dependent components.  +"
      },
      {
        "lineNumber": 403,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 404,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": "_Cons:_ +"
      },
      {
        "lineNumber": 405,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": "Poor abstraction and high potential for cyclic dependencies, resulting in high coupling."
      },
      {
        "lineNumber": 406,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": ""
      },
      {
        "lineNumber": 407,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": "|**Using _Functional Interfaces_ as Call-backs to notify components indirectly.** +"
      },
      {
        "lineNumber": 408,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": ""
      },
      {
        "lineNumber": 409,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": "_Pros:_ +"
      },
      {
        "lineNumber": 410,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": "Maintains abstraction and minimal coupling between `Timer` and other components  +"
      },
      {
        "lineNumber": 411,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": ""
      },
      {
        "lineNumber": 412,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": "_Cons:_ +"
      },
      {
        "lineNumber": 413,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": "Relies on developer to register correct call-back methods with the `Timer`. Different actions need to be"
      },
      {
        "lineNumber": 414,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": "implemented as different call-backs separately. Possible overhead in performing few levels of call-backs."
      },
      {
        "lineNumber": 415,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": ""
      },
      {
        "lineNumber": 416,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": "3+|**Why did we choose Alternative 2:** +"
      },
      {
        "lineNumber": 417,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": "To ensure better extendability of our code for future expansion, we felt it was important to maintain as much"
      },
      {
        "lineNumber": 418,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": "abstraction between components. This is also to make life easier when there comes a need to"
      },
      {
        "lineNumber": 419,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": "debug and resolve problems in the code."
      },
      {
        "lineNumber": 420,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": " +"
      },
      {
        "lineNumber": 421,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": "|\u003d\u003d\u003d"
      },
      {
        "lineNumber": 422,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": ""
      },
      {
        "lineNumber": 423,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": ""
      },
      {
        "lineNumber": 424,
        "author": {
          "gitId": "dragontho"
        },
        "content": "// end::settings[]"
      },
      {
        "lineNumber": 425,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 426,
        "author": {
          "gitId": "-"
        },
        "content": "// tag::dataencryption[]"
      },
      {
        "lineNumber": 427,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d [Proposed] Data Encryption"
      },
      {
        "lineNumber": 428,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 429,
        "author": {
          "gitId": "-"
        },
        "content": "_{Explain here how the data encryption feature will be implemented}_"
      },
      {
        "lineNumber": 430,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 431,
        "author": {
          "gitId": "-"
        },
        "content": "// end::dataencryption[]"
      },
      {
        "lineNumber": 432,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 433,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Logging"
      },
      {
        "lineNumber": 434,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 435,
        "author": {
          "gitId": "-"
        },
        "content": "We are using `java.util.logging` package for logging. The `LogsCenter` class is used to manage the logging levels and logging destinations."
      },
      {
        "lineNumber": 436,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 437,
        "author": {
          "gitId": "-"
        },
        "content": "* The logging level can be controlled using the `logLevel` setting in the configuration file (See \u003c\u003cImplementation-Configuration\u003e\u003e)"
      },
      {
        "lineNumber": 438,
        "author": {
          "gitId": "-"
        },
        "content": "* The `Logger` for a class can be obtained using `LogsCenter.getLogger(Class)` which will log messages according to the specified logging level"
      },
      {
        "lineNumber": 439,
        "author": {
          "gitId": "-"
        },
        "content": "* Currently log messages are output through: `Console` and to a `.log` file."
      },
      {
        "lineNumber": 440,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 441,
        "author": {
          "gitId": "-"
        },
        "content": "*Logging Levels*"
      },
      {
        "lineNumber": 442,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 443,
        "author": {
          "gitId": "-"
        },
        "content": "* `SEVERE` : Critical problem detected which may possibly cause the termination of the application"
      },
      {
        "lineNumber": 444,
        "author": {
          "gitId": "-"
        },
        "content": "* `WARNING` : Can continue, but with caution"
      },
      {
        "lineNumber": 445,
        "author": {
          "gitId": "-"
        },
        "content": "* `INFO` : Information showing the noteworthy actions by the App"
      },
      {
        "lineNumber": 446,
        "author": {
          "gitId": "-"
        },
        "content": "* `FINE` : Details that is not usually noteworthy but may be useful in debugging e.g. print the actual list instead of just its size"
      },
      {
        "lineNumber": 447,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 448,
        "author": {
          "gitId": "-"
        },
        "content": "[[Implementation-Configuration]]"
      },
      {
        "lineNumber": 449,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Configuration"
      },
      {
        "lineNumber": 450,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 451,
        "author": {
          "gitId": "-"
        },
        "content": "Certain properties of the application can be controlled (e.g user prefs file location, logging level) through the configuration file (default: `config.json`)."
      },
      {
        "lineNumber": 452,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 453,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Documentation"
      },
      {
        "lineNumber": 454,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 455,
        "author": {
          "gitId": "-"
        },
        "content": "Refer to the guide \u003c\u003cDocumentation#, here\u003e\u003e."
      },
      {
        "lineNumber": 456,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 457,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Testing"
      },
      {
        "lineNumber": 458,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 459,
        "author": {
          "gitId": "-"
        },
        "content": "Refer to the guide \u003c\u003cTesting#, here\u003e\u003e."
      },
      {
        "lineNumber": 460,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 461,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Dev Ops"
      },
      {
        "lineNumber": 462,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 463,
        "author": {
          "gitId": "-"
        },
        "content": "Refer to the guide \u003c\u003cDevOps#, here\u003e\u003e."
      },
      {
        "lineNumber": 464,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 465,
        "author": {
          "gitId": "-"
        },
        "content": "[appendix]"
      },
      {
        "lineNumber": 466,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Product Scope"
      },
      {
        "lineNumber": 467,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 468,
        "author": {
          "gitId": "-"
        },
        "content": "*Target user profile*:"
      },
      {
        "lineNumber": 469,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 470,
        "author": {
          "gitId": "chrischenhui"
        },
        "content": "* students"
      },
      {
        "lineNumber": 471,
        "author": {
          "gitId": "chrischenhui"
        },
        "content": "* wants to learn new English words or definitions"
      },
      {
        "lineNumber": 472,
        "author": {
          "gitId": "-"
        },
        "content": "* can type fast"
      },
      {
        "lineNumber": 473,
        "author": {
          "gitId": "chrischenhui"
        },
        "content": "* enjoys games"
      },
      {
        "lineNumber": 474,
        "author": {
          "gitId": "-"
        },
        "content": "* is reasonably comfortable using CLI apps"
      },
      {
        "lineNumber": 475,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 476,
        "author": {
          "gitId": "chrischenhui"
        },
        "content": "*Value proposition*: gamify learning experiences"
      },
      {
        "lineNumber": 477,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 478,
        "author": {
          "gitId": "-"
        },
        "content": "[appendix]"
      },
      {
        "lineNumber": 479,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d User Stories"
      },
      {
        "lineNumber": 480,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 481,
        "author": {
          "gitId": "-"
        },
        "content": "Priorities: High (must have) - `* * \\*`, Medium (nice to have) - `* \\*`, Low (unlikely to have) - `*`"
      },
      {
        "lineNumber": 482,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 483,
        "author": {
          "gitId": "-"
        },
        "content": "[width\u003d\"59%\",cols\u003d\"22%,\u003c23%,\u003c25%,\u003c30%\",options\u003d\"header\",]"
      },
      {
        "lineNumber": 484,
        "author": {
          "gitId": "-"
        },
        "content": "|\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 485,
        "author": {
          "gitId": "-"
        },
        "content": "|Priority |As a ... |I want to ... |So that I can..."
      },
      {
        "lineNumber": 486,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 487,
        "author": {
          "gitId": "chrischenhui"
        },
        "content": "|`* * *` |teacher |add, edit, and delete questions in the word banks |make corrections on what my students are supposed to learn"
      },
      {
        "lineNumber": 488,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 489,
        "author": {
          "gitId": "chrischenhui"
        },
        "content": "|`* * *` |teacher |give customised word banks and definitions |can let my students practice specific problems."
      },
      {
        "lineNumber": 490,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 491,
        "author": {
          "gitId": "chrischenhui"
        },
        "content": "|`* * *` |user |list all my word banks |"
      },
      {
        "lineNumber": 492,
        "author": {
          "gitId": "chrischenhui"
        },
        "content": ""
      },
      {
        "lineNumber": 493,
        "author": {
          "gitId": "chrischenhui"
        },
        "content": "|`* * *` |user |give titles to word banks |recognise them better"
      },
      {
        "lineNumber": 494,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 495,
        "author": {
          "gitId": "chrischenhui"
        },
        "content": "|`* * *` |user |delete word banks |free up some memory when I don’t need it anymore"
      },
      {
        "lineNumber": 496,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 497,
        "author": {
          "gitId": "chrischenhui"
        },
        "content": "|`* * *` |user |see the content of the word bank |study beforehand/make changes"
      },
      {
        "lineNumber": 498,
        "author": {
          "gitId": "chrischenhui"
        },
        "content": ""
      },
      {
        "lineNumber": 499,
        "author": {
          "gitId": "chrischenhui"
        },
        "content": "|`* * *` |young student |trivia questions to be gamified |enjoy the process"
      },
      {
        "lineNumber": 500,
        "author": {
          "gitId": "chrischenhui"
        },
        "content": ""
      },
      {
        "lineNumber": 501,
        "author": {
          "gitId": "chrischenhui"
        },
        "content": "|`* * *` |student |create my own question banks |tailor fit to my learning"
      },
      {
        "lineNumber": 502,
        "author": {
          "gitId": "chrischenhui"
        },
        "content": ""
      },
      {
        "lineNumber": 503,
        "author": {
          "gitId": "chrischenhui"
        },
        "content": "|`* * *` |computer science student |have a manual of the commands available |refer to them when I am lost"
      },
      {
        "lineNumber": 504,
        "author": {
          "gitId": "chrischenhui"
        },
        "content": ""
      },
      {
        "lineNumber": 505,
        "author": {
          "gitId": "chrischenhui"
        },
        "content": "|`* *` |frequent user |easily access my most recently attempted question sets |can quickly resume my revision"
      },
      {
        "lineNumber": 506,
        "author": {
          "gitId": "chrischenhui"
        },
        "content": ""
      },
      {
        "lineNumber": 507,
        "author": {
          "gitId": "chrischenhui"
        },
        "content": "|`* *` |studious student |set and complete goals |have something to work towards"
      },
      {
        "lineNumber": 508,
        "author": {
          "gitId": "chrischenhui"
        },
        "content": ""
      },
      {
        "lineNumber": 509,
        "author": {
          "gitId": "chrischenhui"
        },
        "content": "|`* *` |student |see my test statistics |track my progress/improvement"
      },
      {
        "lineNumber": 510,
        "author": {
          "gitId": "chrischenhui"
        },
        "content": ""
      },
      {
        "lineNumber": 511,
        "author": {
          "gitId": "chrischenhui"
        },
        "content": "|`* *` |student |choose different kinds of time constraints |can simulate exam conditions"
      },
      {
        "lineNumber": 512,
        "author": {
          "gitId": "chrischenhui"
        },
        "content": ""
      },
      {
        "lineNumber": 513,
        "author": {
          "gitId": "chrischenhui"
        },
        "content": "|`* *` |student |categorise my question sets |easily look for relevant materials"
      },
      {
        "lineNumber": 514,
        "author": {
          "gitId": "chrischenhui"
        },
        "content": ""
      },
      {
        "lineNumber": 515,
        "author": {
          "gitId": "chrischenhui"
        },
        "content": "|`* *` |student |mark question sets as important/urgent |know how to prioritise my revision"
      },
      {
        "lineNumber": 516,
        "author": {
          "gitId": "chrischenhui"
        },
        "content": ""
      },
      {
        "lineNumber": 517,
        "author": {
          "gitId": "chrischenhui"
        },
        "content": "|`* *` |module coordinator |export lessons |send to their students"
      },
      {
        "lineNumber": 518,
        "author": {
          "gitId": "chrischenhui"
        },
        "content": ""
      },
      {
        "lineNumber": 519,
        "author": {
          "gitId": "chrischenhui"
        },
        "content": "|`* *` |student |share and compare my results with my classmates |know where I stand"
      },
      {
        "lineNumber": 520,
        "author": {
          "gitId": "chrischenhui"
        },
        "content": ""
      },
      {
        "lineNumber": 521,
        "author": {
          "gitId": "chrischenhui"
        },
        "content": "|`* *` |student |partition the trivia |attempt questions that I\u0027m comfortable with"
      },
      {
        "lineNumber": 522,
        "author": {
          "gitId": "chrischenhui"
        },
        "content": ""
      },
      {
        "lineNumber": 523,
        "author": {
          "gitId": "chrischenhui"
        },
        "content": "|`* *` |weak student |have the option to see hints |won’t get stuck all the time"
      },
      {
        "lineNumber": 524,
        "author": {
          "gitId": "chrischenhui"
        },
        "content": ""
      },
      {
        "lineNumber": 525,
        "author": {
          "gitId": "chrischenhui"
        },
        "content": "|`* *` |computer science student |practise typing bash commands into the CLI |strengthen my bash skills"
      },
      {
        "lineNumber": 526,
        "author": {
          "gitId": "chrischenhui"
        },
        "content": ""
      },
      {
        "lineNumber": 527,
        "author": {
          "gitId": "chrischenhui"
        },
        "content": "|`* *` |teacher |export statistics |can compare performance across different students"
      },
      {
        "lineNumber": 528,
        "author": {
          "gitId": "chrischenhui"
        },
        "content": ""
      },
      {
        "lineNumber": 529,
        "author": {
          "gitId": "chrischenhui"
        },
        "content": "|`*` |computer science student |customize my “terminal” |changing themes/ background/ font size/ font colour, so that I feel comfortable working on it"
      },
      {
        "lineNumber": 530,
        "author": {
          "gitId": "chrischenhui"
        },
        "content": ""
      },
      {
        "lineNumber": 531,
        "author": {
          "gitId": "chrischenhui"
        },
        "content": "|`*` |teacher |protect tests with passwords |let my students do them in lessons together when password is released"
      },
      {
        "lineNumber": 532,
        "author": {
          "gitId": "chrischenhui"
        },
        "content": ""
      },
      {
        "lineNumber": 533,
        "author": {
          "gitId": "chrischenhui"
        },
        "content": "|`*` |teacher |protect the files |doesn\u0027t get tampered when distributing to students"
      },
      {
        "lineNumber": 534,
        "author": {
          "gitId": "chrischenhui"
        },
        "content": ""
      },
      {
        "lineNumber": 535,
        "author": {
          "gitId": "chrischenhui"
        },
        "content": "|`*` |student |have smaller sized files |have more space on my computer"
      },
      {
        "lineNumber": 536,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 537,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 538,
        "author": {
          "gitId": "-"
        },
        "content": "|\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 539,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 540,
        "author": {
          "gitId": "-"
        },
        "content": "_{More to be added}_"
      },
      {
        "lineNumber": 541,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 542,
        "author": {
          "gitId": "-"
        },
        "content": "[appendix]"
      },
      {
        "lineNumber": 543,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Use Cases"
      },
      {
        "lineNumber": 544,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 545,
        "author": {
          "gitId": "chrischenhui"
        },
        "content": "(For all use cases below, the *System* is the `Dukemon` and the *Actor* is the `user`, unless specified otherwise)"
      },
      {
        "lineNumber": 546,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 547,
        "author": {
          "gitId": "-"
        },
        "content": "[discrete]"
      },
      {
        "lineNumber": 548,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Use case: Delete person"
      },
      {
        "lineNumber": 549,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 550,
        "author": {
          "gitId": "-"
        },
        "content": "*MSS*"
      },
      {
        "lineNumber": 551,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 552,
        "author": {
          "gitId": "-"
        },
        "content": "1.  User requests to list persons"
      },
      {
        "lineNumber": 553,
        "author": {
          "gitId": "chrischenhui"
        },
        "content": "2.  Dukemon shows a list of persons"
      },
      {
        "lineNumber": 554,
        "author": {
          "gitId": "-"
        },
        "content": "3.  User requests to delete a specific person in the list"
      },
      {
        "lineNumber": 555,
        "author": {
          "gitId": "chrischenhui"
        },
        "content": "4.  Dukemon deletes the person"
      },
      {
        "lineNumber": 556,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 557,
        "author": {
          "gitId": "-"
        },
        "content": "Use case ends."
      },
      {
        "lineNumber": 558,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 559,
        "author": {
          "gitId": "-"
        },
        "content": "*Extensions*"
      },
      {
        "lineNumber": 560,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 561,
        "author": {
          "gitId": "-"
        },
        "content": "[none]"
      },
      {
        "lineNumber": 562,
        "author": {
          "gitId": "-"
        },
        "content": "* 2a. The list is empty."
      },
      {
        "lineNumber": 563,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 564,
        "author": {
          "gitId": "-"
        },
        "content": "Use case ends."
      },
      {
        "lineNumber": 565,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 566,
        "author": {
          "gitId": "-"
        },
        "content": "* 3a. The given index is invalid."
      },
      {
        "lineNumber": 567,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 568,
        "author": {
          "gitId": "-"
        },
        "content": "[none]"
      },
      {
        "lineNumber": 569,
        "author": {
          "gitId": "chrischenhui"
        },
        "content": "** 3a1. Dukemon shows an error message."
      },
      {
        "lineNumber": 570,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 571,
        "author": {
          "gitId": "-"
        },
        "content": "Use case resumes at step 2."
      },
      {
        "lineNumber": 572,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 573,
        "author": {
          "gitId": "-"
        },
        "content": "_{More to be added}_"
      },
      {
        "lineNumber": 574,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 575,
        "author": {
          "gitId": "-"
        },
        "content": "[appendix]"
      },
      {
        "lineNumber": 576,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Non Functional Requirements"
      },
      {
        "lineNumber": 577,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 578,
        "author": {
          "gitId": "-"
        },
        "content": ".  Should work on any \u003c\u003cmainstream-os,mainstream OS\u003e\u003e as long as it has Java `11` or above installed."
      },
      {
        "lineNumber": 579,
        "author": {
          "gitId": "-"
        },
        "content": ".  A user with above average typing speed for regular English text (i.e. not code, not system admin commands) should be able to accomplish most of the tasks faster using commands than using the mouse."
      },
      {
        "lineNumber": 580,
        "author": {
          "gitId": "chrischenhui"
        },
        "content": ".  Users can export and import their \u003c\u003cword-bank,word banks\u003e\u003e or statistics."
      },
      {
        "lineNumber": 581,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 582,
        "author": {
          "gitId": "-"
        },
        "content": "_{More to be added}_"
      },
      {
        "lineNumber": 583,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 584,
        "author": {
          "gitId": "-"
        },
        "content": "[appendix]"
      },
      {
        "lineNumber": 585,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Glossary"
      },
      {
        "lineNumber": 586,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 587,
        "author": {
          "gitId": "-"
        },
        "content": "[[mainstream-os]] Mainstream OS::"
      },
      {
        "lineNumber": 588,
        "author": {
          "gitId": "-"
        },
        "content": "Windows, Linux, Unix, OS-X"
      },
      {
        "lineNumber": 589,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 590,
        "author": {
          "gitId": "-"
        },
        "content": "[[private-contact-detail]] Private contact detail::"
      },
      {
        "lineNumber": 591,
        "author": {
          "gitId": "-"
        },
        "content": "A contact detail that is not meant to be shared with others"
      },
      {
        "lineNumber": 592,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 593,
        "author": {
          "gitId": "chrischenhui"
        },
        "content": "[[word-bank]] Word Bank::"
      },
      {
        "lineNumber": 594,
        "author": {
          "gitId": "chrischenhui"
        },
        "content": "A list of word-description pair that either the user can create himself or import from."
      },
      {
        "lineNumber": 595,
        "author": {
          "gitId": "chrischenhui"
        },
        "content": ""
      },
      {
        "lineNumber": 596,
        "author": {
          "gitId": "-"
        },
        "content": "[appendix]"
      },
      {
        "lineNumber": 597,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Product Survey"
      },
      {
        "lineNumber": 598,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 599,
        "author": {
          "gitId": "-"
        },
        "content": "*Product Name*"
      },
      {
        "lineNumber": 600,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 601,
        "author": {
          "gitId": "-"
        },
        "content": "Author: ..."
      },
      {
        "lineNumber": 602,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 603,
        "author": {
          "gitId": "-"
        },
        "content": "Pros:"
      },
      {
        "lineNumber": 604,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 605,
        "author": {
          "gitId": "-"
        },
        "content": "* ..."
      },
      {
        "lineNumber": 606,
        "author": {
          "gitId": "-"
        },
        "content": "* ..."
      },
      {
        "lineNumber": 607,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 608,
        "author": {
          "gitId": "-"
        },
        "content": "Cons:"
      },
      {
        "lineNumber": 609,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 610,
        "author": {
          "gitId": "-"
        },
        "content": "* ..."
      },
      {
        "lineNumber": 611,
        "author": {
          "gitId": "-"
        },
        "content": "* ..."
      },
      {
        "lineNumber": 612,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 613,
        "author": {
          "gitId": "-"
        },
        "content": "[appendix]"
      },
      {
        "lineNumber": 614,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Instructions for Manual Testing"
      },
      {
        "lineNumber": 615,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 616,
        "author": {
          "gitId": "-"
        },
        "content": "Given below are instructions to test the app manually."
      },
      {
        "lineNumber": 617,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 618,
        "author": {
          "gitId": "-"
        },
        "content": "[NOTE]"
      },
      {
        "lineNumber": 619,
        "author": {
          "gitId": "-"
        },
        "content": "These instructions only provide a starting point for testers to work on; testers are expected to do more _exploratory_ testing."
      },
      {
        "lineNumber": 620,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 621,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Launch and Shutdown"
      },
      {
        "lineNumber": 622,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 623,
        "author": {
          "gitId": "-"
        },
        "content": ". Initial launch"
      },
      {
        "lineNumber": 624,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 625,
        "author": {
          "gitId": "-"
        },
        "content": ".. Download the jar file and copy into an empty folder"
      },
      {
        "lineNumber": 626,
        "author": {
          "gitId": "-"
        },
        "content": ".. Double-click the jar file +"
      },
      {
        "lineNumber": 627,
        "author": {
          "gitId": "-"
        },
        "content": "   Expected: Shows the GUI with a set of sample contacts. The window size may not be optimum."
      },
      {
        "lineNumber": 628,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 629,
        "author": {
          "gitId": "-"
        },
        "content": ". Saving window preferences"
      },
      {
        "lineNumber": 630,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 631,
        "author": {
          "gitId": "-"
        },
        "content": ".. Resize the window to an optimum size. Move the window to a different location. Close the window."
      },
      {
        "lineNumber": 632,
        "author": {
          "gitId": "-"
        },
        "content": ".. Re-launch the app by double-clicking the jar file. +"
      },
      {
        "lineNumber": 633,
        "author": {
          "gitId": "-"
        },
        "content": "   Expected: The most recent window size and location is retained."
      },
      {
        "lineNumber": 634,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 635,
        "author": {
          "gitId": "-"
        },
        "content": "_{ more test cases ... }_"
      },
      {
        "lineNumber": 636,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 637,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Deleting a person"
      },
      {
        "lineNumber": 638,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 639,
        "author": {
          "gitId": "-"
        },
        "content": ". Deleting a person while all persons are listed"
      },
      {
        "lineNumber": 640,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 641,
        "author": {
          "gitId": "-"
        },
        "content": ".. Prerequisites: List all persons using the `list` command. Multiple persons in the list."
      },
      {
        "lineNumber": 642,
        "author": {
          "gitId": "-"
        },
        "content": ".. Test case: `delete 1` +"
      },
      {
        "lineNumber": 643,
        "author": {
          "gitId": "-"
        },
        "content": "   Expected: First contact is deleted from the list. Details of the deleted contact shown in the status message. Timestamp in the status bar is updated."
      },
      {
        "lineNumber": 644,
        "author": {
          "gitId": "-"
        },
        "content": ".. Test case: `delete 0` +"
      },
      {
        "lineNumber": 645,
        "author": {
          "gitId": "-"
        },
        "content": "   Expected: No person is deleted. Error details shown in the status message. Status bar remains the same."
      },
      {
        "lineNumber": 646,
        "author": {
          "gitId": "-"
        },
        "content": ".. Other incorrect delete commands to try: `delete`, `delete x` (where x is larger than the list size) _{give more}_ +"
      },
      {
        "lineNumber": 647,
        "author": {
          "gitId": "-"
        },
        "content": "   Expected: Similar to previous."
      },
      {
        "lineNumber": 648,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 649,
        "author": {
          "gitId": "-"
        },
        "content": "_{ more test cases ... }_"
      },
      {
        "lineNumber": 650,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 651,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Saving data"
      },
      {
        "lineNumber": 652,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 653,
        "author": {
          "gitId": "-"
        },
        "content": ". Dealing with missing/corrupted data files"
      },
      {
        "lineNumber": 654,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 655,
        "author": {
          "gitId": "-"
        },
        "content": ".. _{explain how to simulate a missing/corrupted file and the expected behavior}_"
      },
      {
        "lineNumber": 656,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 657,
        "author": {
          "gitId": "-"
        },
        "content": "_{ more test cases ... }_"
      }
    ],
    "authorContributionMap": {
      "sreesubbash": 29,
      "dragontho": 67,
      "jascxx": 3,
      "chrischenhui": 64,
      "kohyida1997": 136,
      "-": 358
    }
  },
  {
    "path": "docs/UserGuide.adoc",
    "fileType": "docs",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "dragontho"
        },
        "content": "\u003d Dukemon - User Guide"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ":site-section: UserGuide"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": ":toc:"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ":toc-title:"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ":toc-placement: preamble"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ":sectnums:"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ":imagesDir: images"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ":stylesDir: stylesheets"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ":xrefstyle: full"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ":experimental:"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "ifdef::env-github[]"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ":tip-caption: :bulb:"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ":note-caption: :information_source:"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "endif::[]"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "chrischenhui"
        },
        "content": ":repoURL: https://github.com/AY1920S1-CS2103T-T11-2/main"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "chrischenhui"
        },
        "content": ":releaseURL: https://github.com/AY1920S1-CS2103T-T11-2/main/releases"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "dragontho"
        },
        "content": "By: `SErebros`      Since: `September 2019`      Licence: `MIT`"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Introduction"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "chrischenhui"
        },
        "content": "We aim to streamline and gamify the process of learning words or definitions through the use of self-created flash cards."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "dragontho"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "dragontho"
        },
        "content": "The general flow of the program is as follows:"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "dragontho"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "chrischenhui"
        },
        "content": "1. Create your word bank."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "chrischenhui"
        },
        "content": "2. Add flash cards, each containing a word and a meaning, into your word bank."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "chrischenhui"
        },
        "content": "3. Configure settings, or modify word bank as you wish."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "chrischenhui"
        },
        "content": "4. Start the game."
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "chrischenhui"
        },
        "content": "5. The meaning of the card will appear and you will have to key in the answer in a given time."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "chrischenhui"
        },
        "content": "6. At the end of the game, statistics of your game session appears, so you can know how well you did."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "chrischenhui"
        },
        "content": "7. Revisit the word bank to beat your previous high score."
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "dragontho"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "chrischenhui"
        },
        "content": "You write your own words and meaning into a word bank. You can also import a word bank given to him from a file. +"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "chrischenhui"
        },
        "content": "During the game, you are prompted with a meaning and you have to answer with a word. Depending on the game mode, there may also be time restrictions and hints given. Answer correctly as quickly as possible and to score as much as you can! +"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "chrischenhui"
        },
        "content": "You can view your statistics afterwards to review your performance! Revisit word banks which you scored badly."
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Quick Start"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ".  Ensure you have Java `11` or above installed in your Computer."
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "chrischenhui"
        },
        "content": ".  Download the latest `Dukemon.jar` link:{repoURL}/releases[here]."
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "chrischenhui"
        },
        "content": ".  Copy the file to the folder you want to use as the home folder for your Dukemon."
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "chrischenhui"
        },
        "content": ".  Double-click the file to start the app. Enjoy learning!"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "chrischenhui"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "image::Ui.png[width\u003d\"790\"]"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ".  Type the command in the command box and press kbd:[Enter] to execute it. +"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "e.g. typing *`help`* and pressing kbd:[Enter] will open the help window."
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "chrischenhui"
        },
        "content": ".  Some example commands you can try to get familiar with the app :"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "chrischenhui"
        },
        "content": "* *`create WORD_BANK`* : Create an empty word bank."
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "chrischenhui"
        },
        "content": "* *`bank WORD_BANK`* : Select this particular bank."
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "chrischenhui"
        },
        "content": "* *`add w/WORD m/MEANING`* : Add a flash card into the word bank."
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "chrischenhui"
        },
        "content": "* *`list`* : List all cards in the word bank."
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "chrischenhui"
        },
        "content": "* **`start [DIFFICULTY]`** : Starts the game with a selected difficulty. Default difficulty will be selected if none is keyed in."
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "chrischenhui"
        },
        "content": "* **`guess ANSWER`** : Input your answer according to the meaning given."
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "chrischenhui"
        },
        "content": "* **`stop`** : Stops the game."
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "chrischenhui"
        },
        "content": "* *`exit`* : Exits the app."
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": ".  Refer to \u003c\u003cFeatures\u003e\u003e for details of each command."
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "[[Features]]"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Features"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "*Command Format*"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "chrischenhui"
        },
        "content": "* Words in `UPPER_CASE` are the parameters to be supplied by the user e.g. in `add w/WORD`, `WORD` is a parameter which can be used as +"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "chrischenhui"
        },
        "content": "`add w/Charmander m/Fire starter pokemon`."
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "chrischenhui"
        },
        "content": "* Items in square brackets are optional e.g `w/WORD [t/TAG]` can be used as +"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "chrischenhui"
        },
        "content": "`add w/Squirtle m/Water starter pokemon t/Water type` or as"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "chrischenhui"
        },
        "content": " +"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "chrischenhui"
        },
        "content": "`add w/Squirtle m/Water starter pokemon`."
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "chrischenhui"
        },
        "content": "* Items with `…`​ after them can be used multiple times including zero times e.g. `[t/TAG]...` can be used as `{nbsp}` (i.e. 0 times), `t/CS2040`, `t/CS2040 t/GRAPH` etc."
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "chrischenhui"
        },
        "content": "* Parameters can be in any order e.g. if the command specifies `w/WORD m/MEANING`, `m/MEANING w/WORD` is also acceptable."
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "chrischenhui"
        },
        "content": "\u003d\u003d\u003d Load commands"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "chrischenhui"
        },
        "content": "\u003d\u003d\u003d\u003d To enter loading page : `load`"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "chrischenhui"
        },
        "content": "Changes the app mode to load, so that the user can perform load commands."
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "chrischenhui"
        },
        "content": "\u003d\u003d\u003d\u003d Create new word bank : `create`"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "chrischenhui"
        },
        "content": "Creates a new word bank with specified name. +"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "chrischenhui"
        },
        "content": "Format: `create WORD_BANK` +"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "chrischenhui"
        },
        "content": "Examples:"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "chrischenhui"
        },
        "content": "* `create CS2040`"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "chrischenhui"
        },
        "content": "* `create Biology`"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "chrischenhui"
        },
        "content": "\u003d\u003d\u003d\u003d Remove a word bank : `remove`"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "chrischenhui"
        },
        "content": "Removes a new word bank with specified name. +"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "chrischenhui"
        },
        "content": "Format: `remove WORD_BANK` +"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "Examples:"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "chrischenhui"
        },
        "content": "* `Remove Gen 3 pokemon`"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "chrischenhui"
        },
        "content": "* `Remove Vocabulary`"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "chrischenhui"
        },
        "content": "\u003d\u003d\u003d\u003d Import a word bank : `import`"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "chrischenhui"
        },
        "content": "Import the word bank from a specified file path on your system. +"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "chrischenhui"
        },
        "content": "Note that you can use \u0027\\\u0027 and \u0027\\\\\u0027 for windows."
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "chrischenhui"
        },
        "content": "Format: `import w/WORD_BANK f/FILE_PATH` +"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "chrischenhui"
        },
        "content": "Examples:"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "chrischenhui"
        },
        "content": "* `import w/cs2040_graph f/~/downloads`"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "chrischenhui"
        },
        "content": "* `import w/fire pokemons f//Users/chrischenhui/data`"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "chrischenhui"
        },
        "content": "\u003d\u003d\u003d\u003d Export a word bank : `export`"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "chrischenhui"
        },
        "content": "Export the word bank to a specified file path on your system. +"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "chrischenhui"
        },
        "content": "Format: `export w/WORD_BANK f/FILE_PATH` +"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "chrischenhui"
        },
        "content": "Examples:"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "chrischenhui"
        },
        "content": "* `export w/ma1101r theorems f/~`"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "chrischenhui"
        },
        "content": "* `export w/biology definitions f/~/downloads`"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "chrischenhui"
        },
        "content": "\u003d\u003d\u003d\u003d Bank a word bank : `bank`"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "chrischenhui"
        },
        "content": "Choose the word bank you want to work with."
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "dragontho"
        },
        "content": ""
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "chrischenhui"
        },
        "content": "Format: `bank WORD_BANK`"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "chrischenhui"
        },
        "content": "Examples:"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "dragontho"
        },
        "content": ""
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "chrischenhui"
        },
        "content": "* `bank CS2040`"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "chrischenhui"
        },
        "content": "* `bank Biology`"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "dragontho"
        },
        "content": ""
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "chrischenhui"
        },
        "content": "\u003d\u003d\u003d Flash card commands"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "dragontho"
        },
        "content": ""
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "chrischenhui"
        },
        "content": "\u003d\u003d\u003d\u003d Help : `help`"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "chrischenhui"
        },
        "content": "Shows help"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "dragontho"
        },
        "content": ""
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "chrischenhui"
        },
        "content": "Format: `help`"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "dragontho"
        },
        "content": ""
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "chrischenhui"
        },
        "content": "\u003d\u003d\u003d\u003d Adding a flash card : `add`"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "chrischenhui"
        },
        "content": "Adds a new word-description pair to the word bank."
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "dragontho"
        },
        "content": ""
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "chrischenhui"
        },
        "content": "Format: `add w/WORD m/MEANING`"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "dragontho"
        },
        "content": ""
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "chrischenhui"
        },
        "content": "NOTE: There can be duplicate words, but duplicate meanings will be rejected."
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": "Examples:"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "jascxx"
        },
        "content": "* `add w/Dukemon m/the Flashcard app of the future`"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "chrischenhui"
        },
        "content": "* `add w/Newton\u0027s third law of motion m/Every action will produce and equal and opposite reaction`"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "chrischenhui"
        },
        "content": "* `add w/Kopi Luwak m/Coffee produced from the coffee beans found in the faeces of a civet cat`"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "chrischenhui"
        },
        "content": "\u003d\u003d\u003d\u003d Deleting a flash card : `delete`"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "chrischenhui"
        },
        "content": "Deletes the specified word from the data set. +"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "chrischenhui"
        },
        "content": ""
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "chrischenhui"
        },
        "content": "Format: `delete w/card`"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": "****"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "chrischenhui"
        },
        "content": "* Deletes the word at the specified `INDEX`."
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "chrischenhui"
        },
        "content": "* The index refers to the index number shown in the displayed person list."
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "chrischenhui"
        },
        "content": "* The index *must be a positive integer* 1, 2, 3, ..."
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "-"
        },
        "content": "****"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "-"
        },
        "content": "Examples:"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "chrischenhui"
        },
        "content": "* `delete 2` +"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "chrischenhui"
        },
        "content": "Deletes the 2nd word in the data set."
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "chrischenhui"
        },
        "content": "* `delete 1` +"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "chrischenhui"
        },
        "content": "Deletes the 1st word in the results of the `/find` command."
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "chrischenhui"
        },
        "content": ""
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "chrischenhui"
        },
        "content": "\u003d\u003d\u003d\u003d Viewing a word bank\u0027s content : `list`"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "chrischenhui"
        },
        "content": "Views the content of a data set. +"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "chrischenhui"
        },
        "content": "Format: `list`"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "chrischenhui"
        },
        "content": ""
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "chrischenhui"
        },
        "content": "\u003d\u003d\u003d\u003d Clear a word bank\u0027s content : `clear`"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "chrischenhui"
        },
        "content": "Views the content of a data set. +"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "chrischenhui"
        },
        "content": "Format: `clear`"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "chrischenhui"
        },
        "content": ""
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "chrischenhui"
        },
        "content": "\u003d\u003d\u003d\u003d Editing a data set\u0027s content : `edit`"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "chrischenhui"
        },
        "content": "Edits a flash card."
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "chrischenhui"
        },
        "content": ""
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "chrischenhui"
        },
        "content": "Format: `edit flashcardname`"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "chrischenhui"
        },
        "content": ""
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "chrischenhui"
        },
        "content": "Examples:"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "chrischenhui"
        },
        "content": ""
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "chrischenhui"
        },
        "content": "* `edit List of animals`"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "chrischenhui"
        },
        "content": "* `edit Teeth`"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "chrischenhui"
        },
        "content": "\u003d\u003d\u003d\u003d\u003d Locating a word/description: `find`"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "dragontho"
        },
        "content": "Finds entry whose word or description contain any of the given keywords. +"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "dragontho"
        },
        "content": "Format: `/find KEYWORD [MORE_KEYWORDS]...`"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "-"
        },
        "content": "****"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "-"
        },
        "content": "* The search is case insensitive. e.g `hans` will match `Hans`"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "-"
        },
        "content": "* The order of the keywords does not matter. e.g. `Hans Bo` will match `Bo Hans`"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "dragontho"
        },
        "content": "* Both word and description will be searched"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "-"
        },
        "content": "* Only full words will be matched e.g. `Han` will not match `Hans`"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "-"
        },
        "content": "* Persons matching at least one keyword will be returned (i.e. `OR` search). e.g. `Hans Bo` will return `Hans Gruber`, `Bo Yang`"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "-"
        },
        "content": "****"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "-"
        },
        "content": "Examples:"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "dragontho"
        },
        "content": "* `find long` +"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "dragontho"
        },
        "content": "Returns entries containing elephant and giraffe."
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "dragontho"
        },
        "content": "* `find mammal fish bird` +"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "dragontho"
        },
        "content": "Returns any entries containing `mammal`, `fish` or `bird` in its descriptions or words."
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "chrischenhui"
        },
        "content": "\u003d\u003d\u003d\u003d Exit the game : `exit`"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "chrischenhui"
        },
        "content": "\u003d\u003d\u003d Game commands"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "chrischenhui"
        },
        "content": "\u003d\u003d\u003d\u003d Start new game session : `start`"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "chrischenhui"
        },
        "content": "Starts a game session with the selected word bank. +"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "chrischenhui"
        },
        "content": "You select your word bank from the load command : `bank WORD_BANK`"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "chrischenhui"
        },
        "content": "Format: `start [difficulty]`"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "dragontho"
        },
        "content": ""
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "chrischenhui"
        },
        "content": "\u003d\u003d\u003d\u003d Guess the answer : `guess`"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "chrischenhui"
        },
        "content": "Input your answer for the prompted word, given a meaning."
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "dragontho"
        },
        "content": ""
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "chrischenhui"
        },
        "content": "Format: `guess WORD`"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "dragontho"
        },
        "content": ""
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "chrischenhui"
        },
        "content": "\u003d\u003d\u003d\u003d Skip a word : `skip`"
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "chrischenhui"
        },
        "content": "Stops current game session (all progress will be lost) and returns to the home page."
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "dragontho"
        },
        "content": ""
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "chrischenhui"
        },
        "content": "Format: `stop`"
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "chrischenhui"
        },
        "content": "\u003d\u003d\u003d\u003d Stop game session : `stop`"
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "chrischenhui"
        },
        "content": "Stops current game session (all progress will be lost) and returns to the home page."
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "dragontho"
        },
        "content": ""
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "chrischenhui"
        },
        "content": "Format: `stop`"
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "dragontho"
        },
        "content": ""
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "chrischenhui"
        },
        "content": "\u003d\u003d\u003d Changing settings : `settings`"
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "dragontho"
        },
        "content": ""
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "dragontho"
        },
        "content": "Goes into the settings menu. +"
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "dragontho"
        },
        "content": "Format: `/settings`"
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "dragontho"
        },
        "content": ""
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "chrischenhui"
        },
        "content": "\u003d\u003d\u003d\u003d Changing the theme : `theme`"
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "dragontho"
        },
        "content": ""
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "dragontho"
        },
        "content": "Changes the theme of the UI. +"
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "dragontho"
        },
        "content": "Format: `/theme dark/light`"
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "-"
        },
        "content": "Examples:"
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "dragontho"
        },
        "content": "* `/theme dark` +"
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "dragontho"
        },
        "content": "Changes the UI theme to dark."
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "dragontho"
        },
        "content": "* `/theme light` +"
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "dragontho"
        },
        "content": "Changes the UI theme to light."
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "chrischenhui"
        },
        "content": "\u003d\u003d\u003d\u003d Turning hints on/off : `hints`"
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "dragontho"
        },
        "content": "Turns hints on or off. +"
      },
      {
        "lineNumber": 248,
        "author": {
          "gitId": "dragontho"
        },
        "content": "Format: `/hints on/off`"
      },
      {
        "lineNumber": 249,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 250,
        "author": {
          "gitId": "dragontho"
        },
        "content": "Examples:"
      },
      {
        "lineNumber": 251,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 252,
        "author": {
          "gitId": "dragontho"
        },
        "content": "* `/hints on` +"
      },
      {
        "lineNumber": 253,
        "author": {
          "gitId": "dragontho"
        },
        "content": "Turns hints on."
      },
      {
        "lineNumber": 254,
        "author": {
          "gitId": "dragontho"
        },
        "content": "* `/hints off` +"
      },
      {
        "lineNumber": 255,
        "author": {
          "gitId": "dragontho"
        },
        "content": "Turns hints off."
      },
      {
        "lineNumber": 256,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 257,
        "author": {
          "gitId": "chrischenhui"
        },
        "content": "\u003d\u003d\u003d\u003d Changing difficulty : `difficulty`"
      },
      {
        "lineNumber": 258,
        "author": {
          "gitId": "dragontho"
        },
        "content": ""
      },
      {
        "lineNumber": 259,
        "author": {
          "gitId": "dragontho"
        },
        "content": "Changes the difficulty of the game. +"
      },
      {
        "lineNumber": 260,
        "author": {
          "gitId": "dragontho"
        },
        "content": "Format: `/difficulty low/medium/high`"
      },
      {
        "lineNumber": 261,
        "author": {
          "gitId": "dragontho"
        },
        "content": ""
      },
      {
        "lineNumber": 262,
        "author": {
          "gitId": "dragontho"
        },
        "content": "Examples:"
      },
      {
        "lineNumber": 263,
        "author": {
          "gitId": "dragontho"
        },
        "content": ""
      },
      {
        "lineNumber": 264,
        "author": {
          "gitId": "dragontho"
        },
        "content": "* `/difficulty low` +"
      },
      {
        "lineNumber": 265,
        "author": {
          "gitId": "dragontho"
        },
        "content": "Changes the difficulty to low. (Timer \u003d 30 seconds)"
      },
      {
        "lineNumber": 266,
        "author": {
          "gitId": "dragontho"
        },
        "content": "* `/difficulty medium` +"
      },
      {
        "lineNumber": 267,
        "author": {
          "gitId": "dragontho"
        },
        "content": "Changes the difficulty to medium. (Timer \u003d 20 seconds)"
      },
      {
        "lineNumber": 268,
        "author": {
          "gitId": "dragontho"
        },
        "content": "* `/difficulty high` +"
      },
      {
        "lineNumber": 269,
        "author": {
          "gitId": "dragontho"
        },
        "content": "Changes the difficulty to high. (Timer \u003d 10 seconds)"
      },
      {
        "lineNumber": 270,
        "author": {
          "gitId": "dragontho"
        },
        "content": ""
      },
      {
        "lineNumber": 271,
        "author": {
          "gitId": "chrischenhui"
        },
        "content": "\u003d\u003d\u003d Navigating back : `back`"
      },
      {
        "lineNumber": 272,
        "author": {
          "gitId": "dragontho"
        },
        "content": ""
      },
      {
        "lineNumber": 273,
        "author": {
          "gitId": "dragontho"
        },
        "content": "At any point in time, if there is a previous screen, navigates back to that screen. add home to navigate back to the home page. +"
      },
      {
        "lineNumber": 274,
        "author": {
          "gitId": "dragontho"
        },
        "content": "Format: `/back [home]`"
      },
      {
        "lineNumber": 275,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 276,
        "author": {
          "gitId": "dragontho"
        },
        "content": "Examples:"
      },
      {
        "lineNumber": 277,
        "author": {
          "gitId": "dragontho"
        },
        "content": ""
      },
      {
        "lineNumber": 278,
        "author": {
          "gitId": "dragontho"
        },
        "content": "* `/back`"
      },
      {
        "lineNumber": 279,
        "author": {
          "gitId": "dragontho"
        },
        "content": "* `/back home`"
      },
      {
        "lineNumber": 280,
        "author": {
          "gitId": "dragontho"
        },
        "content": ""
      },
      {
        "lineNumber": 281,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Saving the data"
      },
      {
        "lineNumber": 282,
        "author": {
          "gitId": "dragontho"
        },
        "content": "Dukemon data are saved in the hard disk automatically after any command that changes the data. +"
      },
      {
        "lineNumber": 283,
        "author": {
          "gitId": "chrischenhui"
        },
        "content": "These commands are generally load commands."
      },
      {
        "lineNumber": 284,
        "author": {
          "gitId": "-"
        },
        "content": "There is no need to save manually."
      },
      {
        "lineNumber": 285,
        "author": {
          "gitId": "chrischenhui"
        },
        "content": "Statistics are also stored automatically."
      },
      {
        "lineNumber": 286,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 287,
        "author": {
          "gitId": "-"
        },
        "content": "// tag::dataencryption[]"
      },
      {
        "lineNumber": 288,
        "author": {
          "gitId": "dragontho"
        },
        "content": "\u003d\u003d\u003d Leaderboard `[coming in v2.0]`"
      },
      {
        "lineNumber": 289,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 290,
        "author": {
          "gitId": "dragontho"
        },
        "content": "View and compare your statistics with peers on the internet."
      },
      {
        "lineNumber": 291,
        "author": {
          "gitId": "dragontho"
        },
        "content": ""
      },
      {
        "lineNumber": 292,
        "author": {
          "gitId": "dragontho"
        },
        "content": "\u003d\u003d\u003d User profiles `[coming in v2.0]`"
      },
      {
        "lineNumber": 293,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 294,
        "author": {
          "gitId": "dragontho"
        },
        "content": "Have more than one account to monitor statistics on the same computer"
      },
      {
        "lineNumber": 295,
        "author": {
          "gitId": "-"
        },
        "content": "// end::dataencryption[]"
      },
      {
        "lineNumber": 296,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 297,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d FAQ"
      },
      {
        "lineNumber": 298,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 299,
        "author": {
          "gitId": "chrischenhui"
        },
        "content": "*Q*: How do I transfer my word bank to my friend? +"
      },
      {
        "lineNumber": 300,
        "author": {
          "gitId": "chrischenhui"
        },
        "content": "*A*: Export your word bank to your computer, then transfer him the file. He can then import the file into his Dukemon."
      },
      {
        "lineNumber": 301,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 302,
        "author": {
          "gitId": "chrischenhui"
        },
        "content": "*Q*: How do I pronounce your app name? +"
      },
      {
        "lineNumber": 303,
        "author": {
          "gitId": "dragontho"
        },
        "content": "*A*: Think Pokemon."
      },
      {
        "lineNumber": 304,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 305,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Command Summary"
      },
      {
        "lineNumber": 306,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 307,
        "author": {
          "gitId": "chrischenhui"
        },
        "content": "|\u003d\u003d\u003d"
      },
      {
        "lineNumber": 308,
        "author": {
          "gitId": "chrischenhui"
        },
        "content": "| Type of command | Command name | Parameters"
      },
      {
        "lineNumber": 309,
        "author": {
          "gitId": "chrischenhui"
        },
        "content": ""
      },
      {
        "lineNumber": 310,
        "author": {
          "gitId": "chrischenhui"
        },
        "content": "1.6+h| Home Command"
      },
      {
        "lineNumber": 311,
        "author": {
          "gitId": "chrischenhui"
        },
        "content": "s| help |"
      },
      {
        "lineNumber": 312,
        "author": {
          "gitId": "chrischenhui"
        },
        "content": ""
      },
      {
        "lineNumber": 313,
        "author": {
          "gitId": "chrischenhui"
        },
        "content": "s| bank m| WORD_BANK"
      },
      {
        "lineNumber": 314,
        "author": {
          "gitId": "chrischenhui"
        },
        "content": ""
      },
      {
        "lineNumber": 315,
        "author": {
          "gitId": "chrischenhui"
        },
        "content": "s| create m| WORD_BANK"
      },
      {
        "lineNumber": 316,
        "author": {
          "gitId": "chrischenhui"
        },
        "content": ""
      },
      {
        "lineNumber": 317,
        "author": {
          "gitId": "chrischenhui"
        },
        "content": "s| remove m| WORD_BANK"
      },
      {
        "lineNumber": 318,
        "author": {
          "gitId": "chrischenhui"
        },
        "content": ""
      },
      {
        "lineNumber": 319,
        "author": {
          "gitId": "chrischenhui"
        },
        "content": "s| import m| w/WORD_BANK f/FILE_PATH"
      },
      {
        "lineNumber": 320,
        "author": {
          "gitId": "chrischenhui"
        },
        "content": ""
      },
      {
        "lineNumber": 321,
        "author": {
          "gitId": "chrischenhui"
        },
        "content": "s| export m| w/WORD_BANK f/FILE_PATH"
      },
      {
        "lineNumber": 322,
        "author": {
          "gitId": "chrischenhui"
        },
        "content": ""
      },
      {
        "lineNumber": 323,
        "author": {
          "gitId": "chrischenhui"
        },
        "content": "3.1+|"
      },
      {
        "lineNumber": 324,
        "author": {
          "gitId": "chrischenhui"
        },
        "content": "3.1+|"
      },
      {
        "lineNumber": 325,
        "author": {
          "gitId": "chrischenhui"
        },
        "content": ""
      },
      {
        "lineNumber": 326,
        "author": {
          "gitId": "chrischenhui"
        },
        "content": "1.7+h| Card Command"
      },
      {
        "lineNumber": 327,
        "author": {
          "gitId": "chrischenhui"
        },
        "content": "s| list m|"
      },
      {
        "lineNumber": 328,
        "author": {
          "gitId": "chrischenhui"
        },
        "content": ""
      },
      {
        "lineNumber": 329,
        "author": {
          "gitId": "chrischenhui"
        },
        "content": "s| add m| w/WORD_BANK m/meaning [t/TAG]"
      },
      {
        "lineNumber": 330,
        "author": {
          "gitId": "chrischenhui"
        },
        "content": ""
      },
      {
        "lineNumber": 331,
        "author": {
          "gitId": "chrischenhui"
        },
        "content": "s| edit m| INT w/WORD_BANK m/meaning [t/TAG]"
      },
      {
        "lineNumber": 332,
        "author": {
          "gitId": "chrischenhui"
        },
        "content": ""
      },
      {
        "lineNumber": 333,
        "author": {
          "gitId": "chrischenhui"
        },
        "content": "s| delete m| INT"
      },
      {
        "lineNumber": 334,
        "author": {
          "gitId": "chrischenhui"
        },
        "content": ""
      },
      {
        "lineNumber": 335,
        "author": {
          "gitId": "chrischenhui"
        },
        "content": "s| find m|"
      },
      {
        "lineNumber": 336,
        "author": {
          "gitId": "chrischenhui"
        },
        "content": ""
      },
      {
        "lineNumber": 337,
        "author": {
          "gitId": "chrischenhui"
        },
        "content": "s| clear m|"
      },
      {
        "lineNumber": 338,
        "author": {
          "gitId": "chrischenhui"
        },
        "content": ""
      },
      {
        "lineNumber": 339,
        "author": {
          "gitId": "chrischenhui"
        },
        "content": "s| exit m|"
      },
      {
        "lineNumber": 340,
        "author": {
          "gitId": "chrischenhui"
        },
        "content": ""
      },
      {
        "lineNumber": 341,
        "author": {
          "gitId": "chrischenhui"
        },
        "content": "3.1+|"
      },
      {
        "lineNumber": 342,
        "author": {
          "gitId": "chrischenhui"
        },
        "content": "3.1+|"
      },
      {
        "lineNumber": 343,
        "author": {
          "gitId": "chrischenhui"
        },
        "content": ""
      },
      {
        "lineNumber": 344,
        "author": {
          "gitId": "chrischenhui"
        },
        "content": "1.3+h| Game Command"
      },
      {
        "lineNumber": 345,
        "author": {
          "gitId": "chrischenhui"
        },
        "content": "s| guess m| ANSWER"
      },
      {
        "lineNumber": 346,
        "author": {
          "gitId": "chrischenhui"
        },
        "content": ""
      },
      {
        "lineNumber": 347,
        "author": {
          "gitId": "chrischenhui"
        },
        "content": "s| skip m|"
      },
      {
        "lineNumber": 348,
        "author": {
          "gitId": "chrischenhui"
        },
        "content": ""
      },
      {
        "lineNumber": 349,
        "author": {
          "gitId": "chrischenhui"
        },
        "content": "s| stop m|"
      },
      {
        "lineNumber": 350,
        "author": {
          "gitId": "chrischenhui"
        },
        "content": ""
      },
      {
        "lineNumber": 351,
        "author": {
          "gitId": "chrischenhui"
        },
        "content": "3.1+|"
      },
      {
        "lineNumber": 352,
        "author": {
          "gitId": "chrischenhui"
        },
        "content": "3.1+|"
      },
      {
        "lineNumber": 353,
        "author": {
          "gitId": "chrischenhui"
        },
        "content": ""
      },
      {
        "lineNumber": 354,
        "author": {
          "gitId": "chrischenhui"
        },
        "content": "1.4+h| Settings Command"
      },
      {
        "lineNumber": 355,
        "author": {
          "gitId": "chrischenhui"
        },
        "content": "s| difficulty m| EASY/NORMAL/HARD"
      },
      {
        "lineNumber": 356,
        "author": {
          "gitId": "chrischenhui"
        },
        "content": ""
      },
      {
        "lineNumber": 357,
        "author": {
          "gitId": "chrischenhui"
        },
        "content": "s| theme m| DARK/LIGHT"
      },
      {
        "lineNumber": 358,
        "author": {
          "gitId": "chrischenhui"
        },
        "content": ""
      },
      {
        "lineNumber": 359,
        "author": {
          "gitId": "chrischenhui"
        },
        "content": "s| hints m| ON/OFF"
      },
      {
        "lineNumber": 360,
        "author": {
          "gitId": "chrischenhui"
        },
        "content": ""
      },
      {
        "lineNumber": 361,
        "author": {
          "gitId": "chrischenhui"
        },
        "content": "s| avartar m| INT"
      },
      {
        "lineNumber": 362,
        "author": {
          "gitId": "chrischenhui"
        },
        "content": ""
      },
      {
        "lineNumber": 363,
        "author": {
          "gitId": "chrischenhui"
        },
        "content": "3.1+|"
      },
      {
        "lineNumber": 364,
        "author": {
          "gitId": "chrischenhui"
        },
        "content": "3.1+|"
      },
      {
        "lineNumber": 365,
        "author": {
          "gitId": "chrischenhui"
        },
        "content": ""
      },
      {
        "lineNumber": 366,
        "author": {
          "gitId": "chrischenhui"
        },
        "content": "1.4+h| Switch Command"
      },
      {
        "lineNumber": 367,
        "author": {
          "gitId": "chrischenhui"
        },
        "content": "s| home m|"
      },
      {
        "lineNumber": 368,
        "author": {
          "gitId": "chrischenhui"
        },
        "content": ""
      },
      {
        "lineNumber": 369,
        "author": {
          "gitId": "chrischenhui"
        },
        "content": "s| open m|"
      },
      {
        "lineNumber": 370,
        "author": {
          "gitId": "chrischenhui"
        },
        "content": ""
      },
      {
        "lineNumber": 371,
        "author": {
          "gitId": "chrischenhui"
        },
        "content": "s| start m| [DIFFICULTY]"
      },
      {
        "lineNumber": 372,
        "author": {
          "gitId": "chrischenhui"
        },
        "content": ""
      },
      {
        "lineNumber": 373,
        "author": {
          "gitId": "chrischenhui"
        },
        "content": "s| setting m|"
      },
      {
        "lineNumber": 374,
        "author": {
          "gitId": "chrischenhui"
        },
        "content": ""
      },
      {
        "lineNumber": 375,
        "author": {
          "gitId": "chrischenhui"
        },
        "content": "|\u003d\u003d\u003d"
      }
    ],
    "authorContributionMap": {
      "dragontho": 73,
      "jascxx": 1,
      "chrischenhui": 201,
      "-": 100
    }
  },
  {
    "path": "docs/diagrams/AddCardSequenceDiagram.puml",
    "fileType": "other",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "chrischenhui"
        },
        "content": "@startuml"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "chrischenhui"
        },
        "content": "!include style.puml"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "chrischenhui"
        },
        "content": ""
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "chrischenhui"
        },
        "content": "box Logic LOGIC_COLOR_T1"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "chrischenhui"
        },
        "content": "participant \":LogicManager\" as LogicManager LOGIC_COLOR"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "chrischenhui"
        },
        "content": "participant \":ParserManager\" as ParserManager LOGIC_COLOR"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "chrischenhui"
        },
        "content": "participant \":AddCommandParser\" as AddCommandParser LOGIC_COLOR"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "chrischenhui"
        },
        "content": "participant \"a:AddCommand\" as AddCommand LOGIC_COLOR"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "chrischenhui"
        },
        "content": "participant \":CardCommandResult\" as CardCommandResult LOGIC_COLOR"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "chrischenhui"
        },
        "content": "end box"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "chrischenhui"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "chrischenhui"
        },
        "content": "box Model MODEL_COLOR_T1"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "chrischenhui"
        },
        "content": "participant \":Model\" as Model MODEL_COLOR"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "chrischenhui"
        },
        "content": "end box"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "chrischenhui"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "chrischenhui"
        },
        "content": "box Storage STORAGE_COLOR_T1"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "chrischenhui"
        },
        "content": "participant \":Storage\" as Storage STORAGE_COLOR_T1"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "chrischenhui"
        },
        "content": "end box"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "chrischenhui"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "chrischenhui"
        },
        "content": "[-\u003e LogicManager : execute(\"add ...\")"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "chrischenhui"
        },
        "content": "activate LogicManager"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "chrischenhui"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "chrischenhui"
        },
        "content": "LogicManager -\u003e ParserManager : parseCommand(\"add ...\")"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "chrischenhui"
        },
        "content": "activate ParserManager"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "chrischenhui"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "chrischenhui"
        },
        "content": "create AddCommandParser"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "chrischenhui"
        },
        "content": "ParserManager -\u003e AddCommandParser"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "chrischenhui"
        },
        "content": "activate AddCommandParser"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "chrischenhui"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "chrischenhui"
        },
        "content": "AddCommandParser --\u003e ParserManager"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "chrischenhui"
        },
        "content": "deactivate AddCommandParser"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "chrischenhui"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "chrischenhui"
        },
        "content": "ParserManager -\u003e AddCommandParser : parse(\"...\")"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "chrischenhui"
        },
        "content": "activate AddCommandParser"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "chrischenhui"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "chrischenhui"
        },
        "content": "create AddCommand"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "chrischenhui"
        },
        "content": "AddCommandParser -\u003e AddCommand"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "chrischenhui"
        },
        "content": "activate AddCommand"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "chrischenhui"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "chrischenhui"
        },
        "content": "AddCommand --\u003e AddCommandParser : a"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "chrischenhui"
        },
        "content": "deactivate AddCommand"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "chrischenhui"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "chrischenhui"
        },
        "content": "AddCommandParser --\u003e ParserManager : a"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "chrischenhui"
        },
        "content": "deactivate AddCommandParser"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "chrischenhui"
        },
        "content": "\u0027Hidden arrow to position the destroy marker below the end of the activation bar."
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "chrischenhui"
        },
        "content": "AddCommandParser -[hidden]-\u003e ParserManager"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "chrischenhui"
        },
        "content": "destroy AddCommandParser"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "chrischenhui"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "chrischenhui"
        },
        "content": "ParserManager --\u003e LogicManager : a"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "chrischenhui"
        },
        "content": "deactivate ParserManager"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "chrischenhui"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "chrischenhui"
        },
        "content": "LogicManager -\u003e AddCommand : a.execute(model)"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "chrischenhui"
        },
        "content": "activate AddCommand"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "chrischenhui"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "chrischenhui"
        },
        "content": "AddCommand -\u003e Model : addCard(...)"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "chrischenhui"
        },
        "content": "activate Model"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "chrischenhui"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "chrischenhui"
        },
        "content": "Model --\u003e AddCommand"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "chrischenhui"
        },
        "content": "deactivate Model"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "chrischenhui"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "chrischenhui"
        },
        "content": "create CardCommandResult"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "chrischenhui"
        },
        "content": "AddCommand -\u003e CardCommandResult"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "chrischenhui"
        },
        "content": "activate CardCommandResult"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "chrischenhui"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "chrischenhui"
        },
        "content": "CardCommandResult --\u003e AddCommand"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "chrischenhui"
        },
        "content": "deactivate CardCommandResult"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "chrischenhui"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "chrischenhui"
        },
        "content": "AddCommand --\u003e LogicManager : result"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "chrischenhui"
        },
        "content": "deactivate AddCommand"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "chrischenhui"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "chrischenhui"
        },
        "content": "LogicManager -\u003e Storage : result.update(storage)"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "chrischenhui"
        },
        "content": "activate Storage"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "chrischenhui"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "chrischenhui"
        },
        "content": "Storage --\u003e LogicManager"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "chrischenhui"
        },
        "content": "deactivate Storage"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "chrischenhui"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "chrischenhui"
        },
        "content": "[\u003c--LogicManager"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "chrischenhui"
        },
        "content": "deactivate LogicManager"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "chrischenhui"
        },
        "content": "@enduml"
      }
    ],
    "authorContributionMap": {
      "chrischenhui": 79
    }
  },
  {
    "path": "docs/diagrams/AutoCompleteSequenceDiagram.puml",
    "fileType": "other",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "sreesubbash"
        },
        "content": "@startuml"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "sreesubbash"
        },
        "content": "!include style.puml"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "sreesubbash"
        },
        "content": ""
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "sreesubbash"
        },
        "content": "box UI UI_COLOR_T1"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "sreesubbash"
        },
        "content": "participant \":CommandBox\" as CommandBox UI_COLOR"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "sreesubbash"
        },
        "content": "end box"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "sreesubbash"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "sreesubbash"
        },
        "content": "box Logic LOGIC_COLOR_T1"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "sreesubbash"
        },
        "content": "participant \":LogicManager\" as LogicManager LOGIC_COLOR"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "sreesubbash"
        },
        "content": "end box"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "sreesubbash"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "sreesubbash"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "sreesubbash"
        },
        "content": "box ParserManager MODEL_COLOR_T1"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "sreesubbash"
        },
        "content": "participant \":ParserManager\" as ParserManager LOGIC_COLOR"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "sreesubbash"
        },
        "content": "participant \"u:SpecificModeParser\" as SpecificModeParser LOGIC_COLOR"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "sreesubbash"
        },
        "content": "participant \"u:SwtichModeParser\" as SwitchModeParser LOGIC_COLOR"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "sreesubbash"
        },
        "content": "participant \":ClassUtil\" as ClassUtil2 MODEL_COLOR"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "sreesubbash"
        },
        "content": "participant \":ClassUtil\" as ClassUtil MODEL_COLOR"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "sreesubbash"
        },
        "content": "end box"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "sreesubbash"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "sreesubbash"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "sreesubbash"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "sreesubbash"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "sreesubbash"
        },
        "content": "[-\u003e CommandBox : keystroke \"st\""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "sreesubbash"
        },
        "content": "activate CommandBox"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "sreesubbash"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "sreesubbash"
        },
        "content": "CommandBox -\u003e LogicManager : getMenuItems(\"st\")"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "sreesubbash"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "sreesubbash"
        },
        "content": "activate LogicManager"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "sreesubbash"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "sreesubbash"
        },
        "content": "LogicManager -\u003e ParserManager : getAutoFill(\"st\")"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "sreesubbash"
        },
        "content": "activate ParserManager"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "sreesubbash"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "sreesubbash"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "sreesubbash"
        },
        "content": "ParserManager -\u003e SpecificModeParser : getAutoFill(\"st\")"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "sreesubbash"
        },
        "content": "activate SpecificModeParser"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "sreesubbash"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "sreesubbash"
        },
        "content": "SpecificModeParser -\u003e ClassUtil2 : getAttribute(\"COMMAND_WORD\")"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "sreesubbash"
        },
        "content": "activate ClassUtil2"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "sreesubbash"
        },
        "content": "ClassUtil2 -\u003e SpecificModeParser : List\u003cString\u003e"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "sreesubbash"
        },
        "content": "deactivate ClassUtil2"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "sreesubbash"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "sreesubbash"
        },
        "content": "SpecificModeParser --\u003e ParserManager : List\u003cAutoFill\u003e"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "sreesubbash"
        },
        "content": "deactivate SpecificModeParser"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "sreesubbash"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "sreesubbash"
        },
        "content": "ParserManager -\u003e SwitchModeParser : getAutoFill(\"st\")"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "sreesubbash"
        },
        "content": "activate SwitchModeParser"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "sreesubbash"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "sreesubbash"
        },
        "content": "SwitchModeParser -\u003e ClassUtil : getAttribute(\"COMMAND_WORD\")"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "sreesubbash"
        },
        "content": "activate ClassUtil"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "sreesubbash"
        },
        "content": "ClassUtil -\u003e SwitchModeParser : List\u003cString\u003e"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "sreesubbash"
        },
        "content": "deactivate ClassUtil"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "sreesubbash"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "sreesubbash"
        },
        "content": "SwitchModeParser --\u003e ParserManager : List\u003cAutoFill\u003e"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "sreesubbash"
        },
        "content": "deactivate SwitchModeParser"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "sreesubbash"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "sreesubbash"
        },
        "content": "ParserManager --\u003e LogicManager : List\u003cAutoFill\u003e"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "sreesubbash"
        },
        "content": "deactivate ParserManager"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "sreesubbash"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "sreesubbash"
        },
        "content": "LogicManager --\u003e CommandBox : List\u003cAction\u003e"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "sreesubbash"
        },
        "content": "deactivate LogicManager"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "sreesubbash"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "sreesubbash"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "sreesubbash"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "sreesubbash"
        },
        "content": "[\u003c--CommandBox : Update CommandBox"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "sreesubbash"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "sreesubbash"
        },
        "content": "@enduml"
      }
    ],
    "authorContributionMap": {
      "sreesubbash": 67
    }
  },
  {
    "path": "docs/diagrams/BetterModelClassDiagram.puml",
    "fileType": "other",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "@startuml"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": "!include style.puml"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "skinparam arrowThickness 1.1"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "skinparam arrowColor MODEL_COLOR"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "skinparam classBackgroundColor MODEL_COLOR"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "chrischenhui"
        },
        "content": "WordBank *-down-\u003e \"1\" UniqueCardList"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "chrischenhui"
        },
        "content": "WordBank *-down-\u003e \"1\" Name"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "chrischenhui"
        },
        "content": "UniqueTagList *-down-\u003e \"*\" Tag"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "chrischenhui"
        },
        "content": "UniqueCardList o-down-\u003e Card"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "chrischenhui"
        },
        "content": "Card o-down-\u003e \"*\" UniqueTagList"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "chrischenhui"
        },
        "content": "Card *--\u003e Id"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "chrischenhui"
        },
        "content": "Card *--\u003e Word"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "chrischenhui"
        },
        "content": "Card *--\u003e Meaning"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "@enduml"
      }
    ],
    "authorContributionMap": {
      "chrischenhui": 8,
      "-": 9
    }
  },
  {
    "path": "docs/diagrams/CommitActivityDiagram.puml",
    "fileType": "other",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "@startuml"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "sreesubbash"
        },
        "content": "(*)  if \"\" then"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "sreesubbash"
        },
        "content": "--\u003e \"Home (No Switch)\""
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "sreesubbash"
        },
        "content": "if \"\" then"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "sreesubbash"
        },
        "content": "  --\u003e[\u0026#91;bank \u003cbankName\u003e\u0026#93;] \"Home (With Switch)\""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "sreesubbash"
        },
        "content": "  --\u003e \"Another activity\""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "sreesubbash"
        },
        "content": "  -right-\u003e (*)"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "sreesubbash"
        },
        "content": "else"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "sreesubbash"
        },
        "content": "  -\u003e[\u0026#91;else\u0026#93;] \"Something else\""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "sreesubbash"
        },
        "content": "  --\u003e[Ending process] (*)"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "endif"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "sreesubbash"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "@enduml"
      }
    ],
    "authorContributionMap": {
      "sreesubbash": 10,
      "-": 4
    }
  },
  {
    "path": "docs/diagrams/DifficultySequenceDiagram.puml",
    "fileType": "other",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "dragontho"
        },
        "content": "@startuml"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "dragontho"
        },
        "content": "!include style.puml"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "dragontho"
        },
        "content": ""
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "dragontho"
        },
        "content": "box Logic LOGIC_COLOR_T1"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "dragontho"
        },
        "content": "participant \":LogicManager\" as LogicManager LOGIC_COLOR"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "dragontho"
        },
        "content": "participant \":AddressBookParser\" as AddressBookParser LOGIC_COLOR"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "dragontho"
        },
        "content": "participant \"u:UndoCommand\" as UndoCommand LOGIC_COLOR"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "dragontho"
        },
        "content": "end box"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "dragontho"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "dragontho"
        },
        "content": "box Model MODEL_COLOR_T1"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "dragontho"
        },
        "content": "participant \":Model\" as Model MODEL_COLOR"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "dragontho"
        },
        "content": "participant \":VersionedAddressBook\" as VersionedAddressBook MODEL_COLOR"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "dragontho"
        },
        "content": "end box"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "dragontho"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "dragontho"
        },
        "content": "box UI UI_COLOR_T1"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "dragontho"
        },
        "content": "participant \":UI\" as UI UI_COLOR"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "dragontho"
        },
        "content": "end box"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "dragontho"
        },
        "content": "[-\u003e LogicManager : execute(undo)"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "dragontho"
        },
        "content": "activate LogicManager"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "dragontho"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "dragontho"
        },
        "content": "LogicManager -\u003e AddressBookParser : parseCommand(undo)"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "dragontho"
        },
        "content": "activate AddressBookParser"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "dragontho"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "dragontho"
        },
        "content": "create UndoCommand"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "dragontho"
        },
        "content": "AddressBookParser -\u003e UndoCommand"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "dragontho"
        },
        "content": "activate UndoCommand"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "dragontho"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "dragontho"
        },
        "content": "UndoCommand --\u003e AddressBookParser"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "dragontho"
        },
        "content": "deactivate UndoCommand"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "dragontho"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "dragontho"
        },
        "content": "AddressBookParser --\u003e LogicManager : u"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "dragontho"
        },
        "content": "deactivate AddressBookParser"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "dragontho"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "dragontho"
        },
        "content": "LogicManager -\u003e UndoCommand : execute()"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "dragontho"
        },
        "content": "activate UndoCommand"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "dragontho"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "dragontho"
        },
        "content": "UndoCommand -\u003e Model : undoAddressBook()"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "dragontho"
        },
        "content": "activate Model"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "dragontho"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "dragontho"
        },
        "content": "Model -\u003e VersionedAddressBook : undo()"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "dragontho"
        },
        "content": "activate VersionedAddressBook"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "dragontho"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "dragontho"
        },
        "content": "VersionedAddressBook -\u003e VersionedAddressBook :resetData(ReadOnlyAddressBook)"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "dragontho"
        },
        "content": "VersionedAddressBook --\u003e Model :"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "dragontho"
        },
        "content": "deactivate VersionedAddressBook"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "dragontho"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "dragontho"
        },
        "content": "Model --\u003e UndoCommand"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "dragontho"
        },
        "content": "deactivate Model"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "dragontho"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "dragontho"
        },
        "content": "UndoCommand --\u003e LogicManager : result"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "dragontho"
        },
        "content": "deactivate UndoCommand"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "dragontho"
        },
        "content": "UndoCommand -[hidden]-\u003e LogicManager : result"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "dragontho"
        },
        "content": "destroy UndoCommand"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "dragontho"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "dragontho"
        },
        "content": "[\u003c--LogicManager"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "dragontho"
        },
        "content": "deactivate LogicManager"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "dragontho"
        },
        "content": "@enduml"
      }
    ],
    "authorContributionMap": {
      "dragontho": 57
    }
  },
  {
    "path": "docs/diagrams/GameClassDiagram.puml",
    "fileType": "other",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": "@startuml"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": "!include style.puml"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": ""
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": "skinparam arrowThickness 1.1"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": "skinparam arrowColor UI_COLOR_T4"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": "skinparam classBackgroundColor #800080"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": "package Game \u003c\u003cRectangle\u003e\u003e{"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": "Class Game {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": "    boolean isOver"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": "}"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": "enum DifficultyEnum {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": "    EASY"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": "    MEDIUM"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": "    HARD"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": "}"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": "Class Card"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": "Class Index"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": "Class Guess"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": "}"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": "package WordBank \u003c\u003cRectangle\u003e\u003e{"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": "Class ReadOnlyWordBank \u003c\u003cInterface\u003e\u003e"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": "Class WordBank"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": "}"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": "Game o--down-\"0..*\" Card"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": "Game -left-\u003e DifficultyEnum"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": "Game --right-\u003e\"1\" Index"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": "Game ..up..\u003e Guess :verifies \u003e"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": "Class HiddenOutside #FFFFFF"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": "HiddenOutside ..\u003e Game"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": "HiddenOutside ..\u003e Guess"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": "Game -- ReadOnlyWordBank :.clone() Cards from \u003e"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": "WordBank .up.|\u003e ReadOnlyWordBank"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": "@enduml"
      }
    ],
    "authorContributionMap": {
      "kohyida1997": 40
    }
  },
  {
    "path": "docs/diagrams/LogicClassDiagram.puml",
    "fileType": "other",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "@startuml"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": "!include style.puml"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "skinparam arrowThickness 1.1"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "skinparam arrowColor LOGIC_COLOR_T4"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "skinparam classBackgroundColor LOGIC_COLOR"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "package Logic {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "package Parser {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "sreesubbash"
        },
        "content": "Class ParserManager"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "sreesubbash"
        },
        "content": "Class SwitchModeParser"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "sreesubbash"
        },
        "content": "Class SpecificModeParser"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "sreesubbash"
        },
        "content": "Class ClassUtil"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "package Command {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "sreesubbash"
        },
        "content": "Class XCommand"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "sreesubbash"
        },
        "content": "Class YCommand"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "Class CommandResult"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "Class \"{abstract}\\nCommand\" as Command"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "sreesubbash"
        },
        "content": "Class \"{abstract}\\nMODECommand\" as MODECommand"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "sreesubbash"
        },
        "content": "Class \"{abstract}\\nSwitchCommand\" as SwitchCommand"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "sreesubbash"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "sreesubbash"
        },
        "content": "Interface UiLogicHelper \u003c\u003cInterface\u003e\u003e"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "Interface Logic \u003c\u003cInterface\u003e\u003e"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "Class LogicManager"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "sreesubbash"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "sreesubbash"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "Class HiddenOutside #FFFFFF"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "HiddenOutside ..\u003e Logic"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "sreesubbash"
        },
        "content": "HiddenOutside ..\u003e UiLogicHelper"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "sreesubbash"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "sreesubbash"
        },
        "content": "Logic -up-|\u003e UiLogicHelper"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "LogicManager .up.|\u003e Logic"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "sreesubbash"
        },
        "content": "LogicManager --\u003e\"1\" ParserManager"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "sreesubbash"
        },
        "content": "ParserManager ..\u003e SpecificModeParser"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "sreesubbash"
        },
        "content": "ParserManager ..\u003e SwitchModeParser"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "sreesubbash"
        },
        "content": "SpecificModeParser ..\u003e ClassUtil"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "sreesubbash"
        },
        "content": "SwitchModeParser ..\u003e ClassUtil"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "sreesubbash"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "sreesubbash"
        },
        "content": "ClassUtil ..\u003e Command : creates \u003e"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "sreesubbash"
        },
        "content": "XCommand -up-|\u003e SwitchCommand"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "sreesubbash"
        },
        "content": "YCommand -up-|\u003e MODECommand"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "sreesubbash"
        },
        "content": "SwitchCommand -up-|\u003e Command"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "sreesubbash"
        },
        "content": "MODECommand -up-|\u003e Command"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "LogicManager .left.\u003e Command : executes \u003e"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "sreesubbash"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "sreesubbash"
        },
        "content": "note bottom of YCommand: YCommand \u003d OpenCommand, \\nSettingsCommand, etc"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "sreesubbash"
        },
        "content": "note bottom of XCommand: XCommand \u003d BankCommand, \\nCreateCommand, etc"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "sreesubbash"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "Logic ..\u003e CommandResult"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "sreesubbash"
        },
        "content": "LogicManager .left.\u003e CommandResult"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "Command .up.\u003e CommandResult"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "CommandResult -[hidden]-\u003e Parser"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "@enduml"
      }
    ],
    "authorContributionMap": {
      "sreesubbash": 31,
      "-": 32
    }
  },
  {
    "path": "docs/diagrams/ModelClassDiagram.puml",
    "fileType": "other",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "@startuml"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": "!include style.puml"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "chrischenhui"
        },
        "content": "skinparam arrowThickness 1.2"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "skinparam arrowColor MODEL_COLOR"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "skinparam classBackgroundColor MODEL_COLOR"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "Package Model \u003c\u003cRectangle\u003e\u003e{"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "chrischenhui"
        },
        "content": "Interface ReadOnlyWordBankList \u003c\u003cInterface\u003e\u003e"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "chrischenhui"
        },
        "content": "Interface ReadOnlyWordBankStatisticsList \u003c\u003cInterface\u003e\u003e"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "chrischenhui"
        },
        "content": "Interface ReadOnlyAppSettings \u003c\u003cInterface\u003e\u003e"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "chrischenhui"
        },
        "content": "Interface ReadOnlyUserPrefs \u003c\u003cInterface\u003e\u003e"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "Interface Model \u003c\u003cInterface\u003e\u003e"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "Interface ObservableList \u003c\u003cInterface\u003e\u003e"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "chrischenhui"
        },
        "content": "Class WordBankList"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "chrischenhui"
        },
        "content": "Class WordBankStatisticsList"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "chrischenhui"
        },
        "content": "Class GlobalStatistics"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "chrischenhui"
        },
        "content": "Class AppSettings"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "Class Model"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "Class ModelManager"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "Class UserPrefs"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "Class ReadOnlyUserPrefs"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "chrischenhui"
        },
        "content": "Class Game"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "chrischenhui"
        },
        "content": "Package WordBank {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "chrischenhui"
        },
        "content": "Class WordBank"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "Class Name"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "chrischenhui"
        },
        "content": "Class UniqueWordBankList"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "chrischenhui"
        },
        "content": "Package UniqueCardList {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "chrischenhui"
        },
        "content": "Class UniqueCardList"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "Class HiddenOutside #FFFFFF"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "HiddenOutside ..\u003e Model"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "chrischenhui"
        },
        "content": "WordBankList .up.|\u003e ReadOnlyWordBankList"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "chrischenhui"
        },
        "content": "WordBankStatisticsList .up.|\u003e ReadOnlyWordBankStatisticsList"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "chrischenhui"
        },
        "content": "AppSettings .up.|\u003e ReadOnlyAppSettings"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "chrischenhui"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "ModelManager .up.|\u003e Model"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "Model .right.\u003e ObservableList"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "chrischenhui"
        },
        "content": "ModelManager o--\u003e \"1\" WordBankList"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "chrischenhui"
        },
        "content": "ModelManager o--\u003e \"1\" WordBankStatisticsList"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "chrischenhui"
        },
        "content": "ModelManager o--\u003e \"1\" GlobalStatistics"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "chrischenhui"
        },
        "content": "ModelManager o--\u003e \"1\" AppSettings"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "chrischenhui"
        },
        "content": "ModelManager o--\u003e \"1\" UserPrefs"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "chrischenhui"
        },
        "content": "ModelManager o--\u003e \"1\" Game"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "UserPrefs .up.|\u003e ReadOnlyUserPrefs"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "chrischenhui"
        },
        "content": "WordBankList *-down-\u003e \"1\" UniqueWordBankList"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "chrischenhui"
        },
        "content": "UniqueWordBankList o--\u003e \"*\" WordBank"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "chrischenhui"
        },
        "content": "WordBank *-down-\u003e \"1\" UniqueCardList"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "chrischenhui"
        },
        "content": "WordBank *-down-\u003e \"1\" Name"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "chrischenhui"
        },
        "content": "ModelManager --\u003e\"1\" WordBank : contains"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "@enduml"
      }
    ],
    "authorContributionMap": {
      "chrischenhui": 30,
      "-": 29
    }
  },
  {
    "path": "docs/diagrams/SettingsActivityDiagram.puml",
    "fileType": "other",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "dragontho"
        },
        "content": "@startuml"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "dragontho"
        },
        "content": "start"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "dragontho"
        },
        "content": ":User executes a"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "dragontho"
        },
        "content": "settings command;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "dragontho"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "dragontho"
        },
        "content": "if () then ([current mode is \"settings\"])"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "dragontho"
        },
        "content": "    :Executes settings"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "dragontho"
        },
        "content": "    command;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "dragontho"
        },
        "content": "    :Alters state of model;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "dragontho"
        },
        "content": "    :Saves settings to"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "dragontho"
        },
        "content": "    appsettings.json;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "dragontho"
        },
        "content": "else ([else])"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "dragontho"
        },
        "content": "    :Throws Exception;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "dragontho"
        },
        "content": "endif"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "dragontho"
        },
        "content": "stop"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "dragontho"
        },
        "content": "@enduml"
      }
    ],
    "authorContributionMap": {
      "dragontho": 16
    }
  },
  {
    "path": "docs/diagrams/StorageClassDiagram.puml",
    "fileType": "other",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "@startuml"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": "!include style.puml"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "chrischenhui"
        },
        "content": "skinparam arrowThickness 1.5"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "skinparam arrowColor STORAGE_COLOR"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "skinparam classBackgroundColor STORAGE_COLOR"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "Interface Storage \u003c\u003cInterface\u003e\u003e"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "Interface UserPrefsStorage \u003c\u003cInterface\u003e\u003e"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "chrischenhui"
        },
        "content": "Interface WordBankListStorage \u003c\u003cInterface\u003e\u003e"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "chrischenhui"
        },
        "content": "Interface WordBankStatisticsListStorage \u003c\u003cInterface\u003e\u003e"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "chrischenhui"
        },
        "content": "Interface GlobalStatisticsStorage \u003c\u003cInterface\u003e\u003e"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "chrischenhui"
        },
        "content": "Interface AppSettingsStorage \u003c\u003cInterface\u003e\u003e"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "Class StorageManager"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "Class JsonUserPrefsStorage"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "chrischenhui"
        },
        "content": "Class JsonWordBankListStorage"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "chrischenhui"
        },
        "content": "Class WordBankStatisticsListStorage"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "chrischenhui"
        },
        "content": "Class GlobalStatisticsStorage"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "chrischenhui"
        },
        "content": "Class JsonAppSettingsStorage"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "chrischenhui"
        },
        "content": "StorageManager .up.|\u003e Storage"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "chrischenhui"
        },
        "content": "StorageManager o--\u003e UserPrefsStorage"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "chrischenhui"
        },
        "content": "StorageManager o--\u003e WordBankListStorage"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "chrischenhui"
        },
        "content": "StorageManager o--\u003e WordBankStatisticsListStorage"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "chrischenhui"
        },
        "content": "StorageManager o--\u003e GlobalStatisticsStorage"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "chrischenhui"
        },
        "content": "StorageManager o--\u003e AppSettingsStorage"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "chrischenhui"
        },
        "content": "JsonUserPrefsStorage .up.|\u003e UserPrefsStorage"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "chrischenhui"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "chrischenhui"
        },
        "content": "JsonWordBankListStorage .up.|\u003e WordBankListStorage"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "chrischenhui"
        },
        "content": "JsonWordBankListStorage .down.\u003e JsonSerializableWordBank"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "chrischenhui"
        },
        "content": "JsonSerializableWordBank .down.\u003e JsonAdaptedCard"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "chrischenhui"
        },
        "content": "JsonAdaptedCard .down.\u003e JsonAdaptedTag"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "chrischenhui"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "chrischenhui"
        },
        "content": "JsonWordBankStatisticsListStorage .up.|\u003e WordBankStatisticsListStorage"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "chrischenhui"
        },
        "content": "JsonWordBankStatisticsListStorage .down.\u003e JsonSerializableWordBankStatistics"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "chrischenhui"
        },
        "content": "JsonSerializableWordBankStatistics .down.\u003e JsonAdaptedCardStatistics"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "chrischenhui"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "chrischenhui"
        },
        "content": "JsonGlobalStatisticsStorage .up.|\u003e GlobalStatisticsStorage"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "chrischenhui"
        },
        "content": "JsonGlobalStatisticsStorage .down.\u003e JsonSerializableGlobalStatistics"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "chrischenhui"
        },
        "content": "JsonSerializableGlobalStatistics .down.\u003e JsonAdaptedWeeklyPlayed"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "chrischenhui"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "chrischenhui"
        },
        "content": "JsonAppSettingsStorage .up.|\u003e AppSettingsStorage"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "@enduml"
      }
    ],
    "authorContributionMap": {
      "chrischenhui": 31,
      "-": 13
    }
  },
  {
    "path": "docs/diagrams/TimerClassDiagram.puml",
    "fileType": "other",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": "@startuml"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": "!include style.puml"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": ""
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": "skinparam arrowThickness 1.1"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": "skinparam arrowColor UI_COLOR_T4"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": "skinparam classBackgroundColor #654321"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": "package Timer \u003c\u003cRectangle\u003e\u003e{"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": "Class GameTimer \u003c\u003cInterface\u003e\u003e {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": "}"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": "Class GameTimerManager {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": "}"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": "Class HintTimingQueue {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": "}"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": "}"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": "package AppManager \u003c\u003cRectangle\u003e\u003e {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": "Class AppManager{"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": "}"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": "}"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": "package UI \u003c\u003cRectangle\u003e\u003e {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": "Class UI {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": "}"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": "}"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": "GameTimerManager --down-\u003e HintTimingQueue : Gets timestamps from \u003e"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": "GameTimerManager --up-|\u003e GameTimer"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": "GameTimer .up..\u003e AppManager : Notifies \u003e"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": "AppManager -down--\u003e GameTimer : Starts \u003e"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": "GameTimer .up..\u003e UI : Notifies \u003e"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": "@enduml"
      }
    ],
    "authorContributionMap": {
      "kohyida1997": 46
    }
  },
  {
    "path": "docs/diagrams/TimerClassDiagramCallbacks.puml",
    "fileType": "other",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": "@startuml"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": "!include style.puml"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": "skinparam arrowThickness 1.1"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": "skinparam arrowColor UI_COLOR_T4"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": "skinparam classBackgroundColor TIMER_COLOR"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": "package AppManager \u003c\u003cRectangle\u003e\u003e {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": "Class AppManager #00008B"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": "}"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": "package Timer \u003c\u003cRectangle\u003e\u003e {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": "Class GameTimerManager {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": "}"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": "Class GameTimer \u003c\u003cInterface\u003e\u003e {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": "}"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": "Class UpdateHintCallBack \u003c\u003cInterface\u003e\u003e {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": "}"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": "Class SkipOverCallBack \u003c\u003cInterface\u003e\u003e {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": "}"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": "Class UpdateTimerCallBack \u003c\u003cInterface\u003e\u003e {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": "}"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": "}"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": "GameTimer *--down- UpdateHintCallBack"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": "GameTimer *--down- SkipOverCallBack"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": "GameTimer *--down- UpdateTimerCallBack"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": "GameTimerManager -down-|\u003e GameTimer"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": "GameTimer ..left..\u003e AppManager : executes callbacks of \u003e"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": "AppManager --right--\u003e GameTimer : registers callbacks with \u003e"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": "@enduml"
      }
    ],
    "authorContributionMap": {
      "kohyida1997": 45
    }
  },
  {
    "path": "docs/diagrams/TimerSequenceDiagram1.puml",
    "fileType": "other",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": "@startuml"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": "!include style.puml"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": ""
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": "box UI UI_COLOR_T1"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": "participant \":MainWindow\" as MainWindow UI_COLOR"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": "end box"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": "box AppManager APPMANAGER_COLOR_T1"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": "participant \":AppManager\" as AppManager APPMANAGER_COLOR"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": "end box"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": "box Timer TIMER_COLOR_T1"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": "participant \":GameTimer\" as GameTimer TIMER_COLOR"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": "end box"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": "[-\u003e MainWindow : initialize"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": "activate MainWindow"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": "MainWindow -\u003e AppManager : register callback methods"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": "activate AppManager"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": "AppManager --\u003e MainWindow"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": "deactivate AppManager"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": "deactivate MainWindow"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": "AppManager -\u003e AppManager : create new \\nGameTimer instance"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": "activate AppManager"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": "AppManager -\u003e GameTimer : resgister callback methods"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": "activate GameTimer"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": "GameTimer --\u003e AppManager"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": "deactivate GameTimer"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": "AppManager --\u003e AppManager"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": "deactivate AppManager"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": "AppManager -\u003e GameTimer : run()"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": "activate GameTimer"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": "GameTimer -\u003e AppManager : Callback to\\n update timestamp"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": "note right: Time elapsed, GameTimer \\n performs a call-back \\n to AppManager"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": "activate AppManager"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": "AppManager -\u003e MainWindow : Callback to\\n update timestamp"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": "note right: AppManager performs\\na call-back to MainWindow"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": "activate MainWindow"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": "[\u003c- MainWindow : update\\n UI Component"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": "MainWindow --\u003e AppManager"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": "deactivate MainWindow"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": "AppManager --\u003e GameTimer"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": "deactivate  AppManager"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": "GameTimer --\u003e AppManager"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": "deactivate GameTimer"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": "@enduml"
      }
    ],
    "authorContributionMap": {
      "kohyida1997": 61
    }
  },
  {
    "path": "docs/diagrams/UndoSequenceDiagram.puml",
    "fileType": "other",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "@startuml"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": "!include style.puml"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "sreesubbash"
        },
        "content": "box UI UI_COLOR_T1"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "sreesubbash"
        },
        "content": "participant \":UiLogicHelper\" as UiLogicHelper UI_COLOR"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "sreesubbash"
        },
        "content": "end box"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "sreesubbash"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "box Logic LOGIC_COLOR_T1"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "participant \":LogicManager\" as LogicManager LOGIC_COLOR"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "end box"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "sreesubbash"
        },
        "content": "box ParserManager MODEL_COLOR_T1"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "sreesubbash"
        },
        "content": "participant \":ParserManager\" as ParserManager LOGIC_COLOR"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "sreesubbash"
        },
        "content": "participant \"u:SpecificModeParser\" as SpecificModeParser LOGIC_COLOR"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "participant \":Model\" as Model MODEL_COLOR"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "participant \":VersionedAddressBook\" as VersionedAddressBook MODEL_COLOR"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "end box"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "sreesubbash"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "activate LogicManager"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "sreesubbash"
        },
        "content": "[-\u003e UiLogicHelper : execute(start)"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "sreesubbash"
        },
        "content": "activate UiLogicHelper"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "sreesubbash"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "sreesubbash"
        },
        "content": "UiLogicHelper -\u003e LogicManager : execute(start)"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "sreesubbash"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "sreesubbash"
        },
        "content": "LogicManager -\u003e ParserManager : parseCommand(undo)"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "sreesubbash"
        },
        "content": "activate ParserManager"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "sreesubbash"
        },
        "content": "create SpecificModeParser"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "sreesubbash"
        },
        "content": "ParserManager -\u003e SpecificModeParser"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "sreesubbash"
        },
        "content": "activate SpecificModeParser"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "sreesubbash"
        },
        "content": "SpecificModeParser --\u003e ParserManager"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "sreesubbash"
        },
        "content": "deactivate SpecificModeParser"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "sreesubbash"
        },
        "content": "ParserManager --\u003e LogicManager : u"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "sreesubbash"
        },
        "content": "deactivate ParserManager"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "sreesubbash"
        },
        "content": "LogicManager -\u003e SpecificModeParser : execute()"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "sreesubbash"
        },
        "content": "activate SpecificModeParser"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "sreesubbash"
        },
        "content": "SpecificModeParser -\u003e Model : undoAddressBook()"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "activate Model"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "Model -\u003e VersionedAddressBook : undo()"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "activate VersionedAddressBook"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "VersionedAddressBook -\u003e VersionedAddressBook :resetData(ReadOnlyAddressBook)"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "VersionedAddressBook --\u003e Model :"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "deactivate VersionedAddressBook"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "sreesubbash"
        },
        "content": "Model --\u003e SpecificModeParser"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "deactivate Model"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "sreesubbash"
        },
        "content": "SpecificModeParser --\u003e LogicManager : result"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "sreesubbash"
        },
        "content": "deactivate SpecificModeParser"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "sreesubbash"
        },
        "content": "SpecificModeParser -[hidden]-\u003e LogicManager : result"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "sreesubbash"
        },
        "content": "destroy SpecificModeParser"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "[\u003c--LogicManager"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "deactivate LogicManager"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "@enduml"
      }
    ],
    "authorContributionMap": {
      "sreesubbash": 30,
      "-": 32
    }
  },
  {
    "path": "docs/diagrams/style.puml",
    "fileType": "other",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "/\u0027"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": " \u0027Commonly used styles and colors across diagrams."
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": " \u0027Refer to https://plantuml-documentation.readthedocs.io/en/latest for a more"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": " \u0027comprehensive list of skinparams."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": " \u0027/"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "\u0027T1 through T4 are shades of the original color from lightest to darkest"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "!define UI_COLOR #1D8900"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "!define UI_COLOR_T1 #83E769"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "!define UI_COLOR_T2 #3FC71B"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "!define UI_COLOR_T3 #166800"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "!define UI_COLOR_T4 #0E4100"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "!define LOGIC_COLOR #3333C4"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "!define LOGIC_COLOR_T1 #C8C8FA"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "!define LOGIC_COLOR_T2 #6A6ADC"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "!define LOGIC_COLOR_T3 #1616B0"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "!define LOGIC_COLOR_T4 #101086"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "!define MODEL_COLOR #9D0012"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "!define MODEL_COLOR_T1 #F97181"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "!define MODEL_COLOR_T2 #E41F36"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "!define MODEL_COLOR_T3 #7B000E"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "!define MODEL_COLOR_T4 #51000A"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "!define STORAGE_COLOR #A38300"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "!define STORAGE_COLOR_T1 #FFE374"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "!define STORAGE_COLOR_T2 #EDC520"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "!define STORAGE_COLOR_T3 #806600"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "!define STORAGE_COLOR_T2 #544400"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": "!define TIMER_COLOR #654321"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": "!define TIMER_COLOR_T1 #D2B48C"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": "!define APPMANAGER_COLOR #00008B"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": "!define APPMANAGER_COLOR_T1 #6495ED"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "dragontho"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "!define USER_COLOR #000000"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "skinparam BackgroundColor #FFFFFFF"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "skinparam Shadowing false"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "skinparam Class {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    FontColor #FFFFFF"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    BorderThickness 1"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    BorderColor #FFFFFF"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    StereotypeFontColor #FFFFFF"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    FontName Arial"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "skinparam Actor {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    BorderColor USER_COLOR"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    Color USER_COLOR"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    FontName Arial"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "skinparam Sequence {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    MessageAlign center"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "    BoxFontSize 15"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "    BoxPadding 0"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "    BoxFontColor #FFFFFF"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "    FontName Arial"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "skinparam Participant {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "    FontColor #FFFFFFF"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "    Padding 20"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "skinparam MinClassWidth 50"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "skinparam ParticipantPadding 10"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "skinparam Shadowing false"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "skinparam DefaultTextAlignment center"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "skinparam packageStyle Rectangle"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "hide footbox"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "hide members"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "hide circle"
      }
    ],
    "authorContributionMap": {
      "dragontho": 1,
      "kohyida1997": 5,
      "-": 75
    }
  },
  {
    "path": "src/main/java/seedu/address/MainApp.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.application.Application;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.stage.Stage;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": "import seedu.address.appmanager.AppManager;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.Config;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.Version;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.exceptions.DataConversionException;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.util.ConfigUtil;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.util.StringUtil;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.Logic;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.LogicManager;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.ModelManager;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.ReadOnlyUserPrefs;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.UserPrefs;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "dragontho"
        },
        "content": "import seedu.address.model.appsettings.AppSettings;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "dragontho"
        },
        "content": "import seedu.address.model.appsettings.ReadOnlyAppSettings;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "jascxx"
        },
        "content": "import seedu.address.model.globalstatistics.GlobalStatistics;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "chrischenhui"
        },
        "content": "import seedu.address.model.wordbanklist.ReadOnlyWordBankList;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "chrischenhui"
        },
        "content": "import seedu.address.model.wordbanklist.WordBankList;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "dragontho"
        },
        "content": "import seedu.address.model.wordbankstatslist.WordBankStatisticsList;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.storage.Storage;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.storage.StorageManager;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "dragontho"
        },
        "content": "import seedu.address.storage.appsettings.AppSettingsStorage;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "dragontho"
        },
        "content": "import seedu.address.storage.appsettings.JsonAppSettingsStorage;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "jascxx"
        },
        "content": "import seedu.address.storage.globalstatistics.GlobalStatisticsStorage;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "jascxx"
        },
        "content": "import seedu.address.storage.globalstatistics.JsonGlobalStatisticsStorage;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "jascxx"
        },
        "content": "import seedu.address.storage.statistics.JsonWordBankStatisticsListStorage;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "jascxx"
        },
        "content": "import seedu.address.storage.statistics.WordBankStatisticsListStorage;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "chrischenhui"
        },
        "content": "import seedu.address.storage.userprefs.JsonUserPrefsStorage;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "chrischenhui"
        },
        "content": "import seedu.address.storage.userprefs.UserPrefsStorage;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "chrischenhui"
        },
        "content": "import seedu.address.storage.wordbanks.JsonWordBankListStorage;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "chrischenhui"
        },
        "content": "import seedu.address.storage.wordbanks.WordBankListStorage;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.ui.Ui;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.ui.UiManager;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "sreesubbash"
        },
        "content": "/*"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "sreesubbash"
        },
        "content": "Step 0."
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "sreesubbash"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "sreesubbash"
        },
        "content": "import seedu.address.Game.*;"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "sreesubbash"
        },
        "content": " */"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "sreesubbash"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": " * Runs the application."
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "public class MainApp extends Application {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": "    public static final Version VERSION \u003d new Version(1, 3, 0, true);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final Logger logger \u003d LogsCenter.getLogger(MainApp.class);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    protected Ui ui;"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    protected Logic logic;"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    protected Storage storage;"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    protected Model model;"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    protected Config config;"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": "    protected AppManager appManager;"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "    public void init() throws Exception {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "chrischenhui"
        },
        "content": "        logger.info(\"\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d[ Initializing Dukemon ]\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\");"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "        super.init();"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "        AppParameters appParameters \u003d AppParameters.parse(getParameters());"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "        config \u003d initConfig(appParameters.getConfigPath());"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefsStorage userPrefsStorage \u003d new JsonUserPrefsStorage(config.getUserPrefsFilePath());"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs userPrefs \u003d initPrefs(userPrefsStorage);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "chrischenhui"
        },
        "content": "        WordBankListStorage wordBankListStorage \u003d new JsonWordBankListStorage(userPrefs.getDataFilePath());"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "jascxx"
        },
        "content": "        WordBankStatisticsListStorage wbStatsStorage \u003d"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "jascxx"
        },
        "content": "                new JsonWordBankStatisticsListStorage(userPrefs.getDataFilePath());"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "jascxx"
        },
        "content": "        GlobalStatisticsStorage globalStatsStorage \u003d new JsonGlobalStatisticsStorage(userPrefs.getDataFilePath());"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "dragontho"
        },
        "content": "        AppSettingsStorage appSettingsStorage \u003d new JsonAppSettingsStorage(userPrefs.getAppSettingsFilePath());"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "dragontho"
        },
        "content": "        storage \u003d new StorageManager(wordBankListStorage, userPrefsStorage,"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "dragontho"
        },
        "content": "                wbStatsStorage, globalStatsStorage, appSettingsStorage);"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "        initLogging(config);"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "        model \u003d initModelManager(storage, userPrefs);"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "        logic \u003d new LogicManager(model, storage);"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": "        /*"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": "        Step 9."
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": "        Create AppManager using logic and pass to UIManager."
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": "         */"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": "        appManager \u003d new AppManager(logic);"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": ""
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": "        /*"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": "        Step 10"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": "        Initialize UIManager using GameManager"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": "         */"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": ""
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": "        ui \u003d new UiManager(appManager);"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns a {@code ModelManager} with the data from {@code storage}\u0027s address book and {@code userPrefs}. \u003cbr\u003e"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "     * The data from the sample address book will be used instead if {@code storage}\u0027s address book is not found,"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "     * or an empty address book will be used instead if errors occur when reading {@code storage}\u0027s address book."
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "    private Model initModelManager(Storage storage, ReadOnlyUserPrefs userPrefs) {"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "chrischenhui"
        },
        "content": "        Optional\u003cReadOnlyWordBankList\u003e optionalWbl \u003d storage.getWordBankList();"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "chrischenhui"
        },
        "content": "        WordBankList wbl \u003d (WordBankList) optionalWbl.get();"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "dragontho"
        },
        "content": "        WordBankStatisticsList wbStatsList \u003d storage.getWordBankStatisticsList();"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "dragontho"
        },
        "content": "        GlobalStatistics globalStatistics \u003d storage.getGlobalStatistics();"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "dragontho"
        },
        "content": "        ReadOnlyAppSettings appSettings \u003d null;"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "dragontho"
        },
        "content": "            Optional\u003cAppSettings\u003e settingsOptional \u003d storage.readAppSettings();"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "dragontho"
        },
        "content": "            appSettings \u003d settingsOptional.orElse(new AppSettings());"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "dragontho"
        },
        "content": "        } catch (IOException | DataConversionException e) {"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "chrischenhui"
        },
        "content": "            logger.warning(\"Init model failed. IO exception.\");"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "dragontho"
        },
        "content": "        return new ModelManager(wbl, wbStatsList, globalStatistics, userPrefs, appSettings);"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "sreesubbash"
        },
        "content": "    /*"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "sreesubbash"
        },
        "content": "    Step 3."
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "sreesubbash"
        },
        "content": "    Extends to Step 4 : storage.readGame()"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "sreesubbash"
        },
        "content": "    Extends to Step 5 : define ReadOnlyGame class;"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "sreesubbash"
        },
        "content": "    Extends to Step 6 : constructor for new Game();"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "sreesubbash"
        },
        "content": "    Extends to Step 7 : constructor for new GameManger;"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "sreesubbash"
        },
        "content": ""
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "sreesubbash"
        },
        "content": ""
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "sreesubbash"
        },
        "content": "    */"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "sreesubbash"
        },
        "content": ""
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "    private void initLogging(Config config) {"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "        LogsCenter.init(config);"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns a {@code Config} using the file at {@code configFilePath}. \u003cbr\u003e"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": "     * The default file path {@code Config#DEFAULT_CONFIG_FILE} will be used instead"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": "     * if {@code configFilePath} is null."
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": "    protected Config initConfig(Path configFilePath) {"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": "        Config initializedConfig;"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": "        Path configFilePathUsed;"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": "        configFilePathUsed \u003d Config.DEFAULT_CONFIG_FILE;"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": "        if (configFilePath !\u003d null) {"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": "            logger.info(\"Custom Config file specified \" + configFilePath);"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": "            configFilePathUsed \u003d configFilePath;"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": "        logger.info(\"Using config file : \" + configFilePathUsed);"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "-"
        },
        "content": "            Optional\u003cConfig\u003e configOptional \u003d ConfigUtil.readConfig(configFilePathUsed);"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "-"
        },
        "content": "            initializedConfig \u003d configOptional.orElse(new Config());"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (DataConversionException e) {"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "-"
        },
        "content": "            logger.warning(\"Config file at \" + configFilePathUsed + \" is not in the correct format. \""
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "-"
        },
        "content": "                    + \"Using default config properties\");"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "-"
        },
        "content": "            initializedConfig \u003d new Config();"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "-"
        },
        "content": "        //Update config file in case it was missing to begin with or there are new/unused fields"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "-"
        },
        "content": "            ConfigUtil.saveConfig(initializedConfig, configFilePathUsed);"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "-"
        },
        "content": "            logger.warning(\"Failed to save config file : \" + StringUtil.getDetails(e));"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "-"
        },
        "content": "        return initializedConfig;"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns a {@code UserPrefs} using the file at {@code storage}\u0027s user prefs file path,"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "-"
        },
        "content": "     * or a new {@code UserPrefs} with default configuration if errors occur when"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "-"
        },
        "content": "     * reading from the file."
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "-"
        },
        "content": "    protected UserPrefs initPrefs(UserPrefsStorage storage) {"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "-"
        },
        "content": "        Path prefsFilePath \u003d storage.getUserPrefsFilePath();"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "-"
        },
        "content": "        logger.info(\"Using prefs file : \" + prefsFilePath);"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs initializedPrefs;"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "-"
        },
        "content": "            Optional\u003cUserPrefs\u003e prefsOptional \u003d storage.readUserPrefs();"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "-"
        },
        "content": "            initializedPrefs \u003d prefsOptional.orElse(new UserPrefs());"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (DataConversionException e) {"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "-"
        },
        "content": "            logger.warning(\"UserPrefs file at \" + prefsFilePath + \" is not in the correct format. \""
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "-"
        },
        "content": "                    + \"Using default user prefs\");"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "-"
        },
        "content": "            initializedPrefs \u003d new UserPrefs();"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "-"
        },
        "content": "            logger.warning(\"Problem while reading from the file. Will be starting with an empty AddressBook\");"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "-"
        },
        "content": "            initializedPrefs \u003d new UserPrefs();"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "-"
        },
        "content": "        //Update prefs file in case it was missing to begin with or there are new/unused fields"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "-"
        },
        "content": "            storage.saveUserPrefs(initializedPrefs);"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "-"
        },
        "content": "            logger.warning(\"Failed to save config file : \" + StringUtil.getDetails(e));"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "-"
        },
        "content": "        return initializedPrefs;"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "-"
        },
        "content": "    public void start(Stage primaryStage) {"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": "        logger.info(\"Starting Dukemon \" + MainApp.VERSION);"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "-"
        },
        "content": "        ui.start(primaryStage);"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "-"
        },
        "content": "    public void stop() {"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "chrischenhui"
        },
        "content": "        logger.info(\"\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d [ Stopping Dukemon ] \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\");"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "-"
        },
        "content": "            storage.saveUserPrefs(model.getUserPrefs());"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "-"
        },
        "content": "            logger.severe(\"Failed to save preferences \" + StringUtil.getDetails(e));"
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "dragontho": 15,
      "sreesubbash": 16,
      "jascxx": 8,
      "chrischenhui": 12,
      "kohyida1997": 16,
      "-": 153
    }
  },
  {
    "path": "src/main/java/seedu/address/appmanager/AppManager.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": "package seedu.address.appmanager;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": "import static seedu.address.commons.util.CollectionUtil.requireAllNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": "import javafx.application.Platform;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": "import seedu.address.appmanager.timer.GameTimer;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": "import seedu.address.commons.core.GuiSettings;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": "import seedu.address.logic.Logic;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": "import seedu.address.logic.commands.CommandResult;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "chrischenhui"
        },
        "content": "import seedu.address.logic.commands.gamecommands.GameCommandResult;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "jascxx"
        },
        "content": "import seedu.address.logic.commands.switches.StartCommandResult;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "dragontho"
        },
        "content": "import seedu.address.model.appsettings.AppSettings;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": "import seedu.address.model.card.Card;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "jascxx"
        },
        "content": "import seedu.address.model.globalstatistics.GlobalStatistics;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "jascxx"
        },
        "content": "import seedu.address.model.wordbank.ReadOnlyWordBank;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "sreesubbash"
        },
        "content": "import seedu.address.model.wordbank.WordBank;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "jascxx"
        },
        "content": "import seedu.address.model.wordbankstatslist.WordBankStatisticsList;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "jascxx"
        },
        "content": "import seedu.address.statistics.GameStatistics;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "jascxx"
        },
        "content": "import seedu.address.statistics.GameStatisticsBuilder;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "jascxx"
        },
        "content": "import seedu.address.statistics.WordBankStatistics;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "chrischenhui"
        },
        "content": "import seedu.address.storage.Storage;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": "/**"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": " * Class that serves as a hub for communication between the GUI and The internal components."
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": " * This is done to separate all logic of the game away from the GameTimer entirely."
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": " */"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": "public class AppManager {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "sreesubbash"
        },
        "content": "    private Logic logic;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": "    private GameTimer gameTimer;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": "    private TimerDisplayCallBack timerDisplayCallBack;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": "    // Call-back method to update ResultDisplay in MainWindow"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": "    private HintDisplayCallBack hintDisplayCallBack;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": "    private MainWindowExecuteCallBack mainWindowExecuteCallBack;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": "    private GameStatisticsBuilder gameStatisticsBuilder;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": "    private QuestionDisplayCallBack questionDisplayCallBack;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": "    public AppManager(Logic logic) {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": "        requireAllNonNull(logic);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": "        this.logic \u003d logic;"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": "    }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": "    public void setGuiSettings(GuiSettings guiSettings) {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": "        logic.setGuiSettings(guiSettings);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": "    }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": "    private void setGameTimer(long timeAllowedPerQuestion, int hintFormatSize) {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": "        gameTimer \u003d GameTimer.getInstance(\"Time Left\", timeAllowedPerQuestion,"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": "                this::skipOverToNextQuestion,"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": "                this::updateTimerDisplay,"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": "                this::updateHints);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": "        if (logic.hintsAreEnabled()) {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": "            gameTimer.initHintTimingQueue(hintFormatSize, timeAllowedPerQuestion);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": "        }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": "    }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": "     * Checks if a GameTimer currently exists and terminates it if present."
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": "     */"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": "    private void abortAnyExistingGameTimer() {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": "        if (this.gameTimer !\u003d null) {"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": "            this.gameTimer.abortTimer();"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": "            this.gameTimer \u003d null;"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": "        }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": "    }"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": "     * Processes the input command commandText by passing it through the AppManager\u0027s main logic."
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "chrischenhui"
        },
        "content": "     *"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": "     * @param commandText The command as entered by the user."
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": "     * @return the result of the command execution."
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": "     * @throws CommandException If an error occurs during command execution."
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": "     * @throws ParseException   If an error occurs during parsing."
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": "     */"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": "    public CommandResult execute(String commandText) throws ParseException, CommandException {"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": "        CommandResult commandResult \u003d logic.execute(commandText);"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "jascxx"
        },
        "content": "        if (commandResult instanceof StartCommandResult) {"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "jascxx"
        },
        "content": "            StartCommandResult startCommandResult \u003d (StartCommandResult) commandResult;"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "jascxx"
        },
        "content": "            initGameStatistics(startCommandResult.getTitle()); // initialize game statistics building"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "jascxx"
        },
        "content": "        }"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "jascxx"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "jascxx"
        },
        "content": "        // handles game related actions"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "jascxx"
        },
        "content": "        if (commandResult instanceof GameCommandResult) {"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "jascxx"
        },
        "content": "            GameCommandResult gameCommandResult \u003d (GameCommandResult) commandResult;"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "jascxx"
        },
        "content": ""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "jascxx"
        },
        "content": "            // update statistics upon receiving a GameCommandResult with a Card"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "jascxx"
        },
        "content": "            if (gameCommandResult.getCard().isPresent()) {"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "jascxx"
        },
        "content": "                gameStatisticsBuilder.addDataPoint(gameCommandResult.getGameDataPoint(gameTimer.getElapsedMillis()),"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "jascxx"
        },
        "content": "                        gameCommandResult.getCard().get());"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "jascxx"
        },
        "content": "            }"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "jascxx"
        },
        "content": "            // should make logic save the updated game statistics"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "jascxx"
        },
        "content": "            if (gameCommandResult.isFinishedGame()) {"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "jascxx"
        },
        "content": "                abortAnyExistingGameTimer();"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "jascxx"
        },
        "content": "                logic.saveUpdatedWbStatistics(gameStatisticsBuilder.build());"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "jascxx"
        },
        "content": "                logic.incrementPlay();"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "jascxx"
        },
        "content": "            }"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "jascxx"
        },
        "content": "        }"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "jascxx"
        },
        "content": ""
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": "        // GameTimerManager is always abort when a new command is entered while Game is running."
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": "        abortAnyExistingGameTimer();"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": ""
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": "        if (commandResult.isPromptingGuess()) {"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": "            setGameTimer(logic.getTimeAllowedPerQuestion(),"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": "                    logic.getHintFormatSizeFromCurrentGame());"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": "            Platform.runLater(() -\u003e {"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": "                this.questionDisplayCallBack.updateQuestionDisplay(logic.getCurrentQuestion());"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": "                gameTimer.run();"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": "            });"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": ""
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": "        }"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": ""
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": "        return commandResult;"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": "    }"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": ""
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "jascxx"
        },
        "content": "    public String getSelectedWbName() {"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "jascxx"
        },
        "content": "        return logic.getActiveWordBankStatistics().getWordBankName();"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "jascxx"
        },
        "content": "    }"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "jascxx"
        },
        "content": ""
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "sreesubbash"
        },
        "content": "    public Logic getLogic() {"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "sreesubbash"
        },
        "content": "        return logic;"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "sreesubbash"
        },
        "content": "    }"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "sreesubbash"
        },
        "content": ""
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "chrischenhui"
        },
        "content": "    public Storage getStorage() {"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "chrischenhui"
        },
        "content": "        return logic.getStorage();"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "chrischenhui"
        },
        "content": "    }"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "chrischenhui"
        },
        "content": ""
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "jascxx"
        },
        "content": "    public ReadOnlyWordBank getActiveWordBank() {"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "jascxx"
        },
        "content": "        return logic.getActiveWordBank();"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "jascxx"
        },
        "content": "    }"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "jascxx"
        },
        "content": ""
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "dragontho"
        },
        "content": "    public AppSettings getAppSettings() {"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "dragontho"
        },
        "content": "        return logic.getAppSettings();"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "dragontho"
        },
        "content": "    }"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "dragontho"
        },
        "content": ""
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "jascxx"
        },
        "content": "    public GameStatistics getGameStatistics() {"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "jascxx"
        },
        "content": "        return gameStatisticsBuilder.build();"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "jascxx"
        },
        "content": "    }"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "jascxx"
        },
        "content": ""
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "jascxx"
        },
        "content": "    public void initGameStatistics(String title) {"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "jascxx"
        },
        "content": "        gameStatisticsBuilder \u003d new GameStatisticsBuilder(title);"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "jascxx"
        },
        "content": "    }"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "jascxx"
        },
        "content": ""
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "jascxx"
        },
        "content": "    public WordBankStatistics getActiveWordBankStatistics() {"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "jascxx"
        },
        "content": "        return logic.getActiveWordBankStatistics();"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "jascxx"
        },
        "content": "    }"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "jascxx"
        },
        "content": ""
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "jascxx"
        },
        "content": "    public WordBankStatisticsList getActiveWordBankStatisticsList() {"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "jascxx"
        },
        "content": "        return logic.getWordBankStatisticsList();"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "jascxx"
        },
        "content": "    }"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "jascxx"
        },
        "content": ""
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "jascxx"
        },
        "content": "    public GlobalStatistics getGlobalStatistics() {"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "jascxx"
        },
        "content": "        return logic.getGlobalStatistics();"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "jascxx"
        },
        "content": "    }"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "jascxx"
        },
        "content": ""
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": "    public ObservableList\u003cCard\u003e getFilteredPersonList() {"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": "        return logic.getFilteredPersonList();"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": "    }"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": ""
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "sreesubbash"
        },
        "content": "    public ObservableList\u003cWordBank\u003e getFilteredWordBankList() {"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "sreesubbash"
        },
        "content": "        return logic.getFilteredWordBankList();"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "sreesubbash"
        },
        "content": "    }"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "sreesubbash"
        },
        "content": ""
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": "    public GuiSettings getGuiSettings() {"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": "        return logic.getGuiSettings();"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": "    }"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": ""
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": "    public Path getAddressBookFilePath() {"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": "        return logic.getAddressBookFilePath();"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": "    }"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": ""
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": "    // \u003c---------------------------------------- CallBacks to Pass Into Timer------------------------------------\u003e"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": ""
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": "    private void updateHints() {"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": "        this.hintDisplayCallBack.updateHintDisplay(this.logic.getHintFormatFromCurrentGame().toString());"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": "    }"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": ""
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": "    private void updateTimerDisplay(String timerMessage, long timeLeft, long totalTimeGiven) {"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": "        this.timerDisplayCallBack.updateTimerDisplay(timerMessage, timeLeft, totalTimeGiven);"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": "    }"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": ""
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": "     * Calls-back to the UI to simulate a `skip` command being passed into the program."
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": "     */"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": "    private void skipOverToNextQuestion() {"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": "            this.mainWindowExecuteCallBack.execute(\"skip\");"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": "        } catch (ParseException e) {"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": "            e.printStackTrace();"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": "        } catch (CommandException e) {"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": "            e.printStackTrace();"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": "        }"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": "    }"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": ""
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": "    // \u003c---Methods to register UI components to be called back by AppManager-------------------------------------\u003e"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": ""
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": "     * Registers a method that will be called by the AppManager to update the UI\u0027s TimerDisplay"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": "     * @param updateTimerDisplay Method to register."
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": "     */"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": "    public void registerTimerDisplayCallBack(TimerDisplayCallBack updateTimerDisplay) {"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": "        requireAllNonNull(updateTimerDisplay);"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": "        this.timerDisplayCallBack \u003d updateTimerDisplay;"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": "    }"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": ""
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": "     * Registers a method that will be called by the AppManager to update the UI\u0027s HintDisplay"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": "     * @param updateHintDisplay Method to register."
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": "     */"
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": "    public void registerHintDisplayCallBack(HintDisplayCallBack updateHintDisplay) {"
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": "        requireAllNonNull(updateHintDisplay);"
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": "        this.hintDisplayCallBack \u003d updateHintDisplay;"
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": "    }"
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": ""
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": "     * Registers a method that will be called by the AppManager to simulate a \u0027skip\u0027 command as though"
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": "     * it were a user."
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": "     * @param mainWindowExecuteCallBack Method to register."
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": "     */"
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": "    public void registerMainWindowExecuteCallBack(MainWindowExecuteCallBack mainWindowExecuteCallBack) {"
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": "        requireAllNonNull(mainWindowExecuteCallBack);"
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": "        this.mainWindowExecuteCallBack \u003d mainWindowExecuteCallBack;"
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": "    }"
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": ""
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": "     * Registers a method that will be called by the AppManager to up the UI\u0027s QuestionDisplay."
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": "     * @param questionDisplayCallBack Method to register."
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": "     */"
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": "    public void registerQuestionDisplayCallBack(QuestionDisplayCallBack questionDisplayCallBack) {"
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": "        requireAllNonNull(questionDisplayCallBack);"
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": "        this.questionDisplayCallBack \u003d questionDisplayCallBack;"
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": "    }"
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": ""
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": "     * Call-back functional interface for the AppManager to periodically update the TimerDisplay"
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": "     * component of the UI."
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": "     */"
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": "    @FunctionalInterface"
      },
      {
        "lineNumber": 248,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": "    public interface TimerDisplayCallBack {"
      },
      {
        "lineNumber": 249,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": "        void updateTimerDisplay(String timerMessage, long timeLeft, long totalTimeGiven);"
      },
      {
        "lineNumber": 250,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": "    }"
      },
      {
        "lineNumber": 251,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": ""
      },
      {
        "lineNumber": 252,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 253,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": "     * Call-back functional interface from AppManager to MainWindow to update the HintDisplay"
      },
      {
        "lineNumber": 254,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": "     * component of the UI."
      },
      {
        "lineNumber": 255,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": "     */"
      },
      {
        "lineNumber": 256,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": "    @FunctionalInterface"
      },
      {
        "lineNumber": 257,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": "    public interface HintDisplayCallBack {"
      },
      {
        "lineNumber": 258,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": "        void updateHintDisplay(String message);"
      },
      {
        "lineNumber": 259,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": "    }"
      },
      {
        "lineNumber": 260,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": ""
      },
      {
        "lineNumber": 261,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 262,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": "     * Call-back functional interface from AppManager to MainWindow, represents the AppManager sending"
      },
      {
        "lineNumber": 263,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": "     * a command to the app as though it were another user."
      },
      {
        "lineNumber": 264,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": "     */"
      },
      {
        "lineNumber": 265,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": "    @FunctionalInterface"
      },
      {
        "lineNumber": 266,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": "    public interface MainWindowExecuteCallBack {"
      },
      {
        "lineNumber": 267,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": "        CommandResult execute(String commandText) throws ParseException, CommandException;"
      },
      {
        "lineNumber": 268,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": "    }"
      },
      {
        "lineNumber": 269,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": ""
      },
      {
        "lineNumber": 270,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 271,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": "     * Call-back functional interface from AppManager to MainWindow to update the QuestionDisplay component"
      },
      {
        "lineNumber": 272,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": "     * of the UI."
      },
      {
        "lineNumber": 273,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": "     */"
      },
      {
        "lineNumber": 274,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": "    @FunctionalInterface"
      },
      {
        "lineNumber": 275,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": "    public interface QuestionDisplayCallBack {"
      },
      {
        "lineNumber": 276,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": "        void updateQuestionDisplay(String message);"
      },
      {
        "lineNumber": 277,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": "    }"
      },
      {
        "lineNumber": 278,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": ""
      },
      {
        "lineNumber": 279,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "dragontho": 5,
      "sreesubbash": 10,
      "jascxx": 57,
      "chrischenhui": 7,
      "kohyida1997": 200
    }
  },
  {
    "path": "src/main/java/seedu/address/appmanager/timer/GameTimer.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": "package seedu.address.appmanager.timer;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": " * API for GameTimer, specifies the required methods for a GameTimer to operate as intended with AppManager"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": "public interface GameTimer extends Runnable {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": "    void abortTimer();"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": "    void run();"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": "    long getElapsedMillis();"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": "    void initHintTimingQueue(int hintFormatSize, long timeAllowedPerQuestion);"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": "    static GameTimer getInstance(String mainMessage, long totalDurationAllowed,"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": "                                 SkipOverCallBack skipOverCallBack,"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": "                                 UpdateTimerCallBack updateTimerCallBack,"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": "                                 UpdateHintCallBack updateHintCallBack) {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": "        return new GameTimerManager(mainMessage, totalDurationAllowed,"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": "                skipOverCallBack, updateTimerCallBack, updateHintCallBack);"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": "    }"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": "     * Call-back method from GameTimer to AppManager to Update Hints"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": "     */"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": "    @FunctionalInterface"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": "    interface UpdateHintCallBack {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": "        void requestHint();"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": "     * Call-back method from GameTimer to AppManager to Skip over to next question"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": "     */"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": "    @FunctionalInterface"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": "    interface SkipOverCallBack {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": "        void skipOverToNextQuestion();"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": "     * Call-back method from GameTimer to AppManager to update the Timer Display in UI"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": "     */"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": "    @FunctionalInterface"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": "    interface UpdateTimerCallBack {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": "        void updateTimerDisplay(String timerMessage, long timeLeft, long totalTimeGiven);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": "    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "kohyida1997": 48
    }
  },
  {
    "path": "src/main/java/seedu/address/appmanager/timer/GameTimerManager.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": "package seedu.address.appmanager.timer;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": "import java.util.Timer;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": "import java.util.TimerTask;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": "import javafx.application.Platform;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": "/**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": " * Represents a countdown timer that runs during a Game session (if enabled)."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": " */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": "public class GameTimerManager implements GameTimer {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": "    private Timer timer;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": "    private long totalTimeGiven; // the initial time allocated for the timer."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": "    private long timeLeft; // the time left of this timer, updated by the timer."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": "    private String mainMessage;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": "    private SkipOverCallBack skipOverCallBack;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": "    private UpdateTimerCallBack updateTimerCallBack;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": "    private UpdateHintCallBack updateHintCallBack;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": "    private boolean cancelled \u003d false;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": "    // By default no hints (and by extension by HintTimingQueue) are provided."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": "    private HintTimingQueue hintTimingQueue \u003d null;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": "    // If no hints are enabled, nextTimeForHint is set at -1 (placeholder for null)."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": "    private long nextTimeForHint \u003d -100L;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": "     * Creates a new GameTimerManager instance, but does not run it yet."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": "     *"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": "     * @param mainMessage String of the message intended to be shown on UI."
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": "     * @param durationInMs Duration that the Timer runs for, in milliseconds."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": "     * @param skipOverCallBack call-back function to send \u0027skip\" command back to MainWindow."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": "     */"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": "    public GameTimerManager(String mainMessage, long durationInMs,"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": "                            SkipOverCallBack skipOverCallBack,"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": "                            UpdateTimerCallBack updateTimerCallBack,"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": "                            UpdateHintCallBack updateHintCallBack) {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": "        this.mainMessage \u003d mainMessage;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": "        this.skipOverCallBack \u003d skipOverCallBack;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": "        this.updateTimerCallBack \u003d updateTimerCallBack;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": "        this.updateHintCallBack \u003d updateHintCallBack;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": "        this.totalTimeGiven \u003d durationInMs;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": "        this.timeLeft \u003d totalTimeGiven;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": "        // Mark this Timer thread as Daemon or else Java won\u0027t exit properly."
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": "        this.timer \u003d new Timer(true);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": "     * Aborts the current timer even if it has not finished running."
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": "     */"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": "    public void abortTimer() {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": "        cancelled \u003d true;"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": "        this.timer.cancel();"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": "        if (!Thread.currentThread().getName().equals(\"JavaFX Application Thread\")) {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": "            // Ensuring any changes to UI are always called from JavaFX Application Thread."
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": "            Platform.runLater(() -\u003e"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": "                    updateTimerCallBack.updateTimerDisplay(\"\", 0, totalTimeGiven));"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": "            return;"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": "        }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": "        updateTimerCallBack.updateTimerDisplay(\"\", 0, totalTimeGiven);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": "    }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": "     * Starts the timer and updates the JavaFX UI periodically."
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": "     * Runs on same thread as JavaFX UI."
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": "     */"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": "    public void run() {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": "        timer.schedule(new TimerTask() {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": "            public void run() {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": "                Platform.runLater(() -\u003e {"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": "                    /* Guard block to prevent concurrency issues. Timer.cancel() has no"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": "                     * real time guarantee."
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": "                     */"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": "                    if (cancelled) {"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": "                        return;"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": "                    }"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": "                    if (timeLeft \u003e\u003d 0) {"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": "                        callBackToUpdateTimerDisplay();"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": "                    }"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": "                    // When timeLeft has reached a timeStamp to request for more hints from AppManager."
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": "                    if (nextTimeForHint !\u003d -100L \u0026\u0026 nextTimeForHint \u003d\u003d timeLeft) {"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": "                        callBackToUpdateHints();"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": "                    }"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": "                    if (timeLeft \u003c 0) {"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": "                        stopAndCallBackToSkipOver();"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": "                    }"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": "                    --timeLeft;"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": "                });"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": "            }"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": "        }, 0, 1); // Start timer immediately, and refresh every 1ms"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": "    }"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": ""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": "     * Performs a callBack to AppManager to notify that TimerDisplay needs to be updated."
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": "     */"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": "    private void callBackToUpdateTimerDisplay() {"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": "        updateTimerCallBack.updateTimerDisplay("
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": "                mainMessage + \": \" + ((double) timeLeft) / 1000,"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": "                timeLeft, totalTimeGiven);"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": "    }"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": ""
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": "     * Stops the current TimerTask and performs a callBack to AppManager to simulate a skip command."
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": "     */"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": "    private void stopAndCallBackToSkipOver() {"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": "        cancelled \u003d true;"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": "        timer.cancel();"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": ""
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": "        // Makes a call-back to the AppManager to execute a \u0027skip\u0027 command"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": "        skipOverCallBack.skipOverToNextQuestion();"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": ""
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": "    }"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": ""
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": "     * Performs a callback to AppManager requesting for more hints to be shown."
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": "     */"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": "    private void callBackToUpdateHints() {"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": "        updateHintCallBack.requestHint();"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": "        nextTimeForHint \u003d"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": "                hintTimingQueue.isEmpty() ? -100L : hintTimingQueue.pollNextTimeToUpdate();"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": "    }"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": ""
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": "     * Returns the total duration that the current timer task has elapsed."
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": "     */"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": "    public long getElapsedMillis() {"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": "        return totalTimeGiven - timeLeft;"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": "    }"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": ""
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": "     * Initializes the queue of timestamps to request for hints based on the {@code hintFormatSize}"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": "     * and {@code timeAllowedPerQuestion}."
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": "     */"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": "    public void initHintTimingQueue(int hintFormatSize, long timeAllowedPerQuestion) {"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": "        this.hintTimingQueue \u003d new HintTimingQueue(hintFormatSize, timeAllowedPerQuestion);"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": "        nextTimeForHint \u003d hintTimingQueue.pollNextTimeToUpdate();"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": "    }"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": ""
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "kohyida1997": 142
    }
  },
  {
    "path": "src/main/java/seedu/address/appmanager/timer/HintTimingQueue.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": "package seedu.address.appmanager.timer;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": "import java.util.LinkedList;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": "import java.util.Queue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": "import seedu.address.model.appsettings.DifficultyEnum;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": "/**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": " * Class that represents a queue of timestamps for the GameTimer to request for more hints."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": " */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": "public class HintTimingQueue {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": "    private Queue\u003cLong\u003e hintTimesQueue;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": "    HintTimingQueue(int hintFormatSize, long timeAllowedPerQuestion) {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": "        this.hintTimesQueue \u003d new LinkedList\u003c\u003e();"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": "        int numberOfTimings \u003d hintFormatSize;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": "        if (hintFormatSize \u003d\u003d 1) {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": "            hintTimesQueue.add(50L);"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": "            return;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": "        }"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": "        // Rate of Hint Characters being shown is linear (time between each hint character is constant)."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": "        // Hints are only showed after 1/4 * 8000ms have passed."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": "        long delta \u003d"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": "                (long) (DifficultyEnum.EASY.getTimeAllowedPerQuestion() * 0.75) / (numberOfTimings - 1);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": "        // Populate the hintTimesQueue with timings that are evenly spaced out."
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": "        for (int i \u003d 0; i \u003c numberOfTimings; i++) {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": "            long currentTiming \u003d (long) (timeAllowedPerQuestion * 0.75) - (i * delta);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": "            if (currentTiming \u003c\u003d 0) {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": "                hintTimesQueue.add(50L); // Last Hint Shown at 50ms"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": "                hintTimesQueue.add(currentTiming);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": "            }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": "        }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": "    public long pollNextTimeToUpdate() {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": "        return hintTimesQueue.poll();"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": "    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": "    public boolean isEmpty() {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": "        return hintTimesQueue.isEmpty();"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": "    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "kohyida1997": 48
    }
  },
  {
    "path": "src/main/java/seedu/address/commons/core/Messages.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.commons.core;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": " * Container for user visible messages."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "public class Messages {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "chrischenhui"
        },
        "content": "    public static final String MESSAGE_UNKNOWN_COMMAND \u003d \"Dukemon doesn\u0027t understand :(\";"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "chrischenhui"
        },
        "content": "    public static final String MESSAGE_INVALID_COMMAND_FORMAT \u003d \"Try again with the format: \\n%1$s\";"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "chrischenhui"
        },
        "content": "    public static final String MESSAGE_INVALID_CARD_DISPLAYED_INDEX \u003d \"Opps, invalid index!\";"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "chrischenhui"
        },
        "content": "    public static final String MESSAGE_DUPLICATE_WORD_BANK_NAME \u003d \"Opps, duplicate name!\";"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "chrischenhui"
        },
        "content": "    public static final String MESSAGE_INVALID_WORD_BANK_NAME \u003d \"Opps, invalid word bank name!\";"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "jascxx"
        },
        "content": "    public static final String MESSAGE_CARDS_LISTED_OVERVIEW \u003d \"%1$d cards listed!\";"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "chrischenhui"
        },
        "content": "    public static final String MESSAGE_DUPLICATE_CARD \u003d \"%1$d cards listed!\";"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "jascxx": 1,
      "chrischenhui": 6,
      "-": 9
    }
  },
  {
    "path": "src/main/java/seedu/address/commons/core/index/Index.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.commons.core.index;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": " * Represents a zero-based or one-based index."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": " *"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": " * {@code Index} should be used right from the start (when parsing in a new user input), so that if the current"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": " * component wants to communicate with another component, it can send an {@code Index} to avoid having to know what"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": " * base the other component is using for its index. However, after receiving the {@code Index}, that component can"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": " * convert it back to an int if the index will not be passed to a different component again."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "public class Index {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    private int zeroBasedIndex;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "     * Index can only be created by calling {@link Index#fromZeroBased(int)} or"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "     * {@link Index#fromOneBased(int)}."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    private Index(int zeroBasedIndex) {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "        if (zeroBasedIndex \u003c 0) {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new IndexOutOfBoundsException();"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "        this.zeroBasedIndex \u003d zeroBasedIndex;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    public int getZeroBased() {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        return zeroBasedIndex;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    public int getOneBased() {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        return zeroBasedIndex + 1;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "jascxx"
        },
        "content": "    public void increment() {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "jascxx"
        },
        "content": "        ++zeroBasedIndex;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "jascxx"
        },
        "content": "    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "jascxx"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "jascxx"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "     * Creates a new {@code Index} using a zero-based index."
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    public static Index fromZeroBased(int zeroBasedIndex) {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        return new Index(zeroBasedIndex);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "     * Creates a new {@code Index} using a one-based index."
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    public static Index fromOneBased(int oneBasedIndex) {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "        return new Index(oneBasedIndex - 1);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "                || (other instanceof Index // instanceof handles nulls"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "                \u0026\u0026 zeroBasedIndex \u003d\u003d ((Index) other).zeroBasedIndex); // state check"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "jascxx": 5,
      "-": 54
    }
  },
  {
    "path": "src/main/java/seedu/address/commons/util/FileUtil.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.commons.util;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Files;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.InvalidPathException;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Paths;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": " * Writes and reads files"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "public class FileUtil {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String CHARSET \u003d \"UTF-8\";"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    public static boolean isFileExists(Path file) {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "        return Files.exists(file) \u0026\u0026 Files.isRegularFile(file);"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns true if {@code path} can be converted into a {@code Path} via {@link Paths#get(String)},"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "     * otherwise returns false."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param path A string representing the file path. Cannot be null."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    public static boolean isValidPath(String path) {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "            Paths.get(path);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (InvalidPathException ipe) {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        return true;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "     * Creates a file if it does not exist along with its missing parent directories."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws IOException if the file or directory cannot be created."
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    public static void createIfMissing(Path file) throws IOException {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!isFileExists(file)) {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "            createFile(file);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "     * Creates a file if it does not exist along with its missing parent directories."
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    public static void createFile(Path file) throws IOException {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        if (Files.exists(file)) {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "            return;"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        createParentDirsOfFile(file);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "        Files.createFile(file);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "     * Creates parent directories of file if it has a parent directory"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    public static void createParentDirsOfFile(Path file) throws IOException {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "        Path parentDir \u003d file.getParent();"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "        if (parentDir !\u003d null) {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "            Files.createDirectories(parentDir);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "     * Assumes file exists"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "    public static String readFromFile(Path file) throws IOException {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "        return new String(Files.readAllBytes(file), CHARSET);"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "     * Writes given string to a file."
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "     * Will create the file if it does not exist yet."
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "    public static void writeToFile(Path file, String content) throws IOException {"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "        Files.write(file, content.getBytes(CHARSET));"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "jascxx"
        },
        "content": "    public static String getJustFileName(String str) {"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "jascxx"
        },
        "content": "        String[] split1 \u003d str.split(\"/\");"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "jascxx"
        },
        "content": "        String fileNameWithExt \u003d split1[split1.length - 1];"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "jascxx"
        },
        "content": "        return fileNameWithExt.replaceFirst(\"[.][^.]+$\", \"\");"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "jascxx"
        },
        "content": "    }"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "jascxx"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "jascxx": 6,
      "-": 83
    }
  },
  {
    "path": "src/main/java/seedu/address/commons/util/JsonUtil.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.commons.util;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Files;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.logging.Level;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import com.fasterxml.jackson.annotation.JsonAutoDetect;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import com.fasterxml.jackson.annotation.PropertyAccessor;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import com.fasterxml.jackson.core.JsonProcessingException;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import com.fasterxml.jackson.databind.DeserializationContext;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import com.fasterxml.jackson.databind.DeserializationFeature;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "import com.fasterxml.jackson.databind.ObjectMapper;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "import com.fasterxml.jackson.databind.SerializationFeature;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "import com.fasterxml.jackson.databind.deser.std.FromStringDeserializer;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "import com.fasterxml.jackson.databind.module.SimpleModule;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "import com.fasterxml.jackson.databind.ser.std.ToStringSerializer;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.exceptions.DataConversionException;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": " * Converts a Java object instance to JSON and vice versa"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "public class JsonUtil {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final Logger logger \u003d LogsCenter.getLogger(JsonUtil.class);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    private static ObjectMapper objectMapper \u003d new ObjectMapper().findAndRegisterModules()"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "            .configure(SerializationFeature.WRITE_DATES_AS_TIMESTAMPS, false)"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "            .configure(DeserializationFeature.FAIL_ON_UNKNOWN_PROPERTIES, false)"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "            .setVisibility(PropertyAccessor.ALL, JsonAutoDetect.Visibility.NONE)"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "            .setVisibility(PropertyAccessor.FIELD, JsonAutoDetect.Visibility.ANY)"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "            .registerModule(new SimpleModule(\"SimpleModule\")"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "                    .addSerializer(Level.class, new ToStringSerializer())"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "                    .addDeserializer(Level.class, new LevelDeserializer(Level.class)));"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    static \u003cT\u003e void serializeObjectToJsonFile(Path jsonFile, T objectToSerialize) throws IOException {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        FileUtil.writeToFile(jsonFile, toJsonString(objectToSerialize));"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    static \u003cT\u003e T deserializeObjectFromJsonFile(Path jsonFile, Class\u003cT\u003e classOfObjectToDeserialize)"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "            throws IOException {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        return fromJsonString(FileUtil.readFromFile(jsonFile), classOfObjectToDeserialize);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns the Json object from the given file or {@code Optional.empty()} object if the file is not found."
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "     * If any values are missing from the file, default values will be used, as long as the file is a valid json file."
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "chrischenhui"
        },
        "content": "     *"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param filePath cannot be null."
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param classOfObjectToDeserialize Json file has to correspond to the structure in the class given here."
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws DataConversionException if the file format is not as expected."
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    public static \u003cT\u003e Optional\u003cT\u003e readJsonFile("
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "            Path filePath, Class\u003cT\u003e classOfObjectToDeserialize) throws DataConversionException {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(filePath);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!Files.exists(filePath)) {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "            logger.info(\"Json file \" + filePath + \" not found\");"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "            return Optional.empty();"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "        T jsonFile;"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "            jsonFile \u003d deserializeObjectFromJsonFile(filePath, classOfObjectToDeserialize);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "            logger.warning(\"Error reading from jsonFile file \" + filePath + \": \" + e);"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new DataConversionException(e);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "        return Optional.of(jsonFile);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "     * Saves the Json object to the specified file."
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "     * Overwrites existing file if it exists, creates a new file if it doesn\u0027t."
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param jsonFile cannot be null"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param filePath cannot be null"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws IOException if there was an error during writing to the file"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "    public static \u003cT\u003e void saveJsonFile(T jsonFile, Path filePath) throws IOException {"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(filePath);"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(jsonFile);"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "        serializeObjectToJsonFile(filePath, jsonFile);"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "     * Converts a given string representation of a JSON data to instance of a class"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param \u003cT\u003e The generic type to create an instance of"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "     * @return The instance of T with the specified values in the JSON string"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "    public static \u003cT\u003e T fromJsonString(String json, Class\u003cT\u003e instanceClass) throws IOException {"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "        return objectMapper.readValue(json, instanceClass);"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "     * Converts a given instance of a class into its JSON data string representation"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param instance The T object to be converted into the JSON string"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param \u003cT\u003e The generic type to create an instance of"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "     * @return JSON data representation of the given class instance, in string"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "    public static \u003cT\u003e String toJsonString(T instance) throws JsonProcessingException {"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "        return objectMapper.writerWithDefaultPrettyPrinter().writeValueAsString(instance);"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "     * Contains methods that retrieve logging level from serialized string."
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "    private static class LevelDeserializer extends FromStringDeserializer\u003cLevel\u003e {"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "        protected LevelDeserializer(Class\u003c?\u003e vc) {"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "            super(vc);"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "        protected Level _deserialize(String value, DeserializationContext ctxt) {"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "            return getLoggingLevel(value);"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "        /**"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "         * Gets the logging level that matches loggingLevelString"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "         * \u003cp\u003e"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "         * Returns null if there are no matches"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "         *"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "         */"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "        private Level getLoggingLevel(String loggingLevelString) {"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "            return Level.parse(loggingLevelString);"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": "        public Class\u003cLevel\u003e handledType() {"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": "            return Level.class;"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "chrischenhui": 1,
      "-": 142
    }
  },
  {
    "path": "src/main/java/seedu/address/commons/util/StringUtil.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.commons.util;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.commons.util.AppUtil.checkArgument;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.PrintWriter;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.StringWriter;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": " * Helper functions for handling strings."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "public class StringUtil {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns true if the {@code sentence} contains the {@code word}."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "     *   Ignores case, but a full word match is required."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "     *   \u003cbr\u003eexamples:\u003cpre\u003e"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "     *       containsWordIgnoreCase(\"ABc def\", \"abc\") \u003d\u003d true"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "     *       containsWordIgnoreCase(\"ABc def\", \"DEF\") \u003d\u003d true"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "     *       containsWordIgnoreCase(\"ABc def\", \"AB\") \u003d\u003d false //not a full word match"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "     *       \u003c/pre\u003e"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param sentence cannot be null"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param word cannot be null, cannot be empty, must be a single word"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    public static boolean containsWordIgnoreCase(String sentence, String word) {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(sentence);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(word);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "        String preppedWord \u003d word.trim();"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        checkArgument(!preppedWord.isEmpty(), \"Word parameter cannot be empty\");"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        checkArgument(preppedWord.split(\"\\\\s+\").length \u003d\u003d 1, \"Word parameter should be a single word\");"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        String preppedSentence \u003d sentence;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "        String[] wordsInPreppedSentence \u003d preppedSentence.split(\"\\\\s+\");"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        return Arrays.stream(wordsInPreppedSentence)"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "                .anyMatch(preppedWord::equalsIgnoreCase);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "jascxx"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "jascxx"
        },
        "content": "     * Returns true if the {@code sentence} starts with the {@code word}."
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "jascxx"
        },
        "content": "     *   Ignores case."
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "jascxx"
        },
        "content": "     *   \u003cbr\u003eexamples:\u003cpre\u003e"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "jascxx"
        },
        "content": "     *       containsWordIgnoreCase(\"ABc def\", \"abc\") \u003d\u003d true"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "jascxx"
        },
        "content": "     *       containsWordIgnoreCase(\"ABc def\", \"AB\") \u003d\u003d true"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "jascxx"
        },
        "content": "     *       containsWordIgnoreCase(\"ABc def\", \"dE\") \u003d\u003d true"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "jascxx"
        },
        "content": "     *       \u003c/pre\u003e"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "jascxx"
        },
        "content": "     * @param sentence cannot be null"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "jascxx"
        },
        "content": "     * @param word cannot be null, cannot be empty"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "jascxx"
        },
        "content": "     */"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "jascxx"
        },
        "content": "    public static boolean startsWithIgnoreCase(String sentence, String word) {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "jascxx"
        },
        "content": "        requireNonNull(sentence);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "jascxx"
        },
        "content": "        requireNonNull(word);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "jascxx"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "jascxx"
        },
        "content": "        String preppedWord \u003d word.trim();"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "jascxx"
        },
        "content": "        checkArgument(!preppedWord.isEmpty(), \"Word parameter cannot be empty\");"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "jascxx"
        },
        "content": "        checkArgument(preppedWord.split(\"\\\\s+\").length \u003d\u003d 1, \"Word parameter should be a single word\");"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "jascxx"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "jascxx"
        },
        "content": "        String[] wordsInPreppedSentence \u003d sentence.split(\"\\\\s+\");"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "jascxx"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "jascxx"
        },
        "content": "        return Arrays.stream(wordsInPreppedSentence)"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "jascxx"
        },
        "content": "                .anyMatch(x -\u003e x.toLowerCase().startsWith(word.toLowerCase()));"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "jascxx"
        },
        "content": "    }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "jascxx"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "jascxx"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns a detailed message of the t, including the stack trace."
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "    public static String getDetails(Throwable t) {"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(t);"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "        StringWriter sw \u003d new StringWriter();"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "        t.printStackTrace(new PrintWriter(sw));"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "        return t.getMessage() + \"\\n\" + sw.toString();"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns true if {@code s} represents a non-zero unsigned integer"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "     * e.g. 1, 2, 3, ..., {@code Integer.MAX_VALUE} \u003cbr\u003e"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "     * Will return false for any other non-null string input"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "     * e.g. empty string, \"-1\", \"0\", \"+1\", and \" 2 \" (untrimmed), \"3 0\" (contains whitespace), \"1 a\" (contains letters)"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws NullPointerException if {@code s} is null."
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "    public static boolean isNonZeroUnsignedInteger(String s) {"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(s);"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "            int value \u003d Integer.parseInt(s);"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "            return value \u003e 0 \u0026\u0026 !s.startsWith(\"+\"); // \"+1\" is successfully parsed by Integer#parseInt(String)"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (NumberFormatException nfe) {"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "jascxx": 26,
      "-": 68
    }
  },
  {
    "path": "src/main/java/seedu/address/commons/util/UidGenerator.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jascxx"
        },
        "content": "package seedu.address.commons.util;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "jascxx"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "jascxx"
        },
        "content": "import java.util.Random;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "jascxx"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "dragontho"
        },
        "content": "/**"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "dragontho"
        },
        "content": " * Class that generates a valid Uid."
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "dragontho"
        },
        "content": " */"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "jascxx"
        },
        "content": "public class UidGenerator {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "jascxx"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "jascxx"
        },
        "content": "    public static final String VALID_CHARS \u003d \"abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ1234567890\""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "jascxx"
        },
        "content": "            + \"_!@#$%^\u0026*()-+\u003d|}{[]:;,.\u003c\u003e/?\";"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "jascxx"
        },
        "content": "    public static final int UID_LENGTH \u003d 32;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "jascxx"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "jascxx"
        },
        "content": "    public static String get() {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "jascxx"
        },
        "content": "        StringBuilder sb \u003d new StringBuilder();"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "jascxx"
        },
        "content": "        Random rand \u003d new Random();"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "jascxx"
        },
        "content": "        while (sb.length() \u003c UID_LENGTH) { // length of the random string."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "jascxx"
        },
        "content": "            int index \u003d rand.nextInt(VALID_CHARS.length());"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "jascxx"
        },
        "content": "            sb.append(VALID_CHARS.charAt(index));"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "jascxx"
        },
        "content": "        }"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "jascxx"
        },
        "content": "        return sb.toString();"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "jascxx"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "jascxx"
        },
        "content": "    }"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "jascxx"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "dragontho": 3,
      "jascxx": 21
    }
  },
  {
    "path": "src/main/java/seedu/address/game/Game.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "sreesubbash"
        },
        "content": "/*"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "sreesubbash"
        },
        "content": "Step 6"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "sreesubbash"
        },
        "content": "Construtor for new Game()"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "sreesubbash"
        },
        "content": " */"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "sreesubbash"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "sreesubbash"
        },
        "content": "/*"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "sreesubbash"
        },
        "content": "Step 15"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "sreesubbash"
        },
        "content": "Game needs to interface for:"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "sreesubbash"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "sreesubbash"
        },
        "content": "gameplay stuff:"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "sreesubbash"
        },
        "content": "start(), pause(), exit()"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "sreesubbash"
        },
        "content": "guess(String), pass()"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "sreesubbash"
        },
        "content": "*/"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "sreesubbash"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "sreesubbash"
        },
        "content": "/*"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "sreesubbash"
        },
        "content": "Step 16"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "sreesubbash"
        },
        "content": "Internally has to display on Ui. Hard to comment the flow here."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "sreesubbash"
        },
        "content": "Follow the code in this order of:"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "sreesubbash"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "sreesubbash"
        },
        "content": "Find command in FindCommand.java"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "sreesubbash"
        },
        "content": "updateFilteredPersonList(Predicate\u003cPerson\u003e predicate) in ModelManager.java"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "sreesubbash"
        },
        "content": "Somehow they used this javafx.collections.transformation.FilteredList;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "sreesubbash"
        },
        "content": "and displayed it using stuff in ui package"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "sreesubbash"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "sreesubbash"
        },
        "content": "(╯°□°)╯︵ ┻━┻"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "sreesubbash"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "sreesubbash"
        },
        "content": "Thats the overall flow. Get ready for Tuesdays hackathon."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "sreesubbash"
        },
        "content": "*/"
      }
    ],
    "authorContributionMap": {
      "sreesubbash": 28
    }
  },
  {
    "path": "src/main/java/seedu/address/game/GameInterface.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jascxx"
        },
        "content": "package seedu.address.game;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "jascxx"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "jascxx"
        },
        "content": "import seedu.address.model.card.Hint;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "jascxx"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "jascxx"
        },
        "content": "/**"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "jascxx"
        },
        "content": " * Interface for a game."
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "jascxx"
        },
        "content": " */"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "jascxx"
        },
        "content": "public interface GameInterface {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "jascxx"
        },
        "content": "    void startGame();"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "jascxx"
        },
        "content": "    void endGame();"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "jascxx"
        },
        "content": "    void skipCard();"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "jascxx"
        },
        "content": "    boolean guess(String input);"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "jascxx"
        },
        "content": "    Hint getHint();"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "jascxx"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "jascxx": 14
    }
  },
  {
    "path": "src/main/java/seedu/address/game/GameManager.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "sreesubbash"
        },
        "content": "/*"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "sreesubbash"
        },
        "content": "Step 7"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "sreesubbash"
        },
        "content": "Constructor for GameManager"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "sreesubbash"
        },
        "content": " */"
      }
    ],
    "authorContributionMap": {
      "sreesubbash": 4
    }
  },
  {
    "path": "src/main/java/seedu/address/game/ReadOnlyGame.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "sreesubbash"
        },
        "content": "/*"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "sreesubbash"
        },
        "content": "Step 5"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "sreesubbash"
        },
        "content": "Reference from sister file in model"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "sreesubbash"
        },
        "content": " */"
      }
    ],
    "authorContributionMap": {
      "sreesubbash": 4
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/Logic.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "sreesubbash"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "sreesubbash"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.GuiSettings;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.CommandResult;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "sreesubbash"
        },
        "content": "import seedu.address.logic.util.AutoFillAction;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "sreesubbash"
        },
        "content": "import seedu.address.logic.util.ModeEnum;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "chrischenhui"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "dragontho"
        },
        "content": "import seedu.address.model.appsettings.AppSettings;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "jascxx"
        },
        "content": "import seedu.address.model.card.Card;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": "import seedu.address.model.card.FormattedHint;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "jascxx"
        },
        "content": "import seedu.address.model.globalstatistics.GlobalStatistics;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "jascxx"
        },
        "content": "import seedu.address.model.wordbank.ReadOnlyWordBank;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "sreesubbash"
        },
        "content": "import seedu.address.model.wordbank.WordBank;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "jascxx"
        },
        "content": "import seedu.address.model.wordbankstatslist.WordBankStatisticsList;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "jascxx"
        },
        "content": "import seedu.address.statistics.GameStatistics;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "jascxx"
        },
        "content": "import seedu.address.statistics.WordBankStatistics;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "chrischenhui"
        },
        "content": "import seedu.address.storage.Storage;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": " * API of the Logic component"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "sreesubbash"
        },
        "content": "public interface Logic extends UiLogicHelper {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "     * Executes the command and returns the result."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param commandText The command as entered by the user."
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "     * @return the result of the command execution."
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws CommandException If an error occurs during command execution."
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws ParseException If an error occurs during parsing."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    CommandResult execute(String commandText) throws CommandException, ParseException;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns the AddressBook."
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "chrischenhui"
        },
        "content": "     * @see seedu.address.model.Model#getCurrenWordBank()"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "jascxx"
        },
        "content": "    ReadOnlyWordBank getAddressBook();"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    /** Returns an unmodifiable view of the filtered list of persons */"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "jascxx"
        },
        "content": "    ObservableList\u003cCard\u003e getFilteredPersonList();"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    /** Returns an unmodifiable view of the filtered list of persons */"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "sreesubbash"
        },
        "content": "    ObservableList\u003cWordBank\u003e getFilteredWordBankList();"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns the user prefs\u0027 address book file path."
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    Path getAddressBookFilePath();"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns the user prefs\u0027 GUI settings."
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    GuiSettings getGuiSettings();"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "     * Set the user prefs\u0027 GUI settings."
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "    void setGuiSettings(GuiSettings guiSettings);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "jascxx"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "jascxx"
        },
        "content": "    void saveUpdatedWbStatistics(GameStatistics gameStats) throws CommandException;"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "jascxx"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "jascxx"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "jascxx"
        },
        "content": "     * This method should be called every time a game finishes to correctly update global statistics"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "jascxx"
        },
        "content": "     */"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "jascxx"
        },
        "content": "    void incrementPlay() throws CommandException;"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "jascxx"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "jascxx"
        },
        "content": "    WordBankStatistics getActiveWordBankStatistics();"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "jascxx"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "jascxx"
        },
        "content": "    WordBankStatisticsList getWordBankStatisticsList();"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "jascxx"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "jascxx"
        },
        "content": "    GlobalStatistics getGlobalStatistics();"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "jascxx"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "jascxx"
        },
        "content": "    ReadOnlyWordBank getActiveWordBank();"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": "    long getTimeAllowedPerQuestion();"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "dragontho"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "dragontho"
        },
        "content": "    AppSettings getAppSettings();"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "dragontho"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": "    String getCurrentQuestion();"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "sreesubbash"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": "    FormattedHint getHintFormatFromCurrentGame();"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": "    int getHintFormatSizeFromCurrentGame();"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": "    boolean hintsAreEnabled();"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": ""
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": "    List\u003cAutoFillAction\u003e getMenuItems(String text);"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": ""
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": "    ModeEnum getMode();"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": ""
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": "    List\u003cModeEnum\u003e getModes();"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "sreesubbash"
        },
        "content": ""
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "chrischenhui"
        },
        "content": "    Storage getStorage();"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "chrischenhui"
        },
        "content": ""
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "chrischenhui"
        },
        "content": "    Model getModel();"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "sreesubbash": 9,
      "dragontho": 4,
      "jascxx": 23,
      "chrischenhui": 6,
      "kohyida1997": 15,
      "-": 47
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/LogicManager.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "dragontho"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "dragontho"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "sreesubbash"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "sreesubbash"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "sreesubbash"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.GuiSettings;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.Command;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.CommandResult;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "chrischenhui"
        },
        "content": "import seedu.address.logic.commands.cardcommands.CardCommandResult;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "chrischenhui"
        },
        "content": "import seedu.address.logic.commands.homecommands.HomeCommandResult;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "sreesubbash"
        },
        "content": "import seedu.address.logic.parser.ParserManager;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "sreesubbash"
        },
        "content": "import seedu.address.logic.util.AutoFillAction;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "sreesubbash"
        },
        "content": "import seedu.address.logic.util.ModeEnum;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "dragontho"
        },
        "content": "import seedu.address.model.appsettings.AppSettings;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "jascxx"
        },
        "content": "import seedu.address.model.card.Card;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": "import seedu.address.model.card.FormattedHint;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "jascxx"
        },
        "content": "import seedu.address.model.globalstatistics.GlobalStatistics;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "jascxx"
        },
        "content": "import seedu.address.model.wordbank.ReadOnlyWordBank;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "dragontho"
        },
        "content": "import seedu.address.model.wordbank.WordBank;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "jascxx"
        },
        "content": "import seedu.address.model.wordbankstatslist.WordBankStatisticsList;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "jascxx"
        },
        "content": "import seedu.address.statistics.GameStatistics;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "jascxx"
        },
        "content": "import seedu.address.statistics.WordBankStatistics;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.storage.Storage;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": " * The main LogicManager of the app."
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "sreesubbash"
        },
        "content": "public class LogicManager implements Logic, UiLogicHelper {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "jascxx"
        },
        "content": "    public static final String FILE_OPS_ERROR_MESSAGE \u003d \"File operation failed\";"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "sreesubbash"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    private final Logger logger \u003d LogsCenter.getLogger(LogicManager.class);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    private final Model model;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "chrischenhui"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    private final Storage storage;"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "sreesubbash"
        },
        "content": "    private final ParserManager parserManager;"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    public LogicManager(Model model, Storage storage) {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        this.model \u003d model;"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "        this.storage \u003d storage;"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "sreesubbash"
        },
        "content": "        parserManager \u003d new ParserManager();"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    public CommandResult execute(String commandText) throws CommandException, ParseException {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "        logger.info(\"----------------[USER COMMAND][\" + commandText + \"]\");"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "        CommandResult commandResult;"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "chrischenhui"
        },
        "content": "        parserManager.updateState(model.getHasBank(), model.gameIsOver());"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "sreesubbash"
        },
        "content": "        Command command \u003d parserManager.parseCommand(commandText);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "        commandResult \u003d command.execute(model);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "chrischenhui"
        },
        "content": "        parserManager.updateState(model.getHasBank(), model.gameIsOver());"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "jascxx"
        },
        "content": "        // todo need to save wordbankstatistics after deletion."
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "jascxx"
        },
        "content": "        // todo possible solution -\u003e just save on every command like how the word bank is saved."
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "jascxx"
        },
        "content": "        // todo currently, on deletion, the statistics is deleted on the model, and will be saved only if"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "jascxx"
        },
        "content": "        // todo a game is played with that word bank. If no game is played, and the app is closed, the statistics"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "jascxx"
        },
        "content": "        // todo will stay there forever..."
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "dragontho"
        },
        "content": "            if (getMode().equals(ModeEnum.SETTINGS)) {"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "dragontho"
        },
        "content": "                storage.saveAppSettings(model.getAppSettings(), model.getAppSettingsFilePath());"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "dragontho"
        },
        "content": "            }"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "chrischenhui"
        },
        "content": "            if (commandResult instanceof HomeCommandResult) {"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "chrischenhui"
        },
        "content": "                HomeCommandResult homeCommandResult \u003d (HomeCommandResult) commandResult;"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "chrischenhui"
        },
        "content": "                homeCommandResult.updateStorage(storage);"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "chrischenhui"
        },
        "content": "            }"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "chrischenhui"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "chrischenhui"
        },
        "content": "            if (commandResult instanceof CardCommandResult) {"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "chrischenhui"
        },
        "content": "                CardCommandResult cardCommandResult \u003d (CardCommandResult) commandResult;"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "dragontho"
        },
        "content": "                cardCommandResult.updateStorage(storage, (WordBank) model.getCurrentWordBank());"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "chrischenhui"
        },
        "content": "            }"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "chrischenhui"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (IOException ioe) {"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new CommandException(FILE_OPS_ERROR_MESSAGE + ioe, ioe);"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "        return commandResult;"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "jascxx"
        },
        "content": "    public ReadOnlyWordBank getAddressBook() {"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "dragontho"
        },
        "content": "        return model.getCurrentWordBank();"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "jascxx"
        },
        "content": "    public ObservableList\u003cCard\u003e getFilteredPersonList() {"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "jascxx"
        },
        "content": "        return model.getFilteredCardList();"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "sreesubbash"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "sreesubbash"
        },
        "content": "    public ObservableList\u003cWordBank\u003e getFilteredWordBankList() {"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "sreesubbash"
        },
        "content": "        return model.getFilteredWordBankList();"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "    public Path getAddressBookFilePath() {"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "jascxx"
        },
        "content": "        return model.getWordBankFilePath();"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "    public GuiSettings getGuiSettings() {"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "        return model.getGuiSettings();"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setGuiSettings(GuiSettings guiSettings) {"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "        model.setGuiSettings(guiSettings);"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "jascxx"
        },
        "content": ""
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "jascxx"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "jascxx"
        },
        "content": "    public void saveUpdatedWbStatistics(GameStatistics gameStatistics) throws CommandException {"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "jascxx"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "dragontho"
        },
        "content": "            WordBankStatistics currWbStats;"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "dragontho"
        },
        "content": "            if (model.getWordBankStatistics() \u003d\u003d null) {"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "dragontho"
        },
        "content": "                currWbStats \u003d WordBankStatistics.getEmpty(\"sample\");"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "dragontho"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "dragontho"
        },
        "content": "                currWbStats \u003d model.getWordBankStatistics();"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "dragontho"
        },
        "content": "            }"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "jascxx"
        },
        "content": "            currWbStats.update(gameStatistics, model.getCurrentGameDifficulty());"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "jascxx"
        },
        "content": ""
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "jascxx"
        },
        "content": "            Path targetPath \u003d Path.of(model.getUserPrefs().getDataFilePath().toString(), \"wbstats\","
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "jascxx"
        },
        "content": "                    currWbStats.getWordBankName() + \".json\");"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "jascxx"
        },
        "content": ""
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "jascxx"
        },
        "content": "            storage.saveWordBankStatistics(currWbStats, targetPath);"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "jascxx"
        },
        "content": "        } catch (IOException ioe) {"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "jascxx"
        },
        "content": "            throw new CommandException(FILE_OPS_ERROR_MESSAGE + ioe, ioe);"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "jascxx"
        },
        "content": "        }"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "jascxx"
        },
        "content": "    }"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "jascxx"
        },
        "content": ""
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "jascxx"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "jascxx"
        },
        "content": "    public void incrementPlay() throws CommandException {"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "jascxx"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "jascxx"
        },
        "content": "            requireNonNull(model.getGlobalStatistics());"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "jascxx"
        },
        "content": "            GlobalStatistics globalStats \u003d model.getGlobalStatistics();"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "jascxx"
        },
        "content": "            globalStats.addPlay();"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "jascxx"
        },
        "content": "            storage.saveGlobalStatistics(globalStats);"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "jascxx"
        },
        "content": "        } catch (IOException ioe) {"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "jascxx"
        },
        "content": "            throw new CommandException(FILE_OPS_ERROR_MESSAGE + ioe, ioe);"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "jascxx"
        },
        "content": "        }"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "jascxx"
        },
        "content": "    }"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "jascxx"
        },
        "content": ""
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "jascxx"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "jascxx"
        },
        "content": "    public WordBankStatistics getActiveWordBankStatistics() {"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "jascxx"
        },
        "content": "        return model.getWordBankStatistics();"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "jascxx"
        },
        "content": "    }"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": ""
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "jascxx"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "jascxx"
        },
        "content": "    public WordBankStatisticsList getWordBankStatisticsList() {"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "jascxx"
        },
        "content": "        return model.getWordBankStatisticsList();"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "jascxx"
        },
        "content": "    }"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "jascxx"
        },
        "content": ""
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "jascxx"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "jascxx"
        },
        "content": "    public GlobalStatistics getGlobalStatistics() {"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "jascxx"
        },
        "content": "        return model.getGlobalStatistics();"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "jascxx"
        },
        "content": "    }"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "jascxx"
        },
        "content": ""
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "jascxx"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "jascxx"
        },
        "content": "    public ReadOnlyWordBank getActiveWordBank() {"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "dragontho"
        },
        "content": "        return model.getCurrentWordBank();"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "jascxx"
        },
        "content": "    }"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "jascxx"
        },
        "content": ""
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": "    public long getTimeAllowedPerQuestion() {"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": "        return this.model.getTimeAllowedPerQuestion();"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": "    }"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": ""
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": "    public FormattedHint getHintFormatFromCurrentGame() {"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": "        return this.model.getHintFormatFromCurrentGame();"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": "    }"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": ""
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": "    public int getHintFormatSizeFromCurrentGame() {"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": "        return this.model.getHintFormatSizeFromCurrentGame();"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": "    }"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": ""
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": "    public boolean hintsAreEnabled() {"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": "        return model.getHintsEnabled();"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": "    }"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "sreesubbash"
        },
        "content": ""
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "sreesubbash"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "sreesubbash"
        },
        "content": "    public List\u003cAutoFillAction\u003e getMenuItems(String text) {"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "sreesubbash"
        },
        "content": "        return parserManager.getAutoFill(text);"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "sreesubbash"
        },
        "content": "    }"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "sreesubbash"
        },
        "content": ""
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "sreesubbash"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "sreesubbash"
        },
        "content": "    public ModeEnum getMode() {"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "sreesubbash"
        },
        "content": "        return parserManager.getMode();"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "sreesubbash"
        },
        "content": "    }"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "sreesubbash"
        },
        "content": ""
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "sreesubbash"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "sreesubbash"
        },
        "content": "    public List\u003cModeEnum\u003e getModes() {"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "sreesubbash"
        },
        "content": "        return parserManager.getModes();"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": "    }"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "dragontho"
        },
        "content": ""
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "dragontho"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "dragontho"
        },
        "content": "    public AppSettings getAppSettings() {"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "dragontho"
        },
        "content": "        return this.model.getAppSettings();"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "dragontho"
        },
        "content": "    }"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "dragontho"
        },
        "content": ""
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": "    public String getCurrentQuestion() {"
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": "        return model.getGame().getCurrQuestion();"
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": "    }"
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": ""
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "chrischenhui"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "chrischenhui"
        },
        "content": "    public Storage getStorage() {"
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "chrischenhui"
        },
        "content": "        return storage;"
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "chrischenhui"
        },
        "content": "    }"
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "chrischenhui"
        },
        "content": ""
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "chrischenhui"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "chrischenhui"
        },
        "content": "    public Model getModel() {"
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "chrischenhui"
        },
        "content": "        return model;"
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "chrischenhui"
        },
        "content": "    }"
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "dragontho": 22,
      "sreesubbash": 28,
      "jascxx": 61,
      "chrischenhui": 23,
      "kohyida1997": 28,
      "-": 69
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/UiLogicHelper.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "sreesubbash"
        },
        "content": "package seedu.address.logic;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "sreesubbash"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "sreesubbash"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "sreesubbash"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "sreesubbash"
        },
        "content": "import seedu.address.logic.util.AutoFillAction;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "sreesubbash"
        },
        "content": "import seedu.address.logic.util.ModeEnum;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "sreesubbash"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "sreesubbash"
        },
        "content": "/**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "sreesubbash"
        },
        "content": " * API of the Ui Logic Helper"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "sreesubbash"
        },
        "content": " */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "sreesubbash"
        },
        "content": "public interface UiLogicHelper {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "sreesubbash"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "sreesubbash"
        },
        "content": "    public List\u003cAutoFillAction\u003e getMenuItems(String text);"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "sreesubbash"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "sreesubbash"
        },
        "content": "    public ModeEnum getMode();"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "sreesubbash"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "sreesubbash"
        },
        "content": "    public List\u003cModeEnum\u003e getModes();"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "sreesubbash"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "sreesubbash"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "sreesubbash": 19
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/CardCommand.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "chrischenhui"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "chrischenhui"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "chrischenhui"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "chrischenhui"
        },
        "content": " * Represents a command executed on cards."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "chrischenhui"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "chrischenhui"
        },
        "content": "public abstract class CardCommand extends Command {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "chrischenhui"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "chrischenhui"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "chrischenhui": 8
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/CommandResult.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Objects;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": " * Represents the result of a command execution."
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "public class CommandResult {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "    private final String feedbackToUser;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "    /** Help information should be shown to the user. */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    private final boolean showHelp;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    /** The application should exit. */"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    private final boolean exit;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": "    /** The application is prompting a guess. */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": "    private final boolean promptsGuess;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "     * Constructs a {@code CommandResult} with the specified fields."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    public CommandResult(String feedbackToUser, boolean showHelp, boolean exit) {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "        this.feedbackToUser \u003d requireNonNull(feedbackToUser);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        this.showHelp \u003d showHelp;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        this.exit \u003d exit;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": "        this.promptsGuess \u003d false;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "     * Constructs a {@code CommandResult} with the specified {@code feedbackToUser},"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "     * and other fields set to their default value."
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    public CommandResult(String feedbackToUser) {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": "        this(feedbackToUser, false, false, false);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": "    public CommandResult(String feedbackToUser, boolean showHelp, boolean exit, boolean promptsGuess) {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": "        this.feedbackToUser \u003d requireNonNull(feedbackToUser);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": "        this.showHelp \u003d showHelp;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": "        this.exit \u003d exit;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": "        this.promptsGuess \u003d promptsGuess;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": "    public CommandResult(String feedbackToUser, boolean promptsGuess) {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "jascxx"
        },
        "content": "        this(feedbackToUser, false, false, promptsGuess);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    public String getFeedbackToUser() {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        return feedbackToUser;"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean isShowHelp() {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "        return showHelp;"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean isExit() {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "        return exit;"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": "    public boolean isPromptingGuess() {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": "        return promptsGuess;"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": "    }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "        if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "        // instanceof handles nulls"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!(other instanceof CommandResult)) {"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "        CommandResult otherCommandResult \u003d (CommandResult) other;"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "        return feedbackToUser.equals(otherCommandResult.feedbackToUser)"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "                \u0026\u0026 showHelp \u003d\u003d otherCommandResult.showHelp"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "                \u0026\u0026 exit \u003d\u003d otherCommandResult.exit;"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "        return Objects.hash(feedbackToUser, showHelp, exit);"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "jascxx": 1,
      "kohyida1997": 17,
      "-": 71
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/GameCommand.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "jascxx"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "chrischenhui"
        },
        "content": " * Represents a command executed on game."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "jascxx"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": "public abstract class GameCommand extends Command {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": "    protected static final String MESSAGE_NO_ACTIVE_GAME \u003d \"There is no active game!\";"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "jascxx": 2,
      "chrischenhui": 1,
      "kohyida1997": 5
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/HomeCommand.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "sreesubbash"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "sreesubbash"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "sreesubbash"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "sreesubbash"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "sreesubbash"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "sreesubbash"
        },
        "content": "/**"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "chrischenhui"
        },
        "content": " * Represents a command executed on banks."
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "sreesubbash"
        },
        "content": " */"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "chrischenhui"
        },
        "content": "public abstract class HomeCommand extends Command {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "sreesubbash"
        },
        "content": "    public abstract CommandResult execute(Model model) throws CommandException;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "sreesubbash"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "sreesubbash": 9,
      "chrischenhui": 2
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/SettingsCommand.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": " * Represents a settings command"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": "public abstract class SettingsCommand extends Command {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "kohyida1997": 8
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/SwitchCommand.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "sreesubbash"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "sreesubbash"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "sreesubbash"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "sreesubbash"
        },
        "content": "import seedu.address.logic.commands.exceptions.ModeSwitchException;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "sreesubbash"
        },
        "content": "import seedu.address.logic.util.ModeEnum;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "sreesubbash"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "sreesubbash"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "sreesubbash"
        },
        "content": "/**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "chrischenhui"
        },
        "content": " * Represents an app command"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "sreesubbash"
        },
        "content": " */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "sreesubbash"
        },
        "content": "public abstract class SwitchCommand extends Command {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "sreesubbash"
        },
        "content": "    public abstract CommandResult execute(Model model) throws CommandException;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "sreesubbash"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "sreesubbash"
        },
        "content": "    public abstract ModeEnum getNewMode(ModeEnum old) throws ModeSwitchException;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "sreesubbash"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "sreesubbash": 14,
      "chrischenhui": 1
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/cardcommands/AddCommand.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "chrischenhui"
        },
        "content": "package seedu.address.logic.commands.cardcommands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "jascxx"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "chrischenhui"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_DUPLICATE_CARD;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "sreesubbash"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_MEANING;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "jascxx"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_TAG;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "jascxx"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_WORD;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "jascxx"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "chrischenhui"
        },
        "content": "import seedu.address.logic.commands.CardCommand;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "sreesubbash"
        },
        "content": "import seedu.address.logic.commands.CommandResult;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "jascxx"
        },
        "content": "import seedu.address.model.card.Card;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "jascxx"
        },
        "content": " * Adds a card to the word bank."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "chrischenhui"
        },
        "content": "public class AddCommand extends CardCommand {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"add\";"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "chrischenhui"
        },
        "content": "    public static final String MESSAGE_SUCCESS \u003d \"New card added: %1$s\";"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "chrischenhui"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \" \""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "jascxx"
        },
        "content": "            + PREFIX_WORD + \"WORD \""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "jascxx"
        },
        "content": "            + PREFIX_MEANING + \"MEANING \""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "chrischenhui"
        },
        "content": "            + \"[\" + PREFIX_TAG + \"TAG] \\n\""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "chrischenhui"
        },
        "content": "            + \"Eg: \" + COMMAND_WORD + \" \""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "chrischenhui"
        },
        "content": "            + PREFIX_WORD + \"Charmander \""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "chrischenhui"
        },
        "content": "            + PREFIX_MEANING + \"Fire starter pokemon \""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "chrischenhui"
        },
        "content": "            + PREFIX_TAG + \"Fire\";"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "jascxx"
        },
        "content": "    private final Card toAdd;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "chrischenhui"
        },
        "content": "     * Creates an AddCommand to add the specified {@code Card}."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "jascxx"
        },
        "content": "    public AddCommand(Card card) {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "jascxx"
        },
        "content": "        requireNonNull(card);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "jascxx"
        },
        "content": "        toAdd \u003d card;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    public CommandResult execute(Model model) throws CommandException {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "jascxx"
        },
        "content": "        if (model.hasCard(toAdd)) {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "jascxx"
        },
        "content": "            throw new CommandException(MESSAGE_DUPLICATE_CARD);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "jascxx"
        },
        "content": "        model.addCard(toAdd);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "chrischenhui"
        },
        "content": "        return new CardCommandResult(String.format(MESSAGE_SUCCESS, toAdd));"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "                || (other instanceof AddCommand // instanceof handles nulls"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "                \u0026\u0026 toAdd.equals(((AddCommand) other).toAdd));"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "sreesubbash": 2,
      "jascxx": 15,
      "chrischenhui": 13,
      "-": 29
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/cardcommands/CardCommandResult.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "chrischenhui"
        },
        "content": "package seedu.address.logic.commands.cardcommands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "chrischenhui"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "chrischenhui"
        },
        "content": "import seedu.address.logic.commands.CommandResult;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "chrischenhui"
        },
        "content": "import seedu.address.model.card.Card;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "chrischenhui"
        },
        "content": "import seedu.address.model.wordbank.WordBank;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "chrischenhui"
        },
        "content": "import seedu.address.storage.Storage;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "chrischenhui"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "chrischenhui"
        },
        "content": "/**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "chrischenhui"
        },
        "content": " * Represents the command result returned by a card command."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "chrischenhui"
        },
        "content": " * This class is needed to pass some info to the {@code LogicManager} to update storage."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "chrischenhui"
        },
        "content": " */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "chrischenhui"
        },
        "content": "public class CardCommandResult extends CommandResult {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "chrischenhui"
        },
        "content": "    protected Card card;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "chrischenhui"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "chrischenhui"
        },
        "content": "    public CardCommandResult(String feedback) {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "chrischenhui"
        },
        "content": "        super(feedback);"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "chrischenhui"
        },
        "content": "    }"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "chrischenhui"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "chrischenhui"
        },
        "content": "    public void updateStorage(Storage storage, WordBank wordBank) {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "chrischenhui"
        },
        "content": "        storage.updateWordBank(wordBank);"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "chrischenhui"
        },
        "content": "    }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "chrischenhui"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "chrischenhui": 22
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/cardcommands/ClearCommand.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "chrischenhui"
        },
        "content": "package seedu.address.logic.commands.cardcommands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "jascxx"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "jascxx"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "chrischenhui"
        },
        "content": "import seedu.address.logic.commands.CardCommand;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "sreesubbash"
        },
        "content": "import seedu.address.logic.commands.CommandResult;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "chrischenhui"
        },
        "content": " * Empties the word bank."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "chrischenhui"
        },
        "content": "public class ClearCommand extends CardCommand {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"clear\";"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "jascxx"
        },
        "content": "    public static final String MESSAGE_SUCCESS \u003d \"Word bank has been cleared!\";"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "chrischenhui"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "chrischenhui"
        },
        "content": "     * Creates a ClearCommand."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "chrischenhui"
        },
        "content": "     */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "chrischenhui"
        },
        "content": "    public ClearCommand() {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "chrischenhui"
        },
        "content": "    }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "chrischenhui"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    public CommandResult execute(Model model) {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "chrischenhui"
        },
        "content": "        model.clearWordBank();"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "jascxx"
        },
        "content": "        model.clearWordBankStatistics();"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        return new CommandResult(MESSAGE_SUCCESS);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "sreesubbash": 1,
      "jascxx": 4,
      "chrischenhui": 11,
      "-": 14
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/cardcommands/DeleteCommand.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "chrischenhui"
        },
        "content": "package seedu.address.logic.commands.cardcommands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.Messages;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "chrischenhui"
        },
        "content": "import seedu.address.logic.commands.CardCommand;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "sreesubbash"
        },
        "content": "import seedu.address.logic.commands.CommandResult;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "jascxx"
        },
        "content": "import seedu.address.model.card.Card;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "jascxx"
        },
        "content": " * Deletes a card identified using it\u0027s displayed index from the word bank."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "chrischenhui"
        },
        "content": "public class DeleteCommand extends CardCommand {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"delete\";"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "chrischenhui"
        },
        "content": "            + \" INDEX\\n\""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "chrischenhui"
        },
        "content": "            + \"Eg: \" + COMMAND_WORD + \" 1\";"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "chrischenhui"
        },
        "content": "    public static final String MESSAGE_DELETE_CARD_SUCCESS \u003d \"Deleted card: %1$s\";"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    private final Index targetIndex;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "chrischenhui"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "chrischenhui"
        },
        "content": "     * Creates a DeleteCommand to delete the specified {@code Index}."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "chrischenhui"
        },
        "content": "     */"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    public DeleteCommand(Index targetIndex) {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "        this.targetIndex \u003d targetIndex;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    public CommandResult execute(Model model) throws CommandException {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "chrischenhui"
        },
        "content": "        List\u003cCard\u003e cardList \u003d model.getFilteredCardList();"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "chrischenhui"
        },
        "content": "        if (targetIndex.getZeroBased() \u003e\u003d cardList.size()) {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "jascxx"
        },
        "content": "            throw new CommandException(Messages.MESSAGE_INVALID_CARD_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "chrischenhui"
        },
        "content": "        Card cardToDelete \u003d cardList.get(targetIndex.getZeroBased());"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "jascxx"
        },
        "content": "        model.deleteCard(cardToDelete);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "chrischenhui"
        },
        "content": "        return new CardCommandResult(String.format(MESSAGE_DELETE_CARD_SUCCESS, cardToDelete));"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "                || (other instanceof DeleteCommand // instanceof handles nulls"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "                \u0026\u0026 targetIndex.equals(((DeleteCommand) other).targetIndex)); // state check"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "sreesubbash": 1,
      "jascxx": 4,
      "chrischenhui": 13,
      "-": 38
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/cardcommands/EditCommand.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "chrischenhui"
        },
        "content": "package seedu.address.logic.commands.cardcommands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "chrischenhui"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_DUPLICATE_CARD;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "sreesubbash"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_MEANING;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_TAG;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "jascxx"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_WORD;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "jascxx"
        },
        "content": "import static seedu.address.model.Model.PREDICATE_SHOW_ALL_CARDS;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Collections;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.HashSet;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.Messages;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.util.CollectionUtil;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "chrischenhui"
        },
        "content": "import seedu.address.logic.commands.CardCommand;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "sreesubbash"
        },
        "content": "import seedu.address.logic.commands.CommandResult;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "jascxx"
        },
        "content": "import seedu.address.model.card.Card;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "jascxx"
        },
        "content": "import seedu.address.model.card.Meaning;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "jascxx"
        },
        "content": "import seedu.address.model.card.Word;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.tag.Tag;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "jascxx"
        },
        "content": " * Edits the details of an existing card in the word bank."
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "chrischenhui"
        },
        "content": "public class EditCommand extends CardCommand {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"edit\";"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "chrischenhui"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "chrischenhui"
        },
        "content": "            + \" INDEX \""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "jascxx"
        },
        "content": "            + \"[\" + PREFIX_WORD + \"WORD] \""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "jascxx"
        },
        "content": "            + \"[\" + PREFIX_MEANING + \"MEANING] \""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "chrischenhui"
        },
        "content": "            + \"[\" + PREFIX_TAG + \"TAG]\\n\""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "chrischenhui"
        },
        "content": "            + \"Eg: \" + COMMAND_WORD + \" 1 \""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "chrischenhui"
        },
        "content": "            + PREFIX_MEANING + \"evolves into Kadabra\";"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "chrischenhui"
        },
        "content": "    public static final String MESSAGE_EDIT_CARD_SUCCESS \u003d \"Edited card: %1$s\";"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_NOT_EDITED \u003d \"At least one field to edit must be provided.\";"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    private final Index index;"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "jascxx"
        },
        "content": "    private final EditCardDescriptor editCardDescriptor;"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "chrischenhui"
        },
        "content": "     * Creates an edit command to edit the indexed card."
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "chrischenhui"
        },
        "content": "     *"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "chrischenhui"
        },
        "content": "     * @param index of the card in the filtered card list to edit."
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "chrischenhui"
        },
        "content": "     * @param editCardDescriptor details to edit the card with."
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "jascxx"
        },
        "content": "    public EditCommand(Index index, EditCardDescriptor editCardDescriptor) {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(index);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "jascxx"
        },
        "content": "        requireNonNull(editCardDescriptor);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "        this.index \u003d index;"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "jascxx"
        },
        "content": "        this.editCardDescriptor \u003d new EditCardDescriptor(editCardDescriptor);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "    public CommandResult execute(Model model) throws CommandException {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "jascxx"
        },
        "content": "        List\u003cCard\u003e lastShownList \u003d model.getFilteredCardList();"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "        if (index.getZeroBased() \u003e\u003d lastShownList.size()) {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "jascxx"
        },
        "content": "            throw new CommandException(Messages.MESSAGE_INVALID_CARD_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "jascxx"
        },
        "content": "        Card cardToEdit \u003d lastShownList.get(index.getZeroBased());"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "jascxx"
        },
        "content": "        Card editedCard \u003d createEditedCard(cardToEdit, editCardDescriptor);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "jascxx"
        },
        "content": "        if (!cardToEdit.isSameMeaning(editedCard) \u0026\u0026 model.hasCard(editedCard)) {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "jascxx"
        },
        "content": "            throw new CommandException(MESSAGE_DUPLICATE_CARD);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "jascxx"
        },
        "content": "        model.setCard(cardToEdit, editedCard);"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "jascxx"
        },
        "content": "        model.updateFilteredCardList(PREDICATE_SHOW_ALL_CARDS);"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "chrischenhui"
        },
        "content": "        return new CardCommandResult(String.format(MESSAGE_EDIT_CARD_SUCCESS, editedCard));"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "jascxx"
        },
        "content": "     * Creates and returns a {@code Card} with the details of {@code cardToEdit}"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "jascxx"
        },
        "content": "     * edited with {@code editCardDescriptor}."
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "jascxx"
        },
        "content": "    private static Card createEditedCard(Card cardToEdit, EditCardDescriptor editCardDescriptor) {"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "jascxx"
        },
        "content": "        assert cardToEdit !\u003d null;"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "jascxx"
        },
        "content": "        Word updatedWord \u003d editCardDescriptor.getWord().orElse(cardToEdit.getWord());"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "jascxx"
        },
        "content": "        Meaning updatedMeaning \u003d editCardDescriptor.getMeaning().orElse(cardToEdit.getMeaning());"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "jascxx"
        },
        "content": "        Set\u003cTag\u003e updatedTags \u003d editCardDescriptor.getTags().orElse(cardToEdit.getTags());"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "chrischenhui"
        },
        "content": "        return new Card(cardToEdit.getId(), updatedWord, updatedMeaning, updatedTags);"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "        // short circuit if same object"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "        if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "        // instanceof handles nulls"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!(other instanceof EditCommand)) {"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "        // state check"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "        EditCommand e \u003d (EditCommand) other;"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "        return index.equals(e.index)"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "jascxx"
        },
        "content": "                \u0026\u0026 editCardDescriptor.equals(e.editCardDescriptor);"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "jascxx"
        },
        "content": "     * Stores the details to edit the card with. Each non-empty field value will replace the"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "jascxx"
        },
        "content": "     * corresponding field value of the card."
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "jascxx"
        },
        "content": "    public static class EditCardDescriptor {"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "jascxx"
        },
        "content": "        private Word word;"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "jascxx"
        },
        "content": "        private Meaning meaning;"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "        private Set\u003cTag\u003e tags;"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "jascxx"
        },
        "content": "        public EditCardDescriptor() {}"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "        /**"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "         * Copy constructor."
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "         * A defensive copy of {@code tags} is used internally."
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "         */"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "jascxx"
        },
        "content": "        public EditCardDescriptor(EditCardDescriptor toCopy) {"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "jascxx"
        },
        "content": "            setWord(toCopy.word);"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "jascxx"
        },
        "content": "            setMeaning(toCopy.meaning);"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "            setTags(toCopy.tags);"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": "        /**"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": "         * Returns true if at least one field is edited."
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": "         */"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": "        public boolean isAnyFieldEdited() {"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "jascxx"
        },
        "content": "            return CollectionUtil.isAnyNonNull(word, meaning, tags);"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "jascxx"
        },
        "content": "        public void setWord(Word word) {"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "jascxx"
        },
        "content": "            this.word \u003d word;"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "jascxx"
        },
        "content": "        public Optional\u003cWord\u003e getWord() {"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "jascxx"
        },
        "content": "            return Optional.ofNullable(word);"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "jascxx"
        },
        "content": "        public void setMeaning(Meaning meaning) {"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "jascxx"
        },
        "content": "            this.meaning \u003d meaning;"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "jascxx"
        },
        "content": "        public Optional\u003cMeaning\u003e getMeaning() {"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "jascxx"
        },
        "content": "            return Optional.ofNullable(meaning);"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "-"
        },
        "content": "        /**"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "-"
        },
        "content": "         * Sets {@code tags} to this object\u0027s {@code tags}."
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "-"
        },
        "content": "         * A defensive copy of {@code tags} is used internally."
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "-"
        },
        "content": "         */"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "-"
        },
        "content": "        public void setTags(Set\u003cTag\u003e tags) {"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "-"
        },
        "content": "            this.tags \u003d (tags !\u003d null) ? new HashSet\u003c\u003e(tags) : null;"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "-"
        },
        "content": "        /**"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "-"
        },
        "content": "         * Returns an unmodifiable tag set, which throws {@code UnsupportedOperationException}"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "-"
        },
        "content": "         * if modification is attempted."
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "-"
        },
        "content": "         * Returns {@code Optional#empty()} if {@code tags} is null."
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "-"
        },
        "content": "         */"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "-"
        },
        "content": "        public Optional\u003cSet\u003cTag\u003e\u003e getTags() {"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "-"
        },
        "content": "            return (tags !\u003d null) ? Optional.of(Collections.unmodifiableSet(tags)) : Optional.empty();"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "-"
        },
        "content": "        public boolean equals(Object other) {"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "-"
        },
        "content": "            // short circuit if same object"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "-"
        },
        "content": "            if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "-"
        },
        "content": "                return true;"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "-"
        },
        "content": "            // instanceof handles nulls"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "jascxx"
        },
        "content": "            if (!(other instanceof EditCardDescriptor)) {"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "-"
        },
        "content": "                return false;"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "-"
        },
        "content": "            // state check"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "jascxx"
        },
        "content": "            EditCardDescriptor e \u003d (EditCardDescriptor) other;"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "jascxx"
        },
        "content": "            return getWord().equals(e.getWord())"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "jascxx"
        },
        "content": "                    \u0026\u0026 getMeaning().equals(e.getMeaning())"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "-"
        },
        "content": "                    \u0026\u0026 getTags().equals(e.getTags());"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "sreesubbash": 2,
      "jascxx": 50,
      "chrischenhui": 16,
      "-": 129
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/cardcommands/ExitCommand.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "chrischenhui"
        },
        "content": "package seedu.address.logic.commands.cardcommands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "chrischenhui"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "chrischenhui"
        },
        "content": "import seedu.address.logic.commands.CardCommand;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "chrischenhui"
        },
        "content": "import seedu.address.logic.commands.CommandResult;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "chrischenhui"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "chrischenhui"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "chrischenhui"
        },
        "content": "/**"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "chrischenhui"
        },
        "content": " * Terminates the program."
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "chrischenhui"
        },
        "content": " */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "chrischenhui"
        },
        "content": "public class ExitCommand extends CardCommand {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "chrischenhui"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "chrischenhui"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"exit\";"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "chrischenhui"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "chrischenhui"
        },
        "content": "    public static final String MESSAGE_EXIT_ACKNOWLEDGEMENT \u003d \"Dukemon says bye!\";"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "chrischenhui"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "chrischenhui"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "chrischenhui"
        },
        "content": "     * Creates an ExitCommand."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "chrischenhui"
        },
        "content": "     */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "chrischenhui"
        },
        "content": "    public ExitCommand() {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "chrischenhui"
        },
        "content": "    }"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "chrischenhui"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "chrischenhui"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "chrischenhui"
        },
        "content": "    public CommandResult execute(Model model) {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "chrischenhui"
        },
        "content": "        return new CommandResult(MESSAGE_EXIT_ACKNOWLEDGEMENT, false, true);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "chrischenhui"
        },
        "content": "    }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "chrischenhui"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "chrischenhui"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "chrischenhui"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "chrischenhui"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "chrischenhui"
        },
        "content": "                || (other instanceof ExitCommand); // instanceof handles nulls"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "chrischenhui"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "chrischenhui"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "chrischenhui": 32
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/cardcommands/FindCommand.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "chrischenhui"
        },
        "content": "package seedu.address.logic.commands.cardcommands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "jascxx"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "jascxx"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.Messages;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "chrischenhui"
        },
        "content": "import seedu.address.logic.commands.CardCommand;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "sreesubbash"
        },
        "content": "import seedu.address.logic.commands.CommandResult;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "jascxx"
        },
        "content": "import seedu.address.model.card.WordContainsKeywordsPredicate;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "jascxx"
        },
        "content": " * Finds and lists all cards in word bank whose name contains any of the argument keywords."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": " * Keyword matching is case insensitive."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "chrischenhui"
        },
        "content": "public class FindCommand extends CardCommand {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"find\";"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "jascxx"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \": Finds all cards whose words contain any of \""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": "            + \"the specified keywords (case-insensitive).\\n\""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"Parameters: KEYWORD [MORE_KEYWORDS]...\\n\""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": "            + \"Example: \" + COMMAND_WORD + \" Singapore\";"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "jascxx"
        },
        "content": "    private final WordContainsKeywordsPredicate predicate;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "chrischenhui"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "chrischenhui"
        },
        "content": "     * Finds a card using the predicate."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "chrischenhui"
        },
        "content": "     *"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "chrischenhui"
        },
        "content": "     * @param predicate that filters the list."
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "chrischenhui"
        },
        "content": "     */"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "jascxx"
        },
        "content": "    public FindCommand(WordContainsKeywordsPredicate predicate) {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        this.predicate \u003d predicate;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    public CommandResult execute(Model model) {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "jascxx"
        },
        "content": "        model.updateFilteredCardList(predicate);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        return new CommandResult("
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "jascxx"
        },
        "content": "                String.format(Messages.MESSAGE_CARDS_LISTED_OVERVIEW, model.getFilteredCardList().size()));"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "                || (other instanceof FindCommand // instanceof handles nulls"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "                \u0026\u0026 predicate.equals(((FindCommand) other).predicate)); // state check"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "sreesubbash": 1,
      "jascxx": 9,
      "chrischenhui": 8,
      "kohyida1997": 2,
      "-": 29
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/cardcommands/ListCommand.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "chrischenhui"
        },
        "content": "package seedu.address.logic.commands.cardcommands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "jascxx"
        },
        "content": "import static seedu.address.model.Model.PREDICATE_SHOW_ALL_CARDS;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "chrischenhui"
        },
        "content": "import seedu.address.logic.commands.CardCommand;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "sreesubbash"
        },
        "content": "import seedu.address.logic.commands.CommandResult;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "jascxx"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "jascxx"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "jascxx"
        },
        "content": " * Lists all cards in the word bank to the user."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "chrischenhui"
        },
        "content": "public class ListCommand extends CardCommand {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"list\";"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "jascxx"
        },
        "content": "    public static final String MESSAGE_SUCCESS \u003d \"Listed all cards\";"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    public CommandResult execute(Model model) {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "jascxx"
        },
        "content": "        model.updateFilteredCardList(PREDICATE_SHOW_ALL_CARDS);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "        return new CommandResult(MESSAGE_SUCCESS);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "sreesubbash": 1,
      "jascxx": 6,
      "chrischenhui": 3,
      "-": 15
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/exceptions/CommandException.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.commands.exceptions;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "jascxx"
        },
        "content": " * Represents an error which occurs during execution of a {@link seedu.address.logic.commands.Command}."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "public class CommandException extends Exception {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "    public CommandException(String message) {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "        super(message);"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "     * Constructs a new {@code CommandException} with the specified detail {@code message} and {@code cause}."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    public CommandException(String message, Throwable cause) {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "        super(message, cause);"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "jascxx": 1,
      "-": 16
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/exceptions/ModeSwitchException.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "sreesubbash"
        },
        "content": "package seedu.address.logic.commands.exceptions;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "sreesubbash"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "sreesubbash"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "sreesubbash"
        },
        "content": " * Represents an error which occurs during execution of a {@link seedu.address.logic.commands.Command}."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "sreesubbash"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "sreesubbash"
        },
        "content": "public class ModeSwitchException extends CommandException {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "sreesubbash"
        },
        "content": "    public ModeSwitchException(String message) {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "sreesubbash"
        },
        "content": "        super(message);"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "sreesubbash"
        },
        "content": "    }"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "sreesubbash"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "sreesubbash"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "sreesubbash"
        },
        "content": "     * Constructs a new {@code CommandException} with the specified detail {@code message} and {@code cause}."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "sreesubbash"
        },
        "content": "     */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "sreesubbash"
        },
        "content": "    public ModeSwitchException(String message, Throwable cause) {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "sreesubbash"
        },
        "content": "        super(message, cause);"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "sreesubbash"
        },
        "content": "    }"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "sreesubbash"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "sreesubbash": 17
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/gamecommands/GameCommandResult.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "chrischenhui"
        },
        "content": "package seedu.address.logic.commands.gamecommands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "jascxx"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "dragontho"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "dragontho"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "jascxx"
        },
        "content": "import seedu.address.logic.commands.CommandResult;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "jascxx"
        },
        "content": "import seedu.address.model.card.Card;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "jascxx"
        },
        "content": "import seedu.address.statistics.GameDataPoint;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "jascxx"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "jascxx"
        },
        "content": "/**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "jascxx"
        },
        "content": " * Represents the command result returned by a game command."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "jascxx"
        },
        "content": " * This class is needed to pass some info to the {@code GameManager} to populate the {@code GameStatistics}."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "jascxx"
        },
        "content": " */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "jascxx"
        },
        "content": "public abstract class GameCommandResult extends CommandResult {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "jascxx"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "jascxx"
        },
        "content": "    /** Game should finish and open game result display **/"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "jascxx"
        },
        "content": "    private final boolean isFinishedGame;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "jascxx"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "jascxx"
        },
        "content": "    /** The card displayed when command is executed **/"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "jascxx"
        },
        "content": "    private final Optional\u003cCard\u003e card;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "jascxx"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "jascxx"
        },
        "content": "    public GameCommandResult(Card card, String feedback, boolean isFinishedGame) {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "jascxx"
        },
        "content": "        super(feedback, !isFinishedGame);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "jascxx"
        },
        "content": "        this.isFinishedGame \u003d isFinishedGame;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "jascxx"
        },
        "content": "        this.card \u003d Optional.of(card);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "jascxx"
        },
        "content": "    }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "jascxx"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "jascxx"
        },
        "content": "    public GameCommandResult(String feedback, boolean isFinishedGame) {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "jascxx"
        },
        "content": "        super(feedback, !isFinishedGame);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "jascxx"
        },
        "content": "        this.isFinishedGame \u003d isFinishedGame;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "jascxx"
        },
        "content": "        this.card \u003d Optional.empty();"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "jascxx"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "jascxx"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "jascxx"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "jascxx"
        },
        "content": "     * Used to populate the {@code GameStatistics}."
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "jascxx"
        },
        "content": "     */"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "jascxx"
        },
        "content": "    public abstract GameDataPoint getGameDataPoint(long millisElapsed);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "jascxx"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "jascxx"
        },
        "content": "    public Optional\u003cCard\u003e getCard() {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "jascxx"
        },
        "content": "        return card;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "jascxx"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "jascxx"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "jascxx"
        },
        "content": "    public boolean isFinishedGame() {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "jascxx"
        },
        "content": "        return isFinishedGame;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "jascxx"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "jascxx"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "dragontho": 2,
      "jascxx": 42,
      "chrischenhui": 1
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/gamecommands/GuessCommand.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "chrischenhui"
        },
        "content": "package seedu.address.logic.commands.gamecommands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": "import static seedu.address.commons.util.CollectionUtil.requireAllNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "sreesubbash"
        },
        "content": "import seedu.address.logic.commands.CommandResult;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "sreesubbash"
        },
        "content": "import seedu.address.logic.commands.GameCommand;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "jascxx"
        },
        "content": "import seedu.address.model.card.Card;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "jascxx"
        },
        "content": "import seedu.address.model.game.Game;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": "import seedu.address.model.game.Guess;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "jascxx"
        },
        "content": "/**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "jascxx"
        },
        "content": " * Make a guess."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "jascxx"
        },
        "content": " */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": "public class GuessCommand extends GameCommand {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"guess\";"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \": Makes a guess for current flashcard with \""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": "            + \"the specified keywords (case-insensitive).\\n\""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": "            + \"Parameters: KEYWORD [MORE_KEYWORDS]...\\n\""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": "            + \"Example: \" + COMMAND_WORD + \" alice bob charlie\";"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": "    public static final String MESSAGE_GAME_OVER \u003d \"GAME OVER!\";"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": "    private final Guess inputGuess;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": "    public GuessCommand(Guess inputGuess) {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": "        requireAllNonNull(inputGuess);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": "        this.inputGuess \u003d inputGuess;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": "    public CommandResult execute(Model model) throws CommandException {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": "        if (model.gameIsOver()) {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": "            throw new CommandException(MESSAGE_NO_ACTIVE_GAME);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": "        }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "sreesubbash"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": "        Game game \u003d model.getGame();"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": "        String msg \u003d \"\";"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "jascxx"
        },
        "content": "        Card guessedCard \u003d game.getCurrCard();"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "sreesubbash"
        },
        "content": "        game.moveToNextCard();"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "sreesubbash"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "sreesubbash"
        },
        "content": "        if (game.isOver()) {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": "            msg \u003d MESSAGE_GAME_OVER;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "jascxx"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "jascxx"
        },
        "content": "            msg \u003d game.getCurrQuestion();"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "sreesubbash"
        },
        "content": "        }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "sreesubbash"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "jascxx"
        },
        "content": "        return new GuessCommandResult(inputGuess, guessedCard, msg, game.isOver());"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "sreesubbash": 8,
      "jascxx": 9,
      "chrischenhui": 1,
      "kohyida1997": 33
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/gamecommands/GuessCommandResult.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "chrischenhui"
        },
        "content": "package seedu.address.logic.commands.gamecommands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "jascxx"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "jascxx"
        },
        "content": "import seedu.address.model.card.Card;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "jascxx"
        },
        "content": "import seedu.address.model.game.Guess;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "jascxx"
        },
        "content": "import seedu.address.statistics.GameDataPoint;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "jascxx"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "jascxx"
        },
        "content": "/**"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "jascxx"
        },
        "content": " * Represents the command result returned by {@code GuessCommand}."
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "jascxx"
        },
        "content": " * This class is needed to pass some info to the {@code GameManager} to populate the {@code GameStatistics}."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "jascxx"
        },
        "content": " */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "jascxx"
        },
        "content": "public class GuessCommandResult extends GameCommandResult {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "jascxx"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "jascxx"
        },
        "content": "    public static final String MESSAGE_WRONG_GUESS \u003d \"Guess is WRONG!\";"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "jascxx"
        },
        "content": "    public static final String MESSAGE_CORRECT_GUESS \u003d \"Guess is CORRECT!\";"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "jascxx"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "jascxx"
        },
        "content": "    private final Guess guess;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "jascxx"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "jascxx"
        },
        "content": "    public GuessCommandResult(Guess guess, Card card, String additionalMsg, boolean isFinishedGame) {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "jascxx"
        },
        "content": "        super(card, ("
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "jascxx"
        },
        "content": "                        guess.matches(card.getWord()) ? MESSAGE_CORRECT_GUESS : MESSAGE_WRONG_GUESS)"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "jascxx"
        },
        "content": "                + \"\\n\""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "jascxx"
        },
        "content": "                + additionalMsg,"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "jascxx"
        },
        "content": "                isFinishedGame);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "jascxx"
        },
        "content": "        this.guess \u003d guess;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "jascxx"
        },
        "content": "    }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "jascxx"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "jascxx"
        },
        "content": "    public Guess getGuess() {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "jascxx"
        },
        "content": "        return guess;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "jascxx"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "jascxx"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "jascxx"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "jascxx"
        },
        "content": "    public GameDataPoint getGameDataPoint(long millisElapsed) {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "jascxx"
        },
        "content": "        return GameDataPoint.createGuessData(guess, millisElapsed);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "jascxx"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "jascxx"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "jascxx": 34,
      "chrischenhui": 1
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/gamecommands/SkipCommand.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "chrischenhui"
        },
        "content": "package seedu.address.logic.commands.gamecommands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": "import seedu.address.logic.commands.CommandResult;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": "import seedu.address.logic.commands.GameCommand;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "jascxx"
        },
        "content": "import seedu.address.model.card.Card;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": "import seedu.address.model.game.Game;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": "/**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": " * Class that represents skipping over a word while Game is running."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": " */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": "public class SkipCommand extends GameCommand {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"skip\";"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": "    public CommandResult execute(Model model) throws CommandException {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": "        if (model.getGame() \u003d\u003d null) {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": "            return new CommandResult(MESSAGE_NO_ACTIVE_GAME);"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": "        }"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": "        Game game \u003d model.getGame();"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "jascxx"
        },
        "content": "            Card curCard \u003d game.getCurrCard();"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": "            // Skip current card, move to next card."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": "            game.moveToNextCard();"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "jascxx"
        },
        "content": "            String msg \u003d game.isOver()"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "jascxx"
        },
        "content": "                    ? \"GAME OVER!\""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "jascxx"
        },
        "content": "                    : game.getCurrQuestion();"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "jascxx"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "jascxx"
        },
        "content": "            return new SkipCommandResult(curCard, msg, game.isOver());"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": "        } catch (UnsupportedOperationException ue) {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": "            throw new CommandException(ue.getMessage());"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": "        }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "jascxx": 7,
      "chrischenhui": 1,
      "kohyida1997": 30
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/gamecommands/SkipCommandResult.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "chrischenhui"
        },
        "content": "package seedu.address.logic.commands.gamecommands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "jascxx"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "jascxx"
        },
        "content": "import seedu.address.model.card.Card;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "jascxx"
        },
        "content": "import seedu.address.statistics.GameDataPoint;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "jascxx"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "jascxx"
        },
        "content": "/**"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "jascxx"
        },
        "content": " * Represents the command result returned by {@code GuessCommand}."
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "jascxx"
        },
        "content": " * This class is needed to pass some info to the {@code GameManager} to populate the {@code GameStatistics}."
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "jascxx"
        },
        "content": " */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "jascxx"
        },
        "content": "public class SkipCommandResult extends GameCommandResult {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "jascxx"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "jascxx"
        },
        "content": "    private static final String MESSAGE_SKIPPED \u003d \"Word skipped!\";"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "jascxx"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "jascxx"
        },
        "content": "    public SkipCommandResult(Card card, String additionalMsg, boolean isFinished) {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "jascxx"
        },
        "content": "        super(card,"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "jascxx"
        },
        "content": "                MESSAGE_SKIPPED"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "jascxx"
        },
        "content": "                + \"\\n\""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "jascxx"
        },
        "content": "                + additionalMsg,"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "jascxx"
        },
        "content": "                isFinished);"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "jascxx"
        },
        "content": "    }"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "jascxx"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "jascxx"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "jascxx"
        },
        "content": "    public GameDataPoint getGameDataPoint(long millisElapsed) {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "jascxx"
        },
        "content": "        return GameDataPoint.createSkipData(millisElapsed);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "jascxx"
        },
        "content": "    }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "jascxx"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "jascxx": 25,
      "chrischenhui": 1,
      "kohyida1997": 1
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/gamecommands/StopCommand.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "chrischenhui"
        },
        "content": "package seedu.address.logic.commands.gamecommands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": "import seedu.address.logic.commands.CommandResult;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": "import seedu.address.logic.commands.GameCommand;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": "/**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": " * Class that represents forcibly stopping a Game session that is running."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": " */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": "public class StopCommand extends GameCommand {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"stop\";"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": "    private static final String MESSAGE_STOPPED \u003d \"Current Game has been forcibly stopped!\";"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": "    private static final String MESSAGE_NO_SESSION \u003d \"There is no active game session to stop\";"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": "     * Executes the StopCommand to forcibly terminate the current game session."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": "     * @param model {@code Model} which the command should operate on."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": "     * @return CommandResult to be passed back into the UI."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": "     */"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": "    public CommandResult execute(Model model) throws CommandException {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": "        if (model.getGame().isOver()) {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": "            throw new CommandException(MESSAGE_NO_SESSION);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": "        }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": "        model.getGame().forceStop();"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": "        // No collection of statistics when game is stopped."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": "        return new CommandResult(MESSAGE_STOPPED);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "chrischenhui": 1,
      "kohyida1997": 29
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/homecommands/BankCommand.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "chrischenhui"
        },
        "content": "package seedu.address.logic.commands.homecommands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "sreesubbash"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "chrischenhui"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_WORD_BANK_NAME;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "chrischenhui"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "sreesubbash"
        },
        "content": "import seedu.address.logic.commands.CommandResult;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "chrischenhui"
        },
        "content": "import seedu.address.logic.commands.HomeCommand;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "sreesubbash"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "sreesubbash"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "jascxx"
        },
        "content": "import seedu.address.model.wordbankstatslist.WordBankStatisticsList;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "jascxx"
        },
        "content": "import seedu.address.statistics.WordBankStatistics;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "sreesubbash"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "chrischenhui"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "sreesubbash"
        },
        "content": "/**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "chrischenhui"
        },
        "content": " * Selects a word bank."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "sreesubbash"
        },
        "content": " */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "chrischenhui"
        },
        "content": "public class BankCommand extends HomeCommand {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "sreesubbash"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "sreesubbash"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"bank\";"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "sreesubbash"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "sreesubbash"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "chrischenhui"
        },
        "content": "            + \" WORDBANK \\n\""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "chrischenhui"
        },
        "content": "            + \"Eg: \" + COMMAND_WORD + \" sample\";"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "sreesubbash"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "chrischenhui"
        },
        "content": "    private static final String MESSAGE_LIST_ACKNOWLEDGEMENT \u003d \"Selected a word bank.\\n\""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "chrischenhui"
        },
        "content": "            + \"Type start to start the game\\n\""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "chrischenhui"
        },
        "content": "            + \"Or type open to edit word bank.\";"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "chrischenhui"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "chrischenhui"
        },
        "content": "    private String name;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "sreesubbash"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "chrischenhui"
        },
        "content": "    public BankCommand(String name) {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "chrischenhui"
        },
        "content": "        this.name \u003d name;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "sreesubbash"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "sreesubbash"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "sreesubbash"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "sreesubbash"
        },
        "content": "    public CommandResult execute(Model model) throws CommandException {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "chrischenhui"
        },
        "content": "        if (!model.hasWordBank(name)) {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "chrischenhui"
        },
        "content": "            throw new CommandException(MESSAGE_INVALID_WORD_BANK_NAME);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "sreesubbash"
        },
        "content": "        }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "dragontho"
        },
        "content": "        model.setCurrentWordBank(model.getWordBankFromName(name));"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "chrischenhui"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "chrischenhui"
        },
        "content": "        WordBankStatisticsList wbStatsList \u003d model.getWordBankStatisticsList();"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "jascxx"
        },
        "content": "        WordBankStatistics wbStats \u003d wbStatsList.getWordBankStatistics(name);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "jascxx"
        },
        "content": "        if (wbStats \u003d\u003d null) {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "jascxx"
        },
        "content": "            WordBankStatistics newWbStats \u003d WordBankStatistics.getEmpty(name);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "jascxx"
        },
        "content": "            model.setWordBankStatistics(newWbStats);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "jascxx"
        },
        "content": "            wbStatsList.addWordBanksStatistics(newWbStats);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "jascxx"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "jascxx"
        },
        "content": "            model.setWordBankStatistics(wbStats);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "jascxx"
        },
        "content": "        }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "chrischenhui"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "sreesubbash"
        },
        "content": "        return new CommandResult(MESSAGE_LIST_ACKNOWLEDGEMENT, false, false);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "sreesubbash"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "sreesubbash"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "sreesubbash": 21,
      "dragontho": 1,
      "jascxx": 10,
      "chrischenhui": 21
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/homecommands/CreateCommand.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "chrischenhui"
        },
        "content": "package seedu.address.logic.commands.homecommands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "chrischenhui"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "chrischenhui"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "chrischenhui"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "chrischenhui"
        },
        "content": "import seedu.address.commons.core.Messages;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "chrischenhui"
        },
        "content": "import seedu.address.logic.commands.HomeCommand;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "chrischenhui"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "chrischenhui"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "chrischenhui"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "chrischenhui"
        },
        "content": "/**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "chrischenhui"
        },
        "content": " * Creates a word bank."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "chrischenhui"
        },
        "content": " */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "chrischenhui"
        },
        "content": "public class CreateCommand extends HomeCommand {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "chrischenhui"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "chrischenhui"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"create\";"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "chrischenhui"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "chrischenhui"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "chrischenhui"
        },
        "content": "            + \" WORDBANK.\\n\""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "chrischenhui"
        },
        "content": "            + \"Eg: \" + COMMAND_WORD + \" \""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "chrischenhui"
        },
        "content": "            + \"my bank\";"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "chrischenhui"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "chrischenhui"
        },
        "content": "    public static final String MESSAGE_SUCCESS \u003d \"New word bank added: %1$s\";"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "chrischenhui"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "chrischenhui"
        },
        "content": "    private final String wordBankName;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "chrischenhui"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "chrischenhui"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "chrischenhui"
        },
        "content": "     * Creates a CreateCommand to add the specified {@code Card}"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "chrischenhui"
        },
        "content": "     */"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "chrischenhui"
        },
        "content": "    public CreateCommand(String name) {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "chrischenhui"
        },
        "content": "        requireNonNull(name);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "chrischenhui"
        },
        "content": "        this.wordBankName \u003d name;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "chrischenhui"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "chrischenhui"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "chrischenhui"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "chrischenhui"
        },
        "content": "    public HomeCommandResult execute(Model model) throws CommandException {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "chrischenhui"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "chrischenhui"
        },
        "content": "        if (model.hasWordBank(wordBankName)) {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "chrischenhui"
        },
        "content": "            throw new CommandException(Messages.MESSAGE_DUPLICATE_WORD_BANK_NAME);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "chrischenhui"
        },
        "content": "        }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "chrischenhui"
        },
        "content": "        return new CreateCommandResult(String.format(MESSAGE_SUCCESS, wordBankName), wordBankName);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "chrischenhui"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "chrischenhui"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "chrischenhui"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "chrischenhui"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "chrischenhui"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "chrischenhui"
        },
        "content": "                || (other instanceof CreateCommand // instanceof handles nulls"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "chrischenhui"
        },
        "content": "                \u0026\u0026 wordBankName.equals(((CreateCommand) other).wordBankName));"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "chrischenhui"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "chrischenhui"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "chrischenhui": 49
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/homecommands/CreateCommandResult.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "chrischenhui"
        },
        "content": "package seedu.address.logic.commands.homecommands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "chrischenhui"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "chrischenhui"
        },
        "content": "import seedu.address.storage.Storage;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "chrischenhui"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "chrischenhui"
        },
        "content": "/**"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "chrischenhui"
        },
        "content": " * Represents the command result returned by {@code CreateCommand}."
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "chrischenhui"
        },
        "content": " * This class is needed to pass some info to the {@code LogicManager} to update storage."
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "chrischenhui"
        },
        "content": " */"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "chrischenhui"
        },
        "content": "public class CreateCommandResult extends HomeCommandResult {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "chrischenhui"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "chrischenhui"
        },
        "content": "    public CreateCommandResult(String feedback, String wordBankName) {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "chrischenhui"
        },
        "content": "        super(feedback, wordBankName);"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "chrischenhui"
        },
        "content": "    }"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "chrischenhui"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "chrischenhui"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "chrischenhui"
        },
        "content": "    public void updateStorage(Storage storage) {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "chrischenhui"
        },
        "content": "        storage.createWordBank(super.wordBankName);"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "chrischenhui"
        },
        "content": "    }"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "chrischenhui"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "chrischenhui": 19
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/homecommands/ExitCommand.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "chrischenhui"
        },
        "content": "package seedu.address.logic.commands.homecommands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "sreesubbash"
        },
        "content": "import seedu.address.logic.commands.CommandResult;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "chrischenhui"
        },
        "content": "import seedu.address.logic.commands.HomeCommand;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": " * Terminates the program."
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "chrischenhui"
        },
        "content": "public class ExitCommand extends HomeCommand {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"exit\";"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "jascxx"
        },
        "content": "    public static final String MESSAGE_EXIT_ACKNOWLEDGEMENT \u003d \"Exiting App as requested ...\";"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    public CommandResult execute(Model model) {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "        return new CommandResult(MESSAGE_EXIT_ACKNOWLEDGEMENT, false, true);"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "sreesubbash": 1,
      "jascxx": 1,
      "chrischenhui": 3,
      "-": 16
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/homecommands/ExportCommand.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "chrischenhui"
        },
        "content": "package seedu.address.logic.commands.homecommands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "chrischenhui"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "chrischenhui"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "chrischenhui"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_FILEPATH;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "chrischenhui"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_WORD;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "chrischenhui"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "chrischenhui"
        },
        "content": "import java.io.File;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "chrischenhui"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "chrischenhui"
        },
        "content": "import seedu.address.commons.core.Messages;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "chrischenhui"
        },
        "content": "import seedu.address.logic.commands.CommandResult;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "chrischenhui"
        },
        "content": "import seedu.address.logic.commands.HomeCommand;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "chrischenhui"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "chrischenhui"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "chrischenhui"
        },
        "content": "import seedu.address.model.wordbank.WordBank;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "chrischenhui"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "chrischenhui"
        },
        "content": "/**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "chrischenhui"
        },
        "content": " * Removes a word bank identified using it\u0027s unique name."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "chrischenhui"
        },
        "content": " */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "chrischenhui"
        },
        "content": "public class ExportCommand extends HomeCommand {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "chrischenhui"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "chrischenhui"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"export\";"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "chrischenhui"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "chrischenhui"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "chrischenhui"
        },
        "content": "            + \" w/BANKNAME f/FILEPATH\\n\""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "chrischenhui"
        },
        "content": "            + \"Eg: \" + COMMAND_WORD + \" \""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "chrischenhui"
        },
        "content": "            + PREFIX_WORD + \"sample \""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "chrischenhui"
        },
        "content": "            + PREFIX_FILEPATH + \"~/downloads\";"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "chrischenhui"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "chrischenhui"
        },
        "content": "    private static final String MESSAGE_EXPORT_CARD_SUCCESS \u003d \"Exported word bank: %1$s to location : %2$s\";"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "chrischenhui"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "chrischenhui"
        },
        "content": "    private static String wordBankName;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "chrischenhui"
        },
        "content": "    private static File directory;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "chrischenhui"
        },
        "content": "    private static WordBank wordBank;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "chrischenhui"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "chrischenhui"
        },
        "content": "    public ExportCommand(String wordBankName, File directory) {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "chrischenhui"
        },
        "content": "        this.wordBankName \u003d wordBankName;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "chrischenhui"
        },
        "content": "        this.directory \u003d directory;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "chrischenhui"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "chrischenhui"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "chrischenhui"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "chrischenhui"
        },
        "content": "    public CommandResult execute(Model model) throws CommandException {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "chrischenhui"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "chrischenhui"
        },
        "content": "        WordBank wb \u003d model.getWordBankList().getWordBankFromName(wordBankName);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "chrischenhui"
        },
        "content": "        this.wordBank \u003d wb;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "chrischenhui"
        },
        "content": "        if (wb \u003d\u003d null) {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "chrischenhui"
        },
        "content": "            throw new CommandException(Messages.MESSAGE_DUPLICATE_WORD_BANK_NAME);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "chrischenhui"
        },
        "content": "        }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "chrischenhui"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "chrischenhui"
        },
        "content": "        return new ExportCommandResult(String.format(MESSAGE_EXPORT_CARD_SUCCESS, wordBankName, directory.toString()),"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "chrischenhui"
        },
        "content": "                wordBankName, directory.toPath());"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "chrischenhui"
        },
        "content": "    }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "chrischenhui"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "chrischenhui"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "chrischenhui"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "chrischenhui"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "chrischenhui"
        },
        "content": "                || (other instanceof seedu.address.logic.commands.homecommands.ExportCommand // instanceof handles nulls"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "chrischenhui"
        },
        "content": "                \u0026\u0026 wordBankName.equals(((seedu.address.logic.commands.homecommands.ExportCommand) other).wordBankName));"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "chrischenhui"
        },
        "content": "    }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "chrischenhui"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "chrischenhui"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "chrischenhui"
        },
        "content": "    public static WordBank getWordBank() {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "chrischenhui"
        },
        "content": "        return wordBank;"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "chrischenhui"
        },
        "content": "    }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "chrischenhui"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "chrischenhui"
        },
        "content": "    public static File getDirectory() {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "chrischenhui"
        },
        "content": "        return directory;"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "chrischenhui"
        },
        "content": "    }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "chrischenhui"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "chrischenhui"
        },
        "content": "    public static String getWordBankName() {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "chrischenhui"
        },
        "content": "        return wordBankName;"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "chrischenhui"
        },
        "content": "    }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "chrischenhui"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "chrischenhui": 72
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/homecommands/ExportCommandResult.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "chrischenhui"
        },
        "content": "package seedu.address.logic.commands.homecommands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "chrischenhui"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "chrischenhui"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "chrischenhui"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "chrischenhui"
        },
        "content": "import seedu.address.storage.Storage;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "chrischenhui"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "chrischenhui"
        },
        "content": "/**"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "chrischenhui"
        },
        "content": " * Represents the command result returned by {@code RemoveCommand}."
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "chrischenhui"
        },
        "content": " * This class is needed to pass some info to the {@code LogicManager} to update storage."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "chrischenhui"
        },
        "content": " */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "chrischenhui"
        },
        "content": "public class ExportCommandResult extends HomeCommandResult {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "chrischenhui"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "chrischenhui"
        },
        "content": "    public ExportCommandResult(String feedback, String wordBankName, Path filePath) {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "chrischenhui"
        },
        "content": "        super(feedback, wordBankName, filePath);"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "chrischenhui"
        },
        "content": "    }"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "chrischenhui"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "chrischenhui"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "chrischenhui"
        },
        "content": "    public void updateStorage(Storage storage) {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "chrischenhui"
        },
        "content": "        storage.exportWordBank(super.wordBankName, filePath);"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "chrischenhui"
        },
        "content": "    }"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "chrischenhui"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "chrischenhui": 21
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/homecommands/HelpCommand.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "sreesubbash"
        },
        "content": "package seedu.address.logic.commands.homecommands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "sreesubbash"
        },
        "content": "import seedu.address.logic.commands.CommandResult;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "sreesubbash"
        },
        "content": "import seedu.address.logic.commands.HomeCommand;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": " * Format full help instructions for every command for display."
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "sreesubbash"
        },
        "content": "public class HelpCommand extends HomeCommand {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"help\";"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \": Shows program usage instructions.\\n\""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"Example: \" + COMMAND_WORD;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String SHOWING_HELP_MESSAGE \u003d \"Opened help window.\";"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    public CommandResult execute(Model model) {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "        return new CommandResult(SHOWING_HELP_MESSAGE, true, false);"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "sreesubbash": 4,
      "-": 19
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/homecommands/HomeCommandResult.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "chrischenhui"
        },
        "content": "package seedu.address.logic.commands.homecommands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "chrischenhui"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "chrischenhui"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "chrischenhui"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "chrischenhui"
        },
        "content": "import seedu.address.logic.commands.CommandResult;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "chrischenhui"
        },
        "content": "import seedu.address.storage.Storage;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "chrischenhui"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "chrischenhui"
        },
        "content": "/**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "chrischenhui"
        },
        "content": " * Represents the command result returned by a home command."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "chrischenhui"
        },
        "content": " * This class is needed to pass some info to the {@code LogicManager} to update storage."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "chrischenhui"
        },
        "content": " */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "chrischenhui"
        },
        "content": "public abstract class HomeCommandResult extends CommandResult {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "chrischenhui"
        },
        "content": "    protected String wordBankName;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "chrischenhui"
        },
        "content": "    protected Path filePath;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "chrischenhui"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "chrischenhui"
        },
        "content": "    public HomeCommandResult(String feedback, String name) {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "chrischenhui"
        },
        "content": "        super(feedback);"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "chrischenhui"
        },
        "content": "        this.wordBankName \u003d name;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "chrischenhui"
        },
        "content": "    }"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "chrischenhui"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "chrischenhui"
        },
        "content": "    public HomeCommandResult(String feedback, String name, Path filePath) {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "chrischenhui"
        },
        "content": "        super(feedback);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "chrischenhui"
        },
        "content": "        this.wordBankName \u003d name;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "chrischenhui"
        },
        "content": "        this.filePath \u003d filePath;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "chrischenhui"
        },
        "content": "    }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "chrischenhui"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "chrischenhui"
        },
        "content": "    public HomeCommandResult(String feedback, Path filePath) {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "chrischenhui"
        },
        "content": "        super(feedback);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "chrischenhui"
        },
        "content": "        this.filePath \u003d filePath;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "chrischenhui"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "chrischenhui"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "chrischenhui"
        },
        "content": "    public abstract void updateStorage(Storage storage);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "chrischenhui"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "chrischenhui"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "chrischenhui": 34
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/homecommands/ImportCommand.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "chrischenhui"
        },
        "content": "package seedu.address.logic.commands.homecommands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "chrischenhui"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "chrischenhui"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "chrischenhui"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_FILEPATH;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "chrischenhui"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_WORD;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "chrischenhui"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "chrischenhui"
        },
        "content": "import java.io.File;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "chrischenhui"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "chrischenhui"
        },
        "content": "import seedu.address.logic.commands.CommandResult;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "chrischenhui"
        },
        "content": "import seedu.address.logic.commands.HomeCommand;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "chrischenhui"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "chrischenhui"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "chrischenhui"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "chrischenhui"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "chrischenhui"
        },
        "content": "/**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "chrischenhui"
        },
        "content": " * Removes a word bank identified using it\u0027s unique name."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "chrischenhui"
        },
        "content": " */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "chrischenhui"
        },
        "content": "public class ImportCommand extends HomeCommand {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "chrischenhui"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "chrischenhui"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"import\";"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "chrischenhui"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "chrischenhui"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "chrischenhui"
        },
        "content": "            + \" w/WORDBANK f/FILEPATH\\n\""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "chrischenhui"
        },
        "content": "            + \"Eg: \" + COMMAND_WORD + \" \""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "chrischenhui"
        },
        "content": "            + PREFIX_WORD + \"sample \""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "chrischenhui"
        },
        "content": "            + PREFIX_FILEPATH + \"~/downloads\";"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "chrischenhui"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "chrischenhui"
        },
        "content": "    public static final String MESSAGE_IMPORT_CARD_SUCCESS \u003d \"Imported word bank: %1$s from location : %2$s\";"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "chrischenhui"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "chrischenhui"
        },
        "content": "    private static String wordBankName;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "chrischenhui"
        },
        "content": "    private static File directory;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "chrischenhui"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "chrischenhui"
        },
        "content": "    public ImportCommand(String wordBankName, File directory) {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "chrischenhui"
        },
        "content": "        this.wordBankName \u003d wordBankName;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "chrischenhui"
        },
        "content": "        this.directory \u003d directory;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "chrischenhui"
        },
        "content": "    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "chrischenhui"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "chrischenhui"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "chrischenhui"
        },
        "content": "    public CommandResult execute(Model model) throws CommandException {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "chrischenhui"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "chrischenhui"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "chrischenhui"
        },
        "content": "        return new ImportCommandResult(String.format(MESSAGE_IMPORT_CARD_SUCCESS, wordBankName, directory),"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "chrischenhui"
        },
        "content": "                this.directory.toPath(), wordBankName);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "chrischenhui"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "chrischenhui"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "chrischenhui"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "chrischenhui"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "chrischenhui"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "chrischenhui"
        },
        "content": "                || (other instanceof seedu.address.logic.commands.homecommands.ImportCommand // instanceof handles nulls"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "chrischenhui"
        },
        "content": "                \u0026\u0026 wordBankName.equals(((seedu.address.logic.commands.homecommands.ImportCommand) other).wordBankName));"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "chrischenhui"
        },
        "content": "    }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "chrischenhui"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "chrischenhui"
        },
        "content": "    public static File getDirectory() {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "chrischenhui"
        },
        "content": "        return directory;"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "chrischenhui"
        },
        "content": "    }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "chrischenhui"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "chrischenhui"
        },
        "content": "    public static String getWordBankName() {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "chrischenhui"
        },
        "content": "        return wordBankName;"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "chrischenhui"
        },
        "content": "    }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "chrischenhui"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "chrischenhui": 60
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/homecommands/ImportCommandResult.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "chrischenhui"
        },
        "content": "package seedu.address.logic.commands.homecommands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "chrischenhui"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "chrischenhui"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "chrischenhui"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "chrischenhui"
        },
        "content": "import seedu.address.storage.Storage;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "chrischenhui"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "chrischenhui"
        },
        "content": "/**"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "chrischenhui"
        },
        "content": " * Represents the command result returned by {@code ImportCommand}."
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "chrischenhui"
        },
        "content": " * This class is needed to pass some info to the {@code LogicManager} to update storage."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "chrischenhui"
        },
        "content": " */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "chrischenhui"
        },
        "content": "public class ImportCommandResult extends HomeCommandResult {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "chrischenhui"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "chrischenhui"
        },
        "content": "    private String wordBankName;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "chrischenhui"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "chrischenhui"
        },
        "content": "    public ImportCommandResult(String feedback, Path filePath, String wordBankName) {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "chrischenhui"
        },
        "content": "        super(feedback, filePath);"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "chrischenhui"
        },
        "content": "        this.wordBankName \u003d wordBankName;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "chrischenhui"
        },
        "content": "    }"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "chrischenhui"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "chrischenhui"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "chrischenhui"
        },
        "content": "    public void updateStorage(Storage storage) {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "chrischenhui"
        },
        "content": "        storage.importWordBank(filePath, wordBankName);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "chrischenhui"
        },
        "content": "    }"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "chrischenhui"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "chrischenhui": 24
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/homecommands/RemoveCommand.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "chrischenhui"
        },
        "content": "package seedu.address.logic.commands.homecommands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "chrischenhui"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "chrischenhui"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "chrischenhui"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "chrischenhui"
        },
        "content": "import seedu.address.commons.core.Messages;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "chrischenhui"
        },
        "content": "import seedu.address.logic.commands.CommandResult;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "chrischenhui"
        },
        "content": "import seedu.address.logic.commands.HomeCommand;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "chrischenhui"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "chrischenhui"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "chrischenhui"
        },
        "content": "import seedu.address.model.wordbank.WordBank;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "chrischenhui"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "chrischenhui"
        },
        "content": "/**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "chrischenhui"
        },
        "content": " * Removes a word bank identified using it\u0027s unique name."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "chrischenhui"
        },
        "content": " */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "chrischenhui"
        },
        "content": "public class RemoveCommand extends HomeCommand {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "chrischenhui"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "chrischenhui"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"remove\";"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "chrischenhui"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "chrischenhui"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "chrischenhui"
        },
        "content": "            + \" WORDBANK\\n\""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "chrischenhui"
        },
        "content": "            + \"Eg: \" + COMMAND_WORD + \" sample\";"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "chrischenhui"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "chrischenhui"
        },
        "content": "    private static final String MESSAGE_REMOVE_CARD_SUCCESS \u003d \"Removed word bank: %1$s\";"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "chrischenhui"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "chrischenhui"
        },
        "content": "    private static String wordBankName;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "chrischenhui"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "chrischenhui"
        },
        "content": "    public RemoveCommand(String wordBankName) {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "chrischenhui"
        },
        "content": "        this.wordBankName \u003d wordBankName;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "chrischenhui"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "chrischenhui"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "chrischenhui"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "chrischenhui"
        },
        "content": "    public CommandResult execute(Model model) throws CommandException {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "chrischenhui"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "chrischenhui"
        },
        "content": "        WordBank wb \u003d model.getWordBankFromName(wordBankName);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "chrischenhui"
        },
        "content": "        if (wb \u003d\u003d null) {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "chrischenhui"
        },
        "content": "            throw new CommandException(Messages.MESSAGE_DUPLICATE_WORD_BANK_NAME);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "chrischenhui"
        },
        "content": "        }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "chrischenhui"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "chrischenhui"
        },
        "content": "        model.updateWordBank(wordBankName);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "chrischenhui"
        },
        "content": "        return new RemoveCommandResult(String.format(MESSAGE_REMOVE_CARD_SUCCESS, wordBankName), wordBankName);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "chrischenhui"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "chrischenhui"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "chrischenhui"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "chrischenhui"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "chrischenhui"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "chrischenhui"
        },
        "content": "                || (other instanceof seedu.address.logic.commands.homecommands.RemoveCommand // instanceof handles nulls"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "chrischenhui"
        },
        "content": "                \u0026\u0026 wordBankName.equals(((seedu.address.logic.commands.homecommands.RemoveCommand) other).wordBankName));"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "chrischenhui"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "chrischenhui"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "chrischenhui"
        },
        "content": "    public static String getWordBankName() {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "chrischenhui"
        },
        "content": "        return wordBankName;"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "chrischenhui"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "chrischenhui"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "chrischenhui": 53
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/homecommands/RemoveCommandResult.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "chrischenhui"
        },
        "content": "package seedu.address.logic.commands.homecommands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "chrischenhui"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "chrischenhui"
        },
        "content": "import seedu.address.storage.Storage;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "chrischenhui"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "chrischenhui"
        },
        "content": "/**"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "chrischenhui"
        },
        "content": " * Represents the command result returned by {@code RemoveCommand}."
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "chrischenhui"
        },
        "content": " * This class is needed to pass some info to the {@code LogicManager} to update storage."
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "chrischenhui"
        },
        "content": " */"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "chrischenhui"
        },
        "content": "public class RemoveCommandResult extends HomeCommandResult {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "chrischenhui"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "chrischenhui"
        },
        "content": "    public RemoveCommandResult(String feedback, String wordBankName) {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "chrischenhui"
        },
        "content": "        super(feedback, wordBankName);"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "chrischenhui"
        },
        "content": "    }"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "chrischenhui"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "chrischenhui"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "chrischenhui"
        },
        "content": "    public void updateStorage(Storage storage) {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "chrischenhui"
        },
        "content": "        storage.removeWordBank(wordBankName);"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "chrischenhui"
        },
        "content": "    }"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "chrischenhui"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "chrischenhui": 19
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/settingcommands/AvatarCommand.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "dragontho"
        },
        "content": "package seedu.address.logic.commands.settingcommands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "dragontho"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "dragontho"
        },
        "content": "import seedu.address.logic.commands.CommandResult;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "dragontho"
        },
        "content": "import seedu.address.logic.commands.SettingsCommand;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "dragontho"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "dragontho"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "dragontho"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "dragontho"
        },
        "content": "/**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "dragontho"
        },
        "content": " * Class that represents a command to change the avatar of the player to 1 of 151 of the original pokemon."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "dragontho"
        },
        "content": " */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "dragontho"
        },
        "content": "public class AvatarCommand extends SettingsCommand {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "dragontho"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "dragontho"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"avatar\";"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "dragontho"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "dragontho"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d \"Parameters: avatar [AVATAR_ID]\\n\""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "dragontho"
        },
        "content": "            + \"Example: \" + COMMAND_WORD + \" 143. \""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "dragontho"
        },
        "content": "            + \"Set to 0 to change to a random avatar after every command.\";"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "dragontho"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "dragontho"
        },
        "content": "    private final int avatarId;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "dragontho"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "dragontho"
        },
        "content": "    public AvatarCommand(int avatarId) {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "dragontho"
        },
        "content": "        this.avatarId \u003d avatarId;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "dragontho"
        },
        "content": "    }"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "dragontho"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "dragontho"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "dragontho"
        },
        "content": "    public CommandResult execute(Model model) throws CommandException {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "dragontho"
        },
        "content": "        model.setAvatarId(this.avatarId);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "dragontho"
        },
        "content": "        return new CommandResult(\"Avatar now set to: \" + (avatarId \u003d\u003d 0 ? \"RANDOM\" : avatarId));"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "dragontho"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "dragontho"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "dragontho"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "dragontho": 31
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/settingcommands/DifficultyCommand.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "chrischenhui"
        },
        "content": "package seedu.address.logic.commands.settingcommands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "dragontho"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "dragontho"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": "import seedu.address.logic.commands.CommandResult;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": "import seedu.address.logic.commands.SettingsCommand;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "dragontho"
        },
        "content": "import seedu.address.model.appsettings.DifficultyEnum;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": "/**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": " * Class that represents a command to change the Model\u0027s difficulty for all its games."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": " */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": "public class DifficultyCommand extends SettingsCommand {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"difficulty\";"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "dragontho"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d \"Parameters: difficulty [easy/medium/hard]\\n\""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": "            + \"Example: \" + COMMAND_WORD + \" medium\";"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": "    private final DifficultyEnum difficulty;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": "    public DifficultyCommand(DifficultyEnum difficulty) {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "dragontho"
        },
        "content": "        requireNonNull(difficulty);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": "        this.difficulty \u003d difficulty;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": "    }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "dragontho"
        },
        "content": "    public CommandResult execute(Model model) {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "dragontho"
        },
        "content": "        model.setDefaultDifficulty(this.difficulty);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": "        return new CommandResult(\"Difficulty is now set to: \" + difficulty);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "dragontho": 7,
      "chrischenhui": 1,
      "kohyida1997": 25
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/settingcommands/HintsCommand.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "dragontho"
        },
        "content": "package seedu.address.logic.commands.settingcommands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "dragontho"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "dragontho"
        },
        "content": "import seedu.address.logic.commands.CommandResult;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "dragontho"
        },
        "content": "import seedu.address.logic.commands.SettingsCommand;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "dragontho"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "dragontho"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "dragontho"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "dragontho"
        },
        "content": "/**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "dragontho"
        },
        "content": " * Class that represents a command to change the Model\u0027s difficulty for all its games."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "dragontho"
        },
        "content": " */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "dragontho"
        },
        "content": "public class HintsCommand extends SettingsCommand {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "dragontho"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "dragontho"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"hints\";"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "dragontho"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "dragontho"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d \"Parameters: hints [on/off]\\n\""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "dragontho"
        },
        "content": "            + \"Example: \" + COMMAND_WORD + \" on\";"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "dragontho"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "dragontho"
        },
        "content": "    private final boolean hintsEnabled;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "dragontho"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "dragontho"
        },
        "content": "    public HintsCommand(boolean hintsEnabled) {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "dragontho"
        },
        "content": "        this.hintsEnabled \u003d hintsEnabled;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "dragontho"
        },
        "content": "    }"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "dragontho"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "dragontho"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "dragontho"
        },
        "content": "    public CommandResult execute(Model model) throws CommandException {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "dragontho"
        },
        "content": "        model.setHintsEnabled(this.hintsEnabled);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "dragontho"
        },
        "content": "        return new CommandResult(\"Hints now set to: \" + (this.hintsEnabled ? \"ON\" : \"OFF\"));"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "dragontho"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "dragontho"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "dragontho"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "dragontho": 30
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/settingcommands/ThemeCommand.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "dragontho"
        },
        "content": "package seedu.address.logic.commands.settingcommands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "dragontho"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "dragontho"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "dragontho"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "dragontho"
        },
        "content": "import seedu.address.logic.commands.CommandResult;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "dragontho"
        },
        "content": "import seedu.address.logic.commands.SettingsCommand;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "dragontho"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "dragontho"
        },
        "content": "import seedu.address.model.appsettings.ThemeEnum;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "dragontho"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "dragontho"
        },
        "content": "/**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "dragontho"
        },
        "content": " * Class that represents a command to change the Model\u0027s difficulty for all its games."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "dragontho"
        },
        "content": " */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "dragontho"
        },
        "content": "public class ThemeCommand extends SettingsCommand {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "dragontho"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "dragontho"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"theme\";"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "dragontho"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "dragontho"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d \"Parameters: theme [light/dark]\\n\""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "dragontho"
        },
        "content": "            + \"Example: \" + COMMAND_WORD + \" light\";"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "dragontho"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "dragontho"
        },
        "content": "    private final ThemeEnum theme;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "dragontho"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "dragontho"
        },
        "content": "    public ThemeCommand(ThemeEnum theme) {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "dragontho"
        },
        "content": "        requireNonNull(theme);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "dragontho"
        },
        "content": "        this.theme \u003d theme;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "dragontho"
        },
        "content": "    }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "dragontho"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "dragontho"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "dragontho"
        },
        "content": "    public CommandResult execute(Model model) {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "dragontho"
        },
        "content": "        model.setDefaultTheme(this.theme);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "dragontho"
        },
        "content": "        return new CommandResult(\"Theme now set to: \" + theme);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "dragontho"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "dragontho"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "dragontho"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "dragontho": 33
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/switches/HomeCommand.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "chrischenhui"
        },
        "content": "package seedu.address.logic.commands.switches;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "sreesubbash"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "sreesubbash"
        },
        "content": "import seedu.address.logic.commands.CommandResult;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "chrischenhui"
        },
        "content": "import seedu.address.logic.commands.SwitchCommand;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "sreesubbash"
        },
        "content": "import seedu.address.logic.commands.exceptions.ModeSwitchException;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "sreesubbash"
        },
        "content": "import seedu.address.logic.util.ModeEnum;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "sreesubbash"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "sreesubbash"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "sreesubbash"
        },
        "content": "/**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "sreesubbash"
        },
        "content": " * Terminates the program."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "sreesubbash"
        },
        "content": " */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "sreesubbash"
        },
        "content": "public class HomeCommand extends SwitchCommand {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "sreesubbash"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"home\";"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "dragontho"
        },
        "content": "    public static final String MESSAGE_HOME_ACKNOWLEDGEMENT \u003d \"Going home page as requested\";"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "sreesubbash"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "dragontho"
        },
        "content": "    public ModeEnum getNewMode(ModeEnum old) throws ModeSwitchException {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "dragontho"
        },
        "content": "        return ModeEnum.HOME;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "dragontho"
        },
        "content": "    }"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "sreesubbash"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "sreesubbash"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "sreesubbash"
        },
        "content": "    public CommandResult execute(Model model) {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "sreesubbash"
        },
        "content": "        return new CommandResult(MESSAGE_HOME_ACKNOWLEDGEMENT, false, false);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "sreesubbash"
        },
        "content": "    }"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "sreesubbash"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "sreesubbash"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "sreesubbash": 19,
      "dragontho": 4,
      "chrischenhui": 2
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/switches/OpenCommand.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "sreesubbash"
        },
        "content": "package seedu.address.logic.commands.switches;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "sreesubbash"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "sreesubbash"
        },
        "content": "import seedu.address.logic.commands.CommandResult;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "sreesubbash"
        },
        "content": "import seedu.address.logic.commands.SwitchCommand;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "sreesubbash"
        },
        "content": "import seedu.address.logic.commands.exceptions.ModeSwitchException;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "sreesubbash"
        },
        "content": "import seedu.address.logic.util.ModeEnum;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "sreesubbash"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "sreesubbash"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "sreesubbash"
        },
        "content": "/**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "sreesubbash"
        },
        "content": " * Terminates the program."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "sreesubbash"
        },
        "content": " */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "dragontho"
        },
        "content": "public class OpenCommand extends SwitchCommand {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "sreesubbash"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "dragontho"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"open\";"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "dragontho"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "dragontho"
        },
        "content": "    public static final String MESSAGE_HOME_ACKNOWLEDGEMENT \u003d \"Opening bank\";"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "sreesubbash"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "sreesubbash"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "sreesubbash"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "sreesubbash"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "sreesubbash"
        },
        "content": "    public CommandResult execute(Model model) {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "sreesubbash"
        },
        "content": "        return new CommandResult(MESSAGE_HOME_ACKNOWLEDGEMENT, false, false);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "sreesubbash"
        },
        "content": "    }"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "sreesubbash"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "dragontho"
        },
        "content": "    public ModeEnum getNewMode(ModeEnum old) throws ModeSwitchException {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "dragontho"
        },
        "content": "        return ModeEnum.OPEN;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "dragontho"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "sreesubbash"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "sreesubbash": 21,
      "dragontho": 7
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/switches/StartCommand.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "sreesubbash"
        },
        "content": "/*"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "sreesubbash"
        },
        "content": "Step 14."
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "sreesubbash"
        },
        "content": ""
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "sreesubbash"
        },
        "content": "It has to override execute() from command interface."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "sreesubbash"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "sreesubbash"
        },
        "content": "Interacts with Game interface."
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "sreesubbash"
        },
        "content": "Extends to Step 15 in Game.java"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "sreesubbash"
        },
        "content": " */"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "chrischenhui"
        },
        "content": "package seedu.address.logic.commands.switches;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": "import java.util.Collections;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "chrischenhui"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "sreesubbash"
        },
        "content": "import seedu.address.logic.commands.CommandResult;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "chrischenhui"
        },
        "content": "import seedu.address.logic.commands.SwitchCommand;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "sreesubbash"
        },
        "content": "import seedu.address.logic.util.ModeEnum;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": "import seedu.address.model.appsettings.DifficultyEnum;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "jascxx"
        },
        "content": "import seedu.address.model.game.Game;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "jascxx"
        },
        "content": "import seedu.address.model.wordbank.WordBank;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "jascxx"
        },
        "content": "import seedu.address.model.wordbanklist.WordBankList;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "chrischenhui"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "jascxx"
        },
        "content": "/**"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "jascxx"
        },
        "content": " * Starts the game."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "jascxx"
        },
        "content": " */"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "sreesubbash"
        },
        "content": "public class StartCommand extends SwitchCommand {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"start\";"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": "    static final String MESSAGE_TOO_FEW_CARDS \u003d \"There are too few cards: \";"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": "    static final String MESSAGE_TOO_FEW_CANNOT_START \u003d"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": "            \"Cannot start the game! (Needs at least 3 cards per Game)\";"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": "    static final String MESSAGE_WORDBANK_NOT_LOADED \u003d \"You have not loaded a wordBank!\";"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": "    private static final String MESSAGE_GAME_IN_PROGRESS \u003d \"A game session is still in progress!\""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": "            + \" (Use \u0027stop\u0027 to terminate) Guess the word:\";"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "chrischenhui"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "jascxx"
        },
        "content": "            + \": Starts the word bank identified by the index number used in the displayed card list.\\n\""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "chrischenhui"
        },
        "content": "            + \"Parameters: INDEX (must be a positive integer)\\n\""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "chrischenhui"
        },
        "content": "            + \"Example: \" + COMMAND_WORD + \" 1\";"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": "    private Optional\u003cDifficultyEnum\u003e difficulty;"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": "    public StartCommand(Optional\u003cDifficultyEnum\u003e difficulty) {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": "        this.difficulty \u003d difficulty;"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": "    }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": "    public ModeEnum getNewMode(ModeEnum old) {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": "        return ModeEnum.GAME;"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": "    }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": "    public CommandResult execute(Model model) throws CommandException {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "dragontho"
        },
        "content": "        if (model.getCurrentWordBank() \u003d\u003d null) {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": "            throw new CommandException(MESSAGE_WORDBANK_NOT_LOADED);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": "        }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": "        if (!model.gameIsOver()) {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": "            throw new CommandException(MESSAGE_GAME_IN_PROGRESS"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": "                    + \"\\n\" + model.getGame().getCurrQuestion());"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": "        }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "dragontho"
        },
        "content": "        String wordBankName \u003d model.getCurrentWordBank().getName();"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "jascxx"
        },
        "content": "        WordBankList wbList \u003d model.getWordBankList();"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "chrischenhui"
        },
        "content": "        WordBank wordBank \u003d wbList.getWordBankFromName(wordBankName);"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "jascxx"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": "        // Check size of WordBank, if less than 3 cards, cannot start game."
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": "        if (wordBank.size() \u003c 3) {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": "            throw new CommandException(MESSAGE_TOO_FEW_CARDS + wordBank.size()"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": "            + \"\\n\" + MESSAGE_TOO_FEW_CANNOT_START);"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": "        }"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": "        if (difficulty.isPresent()) {"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": "            Game newGame \u003d new Game(wordBank, x -\u003e Collections.shuffle(x), difficulty.get());"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": "            model.setGame(newGame);"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": "            Game newGame \u003d new Game(wordBank, x -\u003e Collections.shuffle(x), model.getDefaultDifficulty());"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": "            model.setGame(newGame);"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": "        }"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "jascxx"
        },
        "content": "        String currQuestion \u003d model.getGame().getCurrQuestion();"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "jascxx"
        },
        "content": "        return new StartCommandResult(wordBankName, currQuestion);"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": "    }"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "sreesubbash": 11,
      "dragontho": 2,
      "jascxx": 11,
      "chrischenhui": 8,
      "kohyida1997": 59
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/switches/StartCommandResult.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jascxx"
        },
        "content": "package seedu.address.logic.commands.switches;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "jascxx"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "jascxx"
        },
        "content": "import seedu.address.logic.commands.CommandResult;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "jascxx"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "jascxx"
        },
        "content": "/**"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "jascxx"
        },
        "content": " * Represents the command result returned by {@code StartCommand}."
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "jascxx"
        },
        "content": " * Used mainly to pass the info of the title to the GameManager."
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "jascxx"
        },
        "content": " */"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "jascxx"
        },
        "content": "public class StartCommandResult extends CommandResult {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "jascxx"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": "    public static final String MESSAGE_GAME_START_SUCCESS \u003d \"Game session in progress for: \";"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "jascxx"
        },
        "content": "    public static final String FIRST_QUESTION_MESSAGE \u003d \"guess the keyword! \";"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "jascxx"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "jascxx"
        },
        "content": "    private String title;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "jascxx"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "jascxx"
        },
        "content": "    public StartCommandResult(String title, String firstQuestion) {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": "        super(MESSAGE_GAME_START_SUCCESS + title + \", \" + FIRST_QUESTION_MESSAGE"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "jascxx"
        },
        "content": "                        + \"\\n\""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "jascxx"
        },
        "content": "                        + firstQuestion,"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "jascxx"
        },
        "content": "                true);"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "jascxx"
        },
        "content": "        this.title \u003d title;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "jascxx"
        },
        "content": "    }"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "jascxx"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "jascxx"
        },
        "content": "    public String getTitle() {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "jascxx"
        },
        "content": "        return title;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "jascxx"
        },
        "content": "    }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "jascxx"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "jascxx": 25,
      "kohyida1997": 2
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/switches/SwitchToSettingsCommand.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": "package seedu.address.logic.commands.switches;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": "import seedu.address.logic.commands.CommandResult;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": "import seedu.address.logic.commands.SwitchCommand;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "sreesubbash"
        },
        "content": "import seedu.address.logic.commands.exceptions.ModeSwitchException;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "sreesubbash"
        },
        "content": "import seedu.address.logic.util.ModeEnum;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "dragontho"
        },
        "content": "import seedu.address.model.appsettings.DifficultyEnum;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": "/**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": " * Class that represents a command that switches the app into Settings mode. This mode is required to"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": " * make changes to the difficulty of the game."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": " */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": "public class SwitchToSettingsCommand extends SwitchCommand {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"settings\";"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": "    public static final String MESSAGE_LIST_ACKNOWLEDGEMENT \u003d \"Now on settings page. \""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "dragontho"
        },
        "content": "            + \"You can change various settings from here.\";"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": "    public CommandResult execute(Model model) throws CommandException {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "dragontho"
        },
        "content": "        DifficultyEnum difficulty \u003d model.getDefaultDifficulty();"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": "        return new CommandResult(MESSAGE_LIST_ACKNOWLEDGEMENT"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": "                + \"\\nCurrent Difficulty is: \" + difficulty"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": "                + \" (\" + (difficulty.getTimeAllowedPerQuestion() * 1.0) / 1000 + \" seconds)\");"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "sreesubbash"
        },
        "content": "    public ModeEnum getNewMode(ModeEnum old) throws ModeSwitchException {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": "        return ModeEnum.SETTINGS;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "sreesubbash"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "sreesubbash"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "sreesubbash"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "sreesubbash": 6,
      "dragontho": 3,
      "kohyida1997": 28
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/parser/ClassPair.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "sreesubbash"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "sreesubbash"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "sreesubbash"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "sreesubbash"
        },
        "content": " * Pair class helps to hold two classes together."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "sreesubbash"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "sreesubbash"
        },
        "content": "public class ClassPair {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "sreesubbash"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "sreesubbash"
        },
        "content": "    private Class command;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "sreesubbash"
        },
        "content": "    private Class parser;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "sreesubbash"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "sreesubbash"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "sreesubbash"
        },
        "content": "     * A simple constructor to create a pair of classes"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "sreesubbash"
        },
        "content": "     * @param command"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "sreesubbash"
        },
        "content": "     * @param parser"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "sreesubbash"
        },
        "content": "     */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "sreesubbash"
        },
        "content": "    public ClassPair(Class command, Class parser) {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "sreesubbash"
        },
        "content": "        this.command \u003d command;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "sreesubbash"
        },
        "content": "        this.parser \u003d parser;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "sreesubbash"
        },
        "content": "    }"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "sreesubbash"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "sreesubbash"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "sreesubbash"
        },
        "content": "     * Gets command class from pair."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "sreesubbash"
        },
        "content": "     * @return Command Class"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "sreesubbash"
        },
        "content": "     */"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "sreesubbash"
        },
        "content": "    public Class getCommand() {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "sreesubbash"
        },
        "content": "        return this.command;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "sreesubbash"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "sreesubbash"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "sreesubbash"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "sreesubbash"
        },
        "content": "     * Gets parser class from pair."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "sreesubbash"
        },
        "content": "     * @return Parser Class"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "sreesubbash"
        },
        "content": "     */"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "sreesubbash"
        },
        "content": "    public Class getParser() {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "sreesubbash"
        },
        "content": "        return this.parser;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "sreesubbash"
        },
        "content": "    }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "sreesubbash"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "sreesubbash": 36
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/parser/ClassUtil.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "sreesubbash"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "sreesubbash"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "sreesubbash"
        },
        "content": "import java.lang.reflect.Constructor;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "sreesubbash"
        },
        "content": "import java.lang.reflect.Field;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "sreesubbash"
        },
        "content": "import java.lang.reflect.InvocationTargetException;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "sreesubbash"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "sreesubbash"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "sreesubbash"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "sreesubbash"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "sreesubbash"
        },
        "content": "import seedu.address.logic.commands.Command;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "sreesubbash"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "sreesubbash"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "sreesubbash"
        },
        "content": "/**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "sreesubbash"
        },
        "content": " * Contains utility methods used for parsing strings in the various *Parser classes."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "sreesubbash"
        },
        "content": " */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": "@SuppressWarnings(\"unchecked\")"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "sreesubbash"
        },
        "content": "public class ClassUtil {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "sreesubbash"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "sreesubbash"
        },
        "content": "    private List\u003cClassPair\u003e classPairs;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "sreesubbash"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "sreesubbash"
        },
        "content": "    public ClassUtil () {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "sreesubbash"
        },
        "content": "        this.classPairs \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "sreesubbash"
        },
        "content": "    }"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "sreesubbash"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "sreesubbash"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "sreesubbash"
        },
        "content": "     * Adds classPair into internal list"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "sreesubbash"
        },
        "content": "     * @param classPair"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "sreesubbash"
        },
        "content": "     */"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "sreesubbash"
        },
        "content": "    public void add(ClassPair classPair) {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "sreesubbash"
        },
        "content": "        classPairs.add(classPair);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "sreesubbash"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "sreesubbash"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "sreesubbash"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "sreesubbash"
        },
        "content": "     * Gets List of attribute values from Command Classes in classUtil."
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "sreesubbash"
        },
        "content": "     * @param attr key of attribute"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "sreesubbash"
        },
        "content": "     * @return List of attribute values"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "sreesubbash"
        },
        "content": "     */"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "sreesubbash"
        },
        "content": "    public List\u003cString\u003e getAttribute(String attr) {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "sreesubbash"
        },
        "content": "        List\u003cString\u003e result \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "sreesubbash"
        },
        "content": "        for (ClassPair clsPair : classPairs) {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "sreesubbash"
        },
        "content": "            try {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "sreesubbash"
        },
        "content": "                Class cls \u003d clsPair.getCommand();"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "sreesubbash"
        },
        "content": "                Field f \u003d cls.getField(attr);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "sreesubbash"
        },
        "content": "                String strValue \u003d (String) f.get(null);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "sreesubbash"
        },
        "content": "                result.add(strValue);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "sreesubbash"
        },
        "content": "            } catch (NoSuchFieldException | IllegalAccessException e) {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "sreesubbash"
        },
        "content": "                //result.add(null);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "sreesubbash"
        },
        "content": "            }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "sreesubbash"
        },
        "content": "        }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "sreesubbash"
        },
        "content": "        return result;"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "sreesubbash"
        },
        "content": "    }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "sreesubbash"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "sreesubbash"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "sreesubbash"
        },
        "content": "     * Gets Command based on Parser and Command Classes in classUtil."
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "sreesubbash"
        },
        "content": "     * @param commandWord from user input"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "sreesubbash"
        },
        "content": "     * @param arguments from user input"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "sreesubbash"
        },
        "content": "     * @return Command after parsing"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "sreesubbash"
        },
        "content": "     * @throws ParseException"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "sreesubbash"
        },
        "content": "     */"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "sreesubbash"
        },
        "content": "    public Command getCommandInstance(String commandWord, String arguments)"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "sreesubbash"
        },
        "content": "            throws ParseException {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "sreesubbash"
        },
        "content": "        for (ClassPair clsPair : classPairs) {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "sreesubbash"
        },
        "content": "            try {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "sreesubbash"
        },
        "content": "                Class cls \u003d clsPair.getCommand();"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "sreesubbash"
        },
        "content": "                Field f \u003d cls.getField(\"COMMAND_WORD\");"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "sreesubbash"
        },
        "content": "                String strValue \u003d (String) f.get(null);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "sreesubbash"
        },
        "content": "                if (strValue.equals(commandWord)) {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "sreesubbash"
        },
        "content": "                    Class parser \u003d clsPair.getParser();"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "sreesubbash"
        },
        "content": "                    if (parser \u003d\u003d null) {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "sreesubbash"
        },
        "content": "                        Constructor cons \u003d cls.getConstructor();"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "sreesubbash"
        },
        "content": "                        Command test \u003d (Command) cons.newInstance();"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "sreesubbash"
        },
        "content": "                        return test;"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "sreesubbash"
        },
        "content": "                    } else {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "sreesubbash"
        },
        "content": "                        Constructor cons \u003d parser.getConstructor();"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "sreesubbash"
        },
        "content": "                        Parser test \u003d (Parser) cons.newInstance();"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "sreesubbash"
        },
        "content": "                        return test.parse(arguments);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "sreesubbash"
        },
        "content": "                    }"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "sreesubbash"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "sreesubbash"
        },
        "content": "                }"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "sreesubbash"
        },
        "content": "            } catch (NoSuchFieldException | NoSuchMethodException | InstantiationException | IllegalAccessException"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "sreesubbash"
        },
        "content": "                    | InvocationTargetException e) {"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "sreesubbash"
        },
        "content": "                System.err.println(e);"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "sreesubbash"
        },
        "content": "            }"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "sreesubbash"
        },
        "content": "        }"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "sreesubbash"
        },
        "content": "        return null;"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "sreesubbash"
        },
        "content": "    }"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "sreesubbash"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "sreesubbash"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "sreesubbash": 87,
      "kohyida1997": 1
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/parser/CliSyntax.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": " * Contains Command Line Interface (CLI) syntax definitions common to multiple commands"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "public class CliSyntax {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "    /* Prefix definitions */"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "sreesubbash"
        },
        "content": "    public static final Prefix PREFIX_WORD \u003d new Prefix(\"w/\");"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "sreesubbash"
        },
        "content": "    public static final Prefix PREFIX_MEANING \u003d new Prefix(\"m/\");"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final Prefix PREFIX_TAG \u003d new Prefix(\"t/\");"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "chrischenhui"
        },
        "content": "    public static final Prefix PREFIX_FILEPATH \u003d new Prefix(\"f/\");"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "sreesubbash": 2,
      "chrischenhui": 1,
      "-": 11
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/parser/ParserManager.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "sreesubbash"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "sreesubbash"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_UNKNOWN_COMMAND;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "sreesubbash"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "sreesubbash"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "sreesubbash"
        },
        "content": "import java.util.regex.Pattern;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "sreesubbash"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "sreesubbash"
        },
        "content": "import seedu.address.logic.commands.Command;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "sreesubbash"
        },
        "content": "import seedu.address.logic.commands.SwitchCommand;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "chrischenhui"
        },
        "content": "import seedu.address.logic.commands.cardcommands.AddCommand;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "chrischenhui"
        },
        "content": "import seedu.address.logic.commands.cardcommands.ClearCommand;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "chrischenhui"
        },
        "content": "import seedu.address.logic.commands.cardcommands.DeleteCommand;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "chrischenhui"
        },
        "content": "import seedu.address.logic.commands.cardcommands.EditCommand;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "chrischenhui"
        },
        "content": "import seedu.address.logic.commands.cardcommands.ExitCommand;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "chrischenhui"
        },
        "content": "import seedu.address.logic.commands.cardcommands.FindCommand;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "chrischenhui"
        },
        "content": "import seedu.address.logic.commands.cardcommands.ListCommand;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "sreesubbash"
        },
        "content": "import seedu.address.logic.commands.exceptions.ModeSwitchException;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "sreesubbash"
        },
        "content": "import seedu.address.logic.commands.gamecommands.GuessCommand;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "sreesubbash"
        },
        "content": "import seedu.address.logic.commands.gamecommands.SkipCommand;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "sreesubbash"
        },
        "content": "import seedu.address.logic.commands.gamecommands.StopCommand;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "chrischenhui"
        },
        "content": "import seedu.address.logic.commands.homecommands.BankCommand;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "chrischenhui"
        },
        "content": "import seedu.address.logic.commands.homecommands.CreateCommand;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "chrischenhui"
        },
        "content": "import seedu.address.logic.commands.homecommands.ExportCommand;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "sreesubbash"
        },
        "content": "import seedu.address.logic.commands.homecommands.HelpCommand;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "chrischenhui"
        },
        "content": "import seedu.address.logic.commands.homecommands.ImportCommand;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "chrischenhui"
        },
        "content": "import seedu.address.logic.commands.homecommands.RemoveCommand;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "dragontho"
        },
        "content": "import seedu.address.logic.commands.settingcommands.AvatarCommand;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "sreesubbash"
        },
        "content": "import seedu.address.logic.commands.settingcommands.DifficultyCommand;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "sreesubbash"
        },
        "content": "import seedu.address.logic.commands.settingcommands.HintsCommand;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "sreesubbash"
        },
        "content": "import seedu.address.logic.commands.settingcommands.ThemeCommand;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "sreesubbash"
        },
        "content": "import seedu.address.logic.commands.switches.HomeCommand;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "dragontho"
        },
        "content": "import seedu.address.logic.commands.switches.OpenCommand;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "sreesubbash"
        },
        "content": "import seedu.address.logic.commands.switches.StartCommand;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "sreesubbash"
        },
        "content": "import seedu.address.logic.commands.switches.SwitchToSettingsCommand;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "sreesubbash"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "sreesubbash"
        },
        "content": "import seedu.address.logic.parser.game.GuessCommandParser;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "chrischenhui"
        },
        "content": "import seedu.address.logic.parser.home.BankCommandParser;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "chrischenhui"
        },
        "content": "import seedu.address.logic.parser.home.CreateCommandParser;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "chrischenhui"
        },
        "content": "import seedu.address.logic.parser.home.ExportCommandParser;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "chrischenhui"
        },
        "content": "import seedu.address.logic.parser.home.ImportCommandParser;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "chrischenhui"
        },
        "content": "import seedu.address.logic.parser.home.RemoveCommandParser;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "chrischenhui"
        },
        "content": "import seedu.address.logic.parser.open.AddCommandParser;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "chrischenhui"
        },
        "content": "import seedu.address.logic.parser.open.DeleteCommandParser;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "chrischenhui"
        },
        "content": "import seedu.address.logic.parser.open.EditCommandParser;"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "chrischenhui"
        },
        "content": "import seedu.address.logic.parser.open.FindCommandParser;"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "dragontho"
        },
        "content": "import seedu.address.logic.parser.settings.AvatarCommandParser;"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "sreesubbash"
        },
        "content": "import seedu.address.logic.parser.settings.DifficultyCommandParser;"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "sreesubbash"
        },
        "content": "import seedu.address.logic.parser.settings.HintsCommandParser;"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "sreesubbash"
        },
        "content": "import seedu.address.logic.parser.settings.ThemeCommandParser;"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "sreesubbash"
        },
        "content": "import seedu.address.logic.util.AutoFillAction;"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "sreesubbash"
        },
        "content": "import seedu.address.logic.util.ModeEnum;"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "sreesubbash"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "sreesubbash"
        },
        "content": "/**"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "sreesubbash"
        },
        "content": " * Manages SpecificMode Parsers depending on internal state"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "sreesubbash"
        },
        "content": " */"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "sreesubbash"
        },
        "content": "public class ParserManager {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "sreesubbash"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "sreesubbash"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "sreesubbash"
        },
        "content": "     * Used for initial separation of command word and args."
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "sreesubbash"
        },
        "content": "     */"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "sreesubbash"
        },
        "content": "    private static final Pattern BASIC_COMMAND_FORMAT \u003d Pattern.compile(\"(?\u003ccommandWord\u003e\\\\S+)(?\u003carguments\u003e.*)\");"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "sreesubbash"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "sreesubbash"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "sreesubbash"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "sreesubbash"
        },
        "content": "     * Used to maintain internal state."
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "sreesubbash"
        },
        "content": "     */"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "sreesubbash"
        },
        "content": "    private ModeEnum mode;"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "sreesubbash"
        },
        "content": "    private boolean gameIsOver;"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "dragontho"
        },
        "content": "    private boolean bankLoaded;"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "sreesubbash"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "sreesubbash"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "sreesubbash"
        },
        "content": "     * Used to parse SwitchCommands."
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "sreesubbash"
        },
        "content": "     */"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "sreesubbash"
        },
        "content": "    private SpecificModeParser switchParser;"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "sreesubbash"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "sreesubbash"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "sreesubbash"
        },
        "content": "     * Used to parse Commands belonging to current Mode."
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "sreesubbash"
        },
        "content": "     */"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "sreesubbash"
        },
        "content": "    private SpecificModeParser currentParser;"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "sreesubbash"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "sreesubbash"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "sreesubbash"
        },
        "content": "     * Empty constructor that initialises switchParser"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "sreesubbash"
        },
        "content": "     * and sets currentParser to HomeMode"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "sreesubbash"
        },
        "content": "     */"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "sreesubbash"
        },
        "content": "    public ParserManager() {"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "dragontho"
        },
        "content": "        this.mode \u003d ModeEnum.HOME;"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "sreesubbash"
        },
        "content": "        this.gameIsOver \u003d true;"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "sreesubbash"
        },
        "content": "        this.switchParser \u003d new SpecificModeParser();"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "dragontho"
        },
        "content": "        switchParser.add(OpenCommand.class, null);"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "sreesubbash"
        },
        "content": "        switchParser.add(HomeCommand.class, null);"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "sreesubbash"
        },
        "content": "        switchParser.add(StartCommand.class, StartCommandParser.class);"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "sreesubbash"
        },
        "content": "        switchParser.add(SwitchToSettingsCommand.class, null);"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "sreesubbash"
        },
        "content": "        this.currentParser \u003d setCurrentParser(this.mode);"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "sreesubbash"
        },
        "content": "    }"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "sreesubbash"
        },
        "content": ""
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "sreesubbash"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "sreesubbash"
        },
        "content": "     * Gets current mode from internal state."
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "sreesubbash"
        },
        "content": "     * @return ModeEnum representing current mode"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "sreesubbash"
        },
        "content": "     */"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "sreesubbash"
        },
        "content": "    public ModeEnum getMode() {"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "sreesubbash"
        },
        "content": "        return mode;"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "sreesubbash"
        },
        "content": "    }"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "sreesubbash"
        },
        "content": ""
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "sreesubbash"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "sreesubbash"
        },
        "content": "     * Constructs and returns a SpecificModeParser matching mode parameter."
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "sreesubbash"
        },
        "content": "     * @param mode current mode"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "sreesubbash"
        },
        "content": "     * @return SpecificModeParser that matches mode"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "sreesubbash"
        },
        "content": "     */"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "sreesubbash"
        },
        "content": "    private SpecificModeParser setCurrentParser(ModeEnum mode) {"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "sreesubbash"
        },
        "content": ""
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "sreesubbash"
        },
        "content": "        SpecificModeParser temp \u003d new SpecificModeParser();"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "sreesubbash"
        },
        "content": "        switch (this.mode) {"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "dragontho"
        },
        "content": "        case OPEN:"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "sreesubbash"
        },
        "content": "            temp.add(AddCommand.class, AddCommandParser.class);"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "sreesubbash"
        },
        "content": "            temp.add(EditCommand.class, EditCommandParser.class);"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "sreesubbash"
        },
        "content": "            temp.add(DeleteCommand.class, DeleteCommandParser.class);"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "sreesubbash"
        },
        "content": "            temp.add(FindCommand.class, FindCommandParser.class);"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "sreesubbash"
        },
        "content": "            temp.add(ClearCommand.class, null);"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "sreesubbash"
        },
        "content": "            temp.add(ListCommand.class, null);"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "sreesubbash"
        },
        "content": "            return temp;"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "dragontho"
        },
        "content": "        case HOME:"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "sreesubbash"
        },
        "content": "            temp.add(BankCommand.class, BankCommandParser.class);"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "sreesubbash"
        },
        "content": "            temp.add(ExitCommand.class, null);"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "sreesubbash"
        },
        "content": "            temp.add(ImportCommand.class, ImportCommandParser.class);"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "sreesubbash"
        },
        "content": "            temp.add(ExportCommand.class, ExportCommandParser.class);"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "sreesubbash"
        },
        "content": "            temp.add(CreateCommand.class, CreateCommandParser.class);"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "sreesubbash"
        },
        "content": "            temp.add(RemoveCommand.class, RemoveCommandParser.class);"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "sreesubbash"
        },
        "content": "            temp.add(HelpCommand.class, null);"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "sreesubbash"
        },
        "content": "            return temp;"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "sreesubbash"
        },
        "content": "        case SETTINGS:"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "sreesubbash"
        },
        "content": "            temp.add(DifficultyCommand.class, DifficultyCommandParser.class);"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "sreesubbash"
        },
        "content": "            temp.add(HintsCommand.class, HintsCommandParser.class);"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "sreesubbash"
        },
        "content": "            temp.add(ThemeCommand.class, ThemeCommandParser.class);"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "dragontho"
        },
        "content": "            temp.add(AvatarCommand.class, AvatarCommandParser.class);"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "sreesubbash"
        },
        "content": "            return temp;"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "sreesubbash"
        },
        "content": "        case GAME:"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "sreesubbash"
        },
        "content": "            temp.add(GuessCommand.class, GuessCommandParser.class);"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "sreesubbash"
        },
        "content": "            temp.add(SkipCommand.class, null);"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "sreesubbash"
        },
        "content": "            temp.add(StopCommand.class, null);"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "sreesubbash"
        },
        "content": "            return temp;"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "sreesubbash"
        },
        "content": "        default:"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "sreesubbash"
        },
        "content": "            return null;"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "sreesubbash"
        },
        "content": "        }"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "sreesubbash"
        },
        "content": "    }"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "sreesubbash"
        },
        "content": ""
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "sreesubbash"
        },
        "content": ""
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "sreesubbash"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "sreesubbash"
        },
        "content": "     * Updates the current state of ParserManager based on input booleans."
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "sreesubbash"
        },
        "content": "     * @param bankLoaded if bank is loaded"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "sreesubbash"
        },
        "content": "     * @param gameIsOver if game is over"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "sreesubbash"
        },
        "content": "     */"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "dragontho"
        },
        "content": "    public void updateState(boolean bankLoaded, boolean gameIsOver) {"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "dragontho"
        },
        "content": "        this.bankLoaded \u003d bankLoaded;"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "sreesubbash"
        },
        "content": "        this.gameIsOver \u003d gameIsOver;"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "sreesubbash"
        },
        "content": "    }"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "sreesubbash"
        },
        "content": ""
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "sreesubbash"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "sreesubbash"
        },
        "content": "     * Gets AutoFillAction objects based on input string."
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "sreesubbash"
        },
        "content": "     * @param input current user input"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "sreesubbash"
        },
        "content": "     * @return List of AutoFillActions"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "sreesubbash"
        },
        "content": "     */"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "sreesubbash"
        },
        "content": "    public List\u003cAutoFillAction\u003e getAutoFill(String input) {"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "sreesubbash"
        },
        "content": "        List\u003cAutoFillAction\u003e temp \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "dragontho"
        },
        "content": "        if (gameIsOver \u0026\u0026 bankLoaded) {"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "sreesubbash"
        },
        "content": "            for (AutoFillAction action : switchParser.getAutoFill(input)) {"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "sreesubbash"
        },
        "content": "                temp.add(action);"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "sreesubbash"
        },
        "content": "            }"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "sreesubbash"
        },
        "content": "        }"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "sreesubbash"
        },
        "content": "        for (AutoFillAction action : currentParser.getAutoFill(input)) {"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "sreesubbash"
        },
        "content": "            temp.add(action);"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "sreesubbash"
        },
        "content": "        }"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "sreesubbash"
        },
        "content": "        return temp;"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "sreesubbash"
        },
        "content": "    }"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "sreesubbash"
        },
        "content": ""
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "sreesubbash"
        },
        "content": ""
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "sreesubbash"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "sreesubbash"
        },
        "content": "     * Parses user input into command for execution."
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "sreesubbash"
        },
        "content": "     *"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "sreesubbash"
        },
        "content": "     * @param userInput full user input string"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "sreesubbash"
        },
        "content": "     * @return the command based on the user input"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "sreesubbash"
        },
        "content": "     * @throws ParseException if the user input does not conform the expected format"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "sreesubbash"
        },
        "content": "     */"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "sreesubbash"
        },
        "content": "    public Command parseCommand(String userInput) throws ParseException, ModeSwitchException {"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "sreesubbash"
        },
        "content": "        Command temp \u003d null;"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "dragontho"
        },
        "content": "        if (gameIsOver \u0026\u0026 bankLoaded) {"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "sreesubbash"
        },
        "content": "            temp \u003d switchParser.parseCommand(userInput);"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "sreesubbash"
        },
        "content": "        }"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "sreesubbash"
        },
        "content": "        if (temp !\u003d null) {"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "sreesubbash"
        },
        "content": "            SwitchCommand switchCommand \u003d (SwitchCommand) temp;"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "sreesubbash"
        },
        "content": "            mode \u003d switchCommand.getNewMode(mode);"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "sreesubbash"
        },
        "content": "            currentParser \u003d setCurrentParser(mode);"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "sreesubbash"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "sreesubbash"
        },
        "content": "            temp \u003d currentParser.parseCommand(userInput);"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "sreesubbash"
        },
        "content": "        }"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "sreesubbash"
        },
        "content": "        if (temp !\u003d null) {"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "sreesubbash"
        },
        "content": "            return temp;"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "sreesubbash"
        },
        "content": "        }"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": "        throw new ParseException(MESSAGE_UNKNOWN_COMMAND);"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "sreesubbash"
        },
        "content": "    }"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "sreesubbash"
        },
        "content": ""
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "sreesubbash"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "sreesubbash"
        },
        "content": "     * Gets a list of modes available to switch to based on internal state"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "sreesubbash"
        },
        "content": "     * @return a list of ModeEnum"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "sreesubbash"
        },
        "content": "     */"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "sreesubbash"
        },
        "content": "    public List\u003cModeEnum\u003e getModes() {"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "sreesubbash"
        },
        "content": "        List\u003cModeEnum\u003e temp \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "dragontho"
        },
        "content": "        if (gameIsOver \u0026\u0026 bankLoaded) {"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "dragontho"
        },
        "content": "            temp.add(ModeEnum.OPEN);"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "dragontho"
        },
        "content": "            temp.add(ModeEnum.HOME);"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "sreesubbash"
        },
        "content": "            temp.add(ModeEnum.SETTINGS);"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "sreesubbash"
        },
        "content": "            temp.add(ModeEnum.GAME);"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "dragontho"
        },
        "content": "        }"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "sreesubbash"
        },
        "content": "        return temp;"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "sreesubbash"
        },
        "content": "    }"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "sreesubbash"
        },
        "content": ""
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "sreesubbash"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "sreesubbash": 176,
      "dragontho": 17,
      "chrischenhui": 21,
      "kohyida1997": 3
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/parser/ParserUtil.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "chrischenhui"
        },
        "content": "import java.io.File;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "chrischenhui"
        },
        "content": "import java.nio.file.Paths;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Collection;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.HashSet;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.util.StringUtil;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "jascxx"
        },
        "content": "import seedu.address.model.card.Meaning;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "jascxx"
        },
        "content": "import seedu.address.model.card.Word;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.tag.Tag;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": " * Contains utility methods used for parsing strings in the various *Parser classes."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "public class ParserUtil {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_INVALID_INDEX \u003d \"Index is not a non-zero unsigned integer.\";"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "     * Parses {@code oneBasedIndex} into an {@code Index} and returns it. Leading and trailing whitespaces will be"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "     * trimmed."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws ParseException if the specified index is invalid (not non-zero unsigned integer)."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    public static Index parseIndex(String oneBasedIndex) throws ParseException {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        String trimmedIndex \u003d oneBasedIndex.trim();"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!StringUtil.isNonZeroUnsignedInteger(trimmedIndex)) {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new ParseException(MESSAGE_INVALID_INDEX);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "        return Index.fromOneBased(Integer.parseInt(trimmedIndex));"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "jascxx"
        },
        "content": "     * Parses a {@code String word} into a {@code Name}."
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "     * Leading and trailing whitespaces will be trimmed."
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "jascxx"
        },
        "content": "     * @throws ParseException if the given {@code word} is invalid."
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "jascxx"
        },
        "content": "    public static Word parseWord(String word) throws ParseException {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "jascxx"
        },
        "content": "        requireNonNull(word);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "jascxx"
        },
        "content": "        String trimmedName \u003d word.trim();"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "jascxx"
        },
        "content": "        if (!Word.isValidWord(trimmedName)) {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "jascxx"
        },
        "content": "            throw new ParseException(Word.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "jascxx"
        },
        "content": "        return new Word(trimmedName);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "chrischenhui"
        },
        "content": "     * Parses a {@code String pathFile} into a {@code File}."
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "     * Leading and trailing whitespaces will be trimmed."
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "chrischenhui"
        },
        "content": "     * @throws ParseException if the given {@code word} is invalid."
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "chrischenhui"
        },
        "content": "    public static File parseFile(String pathFile) throws ParseException {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "chrischenhui"
        },
        "content": "        requireNonNull(pathFile);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "chrischenhui"
        },
        "content": "        String trimmedPathFile \u003d pathFile.trim();"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "chrischenhui"
        },
        "content": "        if (trimmedPathFile.charAt(0) \u003d\u003d \u0027~\u0027) {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "chrischenhui"
        },
        "content": "            trimmedPathFile \u003d System.getProperty(\"user.home\") + File.separator + trimmedPathFile.substring(1);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "chrischenhui"
        },
        "content": "        File directory \u003d Paths.get(trimmedPathFile).toFile();"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "chrischenhui"
        },
        "content": "        if (!directory.exists()) {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "chrischenhui"
        },
        "content": "            throw new ParseException(\"File does not exist\");"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "chrischenhui"
        },
        "content": "        return directory;"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "jascxx"
        },
        "content": "     * Parses a {@code String meaning} into a {@code Meaning}."
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "     * Leading and trailing whitespaces will be trimmed."
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "jascxx"
        },
        "content": "     * @throws ParseException if the given {@code meaning} is invalid."
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "jascxx"
        },
        "content": "    public static Meaning parseMeaning(String meaning) throws ParseException {"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "jascxx"
        },
        "content": "        requireNonNull(meaning);"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "jascxx"
        },
        "content": "        String trimmedMeaning \u003d meaning.trim();"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "jascxx"
        },
        "content": "        if (!Meaning.isValidMeaning(trimmedMeaning)) {"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "jascxx"
        },
        "content": "            throw new ParseException(Meaning.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "jascxx"
        },
        "content": "        return new Meaning(trimmedMeaning);"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "     * Parses a {@code String tag} into a {@code Tag}."
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "     * Leading and trailing whitespaces will be trimmed."
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws ParseException if the given {@code tag} is invalid."
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "    public static Tag parseTag(String tag) throws ParseException {"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(tag);"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "        String trimmedTag \u003d tag.trim();"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!Tag.isValidTagName(trimmedTag)) {"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new ParseException(Tag.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "        return new Tag(trimmedTag);"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "     * Parses {@code Collection\u003cString\u003e tags} into a {@code Set\u003cTag\u003e}."
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "    public static Set\u003cTag\u003e parseTags(Collection\u003cString\u003e tags) throws ParseException {"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(tags);"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "        final Set\u003cTag\u003e tagSet \u003d new HashSet\u003c\u003e();"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "        for (String tagName : tags) {"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "            tagSet.add(parseTag(tagName));"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "        return tagSet;"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "jascxx": 18,
      "chrischenhui": 13,
      "-": 82
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/parser/SpecificModeParser.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "sreesubbash"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "sreesubbash"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "sreesubbash"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "sreesubbash"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "sreesubbash"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "sreesubbash"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "sreesubbash"
        },
        "content": "import java.util.regex.Matcher;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "sreesubbash"
        },
        "content": "import java.util.regex.Pattern;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "sreesubbash"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "sreesubbash"
        },
        "content": "import seedu.address.logic.commands.Command;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "sreesubbash"
        },
        "content": "import seedu.address.logic.commands.homecommands.HelpCommand;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "sreesubbash"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "sreesubbash"
        },
        "content": "import seedu.address.logic.util.AutoFillAction;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "sreesubbash"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "sreesubbash"
        },
        "content": "/**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "sreesubbash"
        },
        "content": " * Parses user input."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "sreesubbash"
        },
        "content": " */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "sreesubbash"
        },
        "content": "public class SpecificModeParser {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "sreesubbash"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "sreesubbash"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "sreesubbash"
        },
        "content": "     * Used for initial separation of command word and args."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "sreesubbash"
        },
        "content": "     */"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "sreesubbash"
        },
        "content": "    private static final Pattern BASIC_COMMAND_FORMAT \u003d Pattern.compile(\"(?\u003ccommandWord\u003e\\\\S+)(?\u003carguments\u003e.*)\");"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "sreesubbash"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "sreesubbash"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "sreesubbash"
        },
        "content": "     * Used to handle Parser and Command classes."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "sreesubbash"
        },
        "content": "     */"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "sreesubbash"
        },
        "content": "    private ClassUtil classUtil;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "sreesubbash"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "sreesubbash"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "sreesubbash"
        },
        "content": "     * Constructor that instantiates an empty classUtil."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "sreesubbash"
        },
        "content": "     */"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "sreesubbash"
        },
        "content": "    public SpecificModeParser() {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "sreesubbash"
        },
        "content": "        this.classUtil \u003d new ClassUtil();"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "sreesubbash"
        },
        "content": "    }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "sreesubbash"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "sreesubbash"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "sreesubbash"
        },
        "content": "     * Adds a Command Class and Parser Class into classUtil"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "sreesubbash"
        },
        "content": "     * @param command Command Class"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "sreesubbash"
        },
        "content": "     * @param parser Parser Class if any, else null"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "sreesubbash"
        },
        "content": "     */"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "sreesubbash"
        },
        "content": "    public void add(Class command, Class parser) {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "sreesubbash"
        },
        "content": "        classUtil.add(new ClassPair(command, parser));"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "sreesubbash"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "sreesubbash"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "sreesubbash"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "sreesubbash"
        },
        "content": "     * Parses user input into command for execution."
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "sreesubbash"
        },
        "content": "     *"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "sreesubbash"
        },
        "content": "     * @param userInput full user input string"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "sreesubbash"
        },
        "content": "     * @return the command based on the user input"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "sreesubbash"
        },
        "content": "     * @throws ParseException if the user input does not conform the expected format"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "sreesubbash"
        },
        "content": "     */"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "sreesubbash"
        },
        "content": "    public Command parseCommand(String userInput) throws ParseException {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "sreesubbash"
        },
        "content": "        final Matcher matcher \u003d BASIC_COMMAND_FORMAT.matcher(userInput.trim());"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "sreesubbash"
        },
        "content": "        if (!matcher.matches()) {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "sreesubbash"
        },
        "content": "            throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT, HelpCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "sreesubbash"
        },
        "content": "        }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "sreesubbash"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "sreesubbash"
        },
        "content": "        final String commandWord \u003d matcher.group(\"commandWord\");"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "sreesubbash"
        },
        "content": "        final String arguments \u003d matcher.group(\"arguments\");"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "sreesubbash"
        },
        "content": "        Command temp \u003d classUtil.getCommandInstance(commandWord, arguments);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "sreesubbash"
        },
        "content": "        return temp;"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "sreesubbash"
        },
        "content": "    }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "sreesubbash"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "sreesubbash"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "sreesubbash"
        },
        "content": "     * Gets AutoFillAction objects based on input string."
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "sreesubbash"
        },
        "content": "     * @param input current user input"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "sreesubbash"
        },
        "content": "     * @return List of AutoFillActions"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "sreesubbash"
        },
        "content": "     */"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "sreesubbash"
        },
        "content": "    public List\u003cAutoFillAction\u003e getAutoFill(String input) {"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "sreesubbash"
        },
        "content": "        List\u003cAutoFillAction\u003e temp \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "sreesubbash"
        },
        "content": "        for (String txt : classUtil.getAttribute(\"COMMAND_WORD\")) {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "sreesubbash"
        },
        "content": "            if (txt.contains(input) || input.contains(txt)) {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "sreesubbash"
        },
        "content": "                temp.add(new AutoFillAction(txt));"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "sreesubbash"
        },
        "content": "            }"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "sreesubbash"
        },
        "content": "        }"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "sreesubbash"
        },
        "content": "        return temp;"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "sreesubbash"
        },
        "content": "    }"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "sreesubbash"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "sreesubbash"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "sreesubbash": 80
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/parser/StartCommandParser.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "chrischenhui"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "chrischenhui"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "chrischenhui"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "chrischenhui"
        },
        "content": "import seedu.address.logic.commands.switches.StartCommand;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "chrischenhui"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": "import seedu.address.model.appsettings.DifficultyEnum;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "chrischenhui"
        },
        "content": "/**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "chrischenhui"
        },
        "content": " * Parses input arguments and creates a new DeleteCommand object"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "chrischenhui"
        },
        "content": " */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "chrischenhui"
        },
        "content": "public class StartCommandParser implements Parser\u003cStartCommand\u003e {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "chrischenhui"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "chrischenhui"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "chrischenhui"
        },
        "content": "     * Parses the given {@code String} of arguments in the context of the DeleteCommand"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "chrischenhui"
        },
        "content": "     * and returns a DeleteCommand object for execution."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "chrischenhui"
        },
        "content": "     * @throws ParseException if the user input does not conform the expected format"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "chrischenhui"
        },
        "content": "     */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "chrischenhui"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "chrischenhui"
        },
        "content": "    public StartCommand parse(String userInput) throws ParseException {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "chrischenhui"
        },
        "content": "        String trimmedArgs \u003d userInput.trim();"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": "        Optional\u003cDifficultyEnum\u003e difficulty \u003d Optional.empty();"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "chrischenhui"
        },
        "content": "        if (trimmedArgs.isEmpty()) {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": "            return new StartCommand(difficulty);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": "        }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": "        switch (trimmedArgs.toUpperCase()) {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": "        case \"EASY\":"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": "            difficulty \u003d Optional.of(DifficultyEnum.EASY);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": "        case \"MEDIUM\":"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": "            difficulty \u003d Optional.of(DifficultyEnum.MEDIUM);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": "        case \"HARD\":"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": "            difficulty \u003d Optional.of(DifficultyEnum.HARD);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": "        default:"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": "            throw new ParseException(\"No such difficulty \" + trimmedArgs.toUpperCase());"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "chrischenhui"
        },
        "content": "        }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": "        return new StartCommand(difficulty);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "chrischenhui"
        },
        "content": "    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "chrischenhui"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "chrischenhui": 22,
      "kohyida1997": 22
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/parser/game/GuessCommandParser.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "sreesubbash"
        },
        "content": "package seedu.address.logic.parser.game;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "jascxx"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "jascxx"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "chrischenhui"
        },
        "content": "import seedu.address.logic.commands.gamecommands.GuessCommand;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "sreesubbash"
        },
        "content": "import seedu.address.logic.parser.Parser;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": "import seedu.address.model.game.Guess;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "jascxx"
        },
        "content": "/**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "jascxx"
        },
        "content": " * Parses input arguments and creates a new GuessCommand object"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "jascxx"
        },
        "content": " */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": "public class GuessCommandParser implements Parser\u003cGuessCommand\u003e {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": "    public GuessCommand parse(String userInput) throws ParseException {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": "        String trimmedArgs \u003d userInput.trim();"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": "        if (trimmedArgs.isEmpty()) {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": "            throw new ParseException("
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": "                    String.format(MESSAGE_INVALID_COMMAND_FORMAT, GuessCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": "        }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": "        return new GuessCommand(new Guess(trimmedArgs));"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": "    }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "sreesubbash": 2,
      "jascxx": 5,
      "chrischenhui": 1,
      "kohyida1997": 17
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/parser/home/BankCommandParser.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "chrischenhui"
        },
        "content": "package seedu.address.logic.parser.home;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "sreesubbash"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "sreesubbash"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "sreesubbash"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "chrischenhui"
        },
        "content": "import seedu.address.logic.commands.homecommands.BankCommand;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "sreesubbash"
        },
        "content": "import seedu.address.logic.parser.Parser;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "sreesubbash"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "sreesubbash"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "sreesubbash"
        },
        "content": "/**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "sreesubbash"
        },
        "content": " * Parses input arguments and creates a new DeleteCommand object"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "sreesubbash"
        },
        "content": " */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "sreesubbash"
        },
        "content": "public class BankCommandParser implements Parser\u003cBankCommand\u003e {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "sreesubbash"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "sreesubbash"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "sreesubbash"
        },
        "content": "     * Parses the given {@code String} of arguments in the context of the DeleteCommand"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "sreesubbash"
        },
        "content": "     * and returns a DeleteCommand object for execution."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "sreesubbash"
        },
        "content": "     * @throws ParseException if the user input does not conform the expected format"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "sreesubbash"
        },
        "content": "     */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "sreesubbash"
        },
        "content": "    public BankCommand parse(String userInput) throws ParseException {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "sreesubbash"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "sreesubbash"
        },
        "content": "            String trimmedArgs \u003d userInput.trim();"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "sreesubbash"
        },
        "content": "            if (trimmedArgs.isEmpty()) {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "sreesubbash"
        },
        "content": "                throw new ParseException("
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "sreesubbash"
        },
        "content": "                        String.format(MESSAGE_INVALID_COMMAND_FORMAT, BankCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "sreesubbash"
        },
        "content": "            }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "sreesubbash"
        },
        "content": "            return new BankCommand(trimmedArgs);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "sreesubbash"
        },
        "content": "        } catch (ParseException pe) {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "sreesubbash"
        },
        "content": "            throw new ParseException("
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "sreesubbash"
        },
        "content": "                    String.format(MESSAGE_INVALID_COMMAND_FORMAT, BankCommand.MESSAGE_USAGE), pe);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "sreesubbash"
        },
        "content": "        }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "sreesubbash"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "sreesubbash"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "sreesubbash"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "sreesubbash": 31,
      "chrischenhui": 2
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/parser/home/CreateCommandParser.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "chrischenhui"
        },
        "content": "package seedu.address.logic.parser.home;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "chrischenhui"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "chrischenhui"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "chrischenhui"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "chrischenhui"
        },
        "content": "import seedu.address.logic.commands.homecommands.CreateCommand;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "sreesubbash"
        },
        "content": "import seedu.address.logic.parser.Parser;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "chrischenhui"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "chrischenhui"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "chrischenhui"
        },
        "content": "/**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "chrischenhui"
        },
        "content": " * Parses input arguments and creates a new CreateCommand object"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "chrischenhui"
        },
        "content": " */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "chrischenhui"
        },
        "content": "public class CreateCommandParser implements Parser\u003cCreateCommand\u003e {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "chrischenhui"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "chrischenhui"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "chrischenhui"
        },
        "content": "     * Parses the given {@code String} of arguments in the context of the CreateCommand"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "chrischenhui"
        },
        "content": "     * and returns an CreateCommand object for execution."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "chrischenhui"
        },
        "content": "     *"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "chrischenhui"
        },
        "content": "     * @throws ParseException if the user input does not conform the expected format"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "chrischenhui"
        },
        "content": "     */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "chrischenhui"
        },
        "content": "    public CreateCommand parse(String name) throws ParseException {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "chrischenhui"
        },
        "content": "        String trimmedArgs \u003d name.trim();"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "chrischenhui"
        },
        "content": "        if (trimmedArgs.isEmpty()) {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "chrischenhui"
        },
        "content": "            throw new ParseException("
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "chrischenhui"
        },
        "content": "                    String.format(MESSAGE_INVALID_COMMAND_FORMAT, CreateCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "chrischenhui"
        },
        "content": "        }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "chrischenhui"
        },
        "content": "        return new CreateCommand(trimmedArgs);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "chrischenhui"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "chrischenhui"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "chrischenhui"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "sreesubbash": 1,
      "chrischenhui": 28
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/parser/home/ExportCommandParser.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "chrischenhui"
        },
        "content": "package seedu.address.logic.parser.home;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "chrischenhui"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "chrischenhui"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "chrischenhui"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_FILEPATH;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "chrischenhui"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_WORD;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "chrischenhui"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "chrischenhui"
        },
        "content": "import java.io.File;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "chrischenhui"
        },
        "content": "import java.util.stream.Stream;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "chrischenhui"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "chrischenhui"
        },
        "content": "import seedu.address.logic.commands.homecommands.ExportCommand;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "sreesubbash"
        },
        "content": "import seedu.address.logic.parser.ArgumentMultimap;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "sreesubbash"
        },
        "content": "import seedu.address.logic.parser.ArgumentTokenizer;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "sreesubbash"
        },
        "content": "import seedu.address.logic.parser.Parser;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "sreesubbash"
        },
        "content": "import seedu.address.logic.parser.ParserUtil;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "sreesubbash"
        },
        "content": "import seedu.address.logic.parser.Prefix;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "chrischenhui"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "chrischenhui"
        },
        "content": "import seedu.address.model.card.Word;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "chrischenhui"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "chrischenhui"
        },
        "content": "/**"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "chrischenhui"
        },
        "content": " * Parses input arguments and creates a new ExportCommand object"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "chrischenhui"
        },
        "content": " */"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "chrischenhui"
        },
        "content": "public class ExportCommandParser implements Parser\u003cExportCommand\u003e {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "chrischenhui"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "chrischenhui"
        },
        "content": "     * Parses the given {@code String} of arguments in the context of the ExportCommand"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "chrischenhui"
        },
        "content": "     * and returns an ExportCommand object for execution."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "chrischenhui"
        },
        "content": "     *"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "chrischenhui"
        },
        "content": "     * @throws ParseException if the user input does not conform the expected format"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "chrischenhui"
        },
        "content": "     */"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "chrischenhui"
        },
        "content": "    public ExportCommand parse(String args) throws ParseException {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "chrischenhui"
        },
        "content": "        ArgumentMultimap argMultimap \u003d ArgumentTokenizer.tokenize(args, PREFIX_WORD, PREFIX_FILEPATH);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "chrischenhui"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "chrischenhui"
        },
        "content": "        if (!arePrefixesPresent(argMultimap, PREFIX_WORD, PREFIX_FILEPATH) || !argMultimap.getPreamble().isEmpty()) {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "chrischenhui"
        },
        "content": "            throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT, ExportCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "chrischenhui"
        },
        "content": "        }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "chrischenhui"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "chrischenhui"
        },
        "content": "        Word word \u003d ParserUtil.parseWord(argMultimap.getValue(PREFIX_WORD).get());"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "chrischenhui"
        },
        "content": "        File directory \u003d ParserUtil.parseFile(argMultimap.getValue(PREFIX_FILEPATH).get());"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "chrischenhui"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "chrischenhui"
        },
        "content": "        return new ExportCommand(word.toString(), directory);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "chrischenhui"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "chrischenhui"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "chrischenhui"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "chrischenhui"
        },
        "content": "     * Returns true if none of the prefixes contains empty {@code Optional} values in the given"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "chrischenhui"
        },
        "content": "     * {@code ArgumentMultimap}."
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "chrischenhui"
        },
        "content": "     */"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "chrischenhui"
        },
        "content": "    private static boolean arePrefixesPresent(ArgumentMultimap argumentMultimap, Prefix... prefixes) {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "chrischenhui"
        },
        "content": "        return Stream.of(prefixes).allMatch(prefix -\u003e argumentMultimap.getValue(prefix).isPresent());"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "chrischenhui"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "chrischenhui"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "sreesubbash": 5,
      "chrischenhui": 44
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/parser/home/ImportCommandParser.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "chrischenhui"
        },
        "content": "package seedu.address.logic.parser.home;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "chrischenhui"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "chrischenhui"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "chrischenhui"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_FILEPATH;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "chrischenhui"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_WORD;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "chrischenhui"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "chrischenhui"
        },
        "content": "import java.io.File;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "chrischenhui"
        },
        "content": "import java.util.stream.Stream;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "chrischenhui"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "chrischenhui"
        },
        "content": "import seedu.address.logic.commands.homecommands.ImportCommand;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "sreesubbash"
        },
        "content": "import seedu.address.logic.parser.ArgumentMultimap;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "sreesubbash"
        },
        "content": "import seedu.address.logic.parser.ArgumentTokenizer;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "sreesubbash"
        },
        "content": "import seedu.address.logic.parser.Parser;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "sreesubbash"
        },
        "content": "import seedu.address.logic.parser.ParserUtil;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "sreesubbash"
        },
        "content": "import seedu.address.logic.parser.Prefix;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "chrischenhui"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "chrischenhui"
        },
        "content": "import seedu.address.model.card.Word;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "chrischenhui"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "chrischenhui"
        },
        "content": "/**"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "chrischenhui"
        },
        "content": " * Parses input arguments and creates a new ImportCommand object"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "chrischenhui"
        },
        "content": " */"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "chrischenhui"
        },
        "content": "public class ImportCommandParser implements Parser\u003cImportCommand\u003e {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "chrischenhui"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "chrischenhui"
        },
        "content": "     * Parses the given {@code String} of arguments in the context of the ImportCommand"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "chrischenhui"
        },
        "content": "     * and returns an ImportCommand object for execution."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "chrischenhui"
        },
        "content": "     * @throws ParseException if the user input does not conform the expected format"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "chrischenhui"
        },
        "content": "     */"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "chrischenhui"
        },
        "content": "    public ImportCommand parse(String args) throws ParseException {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "chrischenhui"
        },
        "content": "        ArgumentMultimap argMultimap \u003d ArgumentTokenizer.tokenize(args, PREFIX_WORD, PREFIX_FILEPATH);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "chrischenhui"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "chrischenhui"
        },
        "content": "        if (!arePrefixesPresent(argMultimap, PREFIX_WORD, PREFIX_FILEPATH) || !argMultimap.getPreamble().isEmpty()) {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "chrischenhui"
        },
        "content": "            throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT, ImportCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "chrischenhui"
        },
        "content": "        }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "chrischenhui"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "chrischenhui"
        },
        "content": "        Word word \u003d ParserUtil.parseWord(argMultimap.getValue(PREFIX_WORD).get());"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "chrischenhui"
        },
        "content": "        File directory \u003d ParserUtil.parseFile(argMultimap.getValue(PREFIX_FILEPATH).get());"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "chrischenhui"
        },
        "content": "        // todo check validation of directory and file"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "chrischenhui"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "chrischenhui"
        },
        "content": "        return new ImportCommand(word.toString(), directory);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "chrischenhui"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "chrischenhui"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "chrischenhui"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "chrischenhui"
        },
        "content": "     * Returns true if none of the prefixes contains empty {@code Optional} values in the given"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "chrischenhui"
        },
        "content": "     * {@code ArgumentMultimap}."
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "chrischenhui"
        },
        "content": "     */"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "chrischenhui"
        },
        "content": "    private static boolean arePrefixesPresent(ArgumentMultimap argumentMultimap, Prefix... prefixes) {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "chrischenhui"
        },
        "content": "        return Stream.of(prefixes).allMatch(prefix -\u003e argumentMultimap.getValue(prefix).isPresent());"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "chrischenhui"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "chrischenhui"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "sreesubbash": 5,
      "chrischenhui": 44
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/parser/home/RemoveCommandParser.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "chrischenhui"
        },
        "content": "package seedu.address.logic.parser.home;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "chrischenhui"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "chrischenhui"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "chrischenhui"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "chrischenhui"
        },
        "content": "import seedu.address.logic.commands.homecommands.RemoveCommand;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "sreesubbash"
        },
        "content": "import seedu.address.logic.parser.Parser;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "chrischenhui"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "chrischenhui"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "chrischenhui"
        },
        "content": "/**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "chrischenhui"
        },
        "content": " * Parses input arguments and creates a new RemoveCommand object"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "chrischenhui"
        },
        "content": " */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "sreesubbash"
        },
        "content": "public class RemoveCommandParser implements Parser\u003cRemoveCommand\u003e {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "chrischenhui"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "chrischenhui"
        },
        "content": "     * Parses the given {@code String} of arguments in the context of the RemoveCommand"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "chrischenhui"
        },
        "content": "     * and returns an RemoveCommand object for execution."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "chrischenhui"
        },
        "content": "     *"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "chrischenhui"
        },
        "content": "     * @throws ParseException if the user input does not conform the expected format"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "chrischenhui"
        },
        "content": "     */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "chrischenhui"
        },
        "content": "    public RemoveCommand parse(String name) throws ParseException {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "chrischenhui"
        },
        "content": "        String trimmedArgs \u003d name.trim();"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "chrischenhui"
        },
        "content": "        if (trimmedArgs.isEmpty()) {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "chrischenhui"
        },
        "content": "            throw new ParseException("
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "chrischenhui"
        },
        "content": "                    String.format(MESSAGE_INVALID_COMMAND_FORMAT, RemoveCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "chrischenhui"
        },
        "content": "        }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "chrischenhui"
        },
        "content": "        return new RemoveCommand(trimmedArgs);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "chrischenhui"
        },
        "content": "    }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "chrischenhui"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "sreesubbash": 2,
      "chrischenhui": 25
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/parser/open/AddCommandParser.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "chrischenhui"
        },
        "content": "package seedu.address.logic.parser.open;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "jascxx"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_MEANING;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_TAG;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "jascxx"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_WORD;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.stream.Stream;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "chrischenhui"
        },
        "content": "import seedu.address.logic.commands.cardcommands.AddCommand;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "sreesubbash"
        },
        "content": "import seedu.address.logic.parser.ArgumentMultimap;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "sreesubbash"
        },
        "content": "import seedu.address.logic.parser.ArgumentTokenizer;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "sreesubbash"
        },
        "content": "import seedu.address.logic.parser.Parser;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "sreesubbash"
        },
        "content": "import seedu.address.logic.parser.ParserUtil;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "sreesubbash"
        },
        "content": "import seedu.address.logic.parser.Prefix;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "jascxx"
        },
        "content": "import seedu.address.model.card.Card;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "jascxx"
        },
        "content": "import seedu.address.model.card.Meaning;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "jascxx"
        },
        "content": "import seedu.address.model.card.Word;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.tag.Tag;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": " * Parses input arguments and creates a new AddCommand object"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "public class AddCommandParser implements Parser\u003cAddCommand\u003e {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "     * Parses the given {@code String} of arguments in the context of the AddCommand"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "     * and returns an AddCommand object for execution."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws ParseException if the user input does not conform the expected format"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    public AddCommand parse(String args) throws ParseException {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "sreesubbash"
        },
        "content": "        System.err.println(\"########: \" + args);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "        ArgumentMultimap argMultimap \u003d"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "jascxx"
        },
        "content": "                ArgumentTokenizer.tokenize(args, PREFIX_WORD, PREFIX_MEANING, PREFIX_TAG);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "jascxx"
        },
        "content": "        if (!arePrefixesPresent(argMultimap, PREFIX_WORD, PREFIX_MEANING)"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "                || !argMultimap.getPreamble().isEmpty()) {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT, AddCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "jascxx"
        },
        "content": "        Word word \u003d ParserUtil.parseWord(argMultimap.getValue(PREFIX_WORD).get());"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "jascxx"
        },
        "content": "        Meaning meaning \u003d ParserUtil.parseMeaning(argMultimap.getValue(PREFIX_MEANING).get());"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        Set\u003cTag\u003e tagList \u003d ParserUtil.parseTags(argMultimap.getAllValues(PREFIX_TAG));"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "jascxx"
        },
        "content": "        Card card \u003d Card.createNewCard(word, meaning, tagList);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "jascxx"
        },
        "content": "        return new AddCommand(card);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns true if none of the prefixes contains empty {@code Optional} values in the given"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "     * {@code ArgumentMultimap}."
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    private static boolean arePrefixesPresent(ArgumentMultimap argumentMultimap, Prefix... prefixes) {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "        return Stream.of(prefixes).allMatch(prefix -\u003e argumentMultimap.getValue(prefix).isPresent());"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "sreesubbash": 6,
      "jascxx": 11,
      "chrischenhui": 2,
      "-": 41
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/parser/open/DeleteCommandParser.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "chrischenhui"
        },
        "content": "package seedu.address.logic.parser.open;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "chrischenhui"
        },
        "content": "import seedu.address.logic.commands.cardcommands.DeleteCommand;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "sreesubbash"
        },
        "content": "import seedu.address.logic.parser.Parser;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "sreesubbash"
        },
        "content": "import seedu.address.logic.parser.ParserUtil;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": " * Parses input arguments and creates a new DeleteCommand object"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "public class DeleteCommandParser implements Parser\u003cDeleteCommand\u003e {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "     * Parses the given {@code String} of arguments in the context of the DeleteCommand"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "     * and returns a DeleteCommand object for execution."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws ParseException if the user input does not conform the expected format"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    public DeleteCommand parse(String args) throws ParseException {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "            Index index \u003d ParserUtil.parseIndex(args);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "            return new DeleteCommand(index);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (ParseException pe) {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new ParseException("
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "                    String.format(MESSAGE_INVALID_COMMAND_FORMAT, DeleteCommand.MESSAGE_USAGE), pe);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "sreesubbash": 2,
      "chrischenhui": 2,
      "-": 27
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/parser/open/EditCommandParser.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "chrischenhui"
        },
        "content": "package seedu.address.logic.parser.open;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "sreesubbash"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_MEANING;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_TAG;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "jascxx"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_WORD;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Collection;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Collections;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "chrischenhui"
        },
        "content": "import seedu.address.logic.commands.cardcommands.EditCommand;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "sreesubbash"
        },
        "content": "import seedu.address.logic.parser.ArgumentMultimap;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "sreesubbash"
        },
        "content": "import seedu.address.logic.parser.ArgumentTokenizer;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "sreesubbash"
        },
        "content": "import seedu.address.logic.parser.Parser;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "sreesubbash"
        },
        "content": "import seedu.address.logic.parser.ParserUtil;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.tag.Tag;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": " * Parses input arguments and creates a new EditCommand object"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "public class EditCommandParser implements Parser\u003cEditCommand\u003e {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "     * Parses the given {@code String} of arguments in the context of the EditCommand"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "     * and returns an EditCommand object for execution."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws ParseException if the user input does not conform the expected format"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    public EditCommand parse(String args) throws ParseException {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(args);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "        ArgumentMultimap argMultimap \u003d"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "jascxx"
        },
        "content": "                ArgumentTokenizer.tokenize(args, PREFIX_WORD, PREFIX_MEANING, PREFIX_TAG);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        Index index;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "            index \u003d ParserUtil.parseIndex(argMultimap.getPreamble());"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (ParseException pe) {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT, EditCommand.MESSAGE_USAGE), pe);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "jascxx"
        },
        "content": "        EditCommand.EditCardDescriptor editCardDescriptor \u003d new EditCommand.EditCardDescriptor();"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "sreesubbash"
        },
        "content": "        if (argMultimap.getValue(PREFIX_WORD).isPresent()) {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "jascxx"
        },
        "content": "            editCardDescriptor.setWord(ParserUtil.parseWord(argMultimap.getValue(PREFIX_WORD).get()));"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "sreesubbash"
        },
        "content": "        if (argMultimap.getValue(PREFIX_MEANING).isPresent()) {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "jascxx"
        },
        "content": "            editCardDescriptor.setMeaning(ParserUtil.parseMeaning(argMultimap.getValue(PREFIX_MEANING).get()));"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "jascxx"
        },
        "content": "        parseTagsForEdit(argMultimap.getAllValues(PREFIX_TAG)).ifPresent(editCardDescriptor::setTags);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "jascxx"
        },
        "content": "        if (!editCardDescriptor.isAnyFieldEdited()) {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new ParseException(EditCommand.MESSAGE_NOT_EDITED);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "jascxx"
        },
        "content": "        return new EditCommand(index, editCardDescriptor);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "     * Parses {@code Collection\u003cString\u003e tags} into a {@code Set\u003cTag\u003e} if {@code tags} is non-empty."
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "     * If {@code tags} contain only one element which is an empty string, it will be parsed into a"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "     * {@code Set\u003cTag\u003e} containing zero tags."
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "    private Optional\u003cSet\u003cTag\u003e\u003e parseTagsForEdit(Collection\u003cString\u003e tags) throws ParseException {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "        assert tags !\u003d null;"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "        if (tags.isEmpty()) {"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "            return Optional.empty();"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "        Collection\u003cString\u003e tagSet \u003d tags.size() \u003d\u003d 1 \u0026\u0026 tags.contains(\"\") ? Collections.emptySet() : tags;"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "        return Optional.of(ParserUtil.parseTags(tagSet));"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "sreesubbash": 7,
      "jascxx": 8,
      "chrischenhui": 2,
      "-": 60
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/parser/open/FindCommandParser.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "chrischenhui"
        },
        "content": "package seedu.address.logic.parser.open;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "chrischenhui"
        },
        "content": "import seedu.address.logic.commands.cardcommands.FindCommand;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "sreesubbash"
        },
        "content": "import seedu.address.logic.parser.Parser;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "jascxx"
        },
        "content": "import seedu.address.model.card.WordContainsKeywordsPredicate;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": " * Parses input arguments and creates a new FindCommand object"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "public class FindCommandParser implements Parser\u003cFindCommand\u003e {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "     * Parses the given {@code String} of arguments in the context of the FindCommand"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "     * and returns a FindCommand object for execution."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws ParseException if the user input does not conform the expected format"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    public FindCommand parse(String args) throws ParseException {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "        String trimmedArgs \u003d args.trim();"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "        if (trimmedArgs.isEmpty()) {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new ParseException("
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "                    String.format(MESSAGE_INVALID_COMMAND_FORMAT, FindCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        String[] nameKeywords \u003d trimmedArgs.split(\"\\\\s+\");"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "jascxx"
        },
        "content": "        return new FindCommand(new WordContainsKeywordsPredicate(Arrays.asList(nameKeywords)));"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "sreesubbash": 1,
      "jascxx": 2,
      "chrischenhui": 2,
      "-": 29
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/parser/settings/AvatarCommandParser.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "dragontho"
        },
        "content": "package seedu.address.logic.parser.settings;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "dragontho"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "dragontho"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "dragontho"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "dragontho"
        },
        "content": "import seedu.address.logic.commands.settingcommands.AvatarCommand;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "dragontho"
        },
        "content": "import seedu.address.logic.parser.Parser;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "dragontho"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "dragontho"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "dragontho"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "dragontho"
        },
        "content": "/**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "dragontho"
        },
        "content": " * Parses input arguments and creates a new GuessCommand object"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "dragontho"
        },
        "content": " */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "dragontho"
        },
        "content": "public class AvatarCommandParser implements Parser\u003cAvatarCommand\u003e {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "dragontho"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "dragontho"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "dragontho"
        },
        "content": "    public AvatarCommand parse(String userInput) throws ParseException {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "dragontho"
        },
        "content": "        String trimmedArgs \u003d userInput.trim();"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "dragontho"
        },
        "content": "        if (trimmedArgs.isEmpty()) {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "dragontho"
        },
        "content": "            throw new ParseException("
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "dragontho"
        },
        "content": "                    String.format(MESSAGE_INVALID_COMMAND_FORMAT, AvatarCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "dragontho"
        },
        "content": "        }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "dragontho"
        },
        "content": "        int id \u003d Integer.parseInt(trimmedArgs);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "dragontho"
        },
        "content": "        if (id \u003e\u003d 0 \u0026\u0026 id \u003c\u003d 151) {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "dragontho"
        },
        "content": "            return new AvatarCommand(id);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "dragontho"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "dragontho"
        },
        "content": "            throw new ParseException(\"No such id: \" + trimmedArgs);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "dragontho"
        },
        "content": "        }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "dragontho"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "dragontho"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "dragontho": 29
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/parser/settings/DifficultyCommandParser.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "dragontho"
        },
        "content": "package seedu.address.logic.parser.settings;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "chrischenhui"
        },
        "content": "import seedu.address.logic.commands.settingcommands.DifficultyCommand;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "dragontho"
        },
        "content": "import seedu.address.logic.parser.Parser;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "dragontho"
        },
        "content": "import seedu.address.model.appsettings.DifficultyEnum;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": "/**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": " * Parses input arguments and creates a new GuessCommand object"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": " */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": "public class DifficultyCommandParser implements Parser\u003cDifficultyCommand\u003e {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": "    public DifficultyCommand parse(String userInput) throws ParseException {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": "        String trimmedArgs \u003d userInput.trim();"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": "        if (trimmedArgs.isEmpty()) {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": "            throw new ParseException("
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "dragontho"
        },
        "content": "                    String.format(MESSAGE_INVALID_COMMAND_FORMAT, DifficultyCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": "        }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": "        DifficultyEnum difficulty;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": "        switch (trimmedArgs.toUpperCase()) {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": "        case \"EASY\":"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": "            difficulty \u003d DifficultyEnum.EASY;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": "        case \"MEDIUM\":"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": "            difficulty \u003d DifficultyEnum.MEDIUM;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": "        case \"HARD\":"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": "            difficulty \u003d DifficultyEnum.HARD;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": "        default:"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": "            throw new ParseException(\"No such difficulty: \" + trimmedArgs.toUpperCase());"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": "        }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": "        return new DifficultyCommand(difficulty);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "dragontho": 4,
      "chrischenhui": 1,
      "kohyida1997": 33
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/parser/settings/HintsCommandParser.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "dragontho"
        },
        "content": "package seedu.address.logic.parser.settings;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "dragontho"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "dragontho"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "dragontho"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "dragontho"
        },
        "content": "import seedu.address.logic.commands.settingcommands.HintsCommand;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "dragontho"
        },
        "content": "import seedu.address.logic.parser.Parser;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "dragontho"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "dragontho"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "dragontho"
        },
        "content": "/**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "dragontho"
        },
        "content": " * Parses input arguments and creates a new GuessCommand object"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "dragontho"
        },
        "content": " */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "dragontho"
        },
        "content": "public class HintsCommandParser implements Parser\u003cHintsCommand\u003e {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "dragontho"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "dragontho"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "dragontho"
        },
        "content": "    public HintsCommand parse(String userInput) throws ParseException {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "dragontho"
        },
        "content": "        String trimmedArgs \u003d userInput.trim();"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "dragontho"
        },
        "content": "        if (trimmedArgs.isEmpty()) {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "dragontho"
        },
        "content": "            throw new ParseException("
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "dragontho"
        },
        "content": "                    String.format(MESSAGE_INVALID_COMMAND_FORMAT, HintsCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "dragontho"
        },
        "content": "        }"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "dragontho"
        },
        "content": "        boolean isEnabled;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "dragontho"
        },
        "content": "        switch (trimmedArgs.toUpperCase()) {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "dragontho"
        },
        "content": "        case \"ON\":"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "dragontho"
        },
        "content": "            isEnabled \u003d true;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "dragontho"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "dragontho"
        },
        "content": "        case \"OFF\":"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "dragontho"
        },
        "content": "            isEnabled \u003d false;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "dragontho"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "dragontho"
        },
        "content": "        default:"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "dragontho"
        },
        "content": "            throw new ParseException(\"No such option: \" + trimmedArgs.toUpperCase());"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "dragontho"
        },
        "content": "        }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "dragontho"
        },
        "content": "        return new HintsCommand(isEnabled);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "dragontho"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "dragontho"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "dragontho": 34
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/parser/settings/ThemeCommandParser.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "dragontho"
        },
        "content": "package seedu.address.logic.parser.settings;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "dragontho"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "dragontho"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "dragontho"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "dragontho"
        },
        "content": "import seedu.address.logic.commands.settingcommands.ThemeCommand;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "dragontho"
        },
        "content": "import seedu.address.logic.parser.Parser;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "dragontho"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "dragontho"
        },
        "content": "import seedu.address.model.appsettings.ThemeEnum;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "dragontho"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "dragontho"
        },
        "content": "/**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "dragontho"
        },
        "content": " * Parses input arguments and creates a new GuessCommand object"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "dragontho"
        },
        "content": " */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "dragontho"
        },
        "content": "public class ThemeCommandParser implements Parser\u003cThemeCommand\u003e {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "dragontho"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "dragontho"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "dragontho"
        },
        "content": "    public ThemeCommand parse(String userInput) throws ParseException {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "dragontho"
        },
        "content": "        String trimmedArgs \u003d userInput.trim();"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "dragontho"
        },
        "content": "        if (trimmedArgs.isEmpty()) {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "dragontho"
        },
        "content": "            throw new ParseException("
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "dragontho"
        },
        "content": "                    String.format(MESSAGE_INVALID_COMMAND_FORMAT, ThemeCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "dragontho"
        },
        "content": "        }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "dragontho"
        },
        "content": "        ThemeEnum theme;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "dragontho"
        },
        "content": "        switch (trimmedArgs.toUpperCase()) {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "dragontho"
        },
        "content": "        case \"LIGHT\":"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "dragontho"
        },
        "content": "            theme \u003d ThemeEnum.LIGHT;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "dragontho"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "dragontho"
        },
        "content": "        case \"DARK\":"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "dragontho"
        },
        "content": "            theme \u003d ThemeEnum.DARK;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "dragontho"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "dragontho"
        },
        "content": "        default:"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "dragontho"
        },
        "content": "            throw new ParseException(\"No such option: \" + trimmedArgs.toUpperCase());"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "dragontho"
        },
        "content": "        }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "dragontho"
        },
        "content": "        return new ThemeCommand(theme);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "dragontho"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "dragontho"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "dragontho": 35
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/util/Action.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "sreesubbash"
        },
        "content": "package seedu.address.logic.util;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "sreesubbash"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "sreesubbash"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "sreesubbash"
        },
        "content": " * Represents a command with hidden internal logic and the ability to be executed."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "sreesubbash"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "sreesubbash"
        },
        "content": "public abstract class Action {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "sreesubbash"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "sreesubbash"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "sreesubbash"
        },
        "content": "     * Runs the intended action."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "sreesubbash"
        },
        "content": "     */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "sreesubbash"
        },
        "content": "    public abstract boolean action();"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "sreesubbash"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "sreesubbash"
        },
        "content": "    public abstract String toString();"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "sreesubbash"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "sreesubbash"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "sreesubbash": 15
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/util/AutoFillAction.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "sreesubbash"
        },
        "content": "package seedu.address.logic.util;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "sreesubbash"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "sreesubbash"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "sreesubbash"
        },
        "content": " * Represents a command with hidden internal logic and the ability to be executed."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "sreesubbash"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "sreesubbash"
        },
        "content": "public class AutoFillAction extends Action {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "sreesubbash"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "sreesubbash"
        },
        "content": "    private String text;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "sreesubbash"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "sreesubbash"
        },
        "content": "    public AutoFillAction(String text) {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "sreesubbash"
        },
        "content": "        this.text \u003d text;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "sreesubbash"
        },
        "content": "    }"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "sreesubbash"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "sreesubbash"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "sreesubbash"
        },
        "content": "     * Runs the intended action"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "sreesubbash"
        },
        "content": "     */"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "sreesubbash"
        },
        "content": "    public boolean action() {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "sreesubbash"
        },
        "content": "        return true;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "sreesubbash"
        },
        "content": "    }"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "sreesubbash"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "sreesubbash"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "sreesubbash"
        },
        "content": "        return text;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "sreesubbash"
        },
        "content": "    }"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "sreesubbash"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "sreesubbash"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "sreesubbash": 25
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/util/ModeEnum.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "sreesubbash"
        },
        "content": "package seedu.address.logic.util;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "sreesubbash"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "chrischenhui"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "chrischenhui"
        },
        "content": " * Game modes for the app"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "chrischenhui"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "sreesubbash"
        },
        "content": "public enum ModeEnum {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "sreesubbash"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "dragontho"
        },
        "content": "    OPEN {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "sreesubbash"
        },
        "content": "        public String toString() {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "dragontho"
        },
        "content": "            return \"open\";"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "sreesubbash"
        },
        "content": "        }"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "sreesubbash"
        },
        "content": "    },"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "sreesubbash"
        },
        "content": "    GAME {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "sreesubbash"
        },
        "content": "        public String toString() {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "sreesubbash"
        },
        "content": "            return \"game\";"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "sreesubbash"
        },
        "content": "        }"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "sreesubbash"
        },
        "content": "    },"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "dragontho"
        },
        "content": "    HOME {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "sreesubbash"
        },
        "content": "        public String toString() {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "dragontho"
        },
        "content": "            return \"home\";"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "sreesubbash"
        },
        "content": "        }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "sreesubbash"
        },
        "content": "    },"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "sreesubbash"
        },
        "content": "    SETTINGS {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "sreesubbash"
        },
        "content": "        public String toString() {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "sreesubbash"
        },
        "content": "            return \"settings\";"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "sreesubbash"
        },
        "content": "        }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "sreesubbash"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "sreesubbash"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "sreesubbash": 21,
      "dragontho": 4,
      "chrischenhui": 3
    }
  },
  {
    "path": "src/main/java/seedu/address/model/Model.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.model;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.function.Predicate;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.GuiSettings;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "dragontho"
        },
        "content": "import seedu.address.model.appsettings.AppSettings;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "dragontho"
        },
        "content": "import seedu.address.model.appsettings.DifficultyEnum;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "dragontho"
        },
        "content": "import seedu.address.model.appsettings.ThemeEnum;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "jascxx"
        },
        "content": "import seedu.address.model.card.Card;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": "import seedu.address.model.card.FormattedHint;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": "import seedu.address.model.game.Game;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "jascxx"
        },
        "content": "import seedu.address.model.globalstatistics.GlobalStatistics;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "jascxx"
        },
        "content": "import seedu.address.model.wordbank.ReadOnlyWordBank;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "dragontho"
        },
        "content": "import seedu.address.model.wordbank.WordBank;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "chrischenhui"
        },
        "content": "import seedu.address.model.wordbanklist.WordBankList;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "jascxx"
        },
        "content": "import seedu.address.model.wordbankstatslist.WordBankStatisticsList;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "jascxx"
        },
        "content": "import seedu.address.statistics.WordBankStatistics;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": " * The API of the Model component."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "public interface Model {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "chrischenhui"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "chrischenhui"
        },
        "content": "     * {@code Predicate} that always evaluate to true"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "chrischenhui"
        },
        "content": "     */"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "jascxx"
        },
        "content": "    Predicate\u003cCard\u003e PREDICATE_SHOW_ALL_CARDS \u003d unused -\u003e true;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "     * Replaces user prefs data with the data in {@code userPrefs}."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    void setUserPrefs(ReadOnlyUserPrefs userPrefs);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns the user prefs."
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    ReadOnlyUserPrefs getUserPrefs();"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns the user prefs\u0027 GUI settings."
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    GuiSettings getGuiSettings();"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "     * Sets the user prefs\u0027 GUI settings."
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    void setGuiSettings(GuiSettings guiSettings);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "jascxx"
        },
        "content": "     * Returns the user prefs\u0027 word bank file path."
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "jascxx"
        },
        "content": "    Path getWordBankFilePath();"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "jascxx"
        },
        "content": "     * Sets the user prefs\u0027 word bank file path."
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "jascxx"
        },
        "content": "    void setWordBankFilePath(Path addressBookFilePath);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "jascxx"
        },
        "content": "     * Replaces word bank data with the data in {@code wordBank}."
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "dragontho"
        },
        "content": "    void setCurrentWordBank(ReadOnlyWordBank currentWordBank);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "chrischenhui"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "chrischenhui"
        },
        "content": "     * Set the word bank to default if the removed."
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "chrischenhui"
        },
        "content": "     */"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "chrischenhui"
        },
        "content": "    void updateWordBank(String name);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "jascxx"
        },
        "content": "     * Returns the active word bank statistics. Null if no active."
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "jascxx"
        },
        "content": "    WordBankStatistics getWordBankStatistics();"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "jascxx"
        },
        "content": "     * Replaces word bank stats data with the data in {@code wordBankStats}."
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "jascxx"
        },
        "content": "    void setWordBankStatistics(WordBankStatistics wordBankStats);"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "jascxx"
        },
        "content": "     * Resets the word bank statistics data"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "jascxx"
        },
        "content": "    void clearWordBankStatistics();"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "chrischenhui"
        },
        "content": "     * Resets the word bank data to be empty."
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "chrischenhui"
        },
        "content": "    void clearWordBank();"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "chrischenhui"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "chrischenhui"
        },
        "content": "     * Returns the WordBank"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "chrischenhui"
        },
        "content": "     */"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "dragontho"
        },
        "content": "    ReadOnlyWordBank getCurrentWordBank();"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "jascxx"
        },
        "content": "     * Returns true if a card with the same name as {@code card} exists in the word bank."
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "jascxx"
        },
        "content": "    boolean hasCard(Card card);"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "jascxx"
        },
        "content": "     * Deletes the given card."
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "jascxx"
        },
        "content": "     * The card must exist in the word bank."
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "jascxx"
        },
        "content": "    void deleteCard(Card target);"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "jascxx"
        },
        "content": "     * Adds the given card."
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "jascxx"
        },
        "content": "     * {@code card} must not already exist in the word bank."
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "jascxx"
        },
        "content": "    void addCard(Card card);"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "jascxx"
        },
        "content": "     * Replaces the given card {@code target} with {@code editedCard}."
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "jascxx"
        },
        "content": "     * {@code target} must exist in the word bank."
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "jascxx"
        },
        "content": "     * The card name of {@code editedCard} must not be the same as another existing card in the word bank."
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "jascxx"
        },
        "content": "    void setCard(Card target, Card editedCard);"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "chrischenhui"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "chrischenhui"
        },
        "content": "     * Returns an unmodifiable view of the filtered card list"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "chrischenhui"
        },
        "content": "     */"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "jascxx"
        },
        "content": "    ObservableList\u003cCard\u003e getFilteredCardList();"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "chrischenhui"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "chrischenhui"
        },
        "content": "     * Returns an unmodifiable view of the filtered card list"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "chrischenhui"
        },
        "content": "     */"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "sreesubbash"
        },
        "content": "    ObservableList\u003cWordBank\u003e getFilteredWordBankList();"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "sreesubbash"
        },
        "content": ""
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "chrischenhui"
        },
        "content": "    WordBankList getWordBankList();"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "chrischenhui"
        },
        "content": ""
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "jascxx"
        },
        "content": "    WordBankStatisticsList getWordBankStatisticsList();"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "jascxx"
        },
        "content": ""
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "jascxx"
        },
        "content": "    GlobalStatistics getGlobalStatistics();"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "jascxx"
        },
        "content": ""
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "jascxx"
        },
        "content": "     * Updates the filter of the filtered card list to filter by the given {@code predicate}."
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "chrischenhui"
        },
        "content": "     *"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws NullPointerException if {@code predicate} is null."
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "jascxx"
        },
        "content": "    void updateFilteredCardList(Predicate\u003cCard\u003e predicate);"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": ""
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": "    void setGame(Game game);"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": ""
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "sreesubbash"
        },
        "content": "    boolean gameIsOver();"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "sreesubbash"
        },
        "content": ""
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "chrischenhui"
        },
        "content": "    boolean getHasBank();"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "dragontho"
        },
        "content": ""
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": "    Game getGame();"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": ""
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "chrischenhui"
        },
        "content": "    boolean hasWordBank(String name);"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "chrischenhui"
        },
        "content": ""
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "chrischenhui"
        },
        "content": "    WordBank getWordBankFromName(String name);"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "chrischenhui"
        },
        "content": ""
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "chrischenhui"
        },
        "content": ""
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "jascxx"
        },
        "content": "    DifficultyEnum getCurrentGameDifficulty();"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "jascxx"
        },
        "content": ""
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "dragontho"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "dragontho"
        },
        "content": "     * Returns the app settings"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "dragontho"
        },
        "content": "     */"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "dragontho"
        },
        "content": "    AppSettings getAppSettings();"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "dragontho"
        },
        "content": ""
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "dragontho"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "dragontho"
        },
        "content": "     * Returns the app settings file path."
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "dragontho"
        },
        "content": "     */"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "dragontho"
        },
        "content": "    Path getAppSettingsFilePath();"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "dragontho"
        },
        "content": ""
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "dragontho"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "dragontho"
        },
        "content": "     * Replaces the default difficulty of the game with {@code difficultyEnum}."
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "dragontho"
        },
        "content": "     *"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "dragontho"
        },
        "content": "     * @param difficultyEnum The new default difficulty of the game."
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "dragontho"
        },
        "content": "     */"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "dragontho"
        },
        "content": "    void setDefaultDifficulty(DifficultyEnum difficultyEnum);"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "dragontho"
        },
        "content": ""
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "dragontho"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "dragontho"
        },
        "content": "     * Returns the current default difficulty of the game."
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "dragontho"
        },
        "content": "     */"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "dragontho"
        },
        "content": "    DifficultyEnum getDefaultDifficulty();"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": ""
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "dragontho"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "dragontho"
        },
        "content": "     * Replaces the default theme of the game with {@code difficultyEnum}."
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "dragontho"
        },
        "content": "     *"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "dragontho"
        },
        "content": "     * @param themeEnum The new default theme of the game."
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "dragontho"
        },
        "content": "     */"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "dragontho"
        },
        "content": "    void setDefaultTheme(ThemeEnum themeEnum);"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "dragontho"
        },
        "content": ""
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "dragontho"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "dragontho"
        },
        "content": "     * Returns the current default theme of the game."
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "dragontho"
        },
        "content": "     */"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "dragontho"
        },
        "content": "    ThemeEnum getDefaultTheme();"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "dragontho"
        },
        "content": ""
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "dragontho"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "dragontho"
        },
        "content": "     * Sets the setting if hints are enabled or not."
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "dragontho"
        },
        "content": "     */"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "dragontho"
        },
        "content": "    void setHintsEnabled(boolean enabled);"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "dragontho"
        },
        "content": ""
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "dragontho"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "dragontho"
        },
        "content": "     * Returns if hints are enabled or not."
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "dragontho"
        },
        "content": "     */"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "dragontho"
        },
        "content": "    boolean getHintsEnabled();"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "dragontho"
        },
        "content": ""
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "dragontho"
        },
        "content": "    void setAvatarId(int avatarId);"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "dragontho"
        },
        "content": ""
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "dragontho"
        },
        "content": "    int getAvatarId();"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "dragontho"
        },
        "content": ""
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": "    long getTimeAllowedPerQuestion();"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": ""
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": "    FormattedHint getHintFormatFromCurrentGame();"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": ""
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": "    int getHintFormatSizeFromCurrentGame();"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": ""
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "dragontho": 54,
      "sreesubbash": 4,
      "jascxx": 38,
      "chrischenhui": 28,
      "kohyida1997": 14,
      "-": 73
    }
  },
  {
    "path": "src/main/java/seedu/address/model/ModelManager.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.model;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.commons.util.CollectionUtil.requireAllNonNull;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "jascxx"
        },
        "content": "import java.util.Collections;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.function.Predicate;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.collections.transformation.FilteredList;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.GuiSettings;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "dragontho"
        },
        "content": "import seedu.address.model.appsettings.AppSettings;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "dragontho"
        },
        "content": "import seedu.address.model.appsettings.DifficultyEnum;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "dragontho"
        },
        "content": "import seedu.address.model.appsettings.ReadOnlyAppSettings;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "dragontho"
        },
        "content": "import seedu.address.model.appsettings.ThemeEnum;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "jascxx"
        },
        "content": "import seedu.address.model.card.Card;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": "import seedu.address.model.card.FormattedHint;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": "import seedu.address.model.game.Game;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "jascxx"
        },
        "content": "import seedu.address.model.globalstatistics.GlobalStatistics;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "chrischenhui"
        },
        "content": "import seedu.address.model.util.SampleDataUtil;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "jascxx"
        },
        "content": "import seedu.address.model.wordbank.ReadOnlyWordBank;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "jascxx"
        },
        "content": "import seedu.address.model.wordbank.WordBank;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "dragontho"
        },
        "content": "import seedu.address.model.wordbanklist.WordBankList;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "jascxx"
        },
        "content": "import seedu.address.model.wordbankstatslist.WordBankStatisticsList;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "jascxx"
        },
        "content": "import seedu.address.statistics.WordBankStatistics;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": " * Represents the in-memory model of the address book data."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "public class ModelManager implements Model {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final Logger logger \u003d LogsCenter.getLogger(ModelManager.class);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "chrischenhui"
        },
        "content": "    private boolean hasBank \u003d false;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "chrischenhui"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "dragontho"
        },
        "content": "    private WordBank currentWordBank \u003d SampleDataUtil.getSampleWordBank();"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "sreesubbash"
        },
        "content": "    private final WordBankList wordBankList;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "jascxx"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "jascxx"
        },
        "content": "    private WordBankStatistics wordBankStatistics;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "jascxx"
        },
        "content": "    private final WordBankStatisticsList wordBankStatisticsList;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "jascxx"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "jascxx"
        },
        "content": "    private final GlobalStatistics globalStatistics;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "jascxx"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    private final UserPrefs userPrefs;"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "dragontho"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "dragontho"
        },
        "content": "    private final AppSettings appSettings;"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "dragontho"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "chrischenhui"
        },
        "content": "    private FilteredList\u003cCard\u003e filteredCards;"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": "    private Game game \u003d null;"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "jascxx"
        },
        "content": "     * Initializes a ModelManager with the given wordBank and userPrefs."
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "jascxx"
        },
        "content": "    public ModelManager(WordBankList wordBankList, WordBankStatisticsList wbStatsList,"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "dragontho"
        },
        "content": "                        GlobalStatistics globalStatistics, ReadOnlyUserPrefs userPrefs,"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "dragontho"
        },
        "content": "                        ReadOnlyAppSettings appSettings) {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "        super();"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "chrischenhui"
        },
        "content": "        requireAllNonNull(wordBankList, userPrefs);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "chrischenhui"
        },
        "content": "        logger.fine(\"Initializing with word bank list: \" + wordBankList + \" and user prefs \" + userPrefs);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "chrischenhui"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "chrischenhui"
        },
        "content": "        this.wordBankList \u003d wordBankList;"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "jascxx"
        },
        "content": "        this.wordBankStatisticsList \u003d wbStatsList;"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "jascxx"
        },
        "content": "        this.globalStatistics \u003d globalStatistics;"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "        this.userPrefs \u003d new UserPrefs(userPrefs);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "dragontho"
        },
        "content": "        this.appSettings \u003d new AppSettings(appSettings);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "dragontho"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "dragontho"
        },
        "content": "        filteredCards \u003d new FilteredList\u003c\u003e(this.currentWordBank.getCardList());"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "    public ModelManager() {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "jascxx"
        },
        "content": "        this(new WordBankList(Collections.emptyList()),"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "jascxx"
        },
        "content": "                new WordBankStatisticsList(Collections.emptyList()),"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "jascxx"
        },
        "content": "                new GlobalStatistics(),"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "dragontho"
        },
        "content": "                new UserPrefs(),"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "dragontho"
        },
        "content": "                new AppSettings());"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "jascxx"
        },
        "content": "    // Placeholder setGame method"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "jascxx"
        },
        "content": "    public void setGame(Game game) {"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "jascxx"
        },
        "content": "        this.game \u003d game;"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "jascxx"
        },
        "content": "    }"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "jascxx"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "jascxx"
        },
        "content": "    public Game getGame() {"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": "        return game;"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": "    }"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": "    public boolean gameIsOver() {"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": "        return this.game \u003d\u003d null ? true : game.isOver();"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "jascxx"
        },
        "content": "    }"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "jascxx"
        },
        "content": ""
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "jascxx"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "jascxx"
        },
        "content": "    public DifficultyEnum getCurrentGameDifficulty() {"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "jascxx"
        },
        "content": "        return game.getCurrentGameDifficulty();"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "jascxx"
        },
        "content": "    }"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "jascxx"
        },
        "content": ""
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "dragontho"
        },
        "content": "    //\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d AppSettings \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "dragontho"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "dragontho"
        },
        "content": "    public AppSettings getAppSettings() {"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "dragontho"
        },
        "content": "        return appSettings;"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "dragontho"
        },
        "content": "    }"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "dragontho"
        },
        "content": ""
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "dragontho"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "dragontho"
        },
        "content": "    public Path getAppSettingsFilePath() {"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "dragontho"
        },
        "content": "        return appSettings.getAppSettingsFilePath();"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "dragontho"
        },
        "content": "    }"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "dragontho"
        },
        "content": ""
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "dragontho"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "dragontho"
        },
        "content": "    public void setDefaultDifficulty(DifficultyEnum difficultyEnum) {"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "dragontho"
        },
        "content": "        appSettings.setDefaultDifficulty(difficultyEnum);"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "dragontho"
        },
        "content": "    }"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "dragontho"
        },
        "content": ""
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "dragontho"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "dragontho"
        },
        "content": "    public DifficultyEnum getDefaultDifficulty() {"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "dragontho"
        },
        "content": "        return appSettings.getDefaultDifficulty();"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "dragontho"
        },
        "content": "    }"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "dragontho"
        },
        "content": ""
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "dragontho"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "dragontho"
        },
        "content": "    public ThemeEnum getDefaultTheme() {"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "dragontho"
        },
        "content": "        return appSettings.getDefaultTheme();"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "dragontho"
        },
        "content": "    }"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "dragontho"
        },
        "content": ""
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "dragontho"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "dragontho"
        },
        "content": "    public void setDefaultTheme(ThemeEnum defaultTheme) {"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "dragontho"
        },
        "content": "        appSettings.setDefaultTheme(defaultTheme);"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "dragontho"
        },
        "content": "    }"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "dragontho"
        },
        "content": ""
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "dragontho"
        },
        "content": "    public void setHintsEnabled(boolean enabled) {"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "dragontho"
        },
        "content": "        requireNonNull(enabled);"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "dragontho"
        },
        "content": "        appSettings.setHintsEnabled(enabled);"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": "    }"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": ""
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "dragontho"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "dragontho"
        },
        "content": "    public boolean getHintsEnabled() {"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "dragontho"
        },
        "content": "        return appSettings.getHintsEnabled();"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "dragontho"
        },
        "content": "    }"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "dragontho"
        },
        "content": ""
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "dragontho"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "dragontho"
        },
        "content": "    public void setAvatarId(int avatarId) {"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "dragontho"
        },
        "content": "        requireNonNull(avatarId);"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "dragontho"
        },
        "content": "        appSettings.setAvatarId(avatarId);"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "dragontho"
        },
        "content": "    }"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "dragontho"
        },
        "content": ""
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "dragontho"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "dragontho"
        },
        "content": "    public int getAvatarId() {"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "dragontho"
        },
        "content": "        return appSettings.getAvatarId();"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "dragontho"
        },
        "content": "    }"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "dragontho"
        },
        "content": ""
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": "    public long getTimeAllowedPerQuestion() {"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": "        return this.game.getCurrentGameDifficulty().getTimeAllowedPerQuestion();"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": "    public FormattedHint getHintFormatFromCurrentGame() throws UnsupportedOperationException {"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": "        if (game \u003d\u003d null || game.isOver()) {"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": "            throw new UnsupportedOperationException(\"No active game session to send hints from\");"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": "        }"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": "        return game.getHintFormatForCurrCard();"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": "    }"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": ""
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": "    public int getHintFormatSizeFromCurrentGame() {"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": "        return game.getHintFormatSizeOfCurrCard();"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": "    }"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": ""
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": ""
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "-"
        },
        "content": "    //\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d UserPrefs \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setUserPrefs(ReadOnlyUserPrefs userPrefs) {"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(userPrefs);"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "-"
        },
        "content": "        this.userPrefs.resetData(userPrefs);"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "-"
        },
        "content": "    public ReadOnlyUserPrefs getUserPrefs() {"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "-"
        },
        "content": "        return userPrefs;"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "-"
        },
        "content": "    public GuiSettings getGuiSettings() {"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "-"
        },
        "content": "        return userPrefs.getGuiSettings();"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setGuiSettings(GuiSettings guiSettings) {"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(guiSettings);"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "-"
        },
        "content": "        userPrefs.setGuiSettings(guiSettings);"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "jascxx"
        },
        "content": "    public Path getWordBankFilePath() {"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "chrischenhui"
        },
        "content": "        return userPrefs.getDataFilePath();"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "chrischenhui"
        },
        "content": "    public void setWordBankFilePath(Path filePath) {"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "chrischenhui"
        },
        "content": "        requireNonNull(filePath);"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "chrischenhui"
        },
        "content": "        userPrefs.setDataFilePath(filePath);"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "jascxx"
        },
        "content": "    //\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d WordBank \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "dragontho"
        },
        "content": "    public void setCurrentWordBank(ReadOnlyWordBank currenWordBank) {"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "dragontho"
        },
        "content": "        this.currentWordBank \u003d (WordBank) currenWordBank;"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "chrischenhui"
        },
        "content": "        hasBank \u003d true;"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "dragontho"
        },
        "content": "        filteredCards \u003d new FilteredList\u003c\u003e(this.currentWordBank.getCardList());"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "chrischenhui"
        },
        "content": "        //        this.wordBank.resetData(wordBank);"
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "dragontho"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "dragontho"
        },
        "content": "     * Clears the WordBank."
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "dragontho"
        },
        "content": "     */"
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "chrischenhui"
        },
        "content": "    public void clearWordBank() {"
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "dragontho"
        },
        "content": "        currentWordBank.resetData(new WordBank(currentWordBank.getName()));"
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "dragontho"
        },
        "content": "        filteredCards \u003d new FilteredList\u003c\u003e(this.currentWordBank.getCardList());"
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "chrischenhui"
        },
        "content": "        //        this.wordBank.resetData(wordBank);"
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "dragontho"
        },
        "content": "    public ReadOnlyWordBank getCurrentWordBank() {"
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "dragontho"
        },
        "content": "        return currentWordBank;"
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "chrischenhui"
        },
        "content": "    public void updateWordBank(String name) {"
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "dragontho"
        },
        "content": "        if (currentWordBank.getName().equals(name)) {"
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "chrischenhui"
        },
        "content": "            hasBank \u003d false;"
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "dragontho"
        },
        "content": "            this.currentWordBank \u003d SampleDataUtil.getSampleWordBank();"
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "chrischenhui"
        },
        "content": "        }"
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "jascxx"
        },
        "content": "    public boolean hasCard(Card card) {"
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "jascxx"
        },
        "content": "        requireNonNull(card);"
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "dragontho"
        },
        "content": "        return currentWordBank.hasCard(card);"
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 248,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 249,
        "author": {
          "gitId": "jascxx"
        },
        "content": "    public void deleteCard(Card target) {"
      },
      {
        "lineNumber": 250,
        "author": {
          "gitId": "dragontho"
        },
        "content": "        currentWordBank.removeCard(target);"
      },
      {
        "lineNumber": 251,
        "author": {
          "gitId": "jascxx"
        },
        "content": "        wordBankStatistics.removeCardStatistics(target.getId());"
      },
      {
        "lineNumber": 252,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 253,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 254,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 255,
        "author": {
          "gitId": "jascxx"
        },
        "content": "    public void addCard(Card card) {"
      },
      {
        "lineNumber": 256,
        "author": {
          "gitId": "dragontho"
        },
        "content": "        currentWordBank.addCard(card);"
      },
      {
        "lineNumber": 257,
        "author": {
          "gitId": "jascxx"
        },
        "content": "        updateFilteredCardList(PREDICATE_SHOW_ALL_CARDS);"
      },
      {
        "lineNumber": 258,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 259,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 260,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 261,
        "author": {
          "gitId": "jascxx"
        },
        "content": "    public void setCard(Card target, Card editedCard) {"
      },
      {
        "lineNumber": 262,
        "author": {
          "gitId": "jascxx"
        },
        "content": "        requireAllNonNull(target, editedCard);"
      },
      {
        "lineNumber": 263,
        "author": {
          "gitId": "dragontho"
        },
        "content": "        currentWordBank.setCard(target, editedCard);"
      },
      {
        "lineNumber": 264,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 265,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 266,
        "author": {
          "gitId": "chrischenhui"
        },
        "content": "    //\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d WordBankList \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 267,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 268,
        "author": {
          "gitId": "chrischenhui"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 269,
        "author": {
          "gitId": "chrischenhui"
        },
        "content": "    public boolean hasWordBank(String name) {"
      },
      {
        "lineNumber": 270,
        "author": {
          "gitId": "chrischenhui"
        },
        "content": "        return wordBankList.hasWordBankName(name);"
      },
      {
        "lineNumber": 271,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 272,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 273,
        "author": {
          "gitId": "chrischenhui"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 274,
        "author": {
          "gitId": "chrischenhui"
        },
        "content": "    public WordBank getWordBankFromName(String name) {"
      },
      {
        "lineNumber": 275,
        "author": {
          "gitId": "chrischenhui"
        },
        "content": "        return wordBankList.getWordBankFromName(name);"
      },
      {
        "lineNumber": 276,
        "author": {
          "gitId": "chrischenhui"
        },
        "content": "    }"
      },
      {
        "lineNumber": 277,
        "author": {
          "gitId": "chrischenhui"
        },
        "content": ""
      },
      {
        "lineNumber": 278,
        "author": {
          "gitId": "jascxx"
        },
        "content": "    //\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d Filtered Card List Accessors \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 279,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 280,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 281,
        "author": {
          "gitId": "jascxx"
        },
        "content": "     * Returns an unmodifiable view of the list of {@code Card} backed by the internal list of"
      },
      {
        "lineNumber": 282,
        "author": {
          "gitId": "jascxx"
        },
        "content": "     * {@code versionedAddressBook} // todo what is this versionedAddressBook?"
      },
      {
        "lineNumber": 283,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 284,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 285,
        "author": {
          "gitId": "jascxx"
        },
        "content": "    public ObservableList\u003cCard\u003e getFilteredCardList() {"
      },
      {
        "lineNumber": 286,
        "author": {
          "gitId": "dragontho"
        },
        "content": "        filteredCards \u003d new FilteredList\u003c\u003e(this.currentWordBank.getCardList());"
      },
      {
        "lineNumber": 287,
        "author": {
          "gitId": "jascxx"
        },
        "content": "        return filteredCards;"
      },
      {
        "lineNumber": 288,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 289,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 290,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 291,
        "author": {
          "gitId": "sreesubbash"
        },
        "content": "     * Returns an unmodifiable view of the list of {@code Card} backed by the internal list of"
      },
      {
        "lineNumber": 292,
        "author": {
          "gitId": "sreesubbash"
        },
        "content": "     * {@code versionedAddressBook} // todo what is this versionedAddressBook?"
      },
      {
        "lineNumber": 293,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 294,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 295,
        "author": {
          "gitId": "sreesubbash"
        },
        "content": "    public ObservableList\u003cWordBank\u003e getFilteredWordBankList() {"
      },
      {
        "lineNumber": 296,
        "author": {
          "gitId": "chrischenhui"
        },
        "content": "        return wordBankList.getFilteredWordBankList();"
      },
      {
        "lineNumber": 297,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 298,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 299,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 300,
        "author": {
          "gitId": "chrischenhui"
        },
        "content": "    public WordBankList getWordBankList() {"
      },
      {
        "lineNumber": 301,
        "author": {
          "gitId": "chrischenhui"
        },
        "content": "        return wordBankList;"
      },
      {
        "lineNumber": 302,
        "author": {
          "gitId": "chrischenhui"
        },
        "content": "    }"
      },
      {
        "lineNumber": 303,
        "author": {
          "gitId": "chrischenhui"
        },
        "content": ""
      },
      {
        "lineNumber": 304,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 305,
        "author": {
          "gitId": "jascxx"
        },
        "content": "    public void updateFilteredCardList(Predicate\u003cCard\u003e predicate) {"
      },
      {
        "lineNumber": 306,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(predicate);"
      },
      {
        "lineNumber": 307,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": ""
      },
      {
        "lineNumber": 308,
        "author": {
          "gitId": "jascxx"
        },
        "content": "        filteredCards.setPredicate(predicate);"
      },
      {
        "lineNumber": 309,
        "author": {
          "gitId": "chrischenhui"
        },
        "content": "        //filteredCards \u003d new FilteredList\u003c\u003e(this.wordBank.getCardList());"
      },
      {
        "lineNumber": 310,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 311,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 312,
        "author": {
          "gitId": "jascxx"
        },
        "content": "    //\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d WordBankStatistics methods \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 313,
        "author": {
          "gitId": "jascxx"
        },
        "content": ""
      },
      {
        "lineNumber": 314,
        "author": {
          "gitId": "jascxx"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 315,
        "author": {
          "gitId": "jascxx"
        },
        "content": "    public WordBankStatisticsList getWordBankStatisticsList() {"
      },
      {
        "lineNumber": 316,
        "author": {
          "gitId": "jascxx"
        },
        "content": "        return wordBankStatisticsList;"
      },
      {
        "lineNumber": 317,
        "author": {
          "gitId": "jascxx"
        },
        "content": "    }"
      },
      {
        "lineNumber": 318,
        "author": {
          "gitId": "jascxx"
        },
        "content": ""
      },
      {
        "lineNumber": 319,
        "author": {
          "gitId": "jascxx"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 320,
        "author": {
          "gitId": "jascxx"
        },
        "content": "    public WordBankStatistics getWordBankStatistics() {"
      },
      {
        "lineNumber": 321,
        "author": {
          "gitId": "jascxx"
        },
        "content": "        return this.wordBankStatistics;"
      },
      {
        "lineNumber": 322,
        "author": {
          "gitId": "jascxx"
        },
        "content": "    }"
      },
      {
        "lineNumber": 323,
        "author": {
          "gitId": "jascxx"
        },
        "content": ""
      },
      {
        "lineNumber": 324,
        "author": {
          "gitId": "dragontho"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 325,
        "author": {
          "gitId": "chrischenhui"
        },
        "content": "    public boolean getHasBank() {"
      },
      {
        "lineNumber": 326,
        "author": {
          "gitId": "chrischenhui"
        },
        "content": "        return hasBank;"
      },
      {
        "lineNumber": 327,
        "author": {
          "gitId": "dragontho"
        },
        "content": "    }"
      },
      {
        "lineNumber": 328,
        "author": {
          "gitId": "dragontho"
        },
        "content": ""
      },
      {
        "lineNumber": 329,
        "author": {
          "gitId": "jascxx"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 330,
        "author": {
          "gitId": "jascxx"
        },
        "content": "    public void setWordBankStatistics(WordBankStatistics wordBankStats) {"
      },
      {
        "lineNumber": 331,
        "author": {
          "gitId": "jascxx"
        },
        "content": "        this.wordBankStatistics \u003d wordBankStats;"
      },
      {
        "lineNumber": 332,
        "author": {
          "gitId": "jascxx"
        },
        "content": "    }"
      },
      {
        "lineNumber": 333,
        "author": {
          "gitId": "jascxx"
        },
        "content": ""
      },
      {
        "lineNumber": 334,
        "author": {
          "gitId": "jascxx"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 335,
        "author": {
          "gitId": "jascxx"
        },
        "content": "    public void clearWordBankStatistics() {"
      },
      {
        "lineNumber": 336,
        "author": {
          "gitId": "jascxx"
        },
        "content": "        this.wordBankStatistics \u003d null;"
      },
      {
        "lineNumber": 337,
        "author": {
          "gitId": "jascxx"
        },
        "content": "    }"
      },
      {
        "lineNumber": 338,
        "author": {
          "gitId": "jascxx"
        },
        "content": ""
      },
      {
        "lineNumber": 339,
        "author": {
          "gitId": "jascxx"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 340,
        "author": {
          "gitId": "jascxx"
        },
        "content": "    public GlobalStatistics getGlobalStatistics() {"
      },
      {
        "lineNumber": 341,
        "author": {
          "gitId": "jascxx"
        },
        "content": "        return globalStatistics;"
      },
      {
        "lineNumber": 342,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 343,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 344,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 345,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object obj) {"
      },
      {
        "lineNumber": 346,
        "author": {
          "gitId": "-"
        },
        "content": "        // short circuit if same object"
      },
      {
        "lineNumber": 347,
        "author": {
          "gitId": "-"
        },
        "content": "        if (obj \u003d\u003d this) {"
      },
      {
        "lineNumber": 348,
        "author": {
          "gitId": "-"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 349,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 350,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 351,
        "author": {
          "gitId": "-"
        },
        "content": "        // instanceof handles nulls"
      },
      {
        "lineNumber": 352,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!(obj instanceof ModelManager)) {"
      },
      {
        "lineNumber": 353,
        "author": {
          "gitId": "-"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 354,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 355,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 356,
        "author": {
          "gitId": "-"
        },
        "content": "        // state check"
      },
      {
        "lineNumber": 357,
        "author": {
          "gitId": "-"
        },
        "content": "        ModelManager other \u003d (ModelManager) obj;"
      },
      {
        "lineNumber": 358,
        "author": {
          "gitId": "dragontho"
        },
        "content": "        return currentWordBank.equals(other.currentWordBank)"
      },
      {
        "lineNumber": 359,
        "author": {
          "gitId": "-"
        },
        "content": "                \u0026\u0026 userPrefs.equals(other.userPrefs)"
      },
      {
        "lineNumber": 360,
        "author": {
          "gitId": "jascxx"
        },
        "content": "                \u0026\u0026 filteredCards.equals(other.filteredCards);"
      },
      {
        "lineNumber": 361,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 362,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "dragontho": 87,
      "sreesubbash": 4,
      "jascxx": 76,
      "chrischenhui": 36,
      "kohyida1997": 31,
      "-": 128
    }
  },
  {
    "path": "src/main/java/seedu/address/model/ReadOnlyUserPrefs.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.model;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.GuiSettings;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": " * Unmodifiable view of user prefs."
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "public interface ReadOnlyUserPrefs {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    GuiSettings getGuiSettings();"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "chrischenhui"
        },
        "content": "    Path getDataFilePath();"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "chrischenhui": 1,
      "-": 15
    }
  },
  {
    "path": "src/main/java/seedu/address/model/UserPrefs.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.model;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Paths;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Objects;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.GuiSettings;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": " * Represents User\u0027s preferences."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "public class UserPrefs implements ReadOnlyUserPrefs {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    private GuiSettings guiSettings \u003d new GuiSettings();"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "chrischenhui"
        },
        "content": "    private Path dataFilePath \u003d Paths.get(\"data\");"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "chrischenhui"
        },
        "content": "    private Path wordBankListFilePath \u003d Paths.get(\"data\", \"wordBanks\");"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "dragontho"
        },
        "content": "    private Path appSettingsFilePath \u003d Paths.get(\"data\" , \"appsettings.json\");"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "     * Creates a {@code UserPrefs} with default values."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    public UserPrefs() {}"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "     * Creates a {@code UserPrefs} with the prefs in {@code userPrefs}."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    public UserPrefs(ReadOnlyUserPrefs userPrefs) {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        this();"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "        resetData(userPrefs);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "     * Resets the existing data of this {@code UserPrefs} with {@code newUserPrefs}."
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    public void resetData(ReadOnlyUserPrefs newUserPrefs) {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(newUserPrefs);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        setGuiSettings(newUserPrefs.getGuiSettings());"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "chrischenhui"
        },
        "content": "        setDataFilePath(newUserPrefs.getDataFilePath());"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    public GuiSettings getGuiSettings() {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        return guiSettings;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setGuiSettings(GuiSettings guiSettings) {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(guiSettings);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        this.guiSettings \u003d guiSettings;"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "chrischenhui"
        },
        "content": "    public Path getDataFilePath() {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "chrischenhui"
        },
        "content": "        return dataFilePath;"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "chrischenhui"
        },
        "content": "    public void setDataFilePath(Path dataFilePath) {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "chrischenhui"
        },
        "content": "        requireNonNull(dataFilePath);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "chrischenhui"
        },
        "content": "        this.dataFilePath \u003d dataFilePath;"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "dragontho"
        },
        "content": "    public Path getAppSettingsFilePath() {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "dragontho"
        },
        "content": "        return appSettingsFilePath;"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "dragontho"
        },
        "content": "    public void setAppSettingsFilePath(Path appSettingsFilePath) {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "dragontho"
        },
        "content": "        requireNonNull(appSettingsFilePath);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "dragontho"
        },
        "content": "        this.appSettingsFilePath \u003d appSettingsFilePath;"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "        if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!(other instanceof UserPrefs)) { //this handles null as well."
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs o \u003d (UserPrefs) other;"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "        return guiSettings.equals(o.guiSettings)"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "chrischenhui"
        },
        "content": "                \u0026\u0026 dataFilePath.equals(o.dataFilePath);"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "chrischenhui"
        },
        "content": "        return Objects.hash(guiSettings, dataFilePath);"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "        StringBuilder sb \u003d new StringBuilder();"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "        sb.append(\"Gui Settings : \" + guiSettings);"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "chrischenhui"
        },
        "content": "        sb.append(\"\\nLocal data file location : \" + dataFilePath);"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "        return sb.toString();"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "dragontho": 6,
      "chrischenhui": 11,
      "-": 80
    }
  },
  {
    "path": "src/main/java/seedu/address/model/appsettings/AppSettings.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "dragontho"
        },
        "content": "package seedu.address.model.appsettings;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "dragontho"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "dragontho"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "dragontho"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "dragontho"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "dragontho"
        },
        "content": "import java.nio.file.Paths;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "dragontho"
        },
        "content": "import java.util.Objects;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "dragontho"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "dragontho"
        },
        "content": "/**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "dragontho"
        },
        "content": " * Represents User\u0027s preferences."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "dragontho"
        },
        "content": " */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "dragontho"
        },
        "content": "public class AppSettings implements ReadOnlyAppSettings {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "dragontho"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "dragontho"
        },
        "content": "    private Path appSettingsFilePath \u003d Paths.get(\"data\" , \"appsettings.json\");"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "dragontho"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "dragontho"
        },
        "content": "    //Settings fields"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "dragontho"
        },
        "content": "    private DifficultyEnum defaultDifficulty \u003d DifficultyEnum.EASY;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "dragontho"
        },
        "content": "    private ThemeEnum defaultTheme \u003d ThemeEnum.DARK;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "dragontho"
        },
        "content": "    private boolean hintsEnabled \u003d false;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "dragontho"
        },
        "content": "    private int avatarId \u003d 0;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "dragontho"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "dragontho"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "dragontho"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "dragontho"
        },
        "content": "     * Creates a {@code AppSettings} with default values."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "dragontho"
        },
        "content": "     */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "dragontho"
        },
        "content": "    public AppSettings() {}"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "dragontho"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "dragontho"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "dragontho"
        },
        "content": "     * Creates a {@code AppSettings} with the prefs in {@code appSettings}."
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "dragontho"
        },
        "content": "     */"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "dragontho"
        },
        "content": "    public AppSettings(ReadOnlyAppSettings appSettings) {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "dragontho"
        },
        "content": "        this();"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "dragontho"
        },
        "content": "        resetData(appSettings);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "dragontho"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "dragontho"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "dragontho"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "dragontho"
        },
        "content": "     * Resets the existing data of this {@code AppSettings} with {@code newAppSettings}."
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "dragontho"
        },
        "content": "     */"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "dragontho"
        },
        "content": "    public void resetData(ReadOnlyAppSettings newAppSettings) {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "dragontho"
        },
        "content": "        requireNonNull(newAppSettings);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "dragontho"
        },
        "content": "        setAppSettingsFilePath(newAppSettings.getAppSettingsFilePath());"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "dragontho"
        },
        "content": "        setDefaultDifficulty(newAppSettings.getDefaultDifficulty());"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "dragontho"
        },
        "content": "        setDefaultTheme(newAppSettings.getDefaultTheme());"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "dragontho"
        },
        "content": "        setHintsEnabled(newAppSettings.getHintsEnabled());"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "dragontho"
        },
        "content": "        setAvatarId(newAppSettings.getAvatarId());"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "dragontho"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "dragontho"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "dragontho"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "dragontho"
        },
        "content": "    public Path getAppSettingsFilePath() {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "dragontho"
        },
        "content": "        return appSettingsFilePath;"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "dragontho"
        },
        "content": "    }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "dragontho"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "dragontho"
        },
        "content": "    public void setAppSettingsFilePath(Path appSettingsFilePath) {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "dragontho"
        },
        "content": "        requireNonNull(appSettingsFilePath);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "dragontho"
        },
        "content": "        this.appSettingsFilePath \u003d appSettingsFilePath;"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "dragontho"
        },
        "content": "    }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "dragontho"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "dragontho"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "dragontho"
        },
        "content": "    public DifficultyEnum getDefaultDifficulty() {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "dragontho"
        },
        "content": "        return defaultDifficulty;"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "dragontho"
        },
        "content": "    }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "dragontho"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "dragontho"
        },
        "content": "    public void setDefaultDifficulty(DifficultyEnum defaultDifficulty) {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "dragontho"
        },
        "content": "        requireNonNull(defaultDifficulty);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "dragontho"
        },
        "content": "        this.defaultDifficulty \u003d defaultDifficulty;"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "dragontho"
        },
        "content": "    }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "dragontho"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "dragontho"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "dragontho"
        },
        "content": "    public ThemeEnum getDefaultTheme() {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "dragontho"
        },
        "content": "        return defaultTheme;"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "dragontho"
        },
        "content": "    }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "dragontho"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "dragontho"
        },
        "content": "    public void setDefaultTheme(ThemeEnum defaultTheme) {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "dragontho"
        },
        "content": "        requireNonNull(defaultTheme);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "dragontho"
        },
        "content": "        this.defaultTheme \u003d defaultTheme;"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "dragontho"
        },
        "content": "    }"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "dragontho"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "dragontho"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "dragontho"
        },
        "content": "    public boolean getHintsEnabled() {"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "dragontho"
        },
        "content": "        return hintsEnabled;"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "dragontho"
        },
        "content": "    }"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "dragontho"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "dragontho"
        },
        "content": "    public void setHintsEnabled(boolean enabled) {"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "dragontho"
        },
        "content": "        requireNonNull(enabled);"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "dragontho"
        },
        "content": "        this.hintsEnabled \u003d enabled;"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "dragontho"
        },
        "content": "    }"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "dragontho"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "dragontho"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "dragontho"
        },
        "content": "    public int getAvatarId() {"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "dragontho"
        },
        "content": "        return avatarId;"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "dragontho"
        },
        "content": "    }"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "dragontho"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "dragontho"
        },
        "content": "    public void setAvatarId(int i) {"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "dragontho"
        },
        "content": "        requireNonNull(i);"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "dragontho"
        },
        "content": "        this.avatarId \u003d i;"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "dragontho"
        },
        "content": "    }"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "dragontho"
        },
        "content": ""
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "dragontho"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "dragontho"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "dragontho"
        },
        "content": "        if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "dragontho"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "dragontho"
        },
        "content": "        }"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "dragontho"
        },
        "content": "        if (!(other instanceof AppSettings)) { //this handles null as well."
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "dragontho"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "dragontho"
        },
        "content": "        }"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "dragontho"
        },
        "content": ""
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "dragontho"
        },
        "content": "        AppSettings o \u003d (AppSettings) other;"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "dragontho"
        },
        "content": ""
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "dragontho"
        },
        "content": "        return defaultDifficulty.equals(o.defaultDifficulty)"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "dragontho"
        },
        "content": "                \u0026\u0026 defaultTheme.equals(o.defaultTheme)"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "dragontho"
        },
        "content": "                \u0026\u0026 hintsEnabled \u003d\u003d o.hintsEnabled"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "dragontho"
        },
        "content": "                \u0026\u0026 appSettingsFilePath.equals(o.appSettingsFilePath);"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "dragontho"
        },
        "content": "    }"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "dragontho"
        },
        "content": ""
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "dragontho"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "dragontho"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "dragontho"
        },
        "content": "        return Objects.hash(appSettingsFilePath);"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "dragontho"
        },
        "content": "    }"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "dragontho"
        },
        "content": ""
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "dragontho"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "dragontho"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "dragontho"
        },
        "content": "        return \"Local data file location\" + appSettingsFilePath;"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "dragontho"
        },
        "content": "    }"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "dragontho"
        },
        "content": ""
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "dragontho"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "dragontho": 125
    }
  },
  {
    "path": "src/main/java/seedu/address/model/appsettings/DifficultyEnum.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "dragontho"
        },
        "content": "package seedu.address.model.appsettings;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "dragontho"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": ""
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": "/**"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": " * Difficulty levels for the Game"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": " */"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": "public enum DifficultyEnum {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": "    EASY(15000),"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": "    MEDIUM(10000),"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": "    HARD(5000);"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": "    private long timeAllowedPerQuestion;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": "    DifficultyEnum(long timeAllowedPerQuestion) {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": "        this.timeAllowedPerQuestion \u003d timeAllowedPerQuestion;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": "    }"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": "    public long getTimeAllowedPerQuestion() {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": "        return timeAllowedPerQuestion;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": "    }"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "dragontho": 2,
      "kohyida1997": 20
    }
  },
  {
    "path": "src/main/java/seedu/address/model/appsettings/ReadOnlyAppSettings.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "dragontho"
        },
        "content": "package seedu.address.model.appsettings;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "dragontho"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "dragontho"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "dragontho"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "dragontho"
        },
        "content": "/**"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "dragontho"
        },
        "content": " * Unmodifiable view of app settings."
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "dragontho"
        },
        "content": " */"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "dragontho"
        },
        "content": "public interface ReadOnlyAppSettings {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "dragontho"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "dragontho"
        },
        "content": "    Path getAppSettingsFilePath();"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "dragontho"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "dragontho"
        },
        "content": "    DifficultyEnum getDefaultDifficulty();"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "dragontho"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "dragontho"
        },
        "content": "    ThemeEnum getDefaultTheme();"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "dragontho"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "dragontho"
        },
        "content": "    boolean getHintsEnabled();"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "dragontho"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "dragontho"
        },
        "content": "    int getAvatarId();"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "dragontho"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "dragontho"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "dragontho": 20
    }
  },
  {
    "path": "src/main/java/seedu/address/model/appsettings/ThemeEnum.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "dragontho"
        },
        "content": "package seedu.address.model.appsettings;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "dragontho"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "dragontho"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "dragontho"
        },
        "content": " * Enums for either a light theme or a dark theme."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "dragontho"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "dragontho"
        },
        "content": "public enum ThemeEnum {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "dragontho"
        },
        "content": "    DARK(ThemeEnum.class.getClassLoader().getResource(\"view/DarkTheme.css\").toExternalForm(),"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "dragontho"
        },
        "content": "            ThemeEnum.class.getClassLoader().getResource(\"view/Extensions.css\").toExternalForm()),"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "dragontho"
        },
        "content": "    LIGHT(ThemeEnum.class.getClassLoader().getResource(\"view/LightTheme.css\").toExternalForm(),"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "dragontho"
        },
        "content": "            ThemeEnum.class.getClassLoader().getResource(\"view/ExtensionsLight.css\").toExternalForm());"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "dragontho"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "dragontho"
        },
        "content": "    private String themeUrl;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "dragontho"
        },
        "content": "    private String extensionUrl;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "dragontho"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "dragontho"
        },
        "content": "    ThemeEnum(String s, String e) {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "dragontho"
        },
        "content": "        themeUrl \u003d s;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "dragontho"
        },
        "content": "        extensionUrl \u003d e;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "dragontho"
        },
        "content": "    }"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "dragontho"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "dragontho"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "dragontho"
        },
        "content": "     * Gets the name of the .css file."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "dragontho"
        },
        "content": "     *"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "dragontho"
        },
        "content": "     * @return Either \"LightTheme.css\" or \"DarkTheme.css\"."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "dragontho"
        },
        "content": "     */"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "dragontho"
        },
        "content": "    public String getThemeUrl() {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "dragontho"
        },
        "content": "        return themeUrl;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "dragontho"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "dragontho"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "dragontho"
        },
        "content": "    public String getExtensionUrl() {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "dragontho"
        },
        "content": "        return extensionUrl;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "dragontho"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "dragontho"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "dragontho": 32
    }
  },
  {
    "path": "src/main/java/seedu/address/model/card/Card.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jascxx"
        },
        "content": "package seedu.address.model.card;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "jascxx"
        },
        "content": "import static seedu.address.commons.util.CollectionUtil.requireAllNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Collections;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.HashSet;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Objects;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "jascxx"
        },
        "content": "import seedu.address.commons.util.UidGenerator;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "jascxx"
        },
        "content": "import seedu.address.model.tag.Tag;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "jascxx"
        },
        "content": " * Represents a Card."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": " * Guarantees: details are present and not null, field values are validated, immutable."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "jascxx"
        },
        "content": "public class Card {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "jascxx"
        },
        "content": "    private final String id;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "jascxx"
        },
        "content": "    private final Word word;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "jascxx"
        },
        "content": "    private final Meaning meaning;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    private final Set\u003cTag\u003e tags \u003d new HashSet\u003c\u003e();"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": "    // stateful objects, will create a new hintSupplier every game session. (by instantiaing a new card)."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "jascxx"
        },
        "content": "    private HintSupplier hintSupplier;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "jascxx"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "     * Every field must be present and not null."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "chrischenhui"
        },
        "content": "    public Card(String id, Word word, Meaning meaning, Set\u003cTag\u003e tags) {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "jascxx"
        },
        "content": "        requireAllNonNull(id, word, meaning, tags);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "jascxx"
        },
        "content": "        this.id \u003d id;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "jascxx"
        },
        "content": "        this.word \u003d word;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "jascxx"
        },
        "content": "        this.meaning \u003d meaning;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        this.tags.addAll(tags);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "chrischenhui"
        },
        "content": "        this.hintSupplier \u003d new HintSupplier(word.getValue());"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": "     * Returns a deep copy of the current {@code Card}."
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": "     * This is to prevent hintSupplier carrying state to another game session due to referring to same"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": "     * card object."
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": "     */"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": "    public Card clone() {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "chrischenhui"
        },
        "content": "        return new Card(this.id, this.word, this.meaning, this.tags);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "jascxx"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": "     * Creates a new {@code card} with a new id."
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "jascxx"
        },
        "content": "     */"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "jascxx"
        },
        "content": "    public static Card createNewCard(Word word, Meaning meaning, Set\u003cTag\u003e tags) {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "chrischenhui"
        },
        "content": "        return new Card(UidGenerator.get(), word, meaning, tags);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "jascxx"
        },
        "content": "    }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "jascxx"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "jascxx"
        },
        "content": "    public Word getWord() {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "jascxx"
        },
        "content": "        return word;"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "jascxx"
        },
        "content": "    public Meaning getMeaning() {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "jascxx"
        },
        "content": "        return meaning;"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "jascxx"
        },
        "content": "    }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "jascxx"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns an immutable tag set, which throws {@code UnsupportedOperationException}"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "     * if modification is attempted."
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "    public Set\u003cTag\u003e getTags() {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "        return Collections.unmodifiableSet(tags);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "jascxx"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "jascxx"
        },
        "content": "     * Returns the uniquely identifiable ID of this card"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "jascxx"
        },
        "content": "     */"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "jascxx"
        },
        "content": "    public String getId() {"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "jascxx"
        },
        "content": "        return id;"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "jascxx"
        },
        "content": "    }"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "jascxx"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "jascxx"
        },
        "content": "     * Returns true if both cards have the same meaning."
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "jascxx"
        },
        "content": "    public boolean isSameMeaning(Card other) {"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "jascxx"
        },
        "content": "        if (other \u003d\u003d null) {"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "jascxx"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "jascxx"
        },
        "content": "        }"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "jascxx"
        },
        "content": "        return getMeaning().equals(other.getMeaning());"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "jascxx"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "jascxx"
        },
        "content": "     * Returns the next hint of the name, and null if no more hints available."
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "jascxx"
        },
        "content": "     */"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": "    public FormattedHint getHint() {"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "jascxx"
        },
        "content": "        return hintSupplier.get();"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "jascxx"
        },
        "content": "    }"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "jascxx"
        },
        "content": ""
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": "    public int getHintFormatSize() {"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": "        return word.toString().length();"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": "    }"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": ""
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "jascxx"
        },
        "content": "     * Returns true if both cards have the same name, description, and tags."
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "jascxx"
        },
        "content": "     * Defines a stronger equality than {@link Card#isSameMeaning(Card)}."
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "        if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "jascxx"
        },
        "content": "        if (!(other instanceof Card)) {"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "jascxx"
        },
        "content": "        Card otherPerson \u003d (Card) other;"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "jascxx"
        },
        "content": "        return otherPerson.getWord().equals(getWord())"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "jascxx"
        },
        "content": "                \u0026\u0026 otherPerson.getMeaning().equals(getMeaning())"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "                \u0026\u0026 otherPerson.getTags().equals(getTags());"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "        // use this method for custom fields hashing instead of implementing your own"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "jascxx"
        },
        "content": "        return Objects.hash(word, meaning, tags);"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "        final StringBuilder builder \u003d new StringBuilder();"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "jascxx"
        },
        "content": "        builder.append(getWord())"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "jascxx"
        },
        "content": "                .append(\" Meaning: \")"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "jascxx"
        },
        "content": "                .append(getMeaning())"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "                .append(\" Tags: \");"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "        getTags().forEach(builder::append);"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "        return builder.toString();"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "jascxx": 55,
      "chrischenhui": 4,
      "kohyida1997": 16,
      "-": 60
    }
  },
  {
    "path": "src/main/java/seedu/address/model/card/FormattedHint.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": "package seedu.address.model.card;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": " * Class that represents a Hint that is formatted in a HangMan-style, ready to be output."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": "public class FormattedHint {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": "    private int totalNumberOfCharacters;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": "    private char[] arrayOfHintCharacters;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": "    FormattedHint(int totalNumberOfCharacters) {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": "        this.totalNumberOfCharacters \u003d totalNumberOfCharacters;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": "        arrayOfHintCharacters \u003d new char[totalNumberOfCharacters];"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": "    }"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": "    void updateHintArray(Hint hint) {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": "        arrayOfHintCharacters[hint.index.getZeroBased()] \u003d hint.letter;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": "    }"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": "        StringBuilder outputFormat \u003d new StringBuilder(totalNumberOfCharacters);"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": "        for (int i \u003d 0; i \u003c arrayOfHintCharacters.length; i++) {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": "            if ((int) arrayOfHintCharacters[i] \u003d\u003d 0) { // checking for ASCII null character"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": "                outputFormat.append(\u0027_\u0027);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": "                outputFormat.append(arrayOfHintCharacters[i]);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": "            }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": "        }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": "        return outputFormat.toString();"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "kohyida1997": 31
    }
  },
  {
    "path": "src/main/java/seedu/address/model/card/Hint.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jascxx"
        },
        "content": "package seedu.address.model.card;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "jascxx"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "jascxx"
        },
        "content": "import static seedu.address.commons.util.CollectionUtil.requireAllNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "jascxx"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "jascxx"
        },
        "content": "import java.util.Objects;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "jascxx"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "jascxx"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "jascxx"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "jascxx"
        },
        "content": "/**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "jascxx"
        },
        "content": " * Represents a Hint of a String."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "jascxx"
        },
        "content": " * Consists of a letter and its index in the String."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "jascxx"
        },
        "content": " * Guarantees: immutable."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "jascxx"
        },
        "content": " */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "jascxx"
        },
        "content": "public class Hint {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "jascxx"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "jascxx"
        },
        "content": "    public final Character letter;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "jascxx"
        },
        "content": "    public final Index index;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "jascxx"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "jascxx"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "jascxx"
        },
        "content": "     * Constructs a {@code Hint}."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "jascxx"
        },
        "content": "     *"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "jascxx"
        },
        "content": "     * @param letter A character"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "jascxx"
        },
        "content": "     * @param index The index of the character in the String"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "jascxx"
        },
        "content": "     */"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "jascxx"
        },
        "content": "    public Hint(Character letter, Index index) {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "jascxx"
        },
        "content": "        requireAllNonNull(letter, index);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "jascxx"
        },
        "content": "        this.letter \u003d letter;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "jascxx"
        },
        "content": "        this.index \u003d index;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "jascxx"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "jascxx"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "jascxx"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "jascxx"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "jascxx"
        },
        "content": "        return String.format(\"[letter:%s,index:%d]\", letter.toString(), index.getZeroBased());"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "jascxx"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "jascxx"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "jascxx"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "jascxx"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "jascxx"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "jascxx"
        },
        "content": "                || (other instanceof Hint // instanceof handles nulls"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "jascxx"
        },
        "content": "                \u0026\u0026 letter.equals(((Hint) other).letter)"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "jascxx"
        },
        "content": "                \u0026\u0026 index.equals(((Hint) other).index)); // state check"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "jascxx"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "jascxx"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "jascxx"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "jascxx"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "jascxx"
        },
        "content": "        return Objects.hash(letter, index);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "jascxx"
        },
        "content": "    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "jascxx"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "jascxx": 48
    }
  },
  {
    "path": "src/main/java/seedu/address/model/card/HintSupplier.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jascxx"
        },
        "content": "package seedu.address.model.card;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "jascxx"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "jascxx"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "jascxx"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "jascxx"
        },
        "content": "import java.util.Collections;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "jascxx"
        },
        "content": "import java.util.LinkedList;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "jascxx"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "jascxx"
        },
        "content": "import java.util.function.Supplier;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "jascxx"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "jascxx"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "jascxx"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "jascxx"
        },
        "content": "/**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "jascxx"
        },
        "content": " * Supplies a hint consisting of a letter and the index the letter occurs."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "jascxx"
        },
        "content": " * Each character in the string is output once in random order."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "jascxx"
        },
        "content": " */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": "public class HintSupplier implements Supplier\u003cFormattedHint\u003e {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "jascxx"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": "    private List\u003cHint\u003e hintCharacters;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": "    private FormattedHint formattedHint;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "jascxx"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "jascxx"
        },
        "content": "     * Constructs a {@code HintSupplier}."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "jascxx"
        },
        "content": "     *"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "jascxx"
        },
        "content": "     * @param text the text that the hints are based on"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "jascxx"
        },
        "content": "     */"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "jascxx"
        },
        "content": "    public HintSupplier(String text) {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "jascxx"
        },
        "content": "        requireNonNull(text);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": "        hintCharacters \u003d new LinkedList\u003c\u003e();"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "jascxx"
        },
        "content": "        for (int i \u003d 0; i \u003c text.length(); ++i) {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": "            hintCharacters.add(new Hint(text.charAt(i), Index.fromZeroBased(i)));"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "jascxx"
        },
        "content": "        }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": "        Collections.shuffle(hintCharacters);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": "        formattedHint \u003d new FormattedHint(hintCharacters.size());"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "jascxx"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "jascxx"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "jascxx"
        },
        "content": "    public int getRemainingHints() {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": "        return hintCharacters.size();"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "jascxx"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "jascxx"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "jascxx"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": "     * Returns the next formatted hint. Returns same formatted hint of no more characters available."
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "jascxx"
        },
        "content": "     */"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "jascxx"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": "    public FormattedHint get() {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": "        if (hintCharacters.isEmpty()) {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": "            return formattedHint;"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": "            formattedHint.updateHintArray(hintCharacters.remove(0));"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": "            return formattedHint;"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": "        }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "jascxx"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "jascxx"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "jascxx": 35,
      "kohyida1997": 16
    }
  },
  {
    "path": "src/main/java/seedu/address/model/card/Meaning.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jascxx"
        },
        "content": "package seedu.address.model.card;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "jascxx"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "jascxx"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "jascxx"
        },
        "content": "import static seedu.address.commons.util.AppUtil.checkArgument;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "jascxx"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "jascxx"
        },
        "content": "/**"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "jascxx"
        },
        "content": " * Represents a Card\u0027s meaning."
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "jascxx"
        },
        "content": " * Guarantees: immutable; is valid as declared in {@link #isValidMeaning(String)}"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "jascxx"
        },
        "content": " */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "jascxx"
        },
        "content": "public class Meaning {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "jascxx"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "jascxx"
        },
        "content": "    public static final int MAX_LEN \u003d 512;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "jascxx"
        },
        "content": "    public static final String MESSAGE_CONSTRAINTS \u003d"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "jascxx"
        },
        "content": "            \"Meanings should be 1-\" + MAX_LEN + \" characters long, and not all are white spaces.\";"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "jascxx"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "jascxx"
        },
        "content": "    /*"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "jascxx"
        },
        "content": "     * The description should contain 1-MAX_LEN characters, and not all are white spaces."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "jascxx"
        },
        "content": "     */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "chrischenhui"
        },
        "content": "    private static final String VALIDATION_REGEX \u003d \"^(?\u003d.*\\\\S).{1,\" + MAX_LEN + \"}$\";"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "jascxx"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "chrischenhui"
        },
        "content": "    private final String value;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "jascxx"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "jascxx"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "jascxx"
        },
        "content": "     * Constructs a {@code Meaning}."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "jascxx"
        },
        "content": "     *"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "jascxx"
        },
        "content": "     * @param meaning A valid meaning."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "jascxx"
        },
        "content": "     */"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "jascxx"
        },
        "content": "    public Meaning(String meaning) {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "jascxx"
        },
        "content": "        requireNonNull(meaning);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "jascxx"
        },
        "content": "        checkArgument(isValidMeaning(meaning), MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "jascxx"
        },
        "content": "        this.value \u003d meaning;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "jascxx"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "jascxx"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "jascxx"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "jascxx"
        },
        "content": "     * Returns true if a given string is a valid meaning."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "jascxx"
        },
        "content": "     */"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "jascxx"
        },
        "content": "    public static boolean isValidMeaning(String test) {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "jascxx"
        },
        "content": "        return test.matches(VALIDATION_REGEX);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "jascxx"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "jascxx"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "jascxx"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "jascxx"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "jascxx"
        },
        "content": "        return value;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "jascxx"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "jascxx"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "chrischenhui"
        },
        "content": "    public String getValue() {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "chrischenhui"
        },
        "content": "        return value;"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "chrischenhui"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "chrischenhui"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "jascxx"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "jascxx"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "jascxx"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "jascxx"
        },
        "content": "                || (other instanceof Meaning // instanceof handles nulls"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "jascxx"
        },
        "content": "                \u0026\u0026 value.equals(((Meaning) other).value)); // state check"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "jascxx"
        },
        "content": "    }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "jascxx"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "jascxx"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "jascxx"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "jascxx"
        },
        "content": "        return value.hashCode();"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "jascxx"
        },
        "content": "    }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "jascxx"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "jascxx": 55,
      "chrischenhui": 6
    }
  },
  {
    "path": "src/main/java/seedu/address/model/card/Word.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jascxx"
        },
        "content": "package seedu.address.model.card;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.commons.util.AppUtil.checkArgument;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "jascxx"
        },
        "content": " * Represents a Card\u0027s word."
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "jascxx"
        },
        "content": " * Guarantees: immutable; is valid as declared in {@link #isValidWord(String)}"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "jascxx"
        },
        "content": "public class Word {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "jascxx"
        },
        "content": "    public static final int MAX_LEN \u003d 256;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_CONSTRAINTS \u003d"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "jascxx"
        },
        "content": "            \"Words should be 1-\" + MAX_LEN + \" characters long, and not all are white spaces.\";"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    /*"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "sreesubbash"
        },
        "content": "     * The word should contain 1-256 characters, and not all are white spaces."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "jascxx"
        },
        "content": "    public static final String VALIDATION_REGEX \u003d \"^(?\u003d.*\\\\S).{1,\" + MAX_LEN + \"}$\";"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "chrischenhui"
        },
        "content": "    private final String value;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "jascxx"
        },
        "content": "     * Constructs a {@code Word}."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "jascxx"
        },
        "content": "     * @param word A valid word."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "jascxx"
        },
        "content": "    public Word(String word) {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "jascxx"
        },
        "content": "        requireNonNull(word);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "jascxx"
        },
        "content": "        checkArgument(isValidWord(word), MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "jascxx"
        },
        "content": "        this.value \u003d word;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "jascxx"
        },
        "content": "     * Returns true if a given string is a valid word."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "jascxx"
        },
        "content": "    public static boolean isValidWord(String test) {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        return test.matches(VALIDATION_REGEX);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "jascxx"
        },
        "content": "        return value;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "chrischenhui"
        },
        "content": "    public String getValue() {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "chrischenhui"
        },
        "content": "        return value;"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "chrischenhui"
        },
        "content": "    }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "chrischenhui"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "jascxx"
        },
        "content": "                || (other instanceof Word // instanceof handles nulls"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "jascxx"
        },
        "content": "                \u0026\u0026 value.equals(((Word) other).value)); // state check"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "jascxx"
        },
        "content": "        return value.hashCode();"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "sreesubbash": 1,
      "jascxx": 19,
      "chrischenhui": 5,
      "-": 38
    }
  },
  {
    "path": "src/main/java/seedu/address/model/card/WordContainsKeywordsPredicate.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jascxx"
        },
        "content": "package seedu.address.model.card;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.function.Predicate;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "jascxx"
        },
        "content": "import seedu.address.commons.util.StringUtil;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "jascxx"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "jascxx"
        },
        "content": " * Tests that a {@code Card}\u0027s {@code Word} contains any of the keywords given."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "chrischenhui"
        },
        "content": " * Keyword \"HE\" will match all {\"he\", \"HeArt\", \"HeAVEN\", \"NEW HeaVEN\"}."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "jascxx"
        },
        "content": "public class WordContainsKeywordsPredicate implements Predicate\u003cCard\u003e {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "    private final List\u003cString\u003e keywords;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "jascxx"
        },
        "content": "    public WordContainsKeywordsPredicate(List\u003cString\u003e keywords) {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "        this.keywords \u003d keywords;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "jascxx"
        },
        "content": "    public boolean test(Card card) {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "        return keywords.stream()"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "chrischenhui"
        },
        "content": "                .anyMatch(keyword -\u003e StringUtil.startsWithIgnoreCase(card.getWord().getValue(), keyword));"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "jascxx"
        },
        "content": "                || (other instanceof WordContainsKeywordsPredicate // instanceof handles nulls"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "jascxx"
        },
        "content": "                \u0026\u0026 keywords.equals(((WordContainsKeywordsPredicate) other).keywords)); // state check"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "jascxx": 9,
      "chrischenhui": 2,
      "-": 21
    }
  },
  {
    "path": "src/main/java/seedu/address/model/card/exceptions/CardNotFoundException.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jascxx"
        },
        "content": "package seedu.address.model.card.exceptions;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "jascxx"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "jascxx"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "jascxx"
        },
        "content": " * Signals that the operation is unable to find the specified card."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "jascxx"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "chrischenhui"
        },
        "content": "public class CardNotFoundException extends RuntimeException {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "chrischenhui"
        },
        "content": "    public CardNotFoundException() {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "chrischenhui"
        },
        "content": "        super(\"No cards found\");"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "chrischenhui"
        },
        "content": "    }"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "chrischenhui"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "jascxx": 5,
      "chrischenhui": 5
    }
  },
  {
    "path": "src/main/java/seedu/address/model/card/exceptions/DuplicateCardException.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jascxx"
        },
        "content": "package seedu.address.model.card.exceptions;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "jascxx"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "jascxx"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "jascxx"
        },
        "content": " * Signals that the operation will result in duplicate Cards (Cards are considered duplicates if they have the same"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "chrischenhui"
        },
        "content": " * meaning)."
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "jascxx"
        },
        "content": " */"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "jascxx"
        },
        "content": "public class DuplicateCardException extends RuntimeException {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "jascxx"
        },
        "content": "    public DuplicateCardException() {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "jascxx"
        },
        "content": "        super(\"Operation would result in duplicate cards\");"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "jascxx"
        },
        "content": "    }"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "jascxx"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "jascxx": 10,
      "chrischenhui": 1
    }
  },
  {
    "path": "src/main/java/seedu/address/model/game/Game.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": "package seedu.address.model.game;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": "import static seedu.address.commons.util.CollectionUtil.requireAllNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": "import seedu.address.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "jascxx"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": "import seedu.address.model.appsettings.DifficultyEnum;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "jascxx"
        },
        "content": "import seedu.address.model.card.Card;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": "import seedu.address.model.card.FormattedHint;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": "import seedu.address.model.wordbank.ReadOnlyWordBank;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "jascxx"
        },
        "content": "/**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": " * Represents a game session using Cards from a specified WordBank."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": " * Guarantees: WordBank is not null, and that WordBank is not empty."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "jascxx"
        },
        "content": " */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": "public class Game {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": "    private DifficultyEnum currentGameDifficulty;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": "    private boolean isOver \u003d false;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": "    private final Logger logger \u003d LogsCenter.getLogger(Game.class);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": "    // Shuffled Deck of Cards using cards from ReadOnlyWordBank"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": "    private final List\u003cCard\u003e shuffledDeckOfCards;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": "    // Stateful field Index that updates as game progresses."
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "jascxx"
        },
        "content": "    private Index cardIndex;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "jascxx"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": "     * Constructor for Game instance that takes in a WordBank."
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": "     * WordBank must not be null."
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": "     * @param wordBank WordBank that current Game session will run on."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": "     */"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": "    public Game(ReadOnlyWordBank wordBank, CardShuffler cardShuffler, DifficultyEnum difficulty) {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": "        requireAllNonNull(wordBank, cardShuffler, difficulty);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "jascxx"
        },
        "content": "        this.cardIndex \u003d Index.fromZeroBased(0);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": "        this.shuffledDeckOfCards \u003d setShuffledDeckOfCards(wordBank, cardShuffler);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": "        this.currentGameDifficulty \u003d difficulty;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": "        logger.info(\"----------------[GAME STARTED][Constructor]\");"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": "        logger.info(\"Game session started with WordBank: \" + wordBank);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": "    public DifficultyEnum getCurrentGameDifficulty() {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": "        return currentGameDifficulty;"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": "    }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": "     * Returns current Card at the current index. Throws {@code UnsupportedOperationException}"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": "     * if game has already ended (no more available cards)."
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": "     */"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "jascxx"
        },
        "content": "    public Card getCurrCard() throws UnsupportedOperationException {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": "        if (isOver()) {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": "            throw new UnsupportedOperationException(\"Game is already Over\");"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": "        }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": "        Card currentCard \u003d shuffledDeckOfCards.get(cardIndex.getZeroBased());"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": "        return currentCard;"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": "    }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": "     * Returns meaning of current Card at the current index as a string."
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": "     * Throws {@code UnsupportedOperationException} if game has already ended (no more available cards)."
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": "     */"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "jascxx"
        },
        "content": "    public String getCurrQuestion() throws UnsupportedOperationException {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "jascxx"
        },
        "content": "        return getCurrCard().getMeaning().toString();"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": "    }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": "    public FormattedHint getHintFormatForCurrCard() {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": "        return getCurrCard().getHint();"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": "    }"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": "    public int getHintFormatSizeOfCurrCard() {"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": "        return getCurrCard().getHintFormatSize();"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": "    }"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "jascxx"
        },
        "content": "     * Returns true if the user\u0027s guess is correct."
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": "     * @param inputGuess User\u0027s input guess of the game\u0027s current card."
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": "     * @throws UnsupportedOperationException if game has already ended."
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": "     */"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "jascxx"
        },
        "content": "    public boolean checkGuess(Guess inputGuess) throws UnsupportedOperationException {"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "jascxx"
        },
        "content": "        return inputGuess.matches(getCurrCard().getWord());"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": "    }"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "jascxx"
        },
        "content": "    private Index getCurrIndex() {"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": "        return cardIndex;"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": "    }"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": "     * Returns the state of the Game, whether it is over. Note once a Game has been stopped, it"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": "     * cannot be resumed at any point, for now"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": "     * @return True if game is indeed terminated."
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": "     */"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": "    public boolean isOver() {"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": "        if (isOver) {"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": "            isOver \u003d getCurrIndex().getZeroBased() \u003e\u003d shuffledDeckOfCards.size() ? true : false;"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": "            return isOver;"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": "        }"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": "    }"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": ""
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": "    public void forceStop() {"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": "        isOver \u003d true;"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": "    }"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": ""
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": "    public void moveToNextCard() {"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "jascxx"
        },
        "content": "        cardIndex.increment();"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": "    }"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": ""
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": "     * Generates a randomly shuffled deck of cards based on input {@code wordBank} and returns"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": "     * it as a {@code List\u003cCard\u003e}."
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": "     */"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": "    private List\u003cCard\u003e setShuffledDeckOfCards(ReadOnlyWordBank wordBank, CardShuffler cardShuffler) {"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": "        ArrayList\u003cCard\u003e shuffledDeckOfCards \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": ""
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": "        // Copy over all cards in input WordBank"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": "        Index tempIndex \u003d Index.fromZeroBased(0);"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": "        while (tempIndex.getZeroBased() \u003c wordBank.size()) {"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": "            shuffledDeckOfCards.add(tempIndex.getZeroBased(), wordBank.getCard(tempIndex));"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": "            tempIndex.increment();"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": "        }"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": "        cardShuffler.shuffle(shuffledDeckOfCards);"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": "        return shuffledDeckOfCards;"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": "    }"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": ""
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": "     * Functional interface that represents a specific method to shuffle the Cards for this current"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": "     * game session."
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": "     */"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": "    @FunctionalInterface"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": "    public interface CardShuffler {"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": "        void shuffle(List\u003cCard\u003e cardsToShuffle);"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": "    }"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "jascxx": 15,
      "kohyida1997": 125
    }
  },
  {
    "path": "src/main/java/seedu/address/model/game/Guess.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": "package seedu.address.model.game;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": "import static seedu.address.commons.util.CollectionUtil.requireAllNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "jascxx"
        },
        "content": "import seedu.address.model.card.Word;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "jascxx"
        },
        "content": "/**"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": " * Represents a user\u0027s guess during a Game session."
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "jascxx"
        },
        "content": " */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": "public class Guess {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": "    // User\u0027s input guessString cannot be changed once assigned."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": "    private final String guessString;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": "    public Guess(String guessString) {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": "        requireAllNonNull(guessString);"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": "        this.guessString \u003d guessString;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": "    }"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "jascxx"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "jascxx"
        },
        "content": "     * Returns true if the {@code word} matches the {@code guessString}."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "jascxx"
        },
        "content": "     */"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "jascxx"
        },
        "content": "    public boolean matches(Word word) {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "chrischenhui"
        },
        "content": "        return guessString.toLowerCase().equals(word.getValue().toLowerCase());"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": "    }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "jascxx"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "jascxx"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "jascxx"
        },
        "content": "    public boolean equals(Object obj) {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "jascxx"
        },
        "content": "        if (obj \u003d\u003d this) {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "jascxx"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "jascxx"
        },
        "content": "        }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "jascxx"
        },
        "content": "        if (obj instanceof Guess) {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "jascxx"
        },
        "content": "            return guessString.equals(((Guess) obj).guessString);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "jascxx"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "jascxx"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "jascxx"
        },
        "content": "        }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "jascxx"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "jascxx"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "jascxx"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "jascxx"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "jascxx"
        },
        "content": "        return guessString.hashCode();"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "jascxx"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "jascxx"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "jascxx"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "jascxx"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "jascxx"
        },
        "content": "        return guessString;"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "jascxx"
        },
        "content": "    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "jascxx": 29,
      "chrischenhui": 1,
      "kohyida1997": 18
    }
  },
  {
    "path": "src/main/java/seedu/address/model/globalstatistics/GlobalStatistics.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jascxx"
        },
        "content": "package seedu.address.model.globalstatistics;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "jascxx"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "jascxx"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "jascxx"
        },
        "content": " * Represents user\u0027s global statistics."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "jascxx"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "jascxx"
        },
        "content": "public class GlobalStatistics {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "jascxx"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "jascxx"
        },
        "content": "    private int numPlayed;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "jascxx"
        },
        "content": "    private WeeklyPlayed weeklyPlayed;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "jascxx"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "jascxx"
        },
        "content": "    public GlobalStatistics(int numPlayed, WeeklyPlayed weeklyPlayed) {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "jascxx"
        },
        "content": "        this.numPlayed \u003d numPlayed;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "jascxx"
        },
        "content": "        this.weeklyPlayed \u003d weeklyPlayed;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "jascxx"
        },
        "content": "    }"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "jascxx"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "jascxx"
        },
        "content": "    public GlobalStatistics() {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "jascxx"
        },
        "content": "        this.numPlayed \u003d 0;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "jascxx"
        },
        "content": "        this.weeklyPlayed \u003d new WeeklyPlayed();"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "jascxx"
        },
        "content": "    }"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "jascxx"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "jascxx"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "jascxx"
        },
        "content": "     * Increment the number of play for today."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "jascxx"
        },
        "content": "     */"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "jascxx"
        },
        "content": "    public void addPlay() {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "jascxx"
        },
        "content": "        ++numPlayed;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "jascxx"
        },
        "content": "        weeklyPlayed.incrementPlay();"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "jascxx"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "jascxx"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "jascxx"
        },
        "content": "    public int getNumPlayed() {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "jascxx"
        },
        "content": "        return numPlayed;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "jascxx"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "jascxx"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "jascxx"
        },
        "content": "    public WeeklyPlayed getWeeklyPlayed() {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "jascxx"
        },
        "content": "        return weeklyPlayed;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "jascxx"
        },
        "content": "    }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "jascxx"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "jascxx"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "jascxx"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "jascxx"
        },
        "content": "        return numPlayed + \" times played\";"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "jascxx"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "jascxx"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "jascxx": 41
    }
  },
  {
    "path": "src/main/java/seedu/address/model/globalstatistics/WeeklyPlayed.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jascxx"
        },
        "content": "package seedu.address.model.globalstatistics;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "jascxx"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "jascxx"
        },
        "content": "import java.time.DayOfWeek;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "jascxx"
        },
        "content": "import java.time.LocalDate;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "jascxx"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "jascxx"
        },
        "content": "import java.util.HashMap;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "jascxx"
        },
        "content": "import java.util.Map;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "jascxx"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "jascxx"
        },
        "content": "/**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "jascxx"
        },
        "content": " * Represents how many times a user has played in the current week."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "jascxx"
        },
        "content": " */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "jascxx"
        },
        "content": "public class WeeklyPlayed {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "jascxx"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "jascxx"
        },
        "content": "    private Map\u003cDayOfWeek, Integer\u003e numPlayed;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "jascxx"
        },
        "content": "    private LocalDate startOfWeek;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "jascxx"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "jascxx"
        },
        "content": "    public WeeklyPlayed() {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "jascxx"
        },
        "content": "        initNumPlayed();"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "jascxx"
        },
        "content": "        startOfWeek \u003d getCurrentStartOfWeek();"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "jascxx"
        },
        "content": "    }"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "jascxx"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "jascxx"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "jascxx"
        },
        "content": "     * Constructor."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "jascxx"
        },
        "content": "     * @param numPlayed A map from the day of week to how many times the user has played."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "jascxx"
        },
        "content": "     * @param startOfWeek The start of week {@code numPlayed} was recorded."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "jascxx"
        },
        "content": "     */"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "jascxx"
        },
        "content": "    public WeeklyPlayed(Map\u003cDayOfWeek, Integer\u003e numPlayed, LocalDate startOfWeek) {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "jascxx"
        },
        "content": "        this();"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "jascxx"
        },
        "content": "        if (startOfWeek.equals(this.startOfWeek)) {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "jascxx"
        },
        "content": "            // week has not changed since last time app opened"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "jascxx"
        },
        "content": "            this.numPlayed.putAll(numPlayed);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "jascxx"
        },
        "content": "        }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "jascxx"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "jascxx"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "jascxx"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "jascxx"
        },
        "content": "     * Increment the number of play for today."
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "jascxx"
        },
        "content": "     */"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "jascxx"
        },
        "content": "    public void incrementPlay() {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "jascxx"
        },
        "content": "        LocalDate curStartOfWeek \u003d getCurrentStartOfWeek();"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "jascxx"
        },
        "content": "        if (!curStartOfWeek.equals(startOfWeek)) {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "jascxx"
        },
        "content": "            // move to new week"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "jascxx"
        },
        "content": "            initNumPlayed();"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "jascxx"
        },
        "content": "            startOfWeek \u003d curStartOfWeek;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "jascxx"
        },
        "content": "        }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "jascxx"
        },
        "content": "        DayOfWeek today \u003d LocalDate.now().getDayOfWeek();"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "jascxx"
        },
        "content": "        numPlayed.replace(today, numPlayed.get(today) + 1);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "jascxx"
        },
        "content": "    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "jascxx"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "jascxx"
        },
        "content": "    public Map\u003cDayOfWeek, Integer\u003e getNumPlayed() {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "jascxx"
        },
        "content": "        return numPlayed;"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "jascxx"
        },
        "content": "    }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "jascxx"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "jascxx"
        },
        "content": "    public LocalDate getStartOfWeek() {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "jascxx"
        },
        "content": "        return startOfWeek;"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "jascxx"
        },
        "content": "    }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "jascxx"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "jascxx"
        },
        "content": "    private void initNumPlayed() {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "jascxx"
        },
        "content": "        numPlayed \u003d new HashMap\u003c\u003e();"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "jascxx"
        },
        "content": "        Arrays.stream(DayOfWeek.values()).forEach(x -\u003e numPlayed.put(x, 0)); // init map"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "jascxx"
        },
        "content": "    }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "jascxx"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "jascxx"
        },
        "content": "    private LocalDate getCurrentStartOfWeek() {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "jascxx"
        },
        "content": "        return LocalDate.now().with(DayOfWeek.SUNDAY);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "jascxx"
        },
        "content": "    }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "jascxx"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "jascxx": 65
    }
  },
  {
    "path": "src/main/java/seedu/address/model/tag/Tag.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.model.tag;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.commons.util.AppUtil.checkArgument;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "jascxx"
        },
        "content": " * Represents a Tag of a Card."
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": " * Guarantees: immutable; name is valid as declared in {@link #isValidTagName(String)}"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "public class Tag {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_CONSTRAINTS \u003d \"Tags names should be alphanumeric\";"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String VALIDATION_REGEX \u003d \"\\\\p{Alnum}+\";"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    public final String tagName;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "     * Constructs a {@code Tag}."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param tagName A valid tag name."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    public Tag(String tagName) {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(tagName);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "        checkArgument(isValidTagName(tagName), MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "        this.tagName \u003d tagName;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns true if a given string is a valid tag name."
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    public static boolean isValidTagName(String test) {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        return test.matches(VALIDATION_REGEX);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "                || (other instanceof Tag // instanceof handles nulls"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "                \u0026\u0026 tagName.equals(((Tag) other).tagName)); // state check"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        return tagName.hashCode();"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "     * Format state as text for viewing."
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        return \u0027[\u0027 + tagName + \u0027]\u0027;"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "jascxx": 1,
      "-": 53
    }
  },
  {
    "path": "src/main/java/seedu/address/model/util/SampleDataUtil.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.model.util;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.stream.Collectors;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "jascxx"
        },
        "content": "import seedu.address.model.card.Card;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "jascxx"
        },
        "content": "import seedu.address.model.card.Meaning;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "jascxx"
        },
        "content": "import seedu.address.model.card.Word;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.tag.Tag;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "jascxx"
        },
        "content": "import seedu.address.model.wordbank.WordBank;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "jascxx"
        },
        "content": " * Contains utility methods for populating {@code WordBank} with sample data."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "public class SampleDataUtil {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "chrischenhui"
        },
        "content": "    private static final String name \u003d \"sample\";"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "chrischenhui"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "jascxx"
        },
        "content": "    public static Card[] getSampleCards() {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "chrischenhui"
        },
        "content": "        Card card1 \u003d new Card(\"abrajfbeoudnjcp\", new Word(\"Abra\"),"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "chrischenhui"
        },
        "content": "                new Meaning(\"It sleeps eighteen hours a day, but employs telekinesis even while sleeping.\"),"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "chrischenhui"
        },
        "content": "                getTagSet(\"psychic\"));"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "chrischenhui"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "chrischenhui"
        },
        "content": "        Card card2 \u003d new Card(\"butterfreejdfbo\", new Word(\"Butterfree\"),"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "chrischenhui"
        },
        "content": "                new Meaning(\"Its wings are covered with poisonous dust. If you see \""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "jascxx"
        },
        "content": "                        + \"one flapping its wings, be careful not to inhale any of the dust.\"),"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "chrischenhui"
        },
        "content": "                getTagSet(\"bug\", \"flying\"));"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "chrischenhui"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "chrischenhui"
        },
        "content": "        Card card3 \u003d new Card(\"charizardaiudan\", new Word(\"Charizard\"),"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "chrischenhui"
        },
        "content": "                new Meaning(\"It flies around the sky in search of powerful opponents. It breathes fire of \""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "chrischenhui"
        },
        "content": "                        + \"such great heat that it melts anything. However, it never turns \""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "jascxx"
        },
        "content": "                        + \"its fiery breath on any opponent weaker than itself.\"),"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "chrischenhui"
        },
        "content": "                getTagSet(\"fire\", \"flying\"));"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "chrischenhui"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "chrischenhui"
        },
        "content": "        Card card4 \u003d new Card(\"dittonfjsdodc\", new Word(\"Ditto\"),"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "chrischenhui"
        },
        "content": "                new Meaning(\"Its transformation ability is perfect. However, if it \""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "jascxx"
        },
        "content": "                        + \"is made to laugh, it can\u0027t maintain its disguise.\"),"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "chrischenhui"
        },
        "content": "                getTagSet(\"normal\"));"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "chrischenhui"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "chrischenhui"
        },
        "content": "        Card card5 \u003d new Card(\"eeveeouhvdsn\", new Word(\"Eevee\"),"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "chrischenhui"
        },
        "content": "                new Meaning(\"Possessing an unbalanced and unstable genetic makeup, it \""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "jascxx"
        },
        "content": "                        + \"conceals many possible evolutions.\"),"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "chrischenhui"
        },
        "content": "                getTagSet(\"normal\"));"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "chrischenhui"
        },
        "content": "        return new Card[]{card1, card2, card3, card4, card5};"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "jascxx"
        },
        "content": "    public static WordBank getSampleWordBank() {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "chrischenhui"
        },
        "content": "        WordBank sampleWb \u003d new WordBank(name);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "jascxx"
        },
        "content": "        for (Card sampleCard : getSampleCards()) {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "jascxx"
        },
        "content": "            sampleWb.addCard(sampleCard);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "jascxx"
        },
        "content": "        return sampleWb;"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns a tag set containing the list of strings given."
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    public static Set\u003cTag\u003e getTagSet(String... strings) {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "        return Arrays.stream(strings)"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "                .map(Tag::new)"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "                .collect(Collectors.toSet());"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "chrischenhui"
        },
        "content": "    public static String getName() {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "chrischenhui"
        },
        "content": "        return name;"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "chrischenhui"
        },
        "content": "    }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "jascxx": 14,
      "chrischenhui": 27,
      "-": 26
    }
  },
  {
    "path": "src/main/java/seedu/address/model/wordbank/ReadOnlyWordBank.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jascxx"
        },
        "content": "package seedu.address.model.wordbank;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "jascxx"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "jascxx"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "jascxx"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "jascxx"
        },
        "content": "import seedu.address.model.card.Card;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "jascxx"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "jascxx"
        },
        "content": "/**"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "jascxx"
        },
        "content": " * Unmodifiable view of a word bank."
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "jascxx"
        },
        "content": " */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "jascxx"
        },
        "content": "public interface ReadOnlyWordBank {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "jascxx"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "jascxx"
        },
        "content": "     * Returns an unmodifiable view of the word bank."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "jascxx"
        },
        "content": "     * This list will not contain any duplicate cards."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "jascxx"
        },
        "content": "     */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "jascxx"
        },
        "content": "    ObservableList\u003cCard\u003e getCardList();"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "jascxx"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "jascxx"
        },
        "content": "    Card getCard(Index index);"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "jascxx"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "jascxx"
        },
        "content": "    int size();"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "jascxx"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "chrischenhui"
        },
        "content": "    String getName();"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "jascxx"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "jascxx": 21,
      "chrischenhui": 1
    }
  },
  {
    "path": "src/main/java/seedu/address/model/wordbank/UniqueCardList.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jascxx"
        },
        "content": "package seedu.address.model.wordbank;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "jascxx"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "jascxx"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "jascxx"
        },
        "content": "import static seedu.address.commons.util.CollectionUtil.requireAllNonNull;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "jascxx"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "jascxx"
        },
        "content": "import java.util.Iterator;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "jascxx"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "jascxx"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "jascxx"
        },
        "content": "import javafx.collections.FXCollections;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "jascxx"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "jascxx"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "jascxx"
        },
        "content": "import seedu.address.model.card.Card;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "jascxx"
        },
        "content": "import seedu.address.model.card.exceptions.CardNotFoundException;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "jascxx"
        },
        "content": "import seedu.address.model.card.exceptions.DuplicateCardException;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "jascxx"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "jascxx"
        },
        "content": "/**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "jascxx"
        },
        "content": " * A list of cards that enforces uniqueness between its elements and does not allow nulls."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "jascxx"
        },
        "content": " * A card is considered unique by comparing using {@code Card#isSameMeaning(Card)}. As such, adding and updating of"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "jascxx"
        },
        "content": " * cards uses Card#isSameMeaning(Card) for equality so as to ensure that the person being added or updated is"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "jascxx"
        },
        "content": " * unique in terms of names in UniqueCardList. However, the removal of a card uses Card#equals(Object) so"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "chrischenhui"
        },
        "content": " * as to ensure that the card with exactly the same fields will be removed."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "chrischenhui"
        },
        "content": " * \u003cp\u003e"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "jascxx"
        },
        "content": " * Supports a minimal set of list operations."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "jascxx"
        },
        "content": " *"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "jascxx"
        },
        "content": " * @see seedu.address.model.card.Card#isSameMeaning(seedu.address.model.card.Card)"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "jascxx"
        },
        "content": " */"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "jascxx"
        },
        "content": "public class UniqueCardList implements Iterable\u003cCard\u003e {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "jascxx"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "jascxx"
        },
        "content": "    private final ObservableList\u003cCard\u003e internalList \u003d FXCollections.observableArrayList();"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "jascxx"
        },
        "content": "    private final ObservableList\u003cCard\u003e internalUnmodifiableList \u003d"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "jascxx"
        },
        "content": "            FXCollections.unmodifiableObservableList(internalList);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "jascxx"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "jascxx"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "jascxx"
        },
        "content": "     * Returns true if the list contains a card with the same meaning."
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "jascxx"
        },
        "content": "     */"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "jascxx"
        },
        "content": "    public boolean contains(Card toCheck) {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "jascxx"
        },
        "content": "        requireNonNull(toCheck);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "jascxx"
        },
        "content": "        return internalList.stream().anyMatch(toCheck::isSameMeaning);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "jascxx"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "jascxx"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "jascxx"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "jascxx"
        },
        "content": "     * Adds a card to the list."
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "jascxx"
        },
        "content": "     * The card must not exist in the list."
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "chrischenhui"
        },
        "content": "     *"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "jascxx"
        },
        "content": "     * @see UniqueCardList#contains(Card)"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "jascxx"
        },
        "content": "     */"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "jascxx"
        },
        "content": "    public void add(Card toAdd) {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "jascxx"
        },
        "content": "        requireNonNull(toAdd);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "jascxx"
        },
        "content": "        if (contains(toAdd)) {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "jascxx"
        },
        "content": "            throw new DuplicateCardException();"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "jascxx"
        },
        "content": "        }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "jascxx"
        },
        "content": "        internalList.add(toAdd);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "jascxx"
        },
        "content": "    }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "jascxx"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "jascxx"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "jascxx"
        },
        "content": "     * Replaces the card {@code target} in the list with {@code editedCard}."
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "jascxx"
        },
        "content": "     * {@code target} must exist in the list."
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "jascxx"
        },
        "content": "     * The name of {@code editedPerson} must not be the same as another existing card in the list."
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "jascxx"
        },
        "content": "     */"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "jascxx"
        },
        "content": "    public void setCard(Card target, Card editedPerson) {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "jascxx"
        },
        "content": "        requireAllNonNull(target, editedPerson);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "jascxx"
        },
        "content": "        int index \u003d internalList.indexOf(target);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "jascxx"
        },
        "content": "        if (index \u003d\u003d -1) {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "jascxx"
        },
        "content": "            throw new CardNotFoundException();"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "jascxx"
        },
        "content": "        }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "jascxx"
        },
        "content": "        if (!target.isSameMeaning(editedPerson) \u0026\u0026 contains(editedPerson)) {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "jascxx"
        },
        "content": "            throw new DuplicateCardException();"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "jascxx"
        },
        "content": "        }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "jascxx"
        },
        "content": "        internalList.set(index, editedPerson);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "jascxx"
        },
        "content": "    }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "jascxx"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "jascxx"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "jascxx"
        },
        "content": "     * Removes the equivalent card from the list."
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "jascxx"
        },
        "content": "     * The card must exist in the list."
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "jascxx"
        },
        "content": "     */"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "jascxx"
        },
        "content": "    public void remove(Card toRemove) {"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "jascxx"
        },
        "content": "        requireNonNull(toRemove);"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "jascxx"
        },
        "content": "        if (!internalList.remove(toRemove)) {"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "jascxx"
        },
        "content": "            throw new CardNotFoundException();"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "jascxx"
        },
        "content": "        }"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "jascxx"
        },
        "content": "    }"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "jascxx"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "jascxx"
        },
        "content": "    public void setCards(UniqueCardList replacement) {"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "jascxx"
        },
        "content": "        requireNonNull(replacement);"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "jascxx"
        },
        "content": "        internalList.setAll(replacement.internalList);"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "jascxx"
        },
        "content": "    }"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "jascxx"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "jascxx"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "jascxx"
        },
        "content": "     * Replaces the contents of this list with {@code cards}."
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "jascxx"
        },
        "content": "     * {@code cards} must not contain duplicate persons."
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "jascxx"
        },
        "content": "     */"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "jascxx"
        },
        "content": "    public void setCards(List\u003cCard\u003e cards) {"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "jascxx"
        },
        "content": "        requireAllNonNull(cards);"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "jascxx"
        },
        "content": "        if (!cardsAreUnique(cards)) {"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "jascxx"
        },
        "content": "            throw new DuplicateCardException();"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "jascxx"
        },
        "content": "        }"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "jascxx"
        },
        "content": ""
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "jascxx"
        },
        "content": "        internalList.setAll(cards);"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "jascxx"
        },
        "content": "    }"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "jascxx"
        },
        "content": ""
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "jascxx"
        },
        "content": "    public Card get(Index index) {"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "jascxx"
        },
        "content": "        return internalList.get(index.getZeroBased());"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "jascxx"
        },
        "content": "    }"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "jascxx"
        },
        "content": ""
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "jascxx"
        },
        "content": "    public int size() {"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "jascxx"
        },
        "content": "        return internalList.size();"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "jascxx"
        },
        "content": "    }"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "jascxx"
        },
        "content": ""
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "jascxx"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "jascxx"
        },
        "content": "     * Returns the backing list as an unmodifiable {@code ObservableList}."
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "jascxx"
        },
        "content": "     */"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "jascxx"
        },
        "content": "    public ObservableList\u003cCard\u003e asUnmodifiableObservableList() {"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "jascxx"
        },
        "content": "        return internalUnmodifiableList;"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "jascxx"
        },
        "content": "    }"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "jascxx"
        },
        "content": ""
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "jascxx"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "jascxx"
        },
        "content": "    public Iterator\u003cCard\u003e iterator() {"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "jascxx"
        },
        "content": "        return internalList.iterator();"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "jascxx"
        },
        "content": "    }"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "jascxx"
        },
        "content": ""
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "jascxx"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "jascxx"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "jascxx"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "jascxx"
        },
        "content": "                || (other instanceof UniqueCardList // instanceof handles nulls"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "jascxx"
        },
        "content": "                \u0026\u0026 internalList.equals(((UniqueCardList) other).internalList));"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "jascxx"
        },
        "content": "    }"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "jascxx"
        },
        "content": ""
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "jascxx"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "jascxx"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "jascxx"
        },
        "content": "        return internalList.hashCode();"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "jascxx"
        },
        "content": "    }"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "jascxx"
        },
        "content": ""
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "jascxx"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "jascxx"
        },
        "content": "     * Returns true if {@code cards} contains only unique cards."
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "jascxx"
        },
        "content": "     */"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "jascxx"
        },
        "content": "    private boolean cardsAreUnique(List\u003cCard\u003e cards) {"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "jascxx"
        },
        "content": "        for (int i \u003d 0; i \u003c cards.size() - 1; i++) {"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "jascxx"
        },
        "content": "            for (int j \u003d i + 1; j \u003c cards.size(); j++) {"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "jascxx"
        },
        "content": "                if (cards.get(i).isSameMeaning(cards.get(j))) {"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "jascxx"
        },
        "content": "                    return false;"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "jascxx"
        },
        "content": "                }"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "jascxx"
        },
        "content": "            }"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "jascxx"
        },
        "content": "        }"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "jascxx"
        },
        "content": "        return true;"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "jascxx"
        },
        "content": "    }"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "jascxx"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "jascxx": 143,
      "chrischenhui": 3
    }
  },
  {
    "path": "src/main/java/seedu/address/model/wordbank/WordBank.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jascxx"
        },
        "content": "package seedu.address.model.wordbank;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "jascxx"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "jascxx"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "jascxx"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "jascxx"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "jascxx"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "jascxx"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "jascxx"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "jascxx"
        },
        "content": "import seedu.address.model.card.Card;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "jascxx"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "jascxx"
        },
        "content": "/**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "chrischenhui"
        },
        "content": " * Word bank stores multiple word - meaning pair"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "chrischenhui"
        },
        "content": " * Duplicates of cards are not allowed (by Card#isSameName(Card) comparison)"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "jascxx"
        },
        "content": " */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "jascxx"
        },
        "content": "public class WordBank implements ReadOnlyWordBank {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "jascxx"
        },
        "content": "    private final UniqueCardList cards;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "chrischenhui"
        },
        "content": "    private String name;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "jascxx"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "chrischenhui"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "chrischenhui"
        },
        "content": "     * Creates a word bank with the unique name."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "jascxx"
        },
        "content": "     *"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "chrischenhui"
        },
        "content": "     * @param name of the word bank."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "jascxx"
        },
        "content": "     */"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "jascxx"
        },
        "content": "    public WordBank(String name) {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "chrischenhui"
        },
        "content": "        this.name \u003d name;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "chrischenhui"
        },
        "content": "        cards \u003d new UniqueCardList();"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "jascxx"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "jascxx"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "jascxx"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "chrischenhui"
        },
        "content": "     * Resets the existing data of this {@code WordBank} with {@code newData}."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "jascxx"
        },
        "content": "     */"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "chrischenhui"
        },
        "content": "    public void resetData(ReadOnlyWordBank newData) {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "chrischenhui"
        },
        "content": "        requireNonNull(newData);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "chrischenhui"
        },
        "content": "        setCards(newData.getCardList());"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "jascxx"
        },
        "content": "    }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "jascxx"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "jascxx"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "jascxx"
        },
        "content": "     * Replaces the contents of the card list with {@code cards}."
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "jascxx"
        },
        "content": "     * {@code cards} must not contain any cards with the same meaning."
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "jascxx"
        },
        "content": "     */"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "jascxx"
        },
        "content": "    public void setCards(List\u003cCard\u003e cards) {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "chrischenhui"
        },
        "content": "        requireNonNull(cards);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "jascxx"
        },
        "content": "        this.cards.setCards(cards);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "jascxx"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "jascxx"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "jascxx"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "jascxx"
        },
        "content": "     * Returns true if a card with the same meaning as {@code card} exists in the word bank."
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "jascxx"
        },
        "content": "     */"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "jascxx"
        },
        "content": "    public boolean hasCard(Card card) {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "jascxx"
        },
        "content": "        requireNonNull(card);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "jascxx"
        },
        "content": "        return cards.contains(card);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "jascxx"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "jascxx"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "jascxx"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "jascxx"
        },
        "content": "     * Adds a card to the word bank."
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "jascxx"
        },
        "content": "     * A card with the same meaning must not already exist in the word bank."
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "chrischenhui"
        },
        "content": "     * The checking is handled by UniqueCardList class."
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "jascxx"
        },
        "content": "     */"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "jascxx"
        },
        "content": "    public void addCard(Card p) {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "jascxx"
        },
        "content": "        cards.add(p);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "jascxx"
        },
        "content": "    }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "jascxx"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "jascxx"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "jascxx"
        },
        "content": "     * Replaces the given card {@code target} in the list with {@code editedCard}."
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "jascxx"
        },
        "content": "     * {@code target} must exist in the word bank."
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "jascxx"
        },
        "content": "     * The card meaning of {@code editedCard} must not be the same as another existing card in the word bank."
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "jascxx"
        },
        "content": "     */"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "jascxx"
        },
        "content": "    public void setCard(Card target, Card editedCard) {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "jascxx"
        },
        "content": "        requireNonNull(editedCard);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "jascxx"
        },
        "content": "        cards.setCard(target, editedCard);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "jascxx"
        },
        "content": "    }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "jascxx"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "jascxx"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "jascxx"
        },
        "content": "     * Removes {@code key} from this {@code WordBank}."
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "jascxx"
        },
        "content": "     * {@code key} must exist in the word bank."
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "jascxx"
        },
        "content": "     */"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "chrischenhui"
        },
        "content": "    public void removeCard(Card card) {"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "chrischenhui"
        },
        "content": "        cards.remove(card);"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "jascxx"
        },
        "content": "    }"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "jascxx"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "jascxx"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "jascxx"
        },
        "content": "    public int size() {"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "jascxx"
        },
        "content": "        return cards.size();"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "jascxx"
        },
        "content": "    }"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "jascxx"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "jascxx"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "jascxx"
        },
        "content": "    public ObservableList\u003cCard\u003e getCardList() {"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "jascxx"
        },
        "content": "        return cards.asUnmodifiableObservableList();"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "jascxx"
        },
        "content": "    }"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "jascxx"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": "     * Returns a clone of the {@code card} at the specified {@index}."
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": "     */"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "jascxx"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "jascxx"
        },
        "content": "    public Card getCard(Index index) {"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": "        return cards.get(index).clone();"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "jascxx"
        },
        "content": "    }"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "jascxx"
        },
        "content": ""
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "jascxx"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "jascxx"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "jascxx"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "jascxx"
        },
        "content": "                || (other instanceof WordBank // instanceof handles nulls"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "jascxx"
        },
        "content": "                \u0026\u0026 cards.equals(((WordBank) other).cards))"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "jascxx"
        },
        "content": "                \u0026\u0026 name.equals(((WordBank) other).name);"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "jascxx"
        },
        "content": "    }"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "jascxx"
        },
        "content": ""
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "jascxx"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "jascxx"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "jascxx"
        },
        "content": "        return name.hashCode();"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "jascxx"
        },
        "content": "    }"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "chrischenhui"
        },
        "content": ""
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "chrischenhui"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "chrischenhui"
        },
        "content": "     * Returns true if both cards have the same meaning."
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "chrischenhui"
        },
        "content": "     */"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "chrischenhui"
        },
        "content": "    public boolean isSameName(WordBank other) {"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "chrischenhui"
        },
        "content": "        if (other \u003d\u003d null) {"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "chrischenhui"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "chrischenhui"
        },
        "content": "        }"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "chrischenhui"
        },
        "content": "        return getName().equals(other.getName());"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "chrischenhui"
        },
        "content": "    }"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "chrischenhui"
        },
        "content": ""
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "chrischenhui"
        },
        "content": "    public String getName() {"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "chrischenhui"
        },
        "content": "        return name;"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "chrischenhui"
        },
        "content": "    }"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "chrischenhui"
        },
        "content": ""
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "chrischenhui"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "chrischenhui"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "chrischenhui"
        },
        "content": "        return getName();"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "chrischenhui"
        },
        "content": "    }"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "jascxx"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "jascxx": 91,
      "chrischenhui": 35,
      "kohyida1997": 4
    }
  },
  {
    "path": "src/main/java/seedu/address/model/wordbank/exceptions/DuplicateWordBankException.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "chrischenhui"
        },
        "content": "package seedu.address.model.wordbank.exceptions;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "chrischenhui"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "chrischenhui"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "chrischenhui"
        },
        "content": " * Signals that the operation will result in duplicate WordBank"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "chrischenhui"
        },
        "content": " * (WordBank are considered duplicates if they have the same names)."
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "chrischenhui"
        },
        "content": " */"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "chrischenhui"
        },
        "content": "public class DuplicateWordBankException extends RuntimeException {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "chrischenhui"
        },
        "content": "    public DuplicateWordBankException() {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "chrischenhui"
        },
        "content": "        super(\"Operation would result in duplicate WordBank\");"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "chrischenhui"
        },
        "content": "    }"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "chrischenhui"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "chrischenhui": 11
    }
  },
  {
    "path": "src/main/java/seedu/address/model/wordbank/exceptions/WordBankNotFoundException.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "chrischenhui"
        },
        "content": "package seedu.address.model.wordbank.exceptions;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "chrischenhui"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "chrischenhui"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "chrischenhui"
        },
        "content": " * Signals that the operation is unable to find the specified WordBank."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "chrischenhui"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "chrischenhui"
        },
        "content": "public class WordBankNotFoundException extends RuntimeException {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "chrischenhui"
        },
        "content": "    public WordBankNotFoundException() {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "chrischenhui"
        },
        "content": "        super(\"No word banks found\");"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "chrischenhui"
        },
        "content": "    }"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "chrischenhui"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "chrischenhui": 10
    }
  },
  {
    "path": "src/main/java/seedu/address/model/wordbanklist/ReadOnlyWordBankList.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "chrischenhui"
        },
        "content": "package seedu.address.model.wordbanklist;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "chrischenhui"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "chrischenhui"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "chrischenhui"
        },
        "content": "import seedu.address.model.wordbank.WordBank;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "chrischenhui"
        },
        "content": "import seedu.address.model.wordbank.exceptions.WordBankNotFoundException;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "chrischenhui"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "chrischenhui"
        },
        "content": "/**"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "chrischenhui"
        },
        "content": " * Unmodifiable view of a word bank list."
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "chrischenhui"
        },
        "content": " */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "chrischenhui"
        },
        "content": "public interface ReadOnlyWordBankList {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "chrischenhui"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "chrischenhui"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "chrischenhui"
        },
        "content": "     * Returns an unmodifiable view of the word bank."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "chrischenhui"
        },
        "content": "     * This list will not contain any duplicate word banks."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "chrischenhui"
        },
        "content": "     * Every word bank can be specified by its unique name."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "chrischenhui"
        },
        "content": "     */"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "chrischenhui"
        },
        "content": "    ObservableList\u003cWordBank\u003e getFilteredWordBankList();"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "chrischenhui"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "chrischenhui"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "chrischenhui"
        },
        "content": "     * Retrieves a word bank from its unique name."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "chrischenhui"
        },
        "content": "     *"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "chrischenhui"
        },
        "content": "     * @param name word bank name."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "chrischenhui"
        },
        "content": "     * @return word bank."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "chrischenhui"
        },
        "content": "     * @throws WordBankNotFoundException"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "chrischenhui"
        },
        "content": "     */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "chrischenhui"
        },
        "content": "    WordBank getWordBankFromName(String name) throws WordBankNotFoundException;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "chrischenhui"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "chrischenhui"
        },
        "content": "    int size();"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "chrischenhui"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "chrischenhui": 29
    }
  },
  {
    "path": "src/main/java/seedu/address/model/wordbanklist/UniqueWordBankList.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "chrischenhui"
        },
        "content": "package seedu.address.model.wordbanklist;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "chrischenhui"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "chrischenhui"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "chrischenhui"
        },
        "content": "import static seedu.address.commons.util.CollectionUtil.requireAllNonNull;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "chrischenhui"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "chrischenhui"
        },
        "content": "import java.util.Iterator;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "chrischenhui"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "chrischenhui"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "chrischenhui"
        },
        "content": "import javafx.collections.FXCollections;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "chrischenhui"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "chrischenhui"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "chrischenhui"
        },
        "content": "import seedu.address.model.wordbank.WordBank;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "chrischenhui"
        },
        "content": "import seedu.address.model.wordbank.exceptions.DuplicateWordBankException;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "chrischenhui"
        },
        "content": "import seedu.address.model.wordbank.exceptions.WordBankNotFoundException;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "chrischenhui"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "chrischenhui"
        },
        "content": "/**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "chrischenhui"
        },
        "content": " * A list of word banks that enforces uniqueness between its elements and does not allow nulls."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "chrischenhui"
        },
        "content": " * A word bank is considered unique by comparing using {@code WordBank#isSameName(WordBank)}. As such, adding and"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "chrischenhui"
        },
        "content": " * updating of word banks uses WordBank#isSameName(WordBank) for equality so as to ensure that the word bank being"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "chrischenhui"
        },
        "content": " * added or updated is unique in terms of names in UniqueWordBankList. However, the removal of a word bank uses"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "chrischenhui"
        },
        "content": " * WordBank#equals(WordBank) so as to ensure that the person with exactly the same fields will be removed."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "chrischenhui"
        },
        "content": " * \u003cp\u003e"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "chrischenhui"
        },
        "content": " * Supports a minimal set of list operations."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "chrischenhui"
        },
        "content": " *"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "chrischenhui"
        },
        "content": " * @see seedu.address.model.wordbank.WordBank#isSameName(seedu.address.model.wordbank.WordBank)"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "chrischenhui"
        },
        "content": " */"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "chrischenhui"
        },
        "content": "public class UniqueWordBankList implements Iterable\u003cWordBank\u003e {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "chrischenhui"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "chrischenhui"
        },
        "content": "    private final ObservableList\u003cWordBank\u003e internalList \u003d FXCollections.observableArrayList();"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "chrischenhui"
        },
        "content": "    private final ObservableList\u003cWordBank\u003e internalUnmodifiableList \u003d"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "chrischenhui"
        },
        "content": "            FXCollections.unmodifiableObservableList(internalList);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "chrischenhui"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "chrischenhui"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "chrischenhui"
        },
        "content": "     * Returns true if the list contains a WordBank with the same name."
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "chrischenhui"
        },
        "content": "     */"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "chrischenhui"
        },
        "content": "    public boolean contains(WordBank toCheck) {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "chrischenhui"
        },
        "content": "        requireNonNull(toCheck);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "chrischenhui"
        },
        "content": "        return internalList.stream().anyMatch(toCheck::isSameName);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "chrischenhui"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "chrischenhui"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "chrischenhui"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "chrischenhui"
        },
        "content": "     * Returns true if the list contains a WordBank with the same name."
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "chrischenhui"
        },
        "content": "     * Similar to contains(WordBank toCheck), just different parameters."
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "chrischenhui"
        },
        "content": "     */"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "chrischenhui"
        },
        "content": "    public boolean contains(String toCheck) {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "chrischenhui"
        },
        "content": "        requireNonNull(toCheck);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "chrischenhui"
        },
        "content": "        WordBank temp \u003d new WordBank(toCheck);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "chrischenhui"
        },
        "content": "        return internalList.stream().anyMatch(temp::isSameName);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "chrischenhui"
        },
        "content": "    }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "chrischenhui"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "chrischenhui"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "chrischenhui"
        },
        "content": "     * Adds a WordBank to the list."
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "chrischenhui"
        },
        "content": "     * The WordBank must not exist in the list."
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "chrischenhui"
        },
        "content": "     *"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "chrischenhui"
        },
        "content": "     * @see UniqueWordBankList#contains(WordBank)"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "chrischenhui"
        },
        "content": "     */"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "chrischenhui"
        },
        "content": "    public void add(WordBank toAdd) {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "chrischenhui"
        },
        "content": "        requireNonNull(toAdd);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "chrischenhui"
        },
        "content": "        if (contains(toAdd)) {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "chrischenhui"
        },
        "content": "            throw new DuplicateWordBankException();"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "chrischenhui"
        },
        "content": "        }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "chrischenhui"
        },
        "content": "        internalList.add(toAdd);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "chrischenhui"
        },
        "content": "    }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "chrischenhui"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "chrischenhui"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "chrischenhui"
        },
        "content": "     * Replaces the contents of this list with {@code List\u003cWordBank\u003e}."
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "chrischenhui"
        },
        "content": "     * {@code List\u003cWordBank\u003e} must not contain duplicate WordBank."
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "chrischenhui"
        },
        "content": "     */"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "chrischenhui"
        },
        "content": "    public void setWordBankList(List\u003cWordBank\u003e cards) {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "chrischenhui"
        },
        "content": "        requireAllNonNull(cards);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "chrischenhui"
        },
        "content": "        if (!wordBanksAreUnique(cards)) {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "chrischenhui"
        },
        "content": "            throw new DuplicateWordBankException();"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "chrischenhui"
        },
        "content": "        }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "chrischenhui"
        },
        "content": "        internalList.setAll(cards);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "chrischenhui"
        },
        "content": "    }"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "chrischenhui"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "jascxx"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "jascxx"
        },
        "content": "     * Removes the equivalent card from the list."
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "jascxx"
        },
        "content": "     * The card must exist in the list."
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "jascxx"
        },
        "content": "     */"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "chrischenhui"
        },
        "content": "    public void remove(WordBank toRemove) {"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "jascxx"
        },
        "content": "        requireNonNull(toRemove);"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "jascxx"
        },
        "content": "        if (!internalList.remove(toRemove)) {"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "chrischenhui"
        },
        "content": "            throw new WordBankNotFoundException();"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "jascxx"
        },
        "content": "        }"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "jascxx"
        },
        "content": "    }"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "jascxx"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "chrischenhui"
        },
        "content": "    public WordBank get(Index index) {"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "chrischenhui"
        },
        "content": "        return internalList.get(index.getZeroBased());"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "chrischenhui"
        },
        "content": "    }"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "chrischenhui"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "chrischenhui"
        },
        "content": "    public int size() {"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "chrischenhui"
        },
        "content": "        return internalList.size();"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "chrischenhui"
        },
        "content": "    }"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "chrischenhui"
        },
        "content": ""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "chrischenhui"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "chrischenhui"
        },
        "content": "     * Returns the backing list as an unmodifiable {@code ObservableList}."
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "chrischenhui"
        },
        "content": "     */"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "chrischenhui"
        },
        "content": "    public ObservableList\u003cWordBank\u003e asUnmodifiableObservableList() {"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "chrischenhui"
        },
        "content": "        return internalUnmodifiableList;"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "chrischenhui"
        },
        "content": "    }"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "chrischenhui"
        },
        "content": ""
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "chrischenhui"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "chrischenhui"
        },
        "content": "    public Iterator\u003cWordBank\u003e iterator() {"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "chrischenhui"
        },
        "content": "        return internalList.iterator();"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "chrischenhui"
        },
        "content": "    }"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "chrischenhui"
        },
        "content": ""
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "chrischenhui"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "chrischenhui"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "chrischenhui"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "chrischenhui"
        },
        "content": "                || (other instanceof UniqueWordBankList // instanceof handles nulls"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "chrischenhui"
        },
        "content": "                \u0026\u0026 internalList.equals(((UniqueWordBankList) other).internalList));"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "chrischenhui"
        },
        "content": "    }"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "chrischenhui"
        },
        "content": ""
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "chrischenhui"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "chrischenhui"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "chrischenhui"
        },
        "content": "        return internalList.hashCode();"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "chrischenhui"
        },
        "content": "    }"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "chrischenhui"
        },
        "content": ""
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "chrischenhui"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "chrischenhui"
        },
        "content": "     * Returns true if {@code cards} contains only unique cards."
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "chrischenhui"
        },
        "content": "     */"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "chrischenhui"
        },
        "content": "    private boolean wordBanksAreUnique(List\u003cWordBank\u003e wordBankList) {"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "chrischenhui"
        },
        "content": "        for (int i \u003d 0; i \u003c wordBankList.size() - 1; i++) {"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "chrischenhui"
        },
        "content": "            for (int j \u003d i + 1; j \u003c wordBankList.size(); j++) {"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "chrischenhui"
        },
        "content": "                if (wordBankList.get(i).isSameName(wordBankList.get(j))) {"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "chrischenhui"
        },
        "content": "                    return false;"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "chrischenhui"
        },
        "content": "                }"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "chrischenhui"
        },
        "content": "            }"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "chrischenhui"
        },
        "content": "        }"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "chrischenhui"
        },
        "content": "        return true;"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "chrischenhui"
        },
        "content": "    }"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "chrischenhui"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "jascxx": 9,
      "chrischenhui": 124
    }
  },
  {
    "path": "src/main/java/seedu/address/model/wordbanklist/WordBankList.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "chrischenhui"
        },
        "content": "package seedu.address.model.wordbanklist;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "chrischenhui"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "chrischenhui"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "chrischenhui"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "chrischenhui"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "chrischenhui"
        },
        "content": "import seedu.address.model.util.SampleDataUtil;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "chrischenhui"
        },
        "content": "import seedu.address.model.wordbank.ReadOnlyWordBank;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "chrischenhui"
        },
        "content": "import seedu.address.model.wordbank.WordBank;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "chrischenhui"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "chrischenhui"
        },
        "content": "/**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "chrischenhui"
        },
        "content": " * Wraps all data at the word bank folder level."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "chrischenhui"
        },
        "content": " * Duplicates are not allowed (by WordBank#isSameName(WordBank) comparison)"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "chrischenhui"
        },
        "content": " */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "chrischenhui"
        },
        "content": "public class WordBankList implements ReadOnlyWordBankList {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "chrischenhui"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "chrischenhui"
        },
        "content": "    private final UniqueWordBankList wordBankList \u003d new UniqueWordBankList();"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "chrischenhui"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "chrischenhui"
        },
        "content": "    public WordBankList(List\u003cWordBank\u003e wbl) {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "chrischenhui"
        },
        "content": "        if (!wbl.isEmpty()) {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "chrischenhui"
        },
        "content": "            for (WordBank wb : wbl) {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "chrischenhui"
        },
        "content": "                wordBankList.add(wb);"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "chrischenhui"
        },
        "content": "            }"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "chrischenhui"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "chrischenhui"
        },
        "content": "            WordBank sampleWb \u003d SampleDataUtil.getSampleWordBank();"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "chrischenhui"
        },
        "content": "            wordBankList.add(sampleWb);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "chrischenhui"
        },
        "content": "        }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "chrischenhui"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "chrischenhui"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "chrischenhui"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "chrischenhui"
        },
        "content": "     * Replaces the contents of the word bank list with {@code List\u003cWordBank\u003e}."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "chrischenhui"
        },
        "content": "     * {@code List\u003cWordBank\u003e} must not contain any cards with the same meaning."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "chrischenhui"
        },
        "content": "     */"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "chrischenhui"
        },
        "content": "    public void setWordBankList(List\u003cWordBank\u003e wordBankList) {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "chrischenhui"
        },
        "content": "        this.wordBankList.setWordBankList(wordBankList);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "chrischenhui"
        },
        "content": "    }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "chrischenhui"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "chrischenhui"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "chrischenhui"
        },
        "content": "     * Adds a card to the word bank."
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "chrischenhui"
        },
        "content": "     * A card with the same meaning must not already exist in the word bank."
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "chrischenhui"
        },
        "content": "     */"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "chrischenhui"
        },
        "content": "    public void addBank(ReadOnlyWordBank wordBank) {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "chrischenhui"
        },
        "content": "        wordBankList.add((WordBank) wordBank);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "chrischenhui"
        },
        "content": "    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "chrischenhui"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "chrischenhui"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "chrischenhui"
        },
        "content": "     * Removes {@code key} from this {@code WordBank}."
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "chrischenhui"
        },
        "content": "     * {@code key} must exist in the word bank."
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "chrischenhui"
        },
        "content": "     */"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "chrischenhui"
        },
        "content": "    public void removeWordBank(WordBank wordBankName) {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "chrischenhui"
        },
        "content": "        wordBankList.remove(wordBankName);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "chrischenhui"
        },
        "content": "    }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "chrischenhui"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "chrischenhui"
        },
        "content": "    // util methods"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "chrischenhui"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "chrischenhui"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "chrischenhui"
        },
        "content": "    public int size() {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "chrischenhui"
        },
        "content": "        return wordBankList.size();"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "chrischenhui"
        },
        "content": "    }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "chrischenhui"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "chrischenhui"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "chrischenhui"
        },
        "content": "    public ObservableList\u003cWordBank\u003e getFilteredWordBankList() {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "chrischenhui"
        },
        "content": "        return wordBankList.asUnmodifiableObservableList();"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "chrischenhui"
        },
        "content": "    }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "chrischenhui"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "chrischenhui"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "chrischenhui"
        },
        "content": "    public WordBank getWordBankFromName(String name) {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "chrischenhui"
        },
        "content": "        for (WordBank wb : wordBankList) {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "chrischenhui"
        },
        "content": "            if (wb.getName().equals(name)) {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "chrischenhui"
        },
        "content": "                return wb;"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "chrischenhui"
        },
        "content": "            }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "chrischenhui"
        },
        "content": "        }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "chrischenhui"
        },
        "content": "        return SampleDataUtil.getSampleWordBank();"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "chrischenhui"
        },
        "content": "    }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "chrischenhui"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "chrischenhui"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "chrischenhui"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "chrischenhui"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "chrischenhui"
        },
        "content": "                || (other instanceof WordBankList // instanceof handles nulls"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "chrischenhui"
        },
        "content": "                \u0026\u0026 wordBankList.equals(((WordBankList) other).wordBankList));"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "chrischenhui"
        },
        "content": "    }"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "chrischenhui"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "chrischenhui"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "chrischenhui"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "chrischenhui"
        },
        "content": "        return wordBankList.hashCode();"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "chrischenhui"
        },
        "content": "    }"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "chrischenhui"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "chrischenhui"
        },
        "content": "    public boolean hasWordBankName(String name) {"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "chrischenhui"
        },
        "content": "        return wordBankList.contains(name);"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "chrischenhui"
        },
        "content": "    }"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "chrischenhui"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "chrischenhui": 90
    }
  },
  {
    "path": "src/main/java/seedu/address/model/wordbankstatslist/ReadOnlyWordBankStatisticsList.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jascxx"
        },
        "content": "package seedu.address.model.wordbankstatslist;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "jascxx"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "jascxx"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "jascxx"
        },
        "content": "import seedu.address.statistics.WordBankStatistics;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "jascxx"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "jascxx"
        },
        "content": "/**"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "jascxx"
        },
        "content": " * Unmodifiable view of a word bank."
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "jascxx"
        },
        "content": " */"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "jascxx"
        },
        "content": "public interface ReadOnlyWordBankStatisticsList {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "jascxx"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "jascxx"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "jascxx"
        },
        "content": "     * Returns an unmodifiable view of the word bank statistics."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "jascxx"
        },
        "content": "     */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "jascxx"
        },
        "content": "    ObservableList\u003cWordBankStatistics\u003e getWordBankStatisticsList();"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "jascxx"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "jascxx"
        },
        "content": "    WordBankStatistics getWordBankStatistics(String name);"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "jascxx"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "jascxx"
        },
        "content": "    int size();"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "jascxx"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "jascxx"
        },
        "content": "}"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "jascxx"
        },
        "content": ""
      }
    ],
    "authorContributionMap": {
      "jascxx": 21
    }
  },
  {
    "path": "src/main/java/seedu/address/model/wordbankstatslist/WordBankStatisticsList.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jascxx"
        },
        "content": "package seedu.address.model.wordbankstatslist;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "jascxx"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "jascxx"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "jascxx"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "jascxx"
        },
        "content": "import java.util.Comparator;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "jascxx"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "jascxx"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "jascxx"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "jascxx"
        },
        "content": "import javafx.collections.FXCollections;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "jascxx"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "jascxx"
        },
        "content": "import seedu.address.model.wordbank.WordBank;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "jascxx"
        },
        "content": "import seedu.address.statistics.WordBankStatistics;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "jascxx"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "jascxx"
        },
        "content": "/**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "jascxx"
        },
        "content": " * Wraps all word bank statistics"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "jascxx"
        },
        "content": " */"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "jascxx"
        },
        "content": "public class WordBankStatisticsList implements ReadOnlyWordBankStatisticsList {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "jascxx"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "jascxx"
        },
        "content": "    private final ObservableList\u003cWordBankStatistics\u003e internalList \u003d FXCollections.observableArrayList();"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "jascxx"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "jascxx"
        },
        "content": "    public WordBankStatisticsList(List\u003cWordBankStatistics\u003e wbStatsList) {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "jascxx"
        },
        "content": "        internalList.addAll(wbStatsList);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "jascxx"
        },
        "content": "    }"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "jascxx"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "jascxx"
        },
        "content": "    //// list overwrite operations"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "jascxx"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "jascxx"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "jascxx"
        },
        "content": "     * Replaces the contents of the card list with {@code wordBanksStatisticsList}."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "jascxx"
        },
        "content": "     * {@code cards} must not contain any cards with the same meaning."
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "jascxx"
        },
        "content": "     */"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "jascxx"
        },
        "content": "    public void setWordBankStatisticsList(List\u003cWordBankStatistics\u003e wordBankStatisticsList) {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "jascxx"
        },
        "content": "        this.internalList.setAll(wordBankStatisticsList);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "jascxx"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "jascxx"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "jascxx"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "jascxx"
        },
        "content": "     * Resets the existing data of this {@code WordBankStatisticsList} with {@code newData}."
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "jascxx"
        },
        "content": "     */"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "jascxx"
        },
        "content": "    public void resetData(ReadOnlyWordBankStatisticsList newData) {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "jascxx"
        },
        "content": "        requireNonNull(newData);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "jascxx"
        },
        "content": "        setWordBankStatisticsList(newData.getWordBankStatisticsList());"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "jascxx"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "jascxx"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "jascxx"
        },
        "content": "    //// card-level operations"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "jascxx"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "jascxx"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "jascxx"
        },
        "content": "     * Returns true if a word bank stats with the same name as {@code wordBankStats} exists in the word bank list."
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "jascxx"
        },
        "content": "     */"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "jascxx"
        },
        "content": "    public boolean hasWordBankStatistics(WordBankStatistics wordBankStats) {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "jascxx"
        },
        "content": "        requireNonNull(wordBankStats);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "jascxx"
        },
        "content": "        return internalList.contains(wordBankStats);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "jascxx"
        },
        "content": "    }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "jascxx"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "jascxx"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "jascxx"
        },
        "content": "     * Adds a {@code WordBankStatistics} to this."
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "jascxx"
        },
        "content": "     */"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "jascxx"
        },
        "content": "    public void addWordBanksStatistics(WordBankStatistics wbStats) {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "jascxx"
        },
        "content": "        internalList.add(wbStats);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "jascxx"
        },
        "content": "    }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "jascxx"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "jascxx"
        },
        "content": "    //    /**"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "jascxx"
        },
        "content": "    //     * Replaces the given card {@code target} in the list with {@code editedCard}."
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "jascxx"
        },
        "content": "    //     * {@code target} must exist in the word bank."
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "jascxx"
        },
        "content": "    //     * The card meaning of {@code editedCard} must not be the same as another existing card in the word bank."
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "jascxx"
        },
        "content": "    //     */"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "jascxx"
        },
        "content": "    //    public void setWordBankList(WordBank target, WordBank editedCard) {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "jascxx"
        },
        "content": "    //        requireNonNull(editedCard);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "jascxx"
        },
        "content": "    //"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "jascxx"
        },
        "content": "    //        wordBankList.setWordBankList(target, editedCard);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "jascxx"
        },
        "content": "    //    }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "jascxx"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "jascxx"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "jascxx"
        },
        "content": "     * Removes {@code key} from this {@code WordBankStatisticsList}."
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "jascxx"
        },
        "content": "     * {@code key} must exist in the word bank."
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "jascxx"
        },
        "content": "     */"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "jascxx"
        },
        "content": "    public void removeWordBankStatistics(WordBankStatistics key) {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "jascxx"
        },
        "content": "        internalList.remove(key);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "jascxx"
        },
        "content": "    }"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "jascxx"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "jascxx"
        },
        "content": "    public Optional\u003cWordBankStatistics\u003e getMostPlayedWordBankStatistics() {"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "jascxx"
        },
        "content": "        return internalList.stream()"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "jascxx"
        },
        "content": "                .max(Comparator.comparingInt(WordBankStatistics::getGamesPlayed));"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "jascxx"
        },
        "content": "    }"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "jascxx"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "jascxx"
        },
        "content": "    public int getTotalPlayed() {"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "jascxx"
        },
        "content": "        return internalList.stream()"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "jascxx"
        },
        "content": "                .mapToInt(WordBankStatistics::getGamesPlayed)"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "jascxx"
        },
        "content": "                .sum();"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "jascxx"
        },
        "content": "    }"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "jascxx"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "jascxx"
        },
        "content": "    //// util methods"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "jascxx"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "jascxx"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "jascxx"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "jascxx"
        },
        "content": "        return size() + \" word banks statistics\";"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "jascxx"
        },
        "content": "        // TODO: refine later"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "jascxx"
        },
        "content": "    }"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "jascxx"
        },
        "content": ""
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "jascxx"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "jascxx"
        },
        "content": "    public int size() {"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "jascxx"
        },
        "content": "        return internalList.size();"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "jascxx"
        },
        "content": "    }"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "jascxx"
        },
        "content": ""
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "jascxx"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "jascxx"
        },
        "content": "    public ObservableList\u003cWordBankStatistics\u003e getWordBankStatisticsList() {"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "jascxx"
        },
        "content": "        return internalList;"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "jascxx"
        },
        "content": "    }"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "jascxx"
        },
        "content": ""
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "jascxx"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "jascxx"
        },
        "content": "    public WordBankStatistics getWordBankStatistics(String name) {"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "jascxx"
        },
        "content": "        for (WordBankStatistics wbStats : internalList) {"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "jascxx"
        },
        "content": "            if (wbStats.getWordBankName().equals(name)) {"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "jascxx"
        },
        "content": "                return wbStats;"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "jascxx"
        },
        "content": "            }"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "jascxx"
        },
        "content": "        }"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "jascxx"
        },
        "content": "        return null;"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "jascxx"
        },
        "content": "    }"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "jascxx"
        },
        "content": ""
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "jascxx"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "jascxx"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "jascxx"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "jascxx"
        },
        "content": "                || (other instanceof WordBank // instanceof handles nulls"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "jascxx"
        },
        "content": "                \u0026\u0026 internalList.equals(((WordBankStatisticsList) other).internalList));"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "jascxx"
        },
        "content": "    }"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "jascxx"
        },
        "content": ""
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "jascxx"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "jascxx"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "jascxx"
        },
        "content": "        return internalList.hashCode();"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "jascxx"
        },
        "content": "    }"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "jascxx"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "jascxx": 129
    }
  },
  {
    "path": "src/main/java/seedu/address/statistics/CardStatistics.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jascxx"
        },
        "content": "package seedu.address.statistics;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "jascxx"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "jascxx"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "jascxx"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "jascxx"
        },
        "content": "/**"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "jascxx"
        },
        "content": " * Represents the statistics of a card."
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "jascxx"
        },
        "content": " */"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "jascxx"
        },
        "content": "public class CardStatistics {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "jascxx"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "jascxx"
        },
        "content": "    private String cardId;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "jascxx"
        },
        "content": "    private int numShown;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "jascxx"
        },
        "content": "    private int numCorrect;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "jascxx"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "jascxx"
        },
        "content": "    public CardStatistics(String cardId, int numShown, int numCorrect) {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "jascxx"
        },
        "content": "        if (numShown \u003c 0 || numCorrect \u003c 0) {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "jascxx"
        },
        "content": "            throw new IllegalArgumentException(\"Integer arguments should be positive.\");"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "jascxx"
        },
        "content": "        }"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "jascxx"
        },
        "content": "        if (numCorrect \u003e numShown) {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "jascxx"
        },
        "content": "            throw new IllegalArgumentException(\"Number of correct guesses should be at most the number\""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "jascxx"
        },
        "content": "                + \"the card has been shown.\");"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "jascxx"
        },
        "content": "        }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "jascxx"
        },
        "content": "        requireNonNull(cardId);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "jascxx"
        },
        "content": "        this.cardId \u003d cardId;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "jascxx"
        },
        "content": "        this.numShown \u003d numShown;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "jascxx"
        },
        "content": "        this.numCorrect \u003d numCorrect;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "jascxx"
        },
        "content": "    }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "jascxx"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "jascxx"
        },
        "content": "    public String getCardId() {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "jascxx"
        },
        "content": "        return cardId;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "jascxx"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "jascxx"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "jascxx"
        },
        "content": "    public int getNumShown() {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "jascxx"
        },
        "content": "        return numShown;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "jascxx"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "jascxx"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "jascxx"
        },
        "content": "    public int getNumCorrect() {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "jascxx"
        },
        "content": "        return numCorrect;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "jascxx"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "jascxx"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "jascxx"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "jascxx"
        },
        "content": "     * Add a wrong guess data point to this card stats."
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "jascxx"
        },
        "content": "     */"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "jascxx"
        },
        "content": "    public void addWrong() {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "jascxx"
        },
        "content": "        ++numShown;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "jascxx"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "jascxx"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "jascxx"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "jascxx"
        },
        "content": "     * Add a correct guess data point to this card stats."
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "jascxx"
        },
        "content": "     */"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "jascxx"
        },
        "content": "    public void addCorrect() {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "jascxx"
        },
        "content": "        ++numCorrect;"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "jascxx"
        },
        "content": "        ++numShown;"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "jascxx"
        },
        "content": "    }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "jascxx"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "jascxx"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "jascxx"
        },
        "content": "    public boolean equals(Object obj) {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "jascxx"
        },
        "content": "        if (obj \u003d\u003d this) {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "jascxx"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "jascxx"
        },
        "content": "        }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "jascxx"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "jascxx"
        },
        "content": "        if (!(obj instanceof CardStatistics)) {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "jascxx"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "jascxx"
        },
        "content": "        }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "jascxx"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "jascxx"
        },
        "content": "        CardStatistics other \u003d (CardStatistics) obj;"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "jascxx"
        },
        "content": "        return getCardId().equals(other.getCardId())"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "jascxx"
        },
        "content": "                \u0026\u0026 getNumShown() \u003d\u003d other.getNumShown()"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "jascxx"
        },
        "content": "                \u0026\u0026 getNumCorrect() \u003d\u003d other.getNumCorrect();"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "jascxx"
        },
        "content": "    }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "jascxx"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "jascxx"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "jascxx"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "jascxx"
        },
        "content": "        return new StringBuilder()"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "jascxx"
        },
        "content": "                .append(\"id:\")"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "jascxx"
        },
        "content": "                .append(cardId)"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "jascxx"
        },
        "content": "                .append(\"\\nnumShown:\")"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "jascxx"
        },
        "content": "                .append(numShown)"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "jascxx"
        },
        "content": "                .append(\"\\nnumCorrect:\")"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "jascxx"
        },
        "content": "                .append(numCorrect)"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "jascxx"
        },
        "content": "                .toString();"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "jascxx"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "jascxx"
        },
        "content": "    }"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "jascxx"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "jascxx": 83
    }
  },
  {
    "path": "src/main/java/seedu/address/statistics/GameDataPoint.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jascxx"
        },
        "content": "package seedu.address.statistics;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "jascxx"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "jascxx"
        },
        "content": "import static seedu.address.commons.util.CollectionUtil.requireAllNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "jascxx"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "jascxx"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "jascxx"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "jascxx"
        },
        "content": "import seedu.address.model.game.Guess;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "jascxx"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "jascxx"
        },
        "content": "/**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "jascxx"
        },
        "content": " * Represents a data point of a game, consisting of an action (GUESS or SKIP) and the time elapsed."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "jascxx"
        },
        "content": " * The collection of {@code GameDataPoint} is located in {@code GameStatistics}."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "jascxx"
        },
        "content": " */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "jascxx"
        },
        "content": "public class GameDataPoint {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "jascxx"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "jascxx"
        },
        "content": "    private final GameDataType dataType;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "jascxx"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "jascxx"
        },
        "content": "    /** The millis taken after the current card is shown**/"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "jascxx"
        },
        "content": "    private final long millisTaken;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "jascxx"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "jascxx"
        },
        "content": "    /** Optional is empty for a SKIP data point, and contains the corresponding guess for GUESS data point **/"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "jascxx"
        },
        "content": "    private final Optional\u003cGuess\u003e guess;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "jascxx"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "jascxx"
        },
        "content": "    private GameDataPoint(GameDataType dataType, Optional\u003cGuess\u003e guess, long millisTaken) {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "jascxx"
        },
        "content": "        requireAllNonNull(dataType, guess);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "jascxx"
        },
        "content": "        if (millisTaken \u003c 0) {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "jascxx"
        },
        "content": "            throw new IllegalArgumentException(\"Millis taken cannot be negative\");"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "jascxx"
        },
        "content": "        }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "jascxx"
        },
        "content": "        this.dataType \u003d dataType;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "jascxx"
        },
        "content": "        this.guess \u003d guess;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "jascxx"
        },
        "content": "        this.millisTaken \u003d millisTaken;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "jascxx"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "jascxx"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "jascxx"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "jascxx"
        },
        "content": "     * Creates a skip data point."
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "jascxx"
        },
        "content": "     * @param millisTaken The time the skip command occurs after the card is displayed."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "jascxx"
        },
        "content": "     */"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "jascxx"
        },
        "content": "    public static GameDataPoint createSkipData(long millisTaken) {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "jascxx"
        },
        "content": "        return new GameDataPoint(GameDataType.SKIP,"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "jascxx"
        },
        "content": "                Optional.empty(),"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "jascxx"
        },
        "content": "                millisTaken);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "jascxx"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "jascxx"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "jascxx"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "jascxx"
        },
        "content": "     * Creates a guess data point."
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "jascxx"
        },
        "content": "     * @param guess The corresponding guess."
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "jascxx"
        },
        "content": "     * @param millisTaken The time the guess command occurs after the card is displayed."
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "jascxx"
        },
        "content": "     * @return"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "jascxx"
        },
        "content": "     */"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "jascxx"
        },
        "content": "    public static GameDataPoint createGuessData(Guess guess, long millisTaken) {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "jascxx"
        },
        "content": "        return new GameDataPoint(GameDataType.GUESS,"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "jascxx"
        },
        "content": "                Optional.of(guess),"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "jascxx"
        },
        "content": "                millisTaken);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "jascxx"
        },
        "content": "    }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "jascxx"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "jascxx"
        },
        "content": "    public Optional\u003cGuess\u003e getGuess() {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "jascxx"
        },
        "content": "        return guess;"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "jascxx"
        },
        "content": "    }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "jascxx"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "jascxx"
        },
        "content": "    public long getMillisTaken() {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "jascxx"
        },
        "content": "        return millisTaken;"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "jascxx"
        },
        "content": "    }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "jascxx"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "jascxx"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "jascxx"
        },
        "content": "    public boolean equals(Object obj) {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "jascxx"
        },
        "content": "        if (obj \u003d\u003d this) {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "jascxx"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "jascxx"
        },
        "content": "        }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "jascxx"
        },
        "content": "        if (!(obj instanceof GameDataPoint)) {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "jascxx"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "jascxx"
        },
        "content": "        }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "jascxx"
        },
        "content": "        GameDataPoint other \u003d (GameDataPoint) obj;"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "jascxx"
        },
        "content": "        return dataType.equals(other.dataType)"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "jascxx"
        },
        "content": "                \u0026\u0026 getMillisTaken() \u003d\u003d other.getMillisTaken()"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "jascxx"
        },
        "content": "                \u0026\u0026 guess.equals(other.guess);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "jascxx"
        },
        "content": "    }"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "jascxx"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "jascxx"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "jascxx"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "jascxx"
        },
        "content": "        return dataType + \" - \" + guess + \": \" + millisTaken + \"ms\";"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "jascxx"
        },
        "content": "    }"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "jascxx"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "jascxx"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "jascxx": 82
    }
  },
  {
    "path": "src/main/java/seedu/address/statistics/GameDataType.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jascxx"
        },
        "content": "package seedu.address.statistics;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "jascxx"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "jascxx"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "jascxx"
        },
        "content": " * Represents user actions that affect the game."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "jascxx"
        },
        "content": " * New actions should be added to correctly be shown in GameStatistics."
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "chrischenhui"
        },
        "content": " * @see seedu.address.logic.commands.gamecommands.GuessCommandResult"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "chrischenhui"
        },
        "content": " * @see seedu.address.logic.commands.gamecommands.SkipCommandResult"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "jascxx"
        },
        "content": " */"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "jascxx"
        },
        "content": "public enum GameDataType {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "jascxx"
        },
        "content": "    GUESS,"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "jascxx"
        },
        "content": "    SKIP"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "jascxx"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "jascxx": 10,
      "chrischenhui": 2
    }
  },
  {
    "path": "src/main/java/seedu/address/statistics/GameStatistics.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jascxx"
        },
        "content": "package seedu.address.statistics;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "jascxx"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "jascxx"
        },
        "content": "import static seedu.address.commons.util.CollectionUtil.requireAllNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "jascxx"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "jascxx"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "jascxx"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "dragontho"
        },
        "content": "import seedu.address.model.card.Card;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "dragontho"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "jascxx"
        },
        "content": "/**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "jascxx"
        },
        "content": " * Represents the statistics of a single game."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "jascxx"
        },
        "content": " */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "jascxx"
        },
        "content": "public class GameStatistics {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "jascxx"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "jascxx"
        },
        "content": "    private final String title;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "jascxx"
        },
        "content": "    private final int score;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "jascxx"
        },
        "content": "    private final ScoreGrade grade;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "jascxx"
        },
        "content": "    private final double secTaken;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "jascxx"
        },
        "content": "    private final List\u003cCard\u003e correctCards;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "jascxx"
        },
        "content": "    private final List\u003cCard\u003e wrongCards;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "jascxx"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "jascxx"
        },
        "content": "    public GameStatistics(String title, int score, double secTaken,"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "jascxx"
        },
        "content": "                          List\u003cCard\u003e correctCards, List\u003cCard\u003e wrongCards) {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "jascxx"
        },
        "content": "        requireAllNonNull(title, correctCards, wrongCards);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "jascxx"
        },
        "content": "        if (score \u003c ScoreData.MIN_SCORE || score \u003e ScoreData.MAX_SCORE) {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "jascxx"
        },
        "content": "            throw new IllegalArgumentException(\"Score must be within bound as specified in ScoreData\");"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "jascxx"
        },
        "content": "        }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "jascxx"
        },
        "content": "        this.title \u003d title;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "jascxx"
        },
        "content": "        this.score \u003d score;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "jascxx"
        },
        "content": "        this.secTaken \u003d secTaken;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "jascxx"
        },
        "content": "        this.correctCards \u003d correctCards;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "jascxx"
        },
        "content": "        this.wrongCards \u003d wrongCards;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "jascxx"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "jascxx"
        },
        "content": "        this.grade \u003d ScoreGrade.getGrade(score);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "jascxx"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "jascxx"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "jascxx"
        },
        "content": "    public String getTitle() {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "jascxx"
        },
        "content": "        return title;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "jascxx"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "jascxx"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "jascxx"
        },
        "content": "    public int getScore() {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "jascxx"
        },
        "content": "        return score;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "jascxx"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "jascxx"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "jascxx"
        },
        "content": "    public ScoreGrade getGrade() {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "jascxx"
        },
        "content": "        return grade;"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "jascxx"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "jascxx"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "jascxx"
        },
        "content": "    public double getSecTaken() {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "jascxx"
        },
        "content": "        return secTaken;"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "jascxx"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "jascxx"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "jascxx"
        },
        "content": "    public List\u003cCard\u003e getCorrectCards() {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "jascxx"
        },
        "content": "        return correctCards;"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "jascxx"
        },
        "content": "    }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "jascxx"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "jascxx"
        },
        "content": "    public List\u003cCard\u003e getWrongCards() {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "jascxx"
        },
        "content": "        return wrongCards;"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "jascxx"
        },
        "content": "    }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "jascxx"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "jascxx"
        },
        "content": "    public boolean isAllCorrect() {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "jascxx"
        },
        "content": "        return getWrongCards().isEmpty();"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "jascxx"
        },
        "content": "    }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "jascxx"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "jascxx"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "jascxx"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "jascxx"
        },
        "content": "        if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "jascxx"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "jascxx"
        },
        "content": "        }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "jascxx"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "jascxx"
        },
        "content": "        if (!(other instanceof GameStatistics)) {"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "jascxx"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "jascxx"
        },
        "content": "        }"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "jascxx"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "jascxx"
        },
        "content": "        GameStatistics otherGameStats \u003d (GameStatistics) other;"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "jascxx"
        },
        "content": "        return title.equals(otherGameStats.getTitle())"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "jascxx"
        },
        "content": "                \u0026\u0026 score \u003d\u003d otherGameStats.getScore()"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "jascxx"
        },
        "content": "                \u0026\u0026 grade.equals(otherGameStats.getGrade())"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "jascxx"
        },
        "content": "                \u0026\u0026 secTaken \u003d\u003d otherGameStats.getSecTaken()"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "jascxx"
        },
        "content": "                \u0026\u0026 correctCards.equals(otherGameStats.getCorrectCards())"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "jascxx"
        },
        "content": "                \u0026\u0026 wrongCards.equals(otherGameStats.getWrongCards());"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "jascxx"
        },
        "content": "    }"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "jascxx"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "dragontho": 2,
      "jascxx": 80
    }
  },
  {
    "path": "src/main/java/seedu/address/statistics/GameStatisticsBuilder.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jascxx"
        },
        "content": "package seedu.address.statistics;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "jascxx"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "jascxx"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "jascxx"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "jascxx"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "jascxx"
        },
        "content": "import java.util.LinkedHashMap;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "jascxx"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "jascxx"
        },
        "content": "import java.util.Map;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "jascxx"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "jascxx"
        },
        "content": "import java.util.stream.Collectors;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "jascxx"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "jascxx"
        },
        "content": "import seedu.address.model.card.Card;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "jascxx"
        },
        "content": "import seedu.address.model.game.Guess;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "jascxx"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "jascxx"
        },
        "content": "/**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "jascxx"
        },
        "content": " * A class that manages all statistics to be added during the game."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "jascxx"
        },
        "content": " */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "jascxx"
        },
        "content": "public class GameStatisticsBuilder {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "jascxx"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "jascxx"
        },
        "content": "    /** The data that maps each card to the actions that happen when that card is shown **/"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "jascxx"
        },
        "content": "    private final Map\u003cCard, List\u003cGameDataPoint\u003e\u003e data;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "jascxx"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "jascxx"
        },
        "content": "    private final String title;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "jascxx"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "jascxx"
        },
        "content": "    public GameStatisticsBuilder(String title) {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "jascxx"
        },
        "content": "        requireNonNull(title);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "jascxx"
        },
        "content": "        this.title \u003d title;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "jascxx"
        },
        "content": "        data \u003d new LinkedHashMap\u003c\u003e();"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "jascxx"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "jascxx"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "jascxx"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "jascxx"
        },
        "content": "     * Add a data point to the statistics."
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "jascxx"
        },
        "content": "     * @param gameDataPoint The data point that represents the user action."
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "jascxx"
        },
        "content": "     * @param card The card displayed when the action happens"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "jascxx"
        },
        "content": "     */"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "jascxx"
        },
        "content": "    public void addDataPoint(GameDataPoint gameDataPoint, Card card) {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "jascxx"
        },
        "content": "        if (data.containsKey(card)) {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "jascxx"
        },
        "content": "            List\u003cGameDataPoint\u003e dataPoints \u003d data.get(card);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "jascxx"
        },
        "content": "            if (dataPoints.get(dataPoints.size() - 1).getMillisTaken() \u003e gameDataPoint.getMillisTaken()) {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "jascxx"
        },
        "content": "                throw new IllegalArgumentException(\"The data point to add on a card must have larger millis \""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "jascxx"
        },
        "content": "                        + \"taken compared to the previously added one.\");"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "jascxx"
        },
        "content": "            }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "jascxx"
        },
        "content": "            data.get(card).add(gameDataPoint);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "jascxx"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "jascxx"
        },
        "content": "            List\u003cGameDataPoint\u003e gameDataPointList \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "jascxx"
        },
        "content": "            gameDataPointList.add(gameDataPoint);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "jascxx"
        },
        "content": "            data.put(card, gameDataPointList);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "jascxx"
        },
        "content": "        }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "jascxx"
        },
        "content": "    }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "jascxx"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "jascxx"
        },
        "content": "    public String getTitle() {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "jascxx"
        },
        "content": "        return title;"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "jascxx"
        },
        "content": "    }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "jascxx"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "jascxx"
        },
        "content": "    public Map\u003cCard, List\u003cGameDataPoint\u003e\u003e getData() {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "jascxx"
        },
        "content": "        return data;"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "jascxx"
        },
        "content": "    }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "jascxx"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "dragontho"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "dragontho"
        },
        "content": "     * Builds the resulting {@code GameStatistics} object."
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "dragontho"
        },
        "content": "     *"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "dragontho"
        },
        "content": "     * @return"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "dragontho"
        },
        "content": "     */"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "jascxx"
        },
        "content": "    public GameStatistics build() {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "jascxx"
        },
        "content": "        return new GameStatistics(title,"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "jascxx"
        },
        "content": "                getScore(),"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "jascxx"
        },
        "content": "                getTimeTakenSec(),"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "jascxx"
        },
        "content": "                getAllCorrectCards(),"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "jascxx"
        },
        "content": "                getAllWrongCards());"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "jascxx"
        },
        "content": "    }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "jascxx"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "jascxx"
        },
        "content": "    // The following are helper methods to construct the game statistics."
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "jascxx"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "jascxx"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "jascxx"
        },
        "content": "     * Returns the score of the game. To be shown in the result page."
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "jascxx"
        },
        "content": "     * The scoring system can be flexible."
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "jascxx"
        },
        "content": "     */"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "jascxx"
        },
        "content": "    private int getScore() {"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "jascxx"
        },
        "content": "        int correctAnswer \u003d (int) data.keySet()"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "jascxx"
        },
        "content": "                .stream()"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "jascxx"
        },
        "content": "                .filter(x -\u003e {"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "jascxx"
        },
        "content": "                    Optional\u003cGuess\u003e guess \u003d getLastDataPoint(x).getGuess();"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "jascxx"
        },
        "content": "                    return guess.isPresent() \u0026\u0026 guess.get().matches(x.getWord());"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "jascxx"
        },
        "content": "                })"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "jascxx"
        },
        "content": "                .count();"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "jascxx"
        },
        "content": "        int score \u003d (int) Math.round(((double) correctAnswer) / data.size() * ScoreData.MAX_SCORE);"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "jascxx"
        },
        "content": "        return score;"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "jascxx"
        },
        "content": "    }"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "jascxx"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "jascxx"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "jascxx"
        },
        "content": "     * Returns the time taken for the entire game. To be shown on the result page."
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "jascxx"
        },
        "content": "     */"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "jascxx"
        },
        "content": "    private double getTimeTakenSec() {"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "jascxx"
        },
        "content": "        return data.keySet()"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "jascxx"
        },
        "content": "                .stream()"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "jascxx"
        },
        "content": "                // sum up the last guess for every card"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "jascxx"
        },
        "content": "                .mapToLong(x -\u003e getLastDataPoint(x).getMillisTaken())"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "jascxx"
        },
        "content": "                .sum() / 1000.0;"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "jascxx"
        },
        "content": "    }"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "jascxx"
        },
        "content": ""
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "jascxx"
        },
        "content": "    private List\u003cCard\u003e getAllWrongCards() {"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "jascxx"
        },
        "content": "        return data.keySet()"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "jascxx"
        },
        "content": "                .stream()"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "jascxx"
        },
        "content": "                .filter(x -\u003e {"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "jascxx"
        },
        "content": "                    Optional\u003cGuess\u003e guess \u003d getLastDataPoint(x).getGuess();"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "jascxx"
        },
        "content": "                    return guess.isEmpty() || !guess.get().matches(x.getWord());"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "jascxx"
        },
        "content": "                })"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "jascxx"
        },
        "content": "                .collect(Collectors.toList());"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "jascxx"
        },
        "content": "    }"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "jascxx"
        },
        "content": ""
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "jascxx"
        },
        "content": "    private List\u003cCard\u003e getAllCorrectCards() {"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "jascxx"
        },
        "content": "        return data.keySet()"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "jascxx"
        },
        "content": "                .stream()"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "jascxx"
        },
        "content": "                .filter(x -\u003e {"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "jascxx"
        },
        "content": "                    Optional\u003cGuess\u003e guess \u003d getLastDataPoint(x).getGuess();"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "jascxx"
        },
        "content": "                    return guess.isPresent() \u0026\u0026 guess.get().matches(x.getWord());"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "jascxx"
        },
        "content": "                })"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "jascxx"
        },
        "content": "                .collect(Collectors.toList());"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "jascxx"
        },
        "content": "    }"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "jascxx"
        },
        "content": ""
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "jascxx"
        },
        "content": "    private GameDataPoint getLastDataPoint(Card card) {"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "jascxx"
        },
        "content": "        List\u003cGameDataPoint\u003e dataPoints \u003d data.get(card);"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "jascxx"
        },
        "content": "        return dataPoints.get(dataPoints.size() - 1);"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "jascxx"
        },
        "content": "    }"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "jascxx"
        },
        "content": ""
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "jascxx"
        },
        "content": "    public int size() {"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "jascxx"
        },
        "content": "        return data.size();"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "jascxx"
        },
        "content": "    }"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "jascxx"
        },
        "content": ""
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "jascxx"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "jascxx"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "jascxx"
        },
        "content": "        StringBuilder sb \u003d new StringBuilder();"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "jascxx"
        },
        "content": "        for (Map.Entry\u003cCard, List\u003cGameDataPoint\u003e\u003e entry : data.entrySet()) {"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "jascxx"
        },
        "content": "            sb.append(\"-------\").append(entry.getKey()).append(\"-------\\n\");"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "jascxx"
        },
        "content": "            for (GameDataPoint gameDataPoint : entry.getValue()) {"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "jascxx"
        },
        "content": "                sb.append(\"   \").append(gameDataPoint).append(\"\\n\");"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "jascxx"
        },
        "content": "            }"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "jascxx"
        },
        "content": "        }"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "jascxx"
        },
        "content": "        return sb.toString();"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "jascxx"
        },
        "content": "    }"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "jascxx"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "dragontho": 5,
      "jascxx": 136
    }
  },
  {
    "path": "src/main/java/seedu/address/statistics/ScoreData.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jascxx"
        },
        "content": "package seedu.address.statistics;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "jascxx"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "jascxx"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "jascxx"
        },
        "content": " * Represents the score data for a game."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "jascxx"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "jascxx"
        },
        "content": "public class ScoreData {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "jascxx"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "jascxx"
        },
        "content": "    public static final int MAX_SCORE \u003d 100;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "jascxx"
        },
        "content": "    public static final int MIN_SCORE \u003d 0;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "jascxx"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "jascxx"
        },
        "content": "    private int score;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "jascxx"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "jascxx"
        },
        "content": "    public ScoreData(int score) {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "jascxx"
        },
        "content": "        if (score \u003e MAX_SCORE) {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "jascxx"
        },
        "content": "            score \u003d MAX_SCORE;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "jascxx"
        },
        "content": "        } else if (score \u003c MIN_SCORE) {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "jascxx"
        },
        "content": "            score \u003d MIN_SCORE;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "jascxx"
        },
        "content": "        }"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "jascxx"
        },
        "content": "        this.score \u003d score;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "jascxx"
        },
        "content": "    }"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "jascxx"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "jascxx"
        },
        "content": "    public int getScore() {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "jascxx"
        },
        "content": "        return score;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "jascxx"
        },
        "content": "    }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "jascxx"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "jascxx"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "jascxx"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "jascxx"
        },
        "content": "        return Integer.toString(score);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "jascxx"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "jascxx"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "jascxx"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "jascxx"
        },
        "content": "    public boolean equals(Object obj) {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "jascxx"
        },
        "content": "        if (obj \u003d\u003d this) {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "jascxx"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "jascxx"
        },
        "content": "        }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "jascxx"
        },
        "content": "        if (!(obj instanceof ScoreData)) {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "jascxx"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "jascxx"
        },
        "content": "        }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "jascxx"
        },
        "content": "        return getScore() \u003d\u003d ((ScoreData) obj).getScore();"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "jascxx"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "jascxx"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "dragontho"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "dragontho"
        },
        "content": "     * Takes the maximum of the two scores."
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "dragontho"
        },
        "content": "     *"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "dragontho"
        },
        "content": "     * @param data1 First score to compare."
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "dragontho"
        },
        "content": "     * @param data2 Second score to compare"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "dragontho"
        },
        "content": "     * @return The {@code ScoreData} that is more."
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "dragontho"
        },
        "content": "     */"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "jascxx"
        },
        "content": "    public static ScoreData max(ScoreData data1, ScoreData data2) {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "jascxx"
        },
        "content": "        return data1.score \u003e data2.score"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "jascxx"
        },
        "content": "                ? data1"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "jascxx"
        },
        "content": "                : data2;"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "jascxx"
        },
        "content": "    }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "jascxx"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "dragontho": 7,
      "jascxx": 47
    }
  },
  {
    "path": "src/main/java/seedu/address/statistics/ScoreGrade.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jascxx"
        },
        "content": "package seedu.address.statistics;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "jascxx"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "jascxx"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "jascxx"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "jascxx"
        },
        "content": "/**"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "jascxx"
        },
        "content": " * Represents how good a score is. Used by the UI to set the text color for the score."
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "jascxx"
        },
        "content": " * @see seedu.address.ui.modules.GameResultPanel"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "jascxx"
        },
        "content": " */"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "jascxx"
        },
        "content": "public enum ScoreGrade {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "jascxx"
        },
        "content": "    HIGH(80), MEDIUM(50), LOW(0);"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "jascxx"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "jascxx"
        },
        "content": "    private int minScore;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "jascxx"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "jascxx"
        },
        "content": "    ScoreGrade(int minScore) {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "jascxx"
        },
        "content": "        this.minScore \u003d minScore;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "jascxx"
        },
        "content": "    }"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "jascxx"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "jascxx"
        },
        "content": "    public int getMinScore() {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "jascxx"
        },
        "content": "        return minScore;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "jascxx"
        },
        "content": "    }"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "jascxx"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "jascxx"
        },
        "content": "    static ScoreGrade getGrade(int grade) {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "jascxx"
        },
        "content": "        return Arrays.stream(ScoreGrade.values())"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "jascxx"
        },
        "content": "                .filter(x -\u003e grade \u003e\u003d x.minScore)"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "jascxx"
        },
        "content": "                .findFirst()"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "jascxx"
        },
        "content": "                .orElse(LOW);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "jascxx"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "jascxx"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "jascxx": 28
    }
  },
  {
    "path": "src/main/java/seedu/address/statistics/WordBankStatistics.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jascxx"
        },
        "content": "package seedu.address.statistics;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "jascxx"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "jascxx"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "jascxx"
        },
        "content": "import java.util.Collections;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "jascxx"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "jascxx"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "jascxx"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "jascxx"
        },
        "content": "import seedu.address.model.appsettings.DifficultyEnum;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "dragontho"
        },
        "content": "import seedu.address.model.card.Card;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "dragontho"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "jascxx"
        },
        "content": "/**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "jascxx"
        },
        "content": " * Represents the overall statistics of a word bank."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "jascxx"
        },
        "content": " */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "jascxx"
        },
        "content": "public class WordBankStatistics {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "jascxx"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "jascxx"
        },
        "content": "    private final String wordBankName;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "jascxx"
        },
        "content": "    private int gamesPlayed;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "jascxx"
        },
        "content": "    private Optional\u003cDouble\u003e fastestClear; // empty if never cleared"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "jascxx"
        },
        "content": "    private final List\u003cCardStatistics\u003e cardStats \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "jascxx"
        },
        "content": "    private final List\u003cScoreData\u003e scoreStats \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "jascxx"
        },
        "content": "    private boolean receivedBadgeEasy;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "jascxx"
        },
        "content": "    private boolean receivedBadgeNormal;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "jascxx"
        },
        "content": "    private boolean receivedBadgeHard;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "jascxx"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "jascxx"
        },
        "content": "    public WordBankStatistics(String wordBankName,"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "jascxx"
        },
        "content": "                              int gamesPlayed,"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "jascxx"
        },
        "content": "                              Optional\u003cDouble\u003e fastestClear,"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "jascxx"
        },
        "content": "                              List\u003cCardStatistics\u003e cardStats,"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "jascxx"
        },
        "content": "                              List\u003cScoreData\u003e scoreStats,"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "jascxx"
        },
        "content": "                              boolean receivedBadgeEasy,"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "jascxx"
        },
        "content": "                              boolean receivedBadgeNormal,"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "jascxx"
        },
        "content": "                              boolean receivedBadgeHard) {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "jascxx"
        },
        "content": "        this.wordBankName \u003d wordBankName;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "jascxx"
        },
        "content": "        this.gamesPlayed \u003d gamesPlayed;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "jascxx"
        },
        "content": "        this.fastestClear \u003d fastestClear;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "jascxx"
        },
        "content": "        this.cardStats.addAll(cardStats);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "jascxx"
        },
        "content": "        this.scoreStats.addAll(scoreStats);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "jascxx"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "jascxx"
        },
        "content": "        this.receivedBadgeEasy \u003d receivedBadgeEasy;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "jascxx"
        },
        "content": "        this.receivedBadgeNormal \u003d receivedBadgeNormal;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "jascxx"
        },
        "content": "        this.receivedBadgeHard \u003d receivedBadgeHard;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "jascxx"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "jascxx"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "jascxx"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "jascxx"
        },
        "content": "     * Updates this word bank statistics to include {@code gameStats} of the difficulty {@code difficultyEnum}."
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "jascxx"
        },
        "content": "     */"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "jascxx"
        },
        "content": "    public void update(GameStatistics gameStats, DifficultyEnum difficultyEnum) {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "jascxx"
        },
        "content": "        assert gameStats.getTitle().equals(getWordBankName());"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "jascxx"
        },
        "content": "        ++gamesPlayed;"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "jascxx"
        },
        "content": "        if (gameStats.isAllCorrect()) {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "jascxx"
        },
        "content": "            // update fastestClear if necessary"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "jascxx"
        },
        "content": "            fastestClear \u003d fastestClear.map(aDouble -\u003e Math.min(aDouble, gameStats.getSecTaken()))"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "jascxx"
        },
        "content": "                    .or(() -\u003e Optional.of(gameStats.getSecTaken()));"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "jascxx"
        },
        "content": "            // give badges"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "jascxx"
        },
        "content": "            switch (difficultyEnum) {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "jascxx"
        },
        "content": "            case EASY:"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "jascxx"
        },
        "content": "                receivedBadgeEasy \u003d true;"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "jascxx"
        },
        "content": "                break;"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "jascxx"
        },
        "content": "            case MEDIUM:"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "jascxx"
        },
        "content": "                receivedBadgeNormal \u003d true;"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "jascxx"
        },
        "content": "                break;"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "jascxx"
        },
        "content": "            case HARD:"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "jascxx"
        },
        "content": "                receivedBadgeHard \u003d true;"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "jascxx"
        },
        "content": "                break;"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "jascxx"
        },
        "content": "            default:"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "jascxx"
        },
        "content": "            }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "jascxx"
        },
        "content": "        }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "jascxx"
        },
        "content": "        List\u003cCard\u003e correctCards \u003d gameStats.getCorrectCards();"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "jascxx"
        },
        "content": "        List\u003cCard\u003e wrongCards \u003d gameStats.getWrongCards();"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "jascxx"
        },
        "content": "        for (Card card : wrongCards) {"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "jascxx"
        },
        "content": "            Optional\u003cCardStatistics\u003e stat \u003d getRespectiveCardStats(card.getId());"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "jascxx"
        },
        "content": "            if (stat.isPresent()) {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "jascxx"
        },
        "content": "                stat.get().addWrong();"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "jascxx"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "jascxx"
        },
        "content": "                cardStats.add(new CardStatistics(card.getId(), 1, 0));"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "jascxx"
        },
        "content": "            }"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "jascxx"
        },
        "content": "        }"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "jascxx"
        },
        "content": "        for (Card card : correctCards) {"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "jascxx"
        },
        "content": "            Optional\u003cCardStatistics\u003e stat \u003d getRespectiveCardStats(card.getId());"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "jascxx"
        },
        "content": "            if (stat.isPresent()) {"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "jascxx"
        },
        "content": "                stat.get().addCorrect();"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "jascxx"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "jascxx"
        },
        "content": "                cardStats.add(new CardStatistics(card.getId(), 1, 1));"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "jascxx"
        },
        "content": "            }"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "jascxx"
        },
        "content": "        }"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "jascxx"
        },
        "content": "        scoreStats.add(new ScoreData(gameStats.getScore()));"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "jascxx"
        },
        "content": "    }"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "jascxx"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "jascxx"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "jascxx"
        },
        "content": "     * Get the {@code CardStatistics} given the {@code cardId}."
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "jascxx"
        },
        "content": "     */"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "jascxx"
        },
        "content": "    private Optional\u003cCardStatistics\u003e getRespectiveCardStats(String cardId) {"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "jascxx"
        },
        "content": "        return cardStats.stream()"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "jascxx"
        },
        "content": "                .filter(x -\u003e x.getCardId().equals(cardId))"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "jascxx"
        },
        "content": "                .findFirst();"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "jascxx"
        },
        "content": "    }"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "jascxx"
        },
        "content": ""
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "jascxx"
        },
        "content": "    public String getWordBankName() {"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "jascxx"
        },
        "content": "        return wordBankName;"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "jascxx"
        },
        "content": "    }"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "jascxx"
        },
        "content": ""
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "jascxx"
        },
        "content": "    public int getGamesPlayed() {"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "jascxx"
        },
        "content": "        return gamesPlayed;"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "jascxx"
        },
        "content": "    }"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "jascxx"
        },
        "content": ""
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "jascxx"
        },
        "content": "    public Optional\u003cDouble\u003e getFastestClear() {"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "jascxx"
        },
        "content": "        return fastestClear;"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "jascxx"
        },
        "content": "    }"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "jascxx"
        },
        "content": ""
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "jascxx"
        },
        "content": "    public List\u003cCardStatistics\u003e getCardStats() {"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "jascxx"
        },
        "content": "        return cardStats;"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "jascxx"
        },
        "content": "    }"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "jascxx"
        },
        "content": ""
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "jascxx"
        },
        "content": "    public List\u003cScoreData\u003e getScoreStats() {"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "jascxx"
        },
        "content": "        return scoreStats;"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "jascxx"
        },
        "content": "    }"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "jascxx"
        },
        "content": ""
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "jascxx"
        },
        "content": "    public ScoreData getHighestScore() {"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "jascxx"
        },
        "content": "        return scoreStats.stream()"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "jascxx"
        },
        "content": "                .reduce(new ScoreData(0), ScoreData::max);"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "jascxx"
        },
        "content": "    }"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "jascxx"
        },
        "content": ""
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "jascxx"
        },
        "content": "    public List\u003cCardStatistics\u003e getMostMissedCardStats() {"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "jascxx"
        },
        "content": "        return cardStats;"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "jascxx"
        },
        "content": "    }"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "jascxx"
        },
        "content": ""
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "jascxx"
        },
        "content": "    public boolean isReceivedBadgeEasy() {"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "jascxx"
        },
        "content": "        return receivedBadgeEasy;"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "jascxx"
        },
        "content": "    }"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "jascxx"
        },
        "content": ""
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "jascxx"
        },
        "content": "    public boolean isReceivedBadgeNormal() {"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "jascxx"
        },
        "content": "        return receivedBadgeNormal;"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "jascxx"
        },
        "content": "    }"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "jascxx"
        },
        "content": ""
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "jascxx"
        },
        "content": "    public boolean isReceivedBadgeHard() {"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "jascxx"
        },
        "content": "        return receivedBadgeHard;"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "jascxx"
        },
        "content": "    }"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "jascxx"
        },
        "content": ""
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "dragontho"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "dragontho"
        },
        "content": "     * Removes the statistics from a chosen card via its cardID."
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "dragontho"
        },
        "content": "     *"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "dragontho"
        },
        "content": "     * @param cardId The ID of the card to remove statistics from."
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "dragontho"
        },
        "content": "     */"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "jascxx"
        },
        "content": "    public void removeCardStatistics(String cardId) {"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "jascxx"
        },
        "content": "        for (int i \u003d 0; i \u003c cardStats.size(); ++i) {"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "jascxx"
        },
        "content": "            if (cardStats.get(i).getCardId().equals(cardId)) {"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "jascxx"
        },
        "content": "                cardStats.remove(i);"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "jascxx"
        },
        "content": "                return;"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "jascxx"
        },
        "content": "            }"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "jascxx"
        },
        "content": "        }"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "jascxx"
        },
        "content": "    }"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "jascxx"
        },
        "content": ""
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "jascxx"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "jascxx"
        },
        "content": "     * Create a new word bank statistics with the name {@code wbName}."
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "jascxx"
        },
        "content": "     */"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "jascxx"
        },
        "content": "    public static WordBankStatistics getEmpty(String wbName) {"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "jascxx"
        },
        "content": "        return new WordBankStatistics(wbName,"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "jascxx"
        },
        "content": "                0,"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "jascxx"
        },
        "content": "                Optional.empty(),"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "jascxx"
        },
        "content": "                Collections.emptyList(),"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "jascxx"
        },
        "content": "                Collections.emptyList(),"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "jascxx"
        },
        "content": "                false, false, false);"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "jascxx"
        },
        "content": "    }"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "jascxx"
        },
        "content": ""
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "jascxx"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "jascxx"
        },
        "content": "    public boolean equals(Object obj) {"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "jascxx"
        },
        "content": "        if (obj \u003d\u003d this) {"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "jascxx"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "jascxx"
        },
        "content": "        }"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "jascxx"
        },
        "content": "        if (!(obj instanceof WordBankStatistics)) {"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "jascxx"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "jascxx"
        },
        "content": "        }"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "jascxx"
        },
        "content": "        WordBankStatistics other \u003d (WordBankStatistics) obj;"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "jascxx"
        },
        "content": "        return getWordBankName().equals(other.getWordBankName())"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "jascxx"
        },
        "content": "                \u0026\u0026 getGamesPlayed() \u003d\u003d other.getGamesPlayed()"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "jascxx"
        },
        "content": "                \u0026\u0026 getFastestClear().equals(other.getFastestClear())"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "jascxx"
        },
        "content": "                \u0026\u0026 getCardStats().equals(other.getCardStats())"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "jascxx"
        },
        "content": "                \u0026\u0026 getScoreStats().equals(other.getScoreStats())"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "jascxx"
        },
        "content": "                \u0026\u0026 isReceivedBadgeEasy() \u003d\u003d other.isReceivedBadgeEasy()"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "jascxx"
        },
        "content": "                \u0026\u0026 isReceivedBadgeNormal() \u003d\u003d other.isReceivedBadgeNormal()"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "jascxx"
        },
        "content": "                \u0026\u0026 isReceivedBadgeHard() \u003d\u003d other.isReceivedBadgeHard();"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "jascxx"
        },
        "content": "    }"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "jascxx"
        },
        "content": ""
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "jascxx"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "jascxx"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "jascxx"
        },
        "content": "        StringBuilder sb \u003d new StringBuilder();"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "jascxx"
        },
        "content": "        return sb.append(wordBankName)"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "jascxx"
        },
        "content": "                .append(\"\\n\")"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "jascxx"
        },
        "content": "                .append(\"played:\")"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "jascxx"
        },
        "content": "                .append(gamesPlayed)"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "jascxx"
        },
        "content": "                .append(\"\\n\")"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "jascxx"
        },
        "content": "                .append(\"fastest perfect:\")"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "jascxx"
        },
        "content": "                .append(fastestClear)"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "jascxx"
        },
        "content": "                .append(\"\\n\")"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "jascxx"
        },
        "content": "                .append(cardStats)"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "jascxx"
        },
        "content": "                .append(\"\\n\")"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "jascxx"
        },
        "content": "                .append(scoreStats)"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "jascxx"
        },
        "content": "                .append(\"\\n\")"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "jascxx"
        },
        "content": "                .append(isReceivedBadgeEasy())"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "jascxx"
        },
        "content": "                .append(isReceivedBadgeNormal())"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "jascxx"
        },
        "content": "                .append(isReceivedBadgeHard()).toString();"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "jascxx"
        },
        "content": "    }"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "jascxx"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "dragontho": 7,
      "jascxx": 196
    }
  },
  {
    "path": "src/main/java/seedu/address/storage/Storage.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "chrischenhui"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.exceptions.DataConversionException;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.ReadOnlyUserPrefs;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.UserPrefs;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "jascxx"
        },
        "content": "import seedu.address.model.globalstatistics.GlobalStatistics;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "chrischenhui"
        },
        "content": "import seedu.address.model.wordbank.WordBank;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "chrischenhui"
        },
        "content": "import seedu.address.model.wordbanklist.ReadOnlyWordBankList;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "jascxx"
        },
        "content": "import seedu.address.model.wordbankstatslist.WordBankStatisticsList;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "jascxx"
        },
        "content": "import seedu.address.statistics.WordBankStatistics;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "dragontho"
        },
        "content": "import seedu.address.storage.appsettings.AppSettingsStorage;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "jascxx"
        },
        "content": "import seedu.address.storage.globalstatistics.GlobalStatisticsStorage;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "jascxx"
        },
        "content": "import seedu.address.storage.statistics.WordBankStatisticsListStorage;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "chrischenhui"
        },
        "content": "import seedu.address.storage.userprefs.UserPrefsStorage;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "chrischenhui"
        },
        "content": "import seedu.address.storage.wordbanks.WordBankListStorage;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": " * API of the Storage component"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "jascxx"
        },
        "content": "public interface Storage extends WordBankListStorage, UserPrefsStorage, WordBankStatisticsListStorage,"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "dragontho"
        },
        "content": "        GlobalStatisticsStorage, AppSettingsStorage {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "jascxx"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "chrischenhui"
        },
        "content": "    // \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d word bank list \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "chrischenhui"
        },
        "content": "    Optional\u003cReadOnlyWordBankList\u003e getWordBankList();"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "chrischenhui"
        },
        "content": "    ObservableList\u003cWordBank\u003e getFilteredWordBankList();"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "chrischenhui"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "chrischenhui"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "chrischenhui"
        },
        "content": "    void createWordBank(String wordBankName);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "chrischenhui"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "chrischenhui"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "chrischenhui"
        },
        "content": "    void removeWordBank(String wordBankName);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "chrischenhui"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "chrischenhui"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "chrischenhui"
        },
        "content": "    void importWordBank(Path filePath, String wordBankName);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "chrischenhui"
        },
        "content": "    void exportWordBank(String wordBankName, Path filePath);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "chrischenhui"
        },
        "content": "    void updateWordBank(WordBank wordBank);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "chrischenhui"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "chrischenhui"
        },
        "content": "    Path getWordBanksFilePath();"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "jascxx"
        },
        "content": "    // \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d word bank statistics \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "jascxx"
        },
        "content": "    Path getWordBankStatisticsListFilePath();"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "jascxx"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "jascxx"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "jascxx"
        },
        "content": "    WordBankStatisticsList getWordBankStatisticsList();"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "jascxx"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "chrischenhui"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "jascxx"
        },
        "content": "    void saveWordBankStatistics(WordBankStatistics statistics, Path filePath) throws IOException;"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "jascxx"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "chrischenhui"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "jascxx"
        },
        "content": "    // \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d global statistics \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "jascxx"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "jascxx"
        },
        "content": "    Path getGlobalStatisticsFilePath();"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "jascxx"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "jascxx"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "jascxx"
        },
        "content": "    void saveGlobalStatistics(GlobalStatistics globalStatistics) throws IOException;"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "jascxx"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "jascxx"
        },
        "content": "    // \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d user prefs \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "    Optional\u003cUserPrefs\u003e readUserPrefs() throws DataConversionException, IOException;"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "    void saveUserPrefs(ReadOnlyUserPrefs userPrefs) throws IOException;"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "dragontho": 2,
      "jascxx": 23,
      "chrischenhui": 23,
      "-": 32
    }
  },
  {
    "path": "src/main/java/seedu/address/storage/StorageManager.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "chrischenhui"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.exceptions.DataConversionException;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.ReadOnlyUserPrefs;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.UserPrefs;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "dragontho"
        },
        "content": "import seedu.address.model.appsettings.AppSettings;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "jascxx"
        },
        "content": "import seedu.address.model.globalstatistics.GlobalStatistics;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "chrischenhui"
        },
        "content": "import seedu.address.model.wordbank.WordBank;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "chrischenhui"
        },
        "content": "import seedu.address.model.wordbanklist.ReadOnlyWordBankList;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "jascxx"
        },
        "content": "import seedu.address.model.wordbankstatslist.WordBankStatisticsList;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "jascxx"
        },
        "content": "import seedu.address.statistics.WordBankStatistics;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "dragontho"
        },
        "content": "import seedu.address.storage.appsettings.AppSettingsStorage;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "jascxx"
        },
        "content": "import seedu.address.storage.globalstatistics.GlobalStatisticsStorage;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "jascxx"
        },
        "content": "import seedu.address.storage.statistics.WordBankStatisticsListStorage;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "chrischenhui"
        },
        "content": "import seedu.address.storage.userprefs.UserPrefsStorage;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "chrischenhui"
        },
        "content": "import seedu.address.storage.wordbanks.WordBankListStorage;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "chrischenhui"
        },
        "content": " * Manages storage of Dukemon data in local storage."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "public class StorageManager implements Storage {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final Logger logger \u003d LogsCenter.getLogger(StorageManager.class);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "chrischenhui"
        },
        "content": "    private WordBankListStorage wordBankListStorage;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    private UserPrefsStorage userPrefsStorage;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "jascxx"
        },
        "content": "    private WordBankStatisticsListStorage wbStatsStorage;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "jascxx"
        },
        "content": "    private GlobalStatisticsStorage globalStatsStorage;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "dragontho"
        },
        "content": "    private AppSettingsStorage settingsStorage;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "jascxx"
        },
        "content": "    public StorageManager(WordBankListStorage wordBankListStorage,"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "jascxx"
        },
        "content": "                          UserPrefsStorage userPrefsStorage,"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "jascxx"
        },
        "content": "                          WordBankStatisticsListStorage wbStatsStorage,"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "dragontho"
        },
        "content": "                          GlobalStatisticsStorage globalStatsStorage,"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "dragontho"
        },
        "content": "                          AppSettingsStorage settingsStorage) {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        super();"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "chrischenhui"
        },
        "content": "        this.wordBankListStorage \u003d wordBankListStorage;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        this.userPrefsStorage \u003d userPrefsStorage;"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "jascxx"
        },
        "content": "        this.wbStatsStorage \u003d wbStatsStorage;"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "dragontho"
        },
        "content": "        this.settingsStorage \u003d settingsStorage;"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "jascxx"
        },
        "content": "        this.globalStatsStorage \u003d globalStatsStorage;"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    // \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d UserPrefs methods \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    public Path getUserPrefsFilePath() {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "        return userPrefsStorage.getUserPrefsFilePath();"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    public Optional\u003cUserPrefs\u003e readUserPrefs() throws DataConversionException, IOException {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "        return userPrefsStorage.readUserPrefs();"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "    public void saveUserPrefs(ReadOnlyUserPrefs userPrefs) throws IOException {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "        userPrefsStorage.saveUserPrefs(userPrefs);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "chrischenhui"
        },
        "content": "    // \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d WordBankList methods \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "chrischenhui"
        },
        "content": "    public Optional\u003cReadOnlyWordBankList\u003e getWordBankList() {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "chrischenhui"
        },
        "content": "        return wordBankListStorage.getWordBankList();"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "chrischenhui"
        },
        "content": "    public ObservableList\u003cWordBank\u003e getFilteredWordBankList() {"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "chrischenhui"
        },
        "content": "        return wordBankListStorage.getFilteredWordBankList();"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "chrischenhui"
        },
        "content": "    public void createWordBank(String wordBankName) {"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "chrischenhui"
        },
        "content": "        wordBankListStorage.createWordBank(wordBankName);"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "chrischenhui"
        },
        "content": "    public void removeWordBank(String wordBankName) {"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "chrischenhui"
        },
        "content": "        wordBankListStorage.removeWordBank(wordBankName);"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "chrischenhui"
        },
        "content": "    public void importWordBank(Path filePath, String wordBankName) {"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "chrischenhui"
        },
        "content": "        wordBankListStorage.importWordBank(filePath, wordBankName);"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "chrischenhui"
        },
        "content": "    public void exportWordBank(String wordBankName, Path filePath) {"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "chrischenhui"
        },
        "content": "        wordBankListStorage.exportWordBank(wordBankName, filePath);"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "chrischenhui"
        },
        "content": "    public void updateWordBank(WordBank wordBank) {"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "chrischenhui"
        },
        "content": "        wordBankListStorage.updateWordBank(wordBank);"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "chrischenhui"
        },
        "content": ""
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "chrischenhui"
        },
        "content": "    public Path getWordBanksFilePath() {"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "chrischenhui"
        },
        "content": "        return wordBankListStorage.getWordBanksFilePath();"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "chrischenhui"
        },
        "content": "    }"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "chrischenhui"
        },
        "content": ""
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "jascxx"
        },
        "content": "    // \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d WordBankStatistics methods \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "jascxx"
        },
        "content": ""
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "jascxx"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "jascxx"
        },
        "content": "    public WordBankStatisticsList getWordBankStatisticsList() {"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "jascxx"
        },
        "content": "        return wbStatsStorage.getWordBankStatisticsList();"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "jascxx"
        },
        "content": "    }"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "jascxx"
        },
        "content": ""
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "jascxx"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "jascxx"
        },
        "content": "    public void saveWordBankStatistics(WordBankStatistics wbStats, Path filePath) throws IOException {"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "        logger.fine(\"Attempting to write to data file: \" + filePath);"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "jascxx"
        },
        "content": "        wbStatsStorage.saveWordBankStatistics(wbStats, filePath);"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "jascxx"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "jascxx"
        },
        "content": "    public Path getWordBankStatisticsListFilePath() {"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "jascxx"
        },
        "content": "        return wbStatsStorage.getWordBankStatisticsListFilePath();"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "jascxx"
        },
        "content": "    }"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "jascxx"
        },
        "content": ""
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "jascxx"
        },
        "content": ""
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "jascxx"
        },
        "content": "    // \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d GlobalStatistics methods \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "jascxx"
        },
        "content": ""
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "jascxx"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "jascxx"
        },
        "content": "    public void saveGlobalStatistics(GlobalStatistics globalStatistics) throws IOException {"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "jascxx"
        },
        "content": "        saveGlobalStatistics(globalStatistics, globalStatsStorage.getGlobalStatisticsFilePath());"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "jascxx"
        },
        "content": "    }"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "jascxx"
        },
        "content": ""
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "jascxx"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "jascxx"
        },
        "content": "    public void saveGlobalStatistics(GlobalStatistics globalStatistics, Path filePath) throws IOException {"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "jascxx"
        },
        "content": "        logger.fine(\"Attempting to write to data file: \" + filePath);"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "jascxx"
        },
        "content": "        globalStatsStorage.saveGlobalStatistics(globalStatistics, filePath);"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "jascxx"
        },
        "content": "    }"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "jascxx"
        },
        "content": ""
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "jascxx"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "jascxx"
        },
        "content": "    public Path getGlobalStatisticsFilePath() {"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "jascxx"
        },
        "content": "        return globalStatsStorage.getGlobalStatisticsFilePath();"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "jascxx"
        },
        "content": "    }"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "jascxx"
        },
        "content": ""
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "jascxx"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "jascxx"
        },
        "content": "    public GlobalStatistics getGlobalStatistics() {"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "jascxx"
        },
        "content": "        return globalStatsStorage.getGlobalStatistics();"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "jascxx"
        },
        "content": "    }"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "jascxx"
        },
        "content": ""
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "jascxx"
        },
        "content": ""
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "jascxx"
        },
        "content": "    // \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d static methods \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "jascxx"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "jascxx"
        },
        "content": "     * Get the path to the wordbank statistics given the path to wordbank"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "jascxx"
        },
        "content": "     * e.g. getWbStatsStoragePath(\"data/pokemon.json\") \u003d\u003d \"data/wbstats/pokemon.json\""
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "jascxx"
        },
        "content": "     * @param wbPath The path of the wordbank"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "jascxx"
        },
        "content": "     */"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "jascxx"
        },
        "content": "    public static Path getWbStatsStoragePath(Path wbPath) {"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "chrischenhui"
        },
        "content": "        return Path.of(wbPath.toString(), \"wbstats\", wbPath.getFileName().toString());"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "jascxx"
        },
        "content": "    }"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "dragontho"
        },
        "content": ""
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "dragontho"
        },
        "content": "    //\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d AppSettings methods \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "dragontho"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "dragontho"
        },
        "content": "    public Path getAppSettingsFilePath() {"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "dragontho"
        },
        "content": "        return settingsStorage.getAppSettingsFilePath();"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "dragontho"
        },
        "content": "    }"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "dragontho"
        },
        "content": ""
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "dragontho"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "dragontho"
        },
        "content": "    public Optional\u003cAppSettings\u003e readAppSettings() throws DataConversionException, IOException {"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "dragontho"
        },
        "content": "        return readAppSettings(settingsStorage.getAppSettingsFilePath());"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "dragontho"
        },
        "content": "    }"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "dragontho"
        },
        "content": ""
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "dragontho"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "dragontho"
        },
        "content": "    public Optional\u003cAppSettings\u003e readAppSettings(Path filePath) throws DataConversionException, IOException {"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "dragontho"
        },
        "content": "        return settingsStorage.readAppSettings(filePath);"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "dragontho"
        },
        "content": "    }"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "dragontho"
        },
        "content": ""
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "dragontho"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "dragontho"
        },
        "content": "    public void saveAppSettings(AppSettings settings) throws IOException {"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "dragontho"
        },
        "content": "        saveAppSettings(settings, settingsStorage.getAppSettingsFilePath());"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "dragontho"
        },
        "content": "    }"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "dragontho"
        },
        "content": ""
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "dragontho"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "dragontho"
        },
        "content": "    public void saveAppSettings(AppSettings settings, Path filePath) throws IOException {"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "dragontho"
        },
        "content": "        settingsStorage.saveAppSettings(settings, filePath);"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "dragontho"
        },
        "content": "    }"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "dragontho"
        },
        "content": ""
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "dragontho"
        },
        "content": ""
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "dragontho": 34,
      "jascxx": 60,
      "chrischenhui": 29,
      "-": 68
    }
  },
  {
    "path": "src/main/java/seedu/address/storage/appsettings/AppSettingsStorage.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "dragontho"
        },
        "content": "package seedu.address.storage.appsettings;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "dragontho"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "dragontho"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "dragontho"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "dragontho"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "dragontho"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "dragontho"
        },
        "content": "import seedu.address.commons.exceptions.DataConversionException;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "dragontho"
        },
        "content": "import seedu.address.model.appsettings.AppSettings;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "dragontho"
        },
        "content": "import seedu.address.statistics.WordBankStatistics;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "dragontho"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "dragontho"
        },
        "content": "/**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "dragontho"
        },
        "content": " * Represents a storage for {@link WordBankStatistics}."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "dragontho"
        },
        "content": " */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "dragontho"
        },
        "content": "public interface AppSettingsStorage {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "dragontho"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "dragontho"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "dragontho"
        },
        "content": "     * Returns the file path of the data file."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "dragontho"
        },
        "content": "     */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "dragontho"
        },
        "content": "    Path getAppSettingsFilePath();"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "dragontho"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "dragontho"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "dragontho"
        },
        "content": "     * Returns app settings data as a {@link AppSettings}."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "dragontho"
        },
        "content": "     *   Returns {@code Optional.empty()} if storage file is not found."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "dragontho"
        },
        "content": "     * @throws DataConversionException if the data in storage is not in the expected format."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "dragontho"
        },
        "content": "     * @throws IOException if there was any problem when reading from the storage."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "dragontho"
        },
        "content": "     */"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "dragontho"
        },
        "content": "    Optional\u003cAppSettings\u003e readAppSettings() throws DataConversionException, IOException;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "dragontho"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "dragontho"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "dragontho"
        },
        "content": "     * @see #getAppSettingsFilePath()"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "dragontho"
        },
        "content": "     */"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "dragontho"
        },
        "content": "    Optional\u003cAppSettings\u003e readAppSettings(Path filePath) throws DataConversionException, IOException;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "dragontho"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "dragontho"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "dragontho"
        },
        "content": "     * Saves the given {@link seedu.address.statistics.GameStatistics} to the storage."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "dragontho"
        },
        "content": "     * @param settings The settings to be saved, cannot be null."
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "dragontho"
        },
        "content": "     * @throws IOException if there was any problem writing to the file."
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "dragontho"
        },
        "content": "     */"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "dragontho"
        },
        "content": "    void saveAppSettings(AppSettings settings) throws IOException;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "dragontho"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "dragontho"
        },
        "content": "    void saveAppSettings(AppSettings settings, Path filePath) throws IOException;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "dragontho"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "dragontho": 42
    }
  },
  {
    "path": "src/main/java/seedu/address/storage/appsettings/JsonAppSettingsStorage.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "dragontho"
        },
        "content": "package seedu.address.storage.appsettings;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "dragontho"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "dragontho"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "dragontho"
        },
        "content": "import static seedu.address.commons.util.CollectionUtil.requireAllNonNull;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "dragontho"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "dragontho"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "dragontho"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "dragontho"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "dragontho"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "dragontho"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "dragontho"
        },
        "content": "import seedu.address.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "dragontho"
        },
        "content": "import seedu.address.commons.exceptions.DataConversionException;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "dragontho"
        },
        "content": "import seedu.address.commons.util.JsonUtil;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "dragontho"
        },
        "content": "import seedu.address.model.appsettings.AppSettings;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "dragontho"
        },
        "content": "/**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "dragontho"
        },
        "content": " * A class to access {@code WordBankStatistics} data stored as a json file on the hard disk."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "dragontho"
        },
        "content": " */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "dragontho"
        },
        "content": "public class JsonAppSettingsStorage implements AppSettingsStorage {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "dragontho"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "dragontho"
        },
        "content": "    private static final Logger logger \u003d LogsCenter.getLogger(JsonAppSettingsStorage.class);"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "dragontho"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "dragontho"
        },
        "content": "    private Path filePath;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "dragontho"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "dragontho"
        },
        "content": "    public JsonAppSettingsStorage(Path filePath) {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "dragontho"
        },
        "content": "        this.filePath \u003d filePath;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "dragontho"
        },
        "content": "    }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "dragontho"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "dragontho"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "dragontho"
        },
        "content": "    public Path getAppSettingsFilePath() {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "dragontho"
        },
        "content": "        return filePath;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "dragontho"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "dragontho"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "dragontho"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "dragontho"
        },
        "content": "    public Optional\u003cAppSettings\u003e readAppSettings() throws DataConversionException, IOException {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "dragontho"
        },
        "content": "        return readAppSettings(filePath);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "dragontho"
        },
        "content": "    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "dragontho"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "dragontho"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "dragontho"
        },
        "content": "     * Similar to {@link #readAppSettings()}."
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "dragontho"
        },
        "content": "     *"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "dragontho"
        },
        "content": "     * @param filePath location of the data. Cannot be null."
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "dragontho"
        },
        "content": "     * @throws DataConversionException if the file is not in the correct format."
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "dragontho"
        },
        "content": "     */"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "dragontho"
        },
        "content": "    public Optional\u003cAppSettings\u003e readAppSettings(Path filePath) throws DataConversionException {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "dragontho"
        },
        "content": "        requireNonNull(filePath);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "dragontho"
        },
        "content": "        return JsonUtil.readJsonFile(filePath, AppSettings.class);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "dragontho"
        },
        "content": "    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "dragontho"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "dragontho"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "dragontho"
        },
        "content": "    public void saveAppSettings(AppSettings settings) throws IOException {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "dragontho"
        },
        "content": "        saveAppSettings(settings, filePath);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "dragontho"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "dragontho"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "dragontho"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "dragontho"
        },
        "content": "     * Similar to {@link #saveAppSettings(AppSettings)}."
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "dragontho"
        },
        "content": "     *"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "dragontho"
        },
        "content": "     * @param statistics statistics to be saved, cannot be null."
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "dragontho"
        },
        "content": "     * @param filePath location of the data. Cannot be null."
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "dragontho"
        },
        "content": "     */"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "dragontho"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "dragontho"
        },
        "content": "    public void saveAppSettings(AppSettings statistics, Path filePath)"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "dragontho"
        },
        "content": "            throws IOException {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "dragontho"
        },
        "content": "        requireAllNonNull(statistics, filePath);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "dragontho"
        },
        "content": "        JsonUtil.saveJsonFile(statistics, filePath);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "dragontho"
        },
        "content": "    }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "dragontho"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "dragontho"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "dragontho": 67
    }
  },
  {
    "path": "src/main/java/seedu/address/storage/globalstatistics/GlobalStatisticsStorage.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jascxx"
        },
        "content": "package seedu.address.storage.globalstatistics;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "jascxx"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "jascxx"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "jascxx"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "jascxx"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "jascxx"
        },
        "content": "import seedu.address.model.globalstatistics.GlobalStatistics;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "jascxx"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "jascxx"
        },
        "content": "/**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "jascxx"
        },
        "content": " * Represents a storage for {@link GlobalStatistics}."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "jascxx"
        },
        "content": " */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "jascxx"
        },
        "content": "public interface GlobalStatisticsStorage {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "jascxx"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "jascxx"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "jascxx"
        },
        "content": "     * Returns the file path of the data file."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "jascxx"
        },
        "content": "     */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "jascxx"
        },
        "content": "    Path getGlobalStatisticsFilePath();"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "jascxx"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "jascxx"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "jascxx"
        },
        "content": "     * Saves the given {@link GlobalStatistics} to the storage."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "jascxx"
        },
        "content": "     * @param statistics The statistics to be saved, cannot be null."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "jascxx"
        },
        "content": "     * @throws IOException if there was any problem writing to the file."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "jascxx"
        },
        "content": "     */"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "jascxx"
        },
        "content": "    void saveGlobalStatistics(GlobalStatistics statistics) throws IOException;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "jascxx"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "jascxx"
        },
        "content": "    void saveGlobalStatistics(GlobalStatistics statistics, Path filePath) throws IOException;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "jascxx"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "jascxx"
        },
        "content": "    GlobalStatistics getGlobalStatistics();"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "jascxx"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "jascxx": 28
    }
  },
  {
    "path": "src/main/java/seedu/address/storage/globalstatistics/JsonAdaptedWeeklyPlayed.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jascxx"
        },
        "content": "package seedu.address.storage.globalstatistics;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "jascxx"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "jascxx"
        },
        "content": "import java.time.DayOfWeek;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "jascxx"
        },
        "content": "import java.time.LocalDate;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "jascxx"
        },
        "content": "import java.util.HashMap;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "jascxx"
        },
        "content": "import java.util.Map;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "jascxx"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "jascxx"
        },
        "content": "import com.fasterxml.jackson.annotation.JsonProperty;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "jascxx"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "jascxx"
        },
        "content": "import seedu.address.model.globalstatistics.WeeklyPlayed;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "jascxx"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "jascxx"
        },
        "content": "/**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "jascxx"
        },
        "content": " * Jackson-friendly version of {@link WeeklyPlayed}."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "jascxx"
        },
        "content": " */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "jascxx"
        },
        "content": "public class JsonAdaptedWeeklyPlayed {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "jascxx"
        },
        "content": "    private Map\u003cInteger, Integer\u003e days;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "jascxx"
        },
        "content": "    private long startOfWeekEpochDays;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "jascxx"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "jascxx"
        },
        "content": "    public JsonAdaptedWeeklyPlayed(@JsonProperty(\"days\") Map\u003cInteger, Integer\u003e days,"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "jascxx"
        },
        "content": "                                   @JsonProperty(\"startOfWeek\") long startOfWeekEpochDays) {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "jascxx"
        },
        "content": "        this.days \u003d new HashMap\u003c\u003e();"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "jascxx"
        },
        "content": "        this.days.putAll(days);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "jascxx"
        },
        "content": "        this.startOfWeekEpochDays \u003d startOfWeekEpochDays;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "jascxx"
        },
        "content": "    }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "jascxx"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "jascxx"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "jascxx"
        },
        "content": "     * Converts a given {@code WeeklyPlayed} into this class for Jackson use."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "jascxx"
        },
        "content": "     */"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "jascxx"
        },
        "content": "    public JsonAdaptedWeeklyPlayed(WeeklyPlayed weeklyPlayed) {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "jascxx"
        },
        "content": "        this.days \u003d new HashMap\u003c\u003e();"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "jascxx"
        },
        "content": "        for (Map.Entry\u003cDayOfWeek, Integer\u003e entry : weeklyPlayed.getNumPlayed().entrySet()) {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "jascxx"
        },
        "content": "            this.days.put(entry.getKey().getValue(), entry.getValue());"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "jascxx"
        },
        "content": "        }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "jascxx"
        },
        "content": "        this.startOfWeekEpochDays \u003d weeklyPlayed.getStartOfWeek().toEpochDay();"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "jascxx"
        },
        "content": "    }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "jascxx"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "jascxx"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "jascxx"
        },
        "content": "     * Converts this weekly played into the model\u0027s {@code WeeklyPlayed} object."
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "jascxx"
        },
        "content": "     */"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "jascxx"
        },
        "content": "    public WeeklyPlayed toModelType() {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "jascxx"
        },
        "content": "        Map\u003cDayOfWeek, Integer\u003e map \u003d new HashMap\u003c\u003e();"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "jascxx"
        },
        "content": "        for (Map.Entry\u003cInteger, Integer\u003e entry : days.entrySet()) {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "jascxx"
        },
        "content": "            map.put(DayOfWeek.of(entry.getKey()), entry.getValue());"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "jascxx"
        },
        "content": "        }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "jascxx"
        },
        "content": "        return new WeeklyPlayed(map, LocalDate.ofEpochDay(startOfWeekEpochDays));"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "jascxx"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "jascxx"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "jascxx": 47
    }
  },
  {
    "path": "src/main/java/seedu/address/storage/globalstatistics/JsonGlobalStatisticsStorage.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jascxx"
        },
        "content": "package seedu.address.storage.globalstatistics;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "jascxx"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "jascxx"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "jascxx"
        },
        "content": "import static seedu.address.commons.util.CollectionUtil.requireAllNonNull;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "jascxx"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "jascxx"
        },
        "content": "import java.io.File;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "jascxx"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "jascxx"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "jascxx"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "jascxx"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "jascxx"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "jascxx"
        },
        "content": "import seedu.address.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "jascxx"
        },
        "content": "import seedu.address.commons.exceptions.DataConversionException;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "jascxx"
        },
        "content": "import seedu.address.commons.util.JsonUtil;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "jascxx"
        },
        "content": "import seedu.address.model.globalstatistics.GlobalStatistics;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "jascxx"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "jascxx"
        },
        "content": "/**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "jascxx"
        },
        "content": " * A class to access {@code GlobalStatistics} data stored as a json file on the hard disk."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "jascxx"
        },
        "content": " */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "jascxx"
        },
        "content": "public class JsonGlobalStatisticsStorage implements GlobalStatisticsStorage {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "jascxx"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "jascxx"
        },
        "content": "    private static final Logger logger \u003d LogsCenter.getLogger(JsonGlobalStatisticsStorage.class);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "jascxx"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "jascxx"
        },
        "content": "    private GlobalStatistics globalStatistics;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "jascxx"
        },
        "content": "    private Path dataFilePath;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "jascxx"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "jascxx"
        },
        "content": "    public JsonGlobalStatisticsStorage(Path filePath) {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "jascxx"
        },
        "content": "        requireNonNull(filePath);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "jascxx"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "jascxx"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "jascxx"
        },
        "content": "        this.dataFilePath \u003d Path.of(filePath.toString(), \"globalstats\", \"gstats.json\");"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "jascxx"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "jascxx"
        },
        "content": "            Optional\u003cJsonSerializableGlobalStatistics\u003e jsonGlobalStats \u003d JsonUtil.readJsonFile("
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "jascxx"
        },
        "content": "                    dataFilePath, JsonSerializableGlobalStatistics.class);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "jascxx"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "jascxx"
        },
        "content": "            if (jsonGlobalStats.isEmpty()) {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "jascxx"
        },
        "content": "                this.globalStatistics \u003d new GlobalStatistics();"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "jascxx"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "jascxx"
        },
        "content": "                this.globalStatistics \u003d jsonGlobalStats.get().toModelType();"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "jascxx"
        },
        "content": "            }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "jascxx"
        },
        "content": "        } catch (DataConversionException e) {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "jascxx"
        },
        "content": "            logger.info(\"Cannot convert file to global statistics \" + e);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "jascxx"
        },
        "content": "            this.globalStatistics \u003d new GlobalStatistics();"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "jascxx"
        },
        "content": "        }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "jascxx"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "jascxx"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "jascxx"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "jascxx"
        },
        "content": "    public Path getGlobalStatisticsFilePath() {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "jascxx"
        },
        "content": "        return dataFilePath;"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "jascxx"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "jascxx"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "jascxx"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "jascxx"
        },
        "content": "    public void saveGlobalStatistics(GlobalStatistics statistics) throws IOException {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "jascxx"
        },
        "content": "        saveGlobalStatistics(statistics, dataFilePath);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "jascxx"
        },
        "content": "    }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "jascxx"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "jascxx"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "jascxx"
        },
        "content": "     * Similar to {@link #saveGlobalStatistics(GlobalStatistics)}."
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "jascxx"
        },
        "content": "     *"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "jascxx"
        },
        "content": "     * @param statistics statistics to be saved, cannot be null."
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "jascxx"
        },
        "content": "     * @param filePath location of the data. Cannot be null."
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "jascxx"
        },
        "content": "     */"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "jascxx"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "jascxx"
        },
        "content": "    public void saveGlobalStatistics(GlobalStatistics statistics, Path filePath)"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "jascxx"
        },
        "content": "            throws IOException {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "jascxx"
        },
        "content": "        requireAllNonNull(statistics, filePath);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "jascxx"
        },
        "content": "        File directory \u003d new File(filePath.getParent().toUri());"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "jascxx"
        },
        "content": "        if (!directory.exists()) {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "jascxx"
        },
        "content": "            boolean success \u003d directory.mkdir();"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "jascxx"
        },
        "content": "            if (!success) {"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "jascxx"
        },
        "content": "                logger.fine(\"Cannot make directory for globalstats\");"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "jascxx"
        },
        "content": "            }"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "jascxx"
        },
        "content": "        }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "jascxx"
        },
        "content": "        JsonUtil.saveJsonFile(new JsonSerializableGlobalStatistics(statistics), filePath);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "jascxx"
        },
        "content": "    }"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "jascxx"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "jascxx"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "jascxx"
        },
        "content": "    public GlobalStatistics getGlobalStatistics() {"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "jascxx"
        },
        "content": "        return globalStatistics;"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "jascxx"
        },
        "content": "    }"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "jascxx"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "jascxx": 81
    }
  },
  {
    "path": "src/main/java/seedu/address/storage/globalstatistics/JsonSerializableGlobalStatistics.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jascxx"
        },
        "content": "package seedu.address.storage.globalstatistics;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "jascxx"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "jascxx"
        },
        "content": "import com.fasterxml.jackson.annotation.JsonCreator;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "jascxx"
        },
        "content": "import com.fasterxml.jackson.annotation.JsonProperty;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "jascxx"
        },
        "content": "import com.fasterxml.jackson.annotation.JsonRootName;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "jascxx"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "jascxx"
        },
        "content": "import seedu.address.model.globalstatistics.GlobalStatistics;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "jascxx"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "jascxx"
        },
        "content": "/**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "jascxx"
        },
        "content": " * A Global Statistics class that is serializable in JSON format."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "jascxx"
        },
        "content": " */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "jascxx"
        },
        "content": "@JsonRootName(value \u003d \"globalstats\")"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "jascxx"
        },
        "content": "public class JsonSerializableGlobalStatistics {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "jascxx"
        },
        "content": "    private int numPlayed;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "jascxx"
        },
        "content": "    private JsonAdaptedWeeklyPlayed weeklyPlayed;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "jascxx"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "jascxx"
        },
        "content": "    @JsonCreator"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "jascxx"
        },
        "content": "    public JsonSerializableGlobalStatistics(@JsonProperty(\"numPlayed\") int numPlayed,"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "jascxx"
        },
        "content": "                                            @JsonProperty(\"weeklyPlayed\") JsonAdaptedWeeklyPlayed weeklyPlayed) {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "jascxx"
        },
        "content": "        this.numPlayed \u003d numPlayed;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "jascxx"
        },
        "content": "        this.weeklyPlayed \u003d weeklyPlayed;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "jascxx"
        },
        "content": "    }"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "jascxx"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "jascxx"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "jascxx"
        },
        "content": "     * Construct a json serializable version of the parameter {@code globalStats}."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "jascxx"
        },
        "content": "     */"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "jascxx"
        },
        "content": "    public JsonSerializableGlobalStatistics(GlobalStatistics globalStats) {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "jascxx"
        },
        "content": "        this.numPlayed \u003d globalStats.getNumPlayed();"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "jascxx"
        },
        "content": "        this.weeklyPlayed \u003d new JsonAdaptedWeeklyPlayed(globalStats.getWeeklyPlayed());"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "jascxx"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "jascxx"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "jascxx"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "jascxx"
        },
        "content": "     * Converts this into the {@code GlobalStatistics} object."
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "jascxx"
        },
        "content": "     */"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "jascxx"
        },
        "content": "    public GlobalStatistics toModelType() {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "jascxx"
        },
        "content": "        return new GlobalStatistics(numPlayed,"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "jascxx"
        },
        "content": "                weeklyPlayed.toModelType());"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "jascxx"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "jascxx"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "jascxx"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "jascxx"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "jascxx"
        },
        "content": "        return numPlayed + \" times played.\";"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "jascxx"
        },
        "content": "    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "jascxx"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "jascxx": 44
    }
  },
  {
    "path": "src/main/java/seedu/address/storage/statistics/JsonAdaptedCardStatistics.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jascxx"
        },
        "content": "package seedu.address.storage.statistics;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "jascxx"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "jascxx"
        },
        "content": "import com.fasterxml.jackson.annotation.JsonProperty;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "dragontho"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "jascxx"
        },
        "content": "import seedu.address.statistics.CardStatistics;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "jascxx"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "jascxx"
        },
        "content": "/**"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "jascxx"
        },
        "content": " * Jackson-friendly version of {@link CardStatistics}."
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "jascxx"
        },
        "content": " */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "jascxx"
        },
        "content": "public class JsonAdaptedCardStatistics {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "jascxx"
        },
        "content": "    private final String cardId;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "jascxx"
        },
        "content": "    private final int numShown;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "jascxx"
        },
        "content": "    private final int numCorrect;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "jascxx"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "jascxx"
        },
        "content": "    public JsonAdaptedCardStatistics(@JsonProperty(\"id\") String cardId,"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "jascxx"
        },
        "content": "                                     @JsonProperty(\"numShown\") int numShown,"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "jascxx"
        },
        "content": "                                     @JsonProperty(\"numCorrect\") int numCorrect) {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "jascxx"
        },
        "content": "        this.cardId \u003d cardId;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "jascxx"
        },
        "content": "        this.numShown \u003d numShown;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "jascxx"
        },
        "content": "        this.numCorrect \u003d numCorrect;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "jascxx"
        },
        "content": "    }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "jascxx"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "jascxx"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "jascxx"
        },
        "content": "     * Converts a given {@code CardStatistics} into this class for Jackson use."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "jascxx"
        },
        "content": "     */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "jascxx"
        },
        "content": "    public JsonAdaptedCardStatistics(CardStatistics source) {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "jascxx"
        },
        "content": "        this.numShown \u003d source.getNumShown();"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "jascxx"
        },
        "content": "        this.numCorrect \u003d source.getNumCorrect();"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "jascxx"
        },
        "content": "        this.cardId \u003d source.getCardId();"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "jascxx"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "jascxx"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "jascxx"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "jascxx"
        },
        "content": "     * Converts this Jackson-friendly adapted object into the {@link CardStatistics} object."
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "jascxx"
        },
        "content": "     */"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "jascxx"
        },
        "content": "    public CardStatistics toModelType() {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "jascxx"
        },
        "content": "        return new CardStatistics(cardId, numShown, numCorrect);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "jascxx"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "dragontho"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "jascxx"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "dragontho": 2,
      "jascxx": 37
    }
  },
  {
    "path": "src/main/java/seedu/address/storage/statistics/JsonSerializableWordBankStatistics.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jascxx"
        },
        "content": "package seedu.address.storage.statistics;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "jascxx"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "dragontho"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "dragontho"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "dragontho"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "dragontho"
        },
        "content": "import java.util.stream.Collectors;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "dragontho"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "jascxx"
        },
        "content": "import com.fasterxml.jackson.annotation.JsonCreator;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "jascxx"
        },
        "content": "import com.fasterxml.jackson.annotation.JsonProperty;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "jascxx"
        },
        "content": "import com.fasterxml.jackson.annotation.JsonRootName;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "dragontho"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "jascxx"
        },
        "content": "import seedu.address.statistics.CardStatistics;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "jascxx"
        },
        "content": "import seedu.address.statistics.ScoreData;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "jascxx"
        },
        "content": "import seedu.address.statistics.WordBankStatistics;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "jascxx"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "jascxx"
        },
        "content": "/**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "jascxx"
        },
        "content": " * A Word Bank Statistics class that is serializable to JSON format."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "jascxx"
        },
        "content": " */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "jascxx"
        },
        "content": "@JsonRootName(value \u003d \"wbstats\")"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "jascxx"
        },
        "content": "public class JsonSerializableWordBankStatistics {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "jascxx"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "jascxx"
        },
        "content": "    private final String wordBankName;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "jascxx"
        },
        "content": "    private final int gamesPlayed;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "jascxx"
        },
        "content": "    private final Double fastestClear;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "jascxx"
        },
        "content": "    private final List\u003cJsonAdaptedCardStatistics\u003e cardStats \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "jascxx"
        },
        "content": "    private final List\u003cInteger\u003e scoreStats \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "jascxx"
        },
        "content": "    private final boolean badgeEasy;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "jascxx"
        },
        "content": "    private final boolean badgeNormal;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "jascxx"
        },
        "content": "    private final boolean badgeHard;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "jascxx"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "jascxx"
        },
        "content": "    @JsonCreator"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "jascxx"
        },
        "content": "    public JsonSerializableWordBankStatistics(@JsonProperty(\"name\") String wordBankName,"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "jascxx"
        },
        "content": "                                              @JsonProperty(\"gamesPlayed\") int gamesPlayed,"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "jascxx"
        },
        "content": "                                              @JsonProperty(\"fastestClear\") Double fastestClear,"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "jascxx"
        },
        "content": "                                              @JsonProperty(\"cardStats\") List\u003cJsonAdaptedCardStatistics\u003e cardStats,"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "jascxx"
        },
        "content": "                                              @JsonProperty(\"scoreStats\") List\u003cInteger\u003e scoreStats,"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "jascxx"
        },
        "content": "                                              @JsonProperty(\"badgeEasy\") boolean badgeEasy,"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "jascxx"
        },
        "content": "                                              @JsonProperty(\"badgeNormal\") boolean badgeNormal,"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "jascxx"
        },
        "content": "                                              @JsonProperty(\"badgeHard\") boolean badgeHard) {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "jascxx"
        },
        "content": "        this.wordBankName \u003d wordBankName;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "jascxx"
        },
        "content": "        this.gamesPlayed \u003d gamesPlayed;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "jascxx"
        },
        "content": "        this.fastestClear \u003d fastestClear;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "jascxx"
        },
        "content": "        this.cardStats.addAll(cardStats);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "jascxx"
        },
        "content": "        this.scoreStats.addAll(scoreStats);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "jascxx"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "jascxx"
        },
        "content": "        this.badgeEasy \u003d badgeEasy;"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "jascxx"
        },
        "content": "        this.badgeNormal \u003d badgeNormal;"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "jascxx"
        },
        "content": "        this.badgeHard \u003d badgeHard;"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "jascxx"
        },
        "content": "    }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "jascxx"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "jascxx"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "jascxx"
        },
        "content": "     * Construct a json serializable version of the parameter {@code wbStats}."
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "jascxx"
        },
        "content": "     */"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "jascxx"
        },
        "content": "    public JsonSerializableWordBankStatistics(WordBankStatistics wbStats) {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "jascxx"
        },
        "content": "        this.wordBankName \u003d wbStats.getWordBankName();"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "jascxx"
        },
        "content": "        this.gamesPlayed \u003d wbStats.getGamesPlayed();"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "jascxx"
        },
        "content": "        this.fastestClear \u003d wbStats.getFastestClear().orElse(null);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "jascxx"
        },
        "content": "        List\u003cJsonAdaptedCardStatistics\u003e cardStatsList \u003d wbStats.getCardStats()"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "jascxx"
        },
        "content": "                .stream()"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "jascxx"
        },
        "content": "                .map(JsonAdaptedCardStatistics::new)"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "jascxx"
        },
        "content": "                .collect(Collectors.toList());"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "jascxx"
        },
        "content": "        List\u003cInteger\u003e scoreDataList \u003d wbStats.getScoreStats()"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "jascxx"
        },
        "content": "                .stream()"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "jascxx"
        },
        "content": "                .map(ScoreData::getScore)"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "jascxx"
        },
        "content": "                .collect(Collectors.toList());"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "jascxx"
        },
        "content": "        this.cardStats.addAll(cardStatsList);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "jascxx"
        },
        "content": "        this.scoreStats.addAll(scoreDataList);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "jascxx"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "jascxx"
        },
        "content": "        this.badgeEasy \u003d wbStats.isReceivedBadgeEasy();"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "jascxx"
        },
        "content": "        this.badgeNormal \u003d wbStats.isReceivedBadgeNormal();"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "jascxx"
        },
        "content": "        this.badgeHard \u003d wbStats.isReceivedBadgeHard();"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "jascxx"
        },
        "content": "    }"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "jascxx"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "jascxx"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "jascxx"
        },
        "content": "     * Converts this into the {@code WordBankStatistics} object."
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "jascxx"
        },
        "content": "     */"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "jascxx"
        },
        "content": "    public WordBankStatistics toModelType() {"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "jascxx"
        },
        "content": "        List\u003cCardStatistics\u003e cardStatistics \u003d cardStats"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "jascxx"
        },
        "content": "                .stream()"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "jascxx"
        },
        "content": "                .map(JsonAdaptedCardStatistics::toModelType)"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "jascxx"
        },
        "content": "                .collect(Collectors.toList());"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "jascxx"
        },
        "content": "        List\u003cScoreData\u003e scoreStatistics \u003d scoreStats"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "jascxx"
        },
        "content": "                .stream()"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "jascxx"
        },
        "content": "                .map(ScoreData::new)"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "jascxx"
        },
        "content": "                .collect(Collectors.toList());"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "jascxx"
        },
        "content": "        return new WordBankStatistics(wordBankName,"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "jascxx"
        },
        "content": "                gamesPlayed,"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "jascxx"
        },
        "content": "                Optional.ofNullable(fastestClear),"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "jascxx"
        },
        "content": "                cardStatistics,"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "jascxx"
        },
        "content": "                scoreStatistics,"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "jascxx"
        },
        "content": "                badgeEasy, badgeNormal, badgeHard);"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "jascxx"
        },
        "content": "    }"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "jascxx"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "dragontho": 6,
      "jascxx": 87
    }
  },
  {
    "path": "src/main/java/seedu/address/storage/statistics/JsonWordBankStatisticsListStorage.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jascxx"
        },
        "content": "package seedu.address.storage.statistics;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "jascxx"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "jascxx"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "jascxx"
        },
        "content": "import static seedu.address.commons.util.CollectionUtil.requireAllNonNull;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "jascxx"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "jascxx"
        },
        "content": "import java.io.File;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "jascxx"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "jascxx"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "jascxx"
        },
        "content": "import java.nio.file.Paths;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "jascxx"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "jascxx"
        },
        "content": "import java.util.Collections;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "jascxx"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "jascxx"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "jascxx"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "jascxx"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "jascxx"
        },
        "content": "import seedu.address.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "jascxx"
        },
        "content": "import seedu.address.commons.exceptions.DataConversionException;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "jascxx"
        },
        "content": "import seedu.address.commons.util.JsonUtil;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "jascxx"
        },
        "content": "import seedu.address.model.wordbankstatslist.WordBankStatisticsList;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "jascxx"
        },
        "content": "import seedu.address.statistics.WordBankStatistics;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "jascxx"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "jascxx"
        },
        "content": "/**"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "jascxx"
        },
        "content": " * A class to access a list of {@code WordBankStatistics} data stored as a json file on the hard disk."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "jascxx"
        },
        "content": " */"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "jascxx"
        },
        "content": "public class JsonWordBankStatisticsListStorage implements WordBankStatisticsListStorage {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "jascxx"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "jascxx"
        },
        "content": "    private static final Logger logger \u003d LogsCenter.getLogger(JsonWordBankStatisticsListStorage.class);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "jascxx"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "jascxx"
        },
        "content": "    private WordBankStatisticsList wbStatsList;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "jascxx"
        },
        "content": "    private Path filePath;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "jascxx"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "jascxx"
        },
        "content": "    public JsonWordBankStatisticsListStorage(Path dataFilePath) {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "jascxx"
        },
        "content": "        requireNonNull(dataFilePath);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "jascxx"
        },
        "content": "        Path wbStatsFilePath \u003d Paths.get(dataFilePath.toString(), \"wbstats\");"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "jascxx"
        },
        "content": "        this.filePath \u003d wbStatsFilePath;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "jascxx"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "jascxx"
        },
        "content": "        File dataDirectory \u003d wbStatsFilePath.toFile();"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "jascxx"
        },
        "content": "        String[] pathArray \u003d dataDirectory.list();"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "jascxx"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "jascxx"
        },
        "content": "        if (pathArray \u003d\u003d null) {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "jascxx"
        },
        "content": "            this.wbStatsList \u003d new WordBankStatisticsList(Collections.emptyList());"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "jascxx"
        },
        "content": "            return;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "jascxx"
        },
        "content": "        }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "jascxx"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "jascxx"
        },
        "content": "        List\u003cWordBankStatistics\u003e wordBankStatsList \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "jascxx"
        },
        "content": "        for (String path : pathArray) {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "jascxx"
        },
        "content": "            if (!path.endsWith(\".json\")) {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "jascxx"
        },
        "content": "                continue;"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "jascxx"
        },
        "content": "            }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "jascxx"
        },
        "content": "            Path wbStatsPath \u003d Path.of(wbStatsFilePath.toString(), path);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "jascxx"
        },
        "content": "            Optional\u003cWordBankStatistics\u003e optionalWbStats \u003d readWordBankStatistics(wbStatsPath);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "jascxx"
        },
        "content": "            optionalWbStats.ifPresent(wordBankStatsList::add);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "jascxx"
        },
        "content": "        }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "jascxx"
        },
        "content": "        this.wbStatsList \u003d new WordBankStatisticsList(wordBankStatsList);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "jascxx"
        },
        "content": "    }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "jascxx"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "jascxx"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "jascxx"
        },
        "content": "     * Reads a word bank statistics from the data."
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "jascxx"
        },
        "content": "     * @param path The path of the word bank statistics to be read."
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "jascxx"
        },
        "content": "     */"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "jascxx"
        },
        "content": "    private Optional\u003cWordBankStatistics\u003e readWordBankStatistics(Path path) {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "jascxx"
        },
        "content": "        requireNonNull(path);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "jascxx"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "jascxx"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "jascxx"
        },
        "content": "            Optional\u003cJsonSerializableWordBankStatistics\u003e jsonWbStats \u003d JsonUtil.readJsonFile("
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "jascxx"
        },
        "content": "                    path, JsonSerializableWordBankStatistics.class);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "jascxx"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "jascxx"
        },
        "content": "            if (jsonWbStats.isEmpty()) {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "jascxx"
        },
        "content": "                return Optional.empty();"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "jascxx"
        },
        "content": "            }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "jascxx"
        },
        "content": "            return Optional.of(jsonWbStats.get().toModelType());"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "jascxx"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "jascxx"
        },
        "content": "        } catch (DataConversionException e) {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "jascxx"
        },
        "content": "            logger.info(\"Cannot convert to word bank statistics from  \" + path + \": \" + e.getMessage());"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "jascxx"
        },
        "content": "            return Optional.empty();"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "jascxx"
        },
        "content": "        }"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "jascxx"
        },
        "content": "    }"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "jascxx"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "jascxx"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "jascxx"
        },
        "content": "    public Path getWordBankStatisticsListFilePath() {"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "jascxx"
        },
        "content": "        return filePath;"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "jascxx"
        },
        "content": "    }"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "jascxx"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "jascxx"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "jascxx"
        },
        "content": "    public WordBankStatisticsList getWordBankStatisticsList() {"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "jascxx"
        },
        "content": "        return wbStatsList;"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "jascxx"
        },
        "content": "    }"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "jascxx"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "jascxx"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "jascxx"
        },
        "content": "     * Saves the word bank statistics."
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "jascxx"
        },
        "content": "     *"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "jascxx"
        },
        "content": "     * @param statistics statistics to be saved, cannot be null."
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "jascxx"
        },
        "content": "     * @param filePath location of the data. Cannot be null."
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "jascxx"
        },
        "content": "     */"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "jascxx"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "jascxx"
        },
        "content": "    public void saveWordBankStatistics(WordBankStatistics statistics, Path filePath)"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "jascxx"
        },
        "content": "            throws IOException {"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "jascxx"
        },
        "content": "        requireAllNonNull(statistics, filePath);"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "jascxx"
        },
        "content": "        File directory \u003d new File(filePath.getParent().toUri());"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "jascxx"
        },
        "content": "        if (!directory.exists()) {"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "jascxx"
        },
        "content": "            boolean success \u003d directory.mkdir();"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "jascxx"
        },
        "content": "            if (!success) {"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "jascxx"
        },
        "content": "                logger.fine(\"Cannot make directory for wbstats\");"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "jascxx"
        },
        "content": "            }"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "jascxx"
        },
        "content": "        }"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "jascxx"
        },
        "content": "        JsonUtil.saveJsonFile(new JsonSerializableWordBankStatistics(statistics), filePath);"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "jascxx"
        },
        "content": "    }"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "jascxx"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "jascxx": 108
    }
  },
  {
    "path": "src/main/java/seedu/address/storage/statistics/WordBankStatisticsListStorage.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jascxx"
        },
        "content": "package seedu.address.storage.statistics;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "jascxx"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "jascxx"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "jascxx"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "jascxx"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "jascxx"
        },
        "content": "import seedu.address.model.wordbankstatslist.WordBankStatisticsList;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "jascxx"
        },
        "content": "import seedu.address.statistics.WordBankStatistics;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "jascxx"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "jascxx"
        },
        "content": "/**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "jascxx"
        },
        "content": " * Represents a storage for list of {@link WordBankStatistics}."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "jascxx"
        },
        "content": " */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "jascxx"
        },
        "content": "public interface WordBankStatisticsListStorage {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "jascxx"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "jascxx"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "jascxx"
        },
        "content": "     * Returns the file path of the data file."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "jascxx"
        },
        "content": "     */"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "jascxx"
        },
        "content": "    Path getWordBankStatisticsListFilePath();"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "jascxx"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "jascxx"
        },
        "content": "    WordBankStatisticsList getWordBankStatisticsList();"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "jascxx"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "jascxx"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "jascxx"
        },
        "content": "     * Saves the given {@link WordBankStatistics} to the storage."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "jascxx"
        },
        "content": "     * @param statistics The statistics to be saved, cannot be null."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "jascxx"
        },
        "content": "     * @throws IOException if there was any problem writing to the file."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "jascxx"
        },
        "content": "     */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "jascxx"
        },
        "content": "    void saveWordBankStatistics(WordBankStatistics statistics, Path filePath) throws IOException;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "jascxx"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "jascxx": 27
    }
  },
  {
    "path": "src/main/java/seedu/address/storage/userprefs/JsonUserPrefsStorage.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "chrischenhui"
        },
        "content": "package seedu.address.storage.userprefs;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.exceptions.DataConversionException;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.util.JsonUtil;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.ReadOnlyUserPrefs;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.UserPrefs;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": " * A class to access UserPrefs stored in the hard disk as a json file"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "public class JsonUserPrefsStorage implements UserPrefsStorage {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    private Path filePath;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    public JsonUserPrefsStorage(Path filePath) {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "        this.filePath \u003d filePath;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    public Path getUserPrefsFilePath() {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "        return filePath;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    public Optional\u003cUserPrefs\u003e readUserPrefs() throws DataConversionException {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "        return readUserPrefs(filePath);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "     * Similar to {@link #readUserPrefs()}"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param prefsFilePath location of the data. Cannot be null."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws DataConversionException if the file format is not as expected."
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    public Optional\u003cUserPrefs\u003e readUserPrefs(Path prefsFilePath) throws DataConversionException {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        return JsonUtil.readJsonFile(prefsFilePath, UserPrefs.class);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    public void saveUserPrefs(ReadOnlyUserPrefs userPrefs) throws IOException {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        JsonUtil.saveJsonFile(userPrefs, filePath);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "chrischenhui": 1,
      "-": 46
    }
  },
  {
    "path": "src/main/java/seedu/address/storage/userprefs/UserPrefsStorage.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "chrischenhui"
        },
        "content": "package seedu.address.storage.userprefs;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.exceptions.DataConversionException;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.ReadOnlyUserPrefs;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.UserPrefs;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": " * Represents a storage for {@link seedu.address.model.UserPrefs}."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "public interface UserPrefsStorage {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns the file path of the UserPrefs data file."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    Path getUserPrefsFilePath();"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns UserPrefs data from storage."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "     *   Returns {@code Optional.empty()} if storage file is not found."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws DataConversionException if the data in storage is not in the expected format."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws IOException if there was any problem when reading from the storage."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    Optional\u003cUserPrefs\u003e readUserPrefs() throws DataConversionException, IOException;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "     * Saves the given {@link seedu.address.model.ReadOnlyUserPrefs} to the storage."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param userPrefs cannot be null."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws IOException if there was any problem writing to the file."
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    void saveUserPrefs(ReadOnlyUserPrefs userPrefs) throws IOException;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "chrischenhui": 1,
      "-": 35
    }
  },
  {
    "path": "src/main/java/seedu/address/storage/wordbanks/JsonAdaptedCard.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "chrischenhui"
        },
        "content": "package seedu.address.storage.wordbanks;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "jascxx"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "jascxx"
        },
        "content": "import java.util.HashSet;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "jascxx"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "jascxx"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "jascxx"
        },
        "content": "import java.util.stream.Collectors;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "jascxx"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import com.fasterxml.jackson.annotation.JsonCreator;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import com.fasterxml.jackson.annotation.JsonProperty;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "jascxx"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.exceptions.IllegalValueException;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "jascxx"
        },
        "content": "import seedu.address.model.card.Card;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "jascxx"
        },
        "content": "import seedu.address.model.card.Meaning;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "jascxx"
        },
        "content": "import seedu.address.model.card.Word;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.tag.Tag;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "jascxx"
        },
        "content": " * Jackson-friendly version of {@link Card}."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "chrischenhui"
        },
        "content": "public class JsonAdaptedCard {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "jascxx"
        },
        "content": "    public static final String MISSING_FIELD_MESSAGE_FORMAT \u003d \"Card\u0027s %s field is missing!\";"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "jascxx"
        },
        "content": "    private final String id;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    private final String name;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "jascxx"
        },
        "content": "    private final String description;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    private final List\u003cJsonAdaptedTag\u003e tagged \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "chrischenhui"
        },
        "content": "     * Constructs a {@code JsonAdaptedCard} with the given card details."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    @JsonCreator"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "jascxx"
        },
        "content": "    public JsonAdaptedCard(@JsonProperty(\"id\") String id,"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "jascxx"
        },
        "content": "                           @JsonProperty(\"name\") String name,"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "chrischenhui"
        },
        "content": "                           @JsonProperty(\"description\") String description,"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "                           @JsonProperty(\"tagged\") List\u003cJsonAdaptedTag\u003e tagged) {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "jascxx"
        },
        "content": "        this.id \u003d id;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        this.name \u003d name;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "jascxx"
        },
        "content": "        this.description \u003d description;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "        if (tagged !\u003d null) {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "            this.tagged.addAll(tagged);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "chrischenhui"
        },
        "content": "     * Converts a given {@code Card} into this class for Jackson use."
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "jascxx"
        },
        "content": "    public JsonAdaptedCard(Card source) {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "chrischenhui"
        },
        "content": "        this.id \u003d source.getId();"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "chrischenhui"
        },
        "content": "        this.name \u003d source.getWord().toString();"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "chrischenhui"
        },
        "content": "        this.description \u003d source.getMeaning().toString();"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        tagged.addAll(source.getTags().stream()"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "                .map(JsonAdaptedTag::new)"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "                .collect(Collectors.toList()));"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "chrischenhui"
        },
        "content": "     * Converts this Jackson-friendly adapted card object into the model\u0027s {@code Card} object."
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws IllegalValueException if there were any data constraints violated in the adapted person."
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "jascxx"
        },
        "content": "    public Card toModelType() throws IllegalValueException {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "chrischenhui"
        },
        "content": "        final List\u003cTag\u003e cardTags \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "        for (JsonAdaptedTag tag : tagged) {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "chrischenhui"
        },
        "content": "            cardTags.add(tag.toModelType());"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "chrischenhui"
        },
        "content": "        if (id \u003d\u003d null) {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "chrischenhui"
        },
        "content": "            throw new IllegalValueException(String.format(MISSING_FIELD_MESSAGE_FORMAT, String.class.getSimpleName()));"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "chrischenhui"
        },
        "content": "        }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "chrischenhui"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "        if (name \u003d\u003d null) {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "jascxx"
        },
        "content": "            throw new IllegalValueException(String.format(MISSING_FIELD_MESSAGE_FORMAT, Word.class.getSimpleName()));"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "jascxx"
        },
        "content": "        if (!Word.isValidWord(name)) {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "jascxx"
        },
        "content": "            throw new IllegalValueException(Word.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "jascxx"
        },
        "content": "        final Word modelWord \u003d new Word(name);"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "jascxx"
        },
        "content": "        if (description \u003d\u003d null) {"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "jascxx"
        },
        "content": "            throw new IllegalValueException(String.format(MISSING_FIELD_MESSAGE_FORMAT,"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "jascxx"
        },
        "content": "                    Meaning.class.getSimpleName()));"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "jascxx"
        },
        "content": "        if (!Meaning.isValidMeaning(description)) {"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "jascxx"
        },
        "content": "            throw new IllegalValueException(Meaning.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "jascxx"
        },
        "content": "        final Meaning modelMeaning \u003d new Meaning(description);"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "jascxx"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "chrischenhui"
        },
        "content": "        final Set\u003cTag\u003e modelTags \u003d new HashSet\u003c\u003e(cardTags);"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "jascxx"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "jascxx"
        },
        "content": "        if (id \u003d\u003d null) {"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "jascxx"
        },
        "content": "            return Card.createNewCard(modelWord, modelMeaning, modelTags);"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "jascxx"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "chrischenhui"
        },
        "content": "            return new Card(id, modelWord, modelMeaning, modelTags);"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "jascxx"
        },
        "content": "    }"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "jascxx": 36,
      "chrischenhui": 17,
      "-": 45
    }
  },
  {
    "path": "src/main/java/seedu/address/storage/wordbanks/JsonAdaptedTag.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "chrischenhui"
        },
        "content": "package seedu.address.storage.wordbanks;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import com.fasterxml.jackson.annotation.JsonCreator;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import com.fasterxml.jackson.annotation.JsonValue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.exceptions.IllegalValueException;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.tag.Tag;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": " * Jackson-friendly version of {@link Tag}."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "chrischenhui"
        },
        "content": "public class JsonAdaptedTag {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    private final String tagName;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "     * Constructs a {@code JsonAdaptedTag} with the given {@code tagName}."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    @JsonCreator"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    public JsonAdaptedTag(String tagName) {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "        this.tagName \u003d tagName;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "     * Converts a given {@code Tag} into this class for Jackson use."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    public JsonAdaptedTag(Tag source) {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "chrischenhui"
        },
        "content": "        this.tagName \u003d source.tagName;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    @JsonValue"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    public String getTagName() {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "        return tagName;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "     * Converts this Jackson-friendly adapted tag object into the model\u0027s {@code Tag} object."
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws IllegalValueException if there were any data constraints violated in the adapted tag."
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    public Tag toModelType() throws IllegalValueException {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!Tag.isValidTagName(tagName)) {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new IllegalValueException(Tag.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        return new Tag(tagName);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "chrischenhui": 3,
      "-": 45
    }
  },
  {
    "path": "src/main/java/seedu/address/storage/wordbanks/JsonSerializableWordBank.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "chrischenhui"
        },
        "content": "package seedu.address.storage.wordbanks;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "jascxx"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "jascxx"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "jascxx"
        },
        "content": "import java.util.stream.Collectors;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "jascxx"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import com.fasterxml.jackson.annotation.JsonCreator;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import com.fasterxml.jackson.annotation.JsonProperty;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import com.fasterxml.jackson.annotation.JsonRootName;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "jascxx"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.exceptions.IllegalValueException;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "jascxx"
        },
        "content": "import seedu.address.model.card.Card;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "jascxx"
        },
        "content": "import seedu.address.model.wordbank.ReadOnlyWordBank;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "jascxx"
        },
        "content": "import seedu.address.model.wordbank.WordBank;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "chrischenhui"
        },
        "content": " * An Immutable Word Bank that is serializable to JSON format."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "chrischenhui"
        },
        "content": "@JsonRootName(value \u003d \"wordBank\")"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "chrischenhui"
        },
        "content": "class JsonSerializableWordBank {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "chrischenhui"
        },
        "content": "    public static final String MESSAGE_DUPLICATE_CARDS_IN_WORD_BANK \u003d \"Word bank contains duplicate card(s).\";"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "chrischenhui"
        },
        "content": "    private final List\u003cJsonAdaptedCard\u003e wordBank \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "chrischenhui"
        },
        "content": "    private String name;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "chrischenhui"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "chrischenhui"
        },
        "content": "     * Constructs a {@code JsonSerializableWordBank} with the given word bank."
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    @JsonCreator"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "chrischenhui"
        },
        "content": "    public JsonSerializableWordBank(@JsonProperty(\"wordBank\") List\u003cJsonAdaptedCard\u003e card) {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "chrischenhui"
        },
        "content": "        this.wordBank.addAll(card);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "chrischenhui"
        },
        "content": "     * Converts a given {@code ReadOnlyWordBank} into this class for Jackson use."
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "chrischenhui"
        },
        "content": "     * @param source future changes to this will not affect the created {@code JsonSerializableWordBank}."
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "chrischenhui"
        },
        "content": "    public JsonSerializableWordBank(ReadOnlyWordBank source) {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "chrischenhui"
        },
        "content": "        this.name \u003d source.getName();"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "chrischenhui"
        },
        "content": "        wordBank.addAll(source.getCardList().stream().map(JsonAdaptedCard::new).collect(Collectors.toList()));"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "chrischenhui"
        },
        "content": "     * Converts this word bank into the model\u0027s {@code WordBank} object."
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws IllegalValueException if there were any data constraints violated."
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "chrischenhui"
        },
        "content": "    public WordBank toModelType() throws IllegalValueException {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "chrischenhui"
        },
        "content": "        WordBank wordBank \u003d new WordBank(name);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "chrischenhui"
        },
        "content": "        for (JsonAdaptedCard jsonAdaptedCard : this.wordBank) {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "chrischenhui"
        },
        "content": "            Card card \u003d jsonAdaptedCard.toModelType();"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "chrischenhui"
        },
        "content": "            if (wordBank.hasCard(card)) {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "chrischenhui"
        },
        "content": "                throw new IllegalValueException(MESSAGE_DUPLICATE_CARDS_IN_WORD_BANK);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "chrischenhui"
        },
        "content": "            wordBank.addCard(card);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "jascxx"
        },
        "content": "        return wordBank;"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "chrischenhui"
        },
        "content": "    public WordBank toModelTypeWithName(String name) throws IllegalValueException {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "chrischenhui"
        },
        "content": "        this.name \u003d name;"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "chrischenhui"
        },
        "content": "        return toModelType();"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "chrischenhui"
        },
        "content": "    }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "chrischenhui"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "chrischenhui"
        },
        "content": "    public String getName() {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "chrischenhui"
        },
        "content": "        return name;"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "chrischenhui"
        },
        "content": "    }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "jascxx": 9,
      "chrischenhui": 32,
      "-": 30
    }
  },
  {
    "path": "src/main/java/seedu/address/storage/wordbanks/JsonWordBankListStorage.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "chrischenhui"
        },
        "content": "package seedu.address.storage.wordbanks;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "jascxx"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "chrischenhui"
        },
        "content": "import java.io.File;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "jascxx"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "chrischenhui"
        },
        "content": "import java.nio.file.Files;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "jascxx"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "chrischenhui"
        },
        "content": "import java.nio.file.Paths;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "chrischenhui"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "chrischenhui"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "jascxx"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "jascxx"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "jascxx"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "chrischenhui"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "jascxx"
        },
        "content": "import seedu.address.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "jascxx"
        },
        "content": "import seedu.address.commons.exceptions.DataConversionException;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "jascxx"
        },
        "content": "import seedu.address.commons.exceptions.IllegalValueException;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "jascxx"
        },
        "content": "import seedu.address.commons.util.FileUtil;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "jascxx"
        },
        "content": "import seedu.address.commons.util.JsonUtil;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "chrischenhui"
        },
        "content": "import seedu.address.model.util.SampleDataUtil;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "jascxx"
        },
        "content": "import seedu.address.model.wordbank.ReadOnlyWordBank;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "chrischenhui"
        },
        "content": "import seedu.address.model.wordbank.WordBank;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "chrischenhui"
        },
        "content": "import seedu.address.model.wordbanklist.ReadOnlyWordBankList;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "chrischenhui"
        },
        "content": "import seedu.address.model.wordbanklist.WordBankList;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "jascxx"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "chrischenhui"
        },
        "content": " * A class to access Dukemon word bank data stored as a json file on the hard disk."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "chrischenhui"
        },
        "content": "public class JsonWordBankListStorage implements WordBankListStorage {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "chrischenhui"
        },
        "content": "    private static final Logger logger \u003d LogsCenter.getLogger(JsonWordBankListStorage.class);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "chrischenhui"
        },
        "content": "    private ReadOnlyWordBankList readOnlyWordBankList;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "chrischenhui"
        },
        "content": "    private Path wordBanksFilePath; // default : data/wordBanks"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "chrischenhui"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "chrischenhui"
        },
        "content": "     * Creates information related to word banks."
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "chrischenhui"
        },
        "content": "     * It also initialises the folder and sample data if necessary."
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "chrischenhui"
        },
        "content": "     *"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "chrischenhui"
        },
        "content": "     * @param filePath of storage. By default, it is at data folder."
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "chrischenhui"
        },
        "content": "     */"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "chrischenhui"
        },
        "content": "    public JsonWordBankListStorage(Path filePath) throws DataConversionException, IllegalValueException {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "chrischenhui"
        },
        "content": "        initDataByDefault(filePath);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "chrischenhui"
        },
        "content": "        initWordBankList();"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "chrischenhui"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "chrischenhui"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "chrischenhui"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "chrischenhui"
        },
        "content": "     * Creates information related to word bank at specified folder."
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "chrischenhui"
        },
        "content": "     *"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "chrischenhui"
        },
        "content": "     * @param filePath of storage. By default, it is at data folder."
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "chrischenhui"
        },
        "content": "     * @param folder specifies another layer of folder to contain word banks."
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "chrischenhui"
        },
        "content": "     */"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "chrischenhui"
        },
        "content": "    public JsonWordBankListStorage(Path filePath, String folder) throws DataConversionException, IllegalValueException {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "chrischenhui"
        },
        "content": "        initData(filePath, folder);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "chrischenhui"
        },
        "content": "        initWordBankList();"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "chrischenhui"
        },
        "content": "    }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "chrischenhui"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "chrischenhui"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "chrischenhui"
        },
        "content": "     * Creates the wordBanks folder if it has not been initialised."
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "chrischenhui"
        },
        "content": "     * By default, it is located at data/wordBanks"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "chrischenhui"
        },
        "content": "     * Also creates a sample.json file if there are no word banks when initialising."
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "chrischenhui"
        },
        "content": "     *"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "chrischenhui"
        },
        "content": "     * @param filePath of storage. By default, it is data."
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "chrischenhui"
        },
        "content": "     */"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "chrischenhui"
        },
        "content": "    private void initDataByDefault(Path filePath) {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "chrischenhui"
        },
        "content": "        initData(filePath, \"wordBanks\");"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "chrischenhui"
        },
        "content": "    }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "chrischenhui"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "chrischenhui"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "chrischenhui"
        },
        "content": "     * Creates the wordBanks folder if it has not been initialised."
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "chrischenhui"
        },
        "content": "     * By default, it is located at data/wordBanks"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "chrischenhui"
        },
        "content": "     * Also creates a sample.json file if there are no word banks when initialising."
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "chrischenhui"
        },
        "content": "     *"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "chrischenhui"
        },
        "content": "     * @param filePath of storage. By default, it is data."
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "chrischenhui"
        },
        "content": "     */"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "chrischenhui"
        },
        "content": "    private void initData(Path filePath, String folder) {"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "chrischenhui"
        },
        "content": "        if (folder.equals(\"\")) {"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "chrischenhui"
        },
        "content": "            wordBanksFilePath \u003d filePath;"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "chrischenhui"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "chrischenhui"
        },
        "content": "            wordBanksFilePath \u003d Paths.get(filePath.toString(), folder);"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "chrischenhui"
        },
        "content": "        }"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "chrischenhui"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "chrischenhui"
        },
        "content": "            if (!wordBanksFilePath.toFile().exists()) {"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "chrischenhui"
        },
        "content": "                Files.createDirectory(wordBanksFilePath);"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "chrischenhui"
        },
        "content": "            }"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "chrischenhui"
        },
        "content": "            if (!wordBanksFilePath.toFile().exists()) {"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "chrischenhui"
        },
        "content": "                Files.createDirectory(wordBanksFilePath);"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "chrischenhui"
        },
        "content": "            }"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "chrischenhui"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "chrischenhui"
        },
        "content": "            e.printStackTrace();"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "chrischenhui"
        },
        "content": "        }"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "chrischenhui"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "chrischenhui"
        },
        "content": "        File wordBanksDirectory \u003d wordBanksFilePath.toFile();"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "chrischenhui"
        },
        "content": "        String[] wordBanks \u003d wordBanksDirectory.list();"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "chrischenhui"
        },
        "content": "        boolean haveSampleWordBank \u003d false;"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "chrischenhui"
        },
        "content": "        for (int i \u003d 0; i \u003c wordBanks.length; i++) {"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "chrischenhui"
        },
        "content": "            if (wordBanks[i].equals(SampleDataUtil.getName() + \".json\")) {"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "chrischenhui"
        },
        "content": "                haveSampleWordBank \u003d true;"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "chrischenhui"
        },
        "content": "                break;"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "chrischenhui"
        },
        "content": "            }"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "chrischenhui"
        },
        "content": "        }"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "chrischenhui"
        },
        "content": ""
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "chrischenhui"
        },
        "content": "        if (!haveSampleWordBank) {"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "chrischenhui"
        },
        "content": "            WordBank sampleWb \u003d SampleDataUtil.getSampleWordBank();"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "chrischenhui"
        },
        "content": "            saveWordBank(sampleWb);"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "chrischenhui"
        },
        "content": "        }"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "chrischenhui"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "chrischenhui"
        },
        "content": "     * Initialise word bank list from the word banks directory on creation"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "chrischenhui"
        },
        "content": "     * All json files will initialise a word bank."
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "chrischenhui"
        },
        "content": "     */"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "chrischenhui"
        },
        "content": "    private void initWordBankList() throws DataConversionException, IllegalValueException {"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "chrischenhui"
        },
        "content": "        List\u003cWordBank\u003e wordBankList \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "chrischenhui"
        },
        "content": "        File wordBanksDirectory \u003d wordBanksFilePath.toFile();"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "chrischenhui"
        },
        "content": "        String[] pathArray \u003d wordBanksDirectory.list();"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "chrischenhui"
        },
        "content": "        for (int i \u003d 0; i \u003c pathArray.length; i++) {"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "chrischenhui"
        },
        "content": "            if (pathArray[i].endsWith(\".json\")) {"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "chrischenhui"
        },
        "content": "                Path wordBankPath \u003d Paths.get(wordBanksFilePath.toString(), pathArray[i]);"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "chrischenhui"
        },
        "content": "                ReadOnlyWordBank readOnlyWordBank \u003d null;"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "chrischenhui"
        },
        "content": "                try {"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "chrischenhui"
        },
        "content": "                    readOnlyWordBank \u003d jsonToWordBank(wordBankPath).get();"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "chrischenhui"
        },
        "content": "                } catch (DataConversionException e) {"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "chrischenhui"
        },
        "content": "                    throw e;"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "chrischenhui"
        },
        "content": "                } catch (IllegalValueException e) {"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "chrischenhui"
        },
        "content": "                    logger.info(\"Failed to initialise word bank list\");"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "chrischenhui"
        },
        "content": "                    e.printStackTrace();"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "chrischenhui"
        },
        "content": "                    throw e;"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "chrischenhui"
        },
        "content": "                }"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "chrischenhui"
        },
        "content": "                WordBank wbToAdd \u003d (WordBank) readOnlyWordBank;"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "chrischenhui"
        },
        "content": "                wordBankList.add(wbToAdd);"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "chrischenhui"
        },
        "content": "            }"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "chrischenhui"
        },
        "content": "        }"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "chrischenhui"
        },
        "content": "        this.readOnlyWordBankList \u003d new WordBankList(wordBankList);"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "chrischenhui"
        },
        "content": "     * Creates a word bank object from the specified json file given as filePath."
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "chrischenhui"
        },
        "content": "     * @param filePath location of the .json word bank file. Cannot be null."
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "chrischenhui"
        },
        "content": "     * @return optional read only word bank."
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "chrischenhui"
        },
        "content": "    public Optional\u003cReadOnlyWordBank\u003e jsonToWordBank(Path filePath)"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "chrischenhui"
        },
        "content": "            throws DataConversionException, IllegalValueException {"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "chrischenhui"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": "            requireNonNull(filePath);"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "chrischenhui"
        },
        "content": "            Optional\u003cJsonSerializableWordBank\u003e jsonWordBank \u003d JsonUtil.readJsonFile("
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "chrischenhui"
        },
        "content": "                    filePath, JsonSerializableWordBank.class);"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "chrischenhui"
        },
        "content": "            if (jsonWordBank.isEmpty()) {"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": "                return Optional.empty();"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "chrischenhui"
        },
        "content": "            String pathName \u003d filePath.toString();"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "chrischenhui"
        },
        "content": "            int len \u003d filePath.getParent().toString().length();"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "chrischenhui"
        },
        "content": "            String wordBankName \u003d pathName.substring(len + 1, pathName.length() - \".json\".length());"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "chrischenhui"
        },
        "content": "            return Optional.of(jsonWordBank.get().toModelTypeWithName(wordBankName));"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "chrischenhui"
        },
        "content": ""
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "chrischenhui"
        },
        "content": "        } catch (DataConversionException e) {"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "chrischenhui"
        },
        "content": "            throw e;"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "chrischenhui"
        },
        "content": "        } catch (IllegalValueException ive) {"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "-"
        },
        "content": "            logger.info(\"Illegal values found in \" + filePath + \": \" + ive.getMessage());"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "chrischenhui"
        },
        "content": "            throw ive;"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "chrischenhui"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "chrischenhui"
        },
        "content": "     * Save a word bank into the default file location, data/wordBanks."
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "chrischenhui"
        },
        "content": "     *"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "chrischenhui"
        },
        "content": "     * @param wordBank word bank."
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "chrischenhui"
        },
        "content": "     */"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "chrischenhui"
        },
        "content": "    public void saveWordBank(ReadOnlyWordBank wordBank) {"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "chrischenhui"
        },
        "content": "        saveWordBank(wordBank, wordBanksFilePath);"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "chrischenhui"
        },
        "content": "    }"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "chrischenhui"
        },
        "content": ""
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "chrischenhui"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "chrischenhui"
        },
        "content": "     * Save a word bank into the specified file location."
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "chrischenhui"
        },
        "content": "     * Typically used by Export command, where user writes to their system."
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "chrischenhui"
        },
        "content": "     *"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "chrischenhui"
        },
        "content": "     * @param filePath location of the data. Cannot be null. Eg. ~/downloads."
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "chrischenhui"
        },
        "content": "     */"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "chrischenhui"
        },
        "content": "    void saveWordBank(ReadOnlyWordBank wordBank, Path filePath) {"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "chrischenhui"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "chrischenhui"
        },
        "content": "            requireNonNull(wordBank);"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "chrischenhui"
        },
        "content": "            requireNonNull(filePath);"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "chrischenhui"
        },
        "content": "            Path wordBankFilePath \u003d Paths.get(filePath.toString(), wordBank.getName() + \".json\");"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "chrischenhui"
        },
        "content": "            FileUtil.createIfMissing(wordBankFilePath);"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "chrischenhui"
        },
        "content": "            JsonUtil.saveJsonFile(new JsonSerializableWordBank(wordBank), wordBankFilePath);"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "chrischenhui"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "chrischenhui"
        },
        "content": "            assert(false);"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "chrischenhui"
        },
        "content": "            e.printStackTrace();"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "chrischenhui"
        },
        "content": "        }"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "chrischenhui"
        },
        "content": "    }"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "chrischenhui"
        },
        "content": ""
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "chrischenhui"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "chrischenhui"
        },
        "content": "     * Adds a word bank into the internal list."
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "chrischenhui"
        },
        "content": "     *"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "chrischenhui"
        },
        "content": "     * @param wordBank data. Cannot be null."
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "chrischenhui"
        },
        "content": "     */"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "chrischenhui"
        },
        "content": "    private void addWordBank(ReadOnlyWordBank wordBank) {"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "chrischenhui"
        },
        "content": "        WordBankList wbl \u003d (WordBankList) readOnlyWordBankList;"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "chrischenhui"
        },
        "content": "        wbl.addBank(wordBank);"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "chrischenhui"
        },
        "content": "    }"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "chrischenhui"
        },
        "content": ""
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "chrischenhui"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "chrischenhui"
        },
        "content": "     * Deletes a word bank from the storage and from the internal list."
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "chrischenhui"
        },
        "content": "     *"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "chrischenhui"
        },
        "content": "     * @param wordBank data. Cannot be null."
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "chrischenhui"
        },
        "content": "     */"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "chrischenhui"
        },
        "content": "    private void deleteWordBank(WordBank wordBank) {"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "chrischenhui"
        },
        "content": "        Path filePath \u003d Paths.get(wordBanksFilePath.toString(), wordBank.getName() + \".json\");"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "chrischenhui"
        },
        "content": "        File toDelete \u003d filePath.toFile();"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "chrischenhui"
        },
        "content": "        if (toDelete.exists()) {"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "chrischenhui"
        },
        "content": "            toDelete.delete();"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "chrischenhui"
        },
        "content": "        }"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "chrischenhui"
        },
        "content": "        WordBankList wbl \u003d ((WordBankList) readOnlyWordBankList);"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "chrischenhui"
        },
        "content": "        wbl.removeWordBank(wordBank);"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "chrischenhui"
        },
        "content": "    }"
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "chrischenhui"
        },
        "content": ""
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "chrischenhui"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "chrischenhui"
        },
        "content": "     * Retrieves the WordBankList that WordBankListStorage holds."
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "chrischenhui"
        },
        "content": "     */"
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "chrischenhui"
        },
        "content": "    public Optional\u003cReadOnlyWordBankList\u003e getWordBankList() {"
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "chrischenhui"
        },
        "content": "        return Optional.of(readOnlyWordBankList);"
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "chrischenhui"
        },
        "content": "    }"
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "chrischenhui"
        },
        "content": ""
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "chrischenhui"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "chrischenhui"
        },
        "content": "     * Creates a word bank, add into the internal list, and save it into storage."
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "chrischenhui"
        },
        "content": "     *"
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "chrischenhui"
        },
        "content": "     * @param wordBankName cannot be null."
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "chrischenhui"
        },
        "content": "     */"
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "chrischenhui"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "chrischenhui"
        },
        "content": "    public void createWordBank(String wordBankName) {"
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "chrischenhui"
        },
        "content": "        WordBank wb \u003d new WordBank(wordBankName);"
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "chrischenhui"
        },
        "content": "        addWordBank(wb);"
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "chrischenhui"
        },
        "content": "        saveWordBank(wb);"
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "chrischenhui"
        },
        "content": "    }"
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "chrischenhui"
        },
        "content": ""
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "chrischenhui"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "chrischenhui"
        },
        "content": "     * Retrieves the specified word bank, delete from storage, and then remove from internal list."
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "chrischenhui"
        },
        "content": "     *"
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "chrischenhui"
        },
        "content": "     * @param wordBankName cannot be null."
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "chrischenhui"
        },
        "content": "     */"
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "chrischenhui"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "chrischenhui"
        },
        "content": "    public void removeWordBank(String wordBankName) {"
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "chrischenhui"
        },
        "content": "        WordBank wb \u003d readOnlyWordBankList.getWordBankFromName(wordBankName);"
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "chrischenhui"
        },
        "content": "        deleteWordBank(wb);"
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "chrischenhui"
        },
        "content": "    }"
      },
      {
        "lineNumber": 248,
        "author": {
          "gitId": "chrischenhui"
        },
        "content": ""
      },
      {
        "lineNumber": 249,
        "author": {
          "gitId": "chrischenhui"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 250,
        "author": {
          "gitId": "chrischenhui"
        },
        "content": "     * Creates the word bank specified by the file path, add to internal list, and then add to storage."
      },
      {
        "lineNumber": 251,
        "author": {
          "gitId": "chrischenhui"
        },
        "content": "     *"
      },
      {
        "lineNumber": 252,
        "author": {
          "gitId": "chrischenhui"
        },
        "content": "     * @param filePath cannot be null."
      },
      {
        "lineNumber": 253,
        "author": {
          "gitId": "chrischenhui"
        },
        "content": "     * @param wordBankName cannot be null."
      },
      {
        "lineNumber": 254,
        "author": {
          "gitId": "chrischenhui"
        },
        "content": "     */"
      },
      {
        "lineNumber": 255,
        "author": {
          "gitId": "chrischenhui"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 256,
        "author": {
          "gitId": "chrischenhui"
        },
        "content": "    public void importWordBank(Path filePath, String wordBankName) {"
      },
      {
        "lineNumber": 257,
        "author": {
          "gitId": "chrischenhui"
        },
        "content": "        Path finalPath \u003d Paths.get(filePath.toString(), wordBankName + \".json\");"
      },
      {
        "lineNumber": 258,
        "author": {
          "gitId": "chrischenhui"
        },
        "content": "        WordBank wb \u003d null;"
      },
      {
        "lineNumber": 259,
        "author": {
          "gitId": "chrischenhui"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 260,
        "author": {
          "gitId": "chrischenhui"
        },
        "content": "            wb \u003d (WordBank) jsonToWordBank(finalPath).get();"
      },
      {
        "lineNumber": 261,
        "author": {
          "gitId": "chrischenhui"
        },
        "content": "        } catch (DataConversionException | IllegalValueException e) {"
      },
      {
        "lineNumber": 262,
        "author": {
          "gitId": "chrischenhui"
        },
        "content": "            logger.info(\"Unable to import \" + e.getMessage());"
      },
      {
        "lineNumber": 263,
        "author": {
          "gitId": "chrischenhui"
        },
        "content": "            e.printStackTrace();"
      },
      {
        "lineNumber": 264,
        "author": {
          "gitId": "chrischenhui"
        },
        "content": "        }"
      },
      {
        "lineNumber": 265,
        "author": {
          "gitId": "chrischenhui"
        },
        "content": "        addWordBank(wb);"
      },
      {
        "lineNumber": 266,
        "author": {
          "gitId": "chrischenhui"
        },
        "content": "        saveWordBank(wb);"
      },
      {
        "lineNumber": 267,
        "author": {
          "gitId": "chrischenhui"
        },
        "content": "    }"
      },
      {
        "lineNumber": 268,
        "author": {
          "gitId": "chrischenhui"
        },
        "content": ""
      },
      {
        "lineNumber": 269,
        "author": {
          "gitId": "chrischenhui"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 270,
        "author": {
          "gitId": "chrischenhui"
        },
        "content": "     * Retrieves the word bank, add to internal list, then add to storage."
      },
      {
        "lineNumber": 271,
        "author": {
          "gitId": "chrischenhui"
        },
        "content": "     *"
      },
      {
        "lineNumber": 272,
        "author": {
          "gitId": "chrischenhui"
        },
        "content": "     * @param wordBankName cannot be null."
      },
      {
        "lineNumber": 273,
        "author": {
          "gitId": "chrischenhui"
        },
        "content": "     * @param filePath cannot be null."
      },
      {
        "lineNumber": 274,
        "author": {
          "gitId": "chrischenhui"
        },
        "content": "     */"
      },
      {
        "lineNumber": 275,
        "author": {
          "gitId": "chrischenhui"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 276,
        "author": {
          "gitId": "chrischenhui"
        },
        "content": "    public void exportWordBank(String wordBankName, Path filePath) {"
      },
      {
        "lineNumber": 277,
        "author": {
          "gitId": "chrischenhui"
        },
        "content": "        WordBank wb \u003d readOnlyWordBankList.getWordBankFromName(wordBankName);"
      },
      {
        "lineNumber": 278,
        "author": {
          "gitId": "chrischenhui"
        },
        "content": "        saveWordBank(wb, filePath);"
      },
      {
        "lineNumber": 279,
        "author": {
          "gitId": "chrischenhui"
        },
        "content": "    }"
      },
      {
        "lineNumber": 280,
        "author": {
          "gitId": "chrischenhui"
        },
        "content": ""
      },
      {
        "lineNumber": 281,
        "author": {
          "gitId": "chrischenhui"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 282,
        "author": {
          "gitId": "chrischenhui"
        },
        "content": "     * Updates any changes to word banks that were manipulated in ModelManager."
      },
      {
        "lineNumber": 283,
        "author": {
          "gitId": "chrischenhui"
        },
        "content": "     *"
      },
      {
        "lineNumber": 284,
        "author": {
          "gitId": "chrischenhui"
        },
        "content": "     * @param wordBank cannot be null."
      },
      {
        "lineNumber": 285,
        "author": {
          "gitId": "chrischenhui"
        },
        "content": "     */"
      },
      {
        "lineNumber": 286,
        "author": {
          "gitId": "chrischenhui"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 287,
        "author": {
          "gitId": "chrischenhui"
        },
        "content": "    public void updateWordBank(WordBank wordBank) {"
      },
      {
        "lineNumber": 288,
        "author": {
          "gitId": "chrischenhui"
        },
        "content": "        saveWordBank(wordBank);"
      },
      {
        "lineNumber": 289,
        "author": {
          "gitId": "chrischenhui"
        },
        "content": "    }"
      },
      {
        "lineNumber": 290,
        "author": {
          "gitId": "chrischenhui"
        },
        "content": ""
      },
      {
        "lineNumber": 291,
        "author": {
          "gitId": "chrischenhui"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 292,
        "author": {
          "gitId": "chrischenhui"
        },
        "content": "     * Returns an observable list of word banks."
      },
      {
        "lineNumber": 293,
        "author": {
          "gitId": "chrischenhui"
        },
        "content": "     *"
      },
      {
        "lineNumber": 294,
        "author": {
          "gitId": "chrischenhui"
        },
        "content": "     * @return observable list of word banks"
      },
      {
        "lineNumber": 295,
        "author": {
          "gitId": "chrischenhui"
        },
        "content": "     */"
      },
      {
        "lineNumber": 296,
        "author": {
          "gitId": "chrischenhui"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 297,
        "author": {
          "gitId": "chrischenhui"
        },
        "content": "    public ObservableList\u003cWordBank\u003e getFilteredWordBankList() {"
      },
      {
        "lineNumber": 298,
        "author": {
          "gitId": "chrischenhui"
        },
        "content": "        return readOnlyWordBankList.getFilteredWordBankList();"
      },
      {
        "lineNumber": 299,
        "author": {
          "gitId": "chrischenhui"
        },
        "content": "    }"
      },
      {
        "lineNumber": 300,
        "author": {
          "gitId": "chrischenhui"
        },
        "content": ""
      },
      {
        "lineNumber": 301,
        "author": {
          "gitId": "chrischenhui"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 302,
        "author": {
          "gitId": "chrischenhui"
        },
        "content": "     * Retrieves the file path of word banks."
      },
      {
        "lineNumber": 303,
        "author": {
          "gitId": "chrischenhui"
        },
        "content": "     *"
      },
      {
        "lineNumber": 304,
        "author": {
          "gitId": "chrischenhui"
        },
        "content": "     * @return word bank file path."
      },
      {
        "lineNumber": 305,
        "author": {
          "gitId": "chrischenhui"
        },
        "content": "     */"
      },
      {
        "lineNumber": 306,
        "author": {
          "gitId": "chrischenhui"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 307,
        "author": {
          "gitId": "chrischenhui"
        },
        "content": "    public Path getWordBanksFilePath() {"
      },
      {
        "lineNumber": 308,
        "author": {
          "gitId": "chrischenhui"
        },
        "content": "        return wordBanksFilePath;"
      },
      {
        "lineNumber": 309,
        "author": {
          "gitId": "chrischenhui"
        },
        "content": "    }"
      },
      {
        "lineNumber": 310,
        "author": {
          "gitId": "chrischenhui"
        },
        "content": ""
      },
      {
        "lineNumber": 311,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "jascxx": 13,
      "chrischenhui": 276,
      "-": 22
    }
  },
  {
    "path": "src/main/java/seedu/address/storage/wordbanks/WordBankListStorage.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "chrischenhui"
        },
        "content": "package seedu.address.storage.wordbanks;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "chrischenhui"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "chrischenhui"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "jascxx"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "chrischenhui"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "chrischenhui"
        },
        "content": "import seedu.address.model.wordbank.WordBank;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "chrischenhui"
        },
        "content": "import seedu.address.model.wordbanklist.ReadOnlyWordBankList;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "chrischenhui"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "jascxx"
        },
        "content": " * Represents a storage for {@link WordBank}."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "chrischenhui"
        },
        "content": " * All arguments passed in should be already be validated by the respective command parsers."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "chrischenhui"
        },
        "content": "public interface WordBankListStorage {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "chrischenhui"
        },
        "content": "     * Retrieves the WordBankList that WordBankListStorage holds."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "chrischenhui"
        },
        "content": "     */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "chrischenhui"
        },
        "content": "    Optional\u003cReadOnlyWordBankList\u003e getWordBankList();"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "chrischenhui"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "chrischenhui"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "chrischenhui"
        },
        "content": "     * Creates a word bank, add into the internal list, and save it into storage."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "chrischenhui"
        },
        "content": "     *"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "chrischenhui"
        },
        "content": "     * @param wordBankName cannot be null."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "chrischenhui"
        },
        "content": "     */"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "chrischenhui"
        },
        "content": "    void createWordBank(String wordBankName);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "chrischenhui"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "chrischenhui"
        },
        "content": "     * Retrieves the specified word bank, delete from storage, and then remove from internal list."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "chrischenhui"
        },
        "content": "     *"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "chrischenhui"
        },
        "content": "     * @param wordBankName cannot be null."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "chrischenhui"
        },
        "content": "    void removeWordBank(String wordBankName);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "chrischenhui"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "chrischenhui"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "chrischenhui"
        },
        "content": "     * Creates the word bank specified by the file path, add to internal list, and then add to storage."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "chrischenhui"
        },
        "content": "     *"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "chrischenhui"
        },
        "content": "     * @param filePath cannot be null."
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "chrischenhui"
        },
        "content": "     * @param wordBankName"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "chrischenhui"
        },
        "content": "     */"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "chrischenhui"
        },
        "content": "    void importWordBank(Path filePath, String wordBankName);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "chrischenhui"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "chrischenhui"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "chrischenhui"
        },
        "content": "     * Retrieves the word bank, add to internal list, then add to storage."
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "chrischenhui"
        },
        "content": "     *"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "chrischenhui"
        },
        "content": "     * @param wordBankName cannot be null."
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "chrischenhui"
        },
        "content": "     * @param filePath cannot be null."
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "chrischenhui"
        },
        "content": "     */"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "chrischenhui"
        },
        "content": "    void exportWordBank(String wordBankName, Path filePath);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "chrischenhui"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "chrischenhui"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "chrischenhui"
        },
        "content": "     * Updates any changes to word banks that were manipulated in ModelManager."
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "chrischenhui"
        },
        "content": "     *"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "chrischenhui"
        },
        "content": "     * @param wordBank cannot be null."
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "chrischenhui"
        },
        "content": "     */"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "chrischenhui"
        },
        "content": "    void updateWordBank(WordBank wordBank);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "chrischenhui"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "chrischenhui"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "chrischenhui"
        },
        "content": "     * Returns an observable list of word banks."
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "chrischenhui"
        },
        "content": "     *"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "chrischenhui"
        },
        "content": "     * @return observable list of word banks."
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "chrischenhui"
        },
        "content": "     */"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "chrischenhui"
        },
        "content": "    ObservableList\u003cWordBank\u003e getFilteredWordBankList();"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "chrischenhui"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "chrischenhui"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "chrischenhui"
        },
        "content": "     * Retrieves the file path of word banks."
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "chrischenhui"
        },
        "content": "     *"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "chrischenhui"
        },
        "content": "     * @return word bank file path."
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "chrischenhui"
        },
        "content": "     */"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "chrischenhui"
        },
        "content": "    Path getWordBanksFilePath();"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "jascxx": 2,
      "chrischenhui": 61,
      "-": 7
    }
  },
  {
    "path": "src/main/java/seedu/address/ui/AvatarImageUtil.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jascxx"
        },
        "content": "package seedu.address.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "jascxx"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "jascxx"
        },
        "content": "import javafx.scene.image.Image;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "jascxx"
        },
        "content": "import seedu.address.commons.util.AppUtil;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "jascxx"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "jascxx"
        },
        "content": "/**"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "jascxx"
        },
        "content": " * A utility class to get Avatar images."
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "jascxx"
        },
        "content": " */"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "jascxx"
        },
        "content": "public class AvatarImageUtil {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "jascxx"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "jascxx"
        },
        "content": "    public static final int TOTAL_NUM \u003d 151;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "jascxx"
        },
        "content": "    private static final String AVATAR_PATH \u003d \"/images/avatars/%03d.png\";"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "jascxx"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "jascxx"
        },
        "content": "    private AvatarImageUtil() {} // this class should not be initiated"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "jascxx"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "jascxx"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "jascxx"
        },
        "content": "     * Returns an image with an id correlated with {@code id}."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "jascxx"
        },
        "content": "     */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "jascxx"
        },
        "content": "    public static Image get(int id) {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "jascxx"
        },
        "content": "        if (id \u003c\u003d 0 || id \u003e TOTAL_NUM) {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "jascxx"
        },
        "content": "            throw new IllegalArgumentException(\"Id must be within 1 to \" + TOTAL_NUM);"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "jascxx"
        },
        "content": "        }"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "jascxx"
        },
        "content": "        return AppUtil.getImage(String.format(AVATAR_PATH, id));"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "jascxx"
        },
        "content": "    }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "jascxx"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "jascxx": 25
    }
  },
  {
    "path": "src/main/java/seedu/address/ui/CommandBox.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "sreesubbash"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "sreesubbash"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "sreesubbash"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "sreesubbash"
        },
        "content": "import javafx.event.EventHandler;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "sreesubbash"
        },
        "content": "import javafx.scene.control.Label;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "sreesubbash"
        },
        "content": "import javafx.scene.control.Menu;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "sreesubbash"
        },
        "content": "import javafx.scene.control.MenuBar;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.control.TextField;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "sreesubbash"
        },
        "content": "import javafx.scene.input.MouseEvent;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.layout.Region;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "sreesubbash"
        },
        "content": "import seedu.address.logic.UiLogicHelper;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.CommandResult;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "sreesubbash"
        },
        "content": "import seedu.address.logic.util.Action;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "sreesubbash"
        },
        "content": "import seedu.address.logic.util.ModeEnum;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "sreesubbash"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": " * The UI component that is responsible for receiving user command inputs."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "public class CommandBox extends UiPart\u003cRegion\u003e {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String ERROR_STYLE_CLASS \u003d \"error\";"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String FXML \u003d \"CommandBox.fxml\";"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    private final CommandExecutor commandExecutor;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "sreesubbash"
        },
        "content": "    private UiLogicHelper uiLogicHelper;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    private TextField commandTextField;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "sreesubbash"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "sreesubbash"
        },
        "content": "    private Label modeHeader;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "sreesubbash"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "sreesubbash"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "sreesubbash"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "sreesubbash"
        },
        "content": "    private Label modeLabel;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "sreesubbash"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "sreesubbash"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "sreesubbash"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "sreesubbash"
        },
        "content": "    private Label modesLabel;"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "sreesubbash"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "sreesubbash"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "sreesubbash"
        },
        "content": "    private MenuBar commandMenuField;"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "sreesubbash"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "sreesubbash"
        },
        "content": "    private Menu temp;"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "sreesubbash"
        },
        "content": "    private List\u003cMenu\u003e currentMenus;"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "sreesubbash"
        },
        "content": "    private List\u003cString\u003e currentCombos;"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "sreesubbash"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "sreesubbash"
        },
        "content": "    public CommandBox(CommandExecutor commandExecutor, UiLogicHelper uiLogicHelper) {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "        super(FXML);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "        this.commandExecutor \u003d commandExecutor;"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "sreesubbash"
        },
        "content": "        this.uiLogicHelper \u003d uiLogicHelper;"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "sreesubbash"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "sreesubbash"
        },
        "content": "        modeHeader.getStyleClass().add(\"label-bright\");"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "sreesubbash"
        },
        "content": "        modeLabel.getStyleClass().add(\"label-bright\");"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "sreesubbash"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "sreesubbash"
        },
        "content": "        initialiseText();"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "sreesubbash"
        },
        "content": "        fillMenu();"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "sreesubbash"
        },
        "content": "        fillCombo();"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "sreesubbash"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "sreesubbash"
        },
        "content": "    }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "sreesubbash"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "sreesubbash"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "sreesubbash"
        },
        "content": "     *  Sets change detection callback to textfield"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "sreesubbash"
        },
        "content": "     */"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "sreesubbash"
        },
        "content": "    private void initialiseText() {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "        // calls #setStyleToDefault() whenever there is a change to the text of the command box."
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "        commandTextField.textProperty().addListener((unused1, unused2, unused3) -\u003e setStyleToDefault());"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "sreesubbash"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "sreesubbash"
        },
        "content": "        commandTextField.textProperty().addListener((observable, oldCommand, newCommand) -\u003e {"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": "            //System.out.println(\"command changing from \" + oldCommand + \" to \" + newCommand);"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "sreesubbash"
        },
        "content": "            updateMenu(oldCommand, newCommand);"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "sreesubbash"
        },
        "content": "        });"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "sreesubbash"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "sreesubbash"
        },
        "content": "     * updates menu based on changes detected"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "sreesubbash"
        },
        "content": "     * @param oldCommand in text field"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "sreesubbash"
        },
        "content": "     * @param newCommand in text field"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "sreesubbash"
        },
        "content": "     */"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "sreesubbash"
        },
        "content": "    private void updateMenu(String oldCommand, String newCommand) {"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "sreesubbash"
        },
        "content": "        commandMenuField.getMenus().clear();"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "sreesubbash"
        },
        "content": "        for (Action temp : uiLogicHelper.getMenuItems(newCommand)) {"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "sreesubbash"
        },
        "content": "            Label label \u003d new Label(temp.toString());"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "sreesubbash"
        },
        "content": "            label.setOnMouseClicked(new EventHandler\u003cMouseEvent\u003e() {"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "sreesubbash"
        },
        "content": "                @Override"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "sreesubbash"
        },
        "content": "                public void handle(MouseEvent event) {"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "sreesubbash"
        },
        "content": "                    commandTextField.setText(temp.toString() + \" \");"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "sreesubbash"
        },
        "content": "                    commandTextField.positionCaret(temp.toString().length() + 1);"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "sreesubbash"
        },
        "content": "                }"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "sreesubbash"
        },
        "content": "            });"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "sreesubbash"
        },
        "content": "            Menu button \u003d new Menu();"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "sreesubbash"
        },
        "content": "            button.setGraphic(label);"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "sreesubbash"
        },
        "content": "            commandMenuField.getMenus().add(button);"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "sreesubbash"
        },
        "content": "        }"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "sreesubbash"
        },
        "content": "    }"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "sreesubbash"
        },
        "content": ""
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "sreesubbash"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "sreesubbash"
        },
        "content": "     *  Fills in Menu bar in UI"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "sreesubbash"
        },
        "content": "     */"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "sreesubbash"
        },
        "content": "    private void fillMenu() {"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "sreesubbash"
        },
        "content": "        for (Action temp : uiLogicHelper.getMenuItems(\"\")) {"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "sreesubbash"
        },
        "content": "            Label label \u003d new Label(temp.toString());"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "sreesubbash"
        },
        "content": "            label.setOnMouseClicked(new EventHandler\u003cMouseEvent\u003e() {"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "sreesubbash"
        },
        "content": "                @Override"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "sreesubbash"
        },
        "content": "                public void handle(MouseEvent event) {"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "sreesubbash"
        },
        "content": "                    commandTextField.setText(temp.toString() + \" \");"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "sreesubbash"
        },
        "content": "                    commandTextField.positionCaret(temp.toString().length() + 1);"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "sreesubbash"
        },
        "content": "                }"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "sreesubbash"
        },
        "content": "            });"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "sreesubbash"
        },
        "content": "            Menu button \u003d new Menu();"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "sreesubbash"
        },
        "content": "            button.setGraphic(label);"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "sreesubbash"
        },
        "content": "            commandMenuField.getMenus().add(button);"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "sreesubbash"
        },
        "content": "        }"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "sreesubbash"
        },
        "content": "    }"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "sreesubbash"
        },
        "content": ""
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "sreesubbash"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "sreesubbash"
        },
        "content": "     *  Fills in combo in ui"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "sreesubbash"
        },
        "content": "     */"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "sreesubbash"
        },
        "content": "    private void fillCombo() {"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "sreesubbash"
        },
        "content": "        modeLabel.setText(uiLogicHelper.getMode().toString());"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "sreesubbash"
        },
        "content": "        String modes \u003d \" | \";"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "sreesubbash"
        },
        "content": "        List\u003cModeEnum\u003e temp \u003d uiLogicHelper.getModes();"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "sreesubbash"
        },
        "content": ""
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "sreesubbash"
        },
        "content": "        for (ModeEnum mode : temp) {"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "sreesubbash"
        },
        "content": "            if (!uiLogicHelper.getMode().toString().equals(mode.toString())) {"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "sreesubbash"
        },
        "content": "                modes +\u003d (mode.toString() + \" | \");"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "sreesubbash"
        },
        "content": "            }"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "sreesubbash"
        },
        "content": "        }"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "sreesubbash"
        },
        "content": ""
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "sreesubbash"
        },
        "content": "        if (modes.equals(\" | \")) {"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "sreesubbash"
        },
        "content": "            modes \u003d \"None\";"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "sreesubbash"
        },
        "content": "        }"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "sreesubbash"
        },
        "content": "        modesLabel.setText(modes);"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": ""
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": "     * Handles the Enter button pressed event."
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": "    private void handleCommandEntered() {"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": "            commandExecutor.execute(commandTextField.getText());"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (CommandException | ParseException e) {"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": "            setStyleToIndicateCommandFailure();"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "sreesubbash"
        },
        "content": "        fillCombo();"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "sreesubbash"
        },
        "content": "        //commandComboField.setValue(uiLogicHelper.getMode().toString());"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "-"
        },
        "content": "     * Sets the command box style to use the default style."
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "-"
        },
        "content": "    private void setStyleToDefault() {"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "-"
        },
        "content": "        commandTextField.getStyleClass().remove(ERROR_STYLE_CLASS);"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "-"
        },
        "content": "     * Sets the command box style to indicate a failed command."
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "-"
        },
        "content": "    private void setStyleToIndicateCommandFailure() {"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "-"
        },
        "content": "        ObservableList\u003cString\u003e styleClass \u003d commandTextField.getStyleClass();"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "-"
        },
        "content": "        if (styleClass.contains(ERROR_STYLE_CLASS)) {"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "-"
        },
        "content": "            return;"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "-"
        },
        "content": "        styleClass.add(ERROR_STYLE_CLASS);"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "-"
        },
        "content": "     * Represents a function that can execute commands."
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "-"
        },
        "content": "    @FunctionalInterface"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "-"
        },
        "content": "    public interface CommandExecutor {"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "-"
        },
        "content": "        /**"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "-"
        },
        "content": "         * Executes the command and returns the result."
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "-"
        },
        "content": "         *"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "-"
        },
        "content": "         * @see seedu.address.logic.Logic#execute(String)"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "-"
        },
        "content": "         */"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "-"
        },
        "content": "        CommandResult execute(String commandText) throws CommandException, ParseException;"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": "    void clearCommandBox() {"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": "        commandTextField.setText(\"\");"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": "    }"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": ""
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": "    void setGuessTextAndCaret() {"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": "        commandTextField.setText(\"guess \");"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": "        commandTextField.positionCaret(6);"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": "    }"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": ""
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "sreesubbash": 112,
      "kohyida1997": 11,
      "-": 77
    }
  },
  {
    "path": "src/main/java/seedu/address/ui/CurrentModeFooter.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "dragontho"
        },
        "content": "package seedu.address.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "dragontho"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "dragontho"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "dragontho"
        },
        "content": "import javafx.scene.control.Label;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "dragontho"
        },
        "content": "import javafx.scene.layout.Region;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "dragontho"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "dragontho"
        },
        "content": "/**"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "dragontho"
        },
        "content": " * A ui for the status bar that is displayed at the footer of the application."
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "dragontho"
        },
        "content": " */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "dragontho"
        },
        "content": "public class CurrentModeFooter extends UiPart\u003cRegion\u003e {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "dragontho"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "dragontho"
        },
        "content": "    private static final String FXML \u003d \"CurrentModeFooter.fxml\";"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "dragontho"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "dragontho"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "dragontho"
        },
        "content": "    private Label currentMode;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "dragontho"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "dragontho"
        },
        "content": "    public CurrentModeFooter() {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "dragontho"
        },
        "content": "        super(FXML);"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "dragontho"
        },
        "content": "        currentMode.setText(\"Current mode: \" + \"load\");"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "dragontho"
        },
        "content": "    }"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "dragontho"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "dragontho"
        },
        "content": "    public void changeMode(String mode) {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "dragontho"
        },
        "content": "        currentMode.setText(\"Current mode: \" + mode);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "dragontho"
        },
        "content": "    }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "dragontho"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "dragontho"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "dragontho": 26
    }
  },
  {
    "path": "src/main/java/seedu/address/ui/HelpWindow.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.control.Button;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.control.Label;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.input.Clipboard;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.input.ClipboardContent;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.stage.Stage;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": " * Controller for a help page"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "public class HelpWindow extends UiPart\u003cStage\u003e {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "chrischenhui"
        },
        "content": "    public static final String USERGUIDE_URL \u003d"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "chrischenhui"
        },
        "content": "            \"https://github.com/AY1920S1-CS2103T-T11-2/main/blob/development/docs/UserGuide.adoc\";"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String HELP_MESSAGE \u003d \"Refer to the user guide: \" + USERGUIDE_URL;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final Logger logger \u003d LogsCenter.getLogger(HelpWindow.class);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String FXML \u003d \"HelpWindow.fxml\";"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    private Button copyButton;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    private Label helpMessage;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "     * Creates a new HelpWindow."
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param root Stage to use as the root of the HelpWindow."
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    public HelpWindow(Stage root) {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        super(FXML, root);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        helpMessage.setText(HELP_MESSAGE);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "     * Creates a new HelpWindow."
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    public HelpWindow() {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        this(new Stage());"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "     * Shows the help window."
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws IllegalStateException"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "     * \u003cul\u003e"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "     *     \u003cli\u003e"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "     *         if this method is called on a thread other than the JavaFX Application Thread."
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "     *     \u003c/li\u003e"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "     *     \u003cli\u003e"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "     *         if this method is called during animation or layout processing."
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "     *     \u003c/li\u003e"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "     *     \u003cli\u003e"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "     *         if this method is called on the primary stage."
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "     *     \u003c/li\u003e"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "     *     \u003cli\u003e"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "     *         if {@code dialogStage} is already showing."
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "     *     \u003c/li\u003e"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "     * \u003c/ul\u003e"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "    public void show() {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "        logger.fine(\"Showing help page about the application.\");"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "        getRoot().show();"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "        getRoot().centerOnScreen();"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns true if the help window is currently being shown."
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean isShowing() {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "        return getRoot().isShowing();"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "     * Hides the help window."
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "    public void hide() {"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "        getRoot().hide();"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "     * Focuses on the help window."
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "    public void focus() {"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "        getRoot().requestFocus();"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "     * Copies the URL to the user guide to the clipboard."
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "    private void copyUrl() {"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "        final Clipboard clipboard \u003d Clipboard.getSystemClipboard();"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "        final ClipboardContent url \u003d new ClipboardContent();"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "        url.putString(USERGUIDE_URL);"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "        clipboard.setContent(url);"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "chrischenhui": 2,
      "-": 101
    }
  },
  {
    "path": "src/main/java/seedu/address/ui/MainWindow.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.event.ActionEvent;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "chrischenhui"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "dragontho"
        },
        "content": "import javafx.scene.Scene;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.control.MenuItem;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.control.TextInputControl;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.input.KeyCombination;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.input.KeyEvent;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": "import javafx.scene.layout.AnchorPane;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.layout.StackPane;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.stage.Stage;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": "import seedu.address.appmanager.AppManager;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.GuiSettings;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "sreesubbash"
        },
        "content": "import seedu.address.logic.UiLogicHelper;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.CommandResult;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "chrischenhui"
        },
        "content": "import seedu.address.logic.commands.gamecommands.GameCommandResult;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": " * The Main Window. Provides the basic application layout containing"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": " * a menu bar and space where other JavaFX elements can be placed."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "public class MainWindow extends UiPart\u003cStage\u003e {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String FXML \u003d \"MainWindow.fxml\";"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "chrischenhui"
        },
        "content": "    private static final String FIRST_MESSAGE_LOAD_BANK \u003d \"Welcome to Dukemon!\\n\""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "chrischenhui"
        },
        "content": "            + \"Start by loading a bank:\\n\""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "chrischenhui"
        },
        "content": "            + \"Eg. bank sample\";"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    private final Logger logger \u003d LogsCenter.getLogger(getClass());"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    private Stage primaryStage;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "dragontho"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": "    private AppManager appManager;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "sreesubbash"
        },
        "content": "    private UiLogicHelper uiLogicHelper;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "dragontho"
        },
        "content": "    //Secondary parser for updating the Ui."
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "dragontho"
        },
        "content": "    private UpdateUi updateUi;"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    // Independent Ui parts residing in this Ui container"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "dragontho"
        },
        "content": "    private TimerDisplay timerDisplay;"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    private ResultDisplay resultDisplay;"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "dragontho"
        },
        "content": "    private ModularDisplay modularDisplay;"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "dragontho"
        },
        "content": "    private CurrentModeFooter currentModeFooter;"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    private HelpWindow helpWindow;"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": "    private CommandBox commandBox;"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "dragontho"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "dragontho"
        },
        "content": "    private Scene scene;"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    private StackPane commandBoxPlaceholder;"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "    private MenuItem helpMenuItem;"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "    private StackPane resultDisplayPlaceholder;"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "dragontho"
        },
        "content": "    //One size fits all stackpane"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "dragontho"
        },
        "content": "    private StackPane modularDisplayPlaceholder;"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": "    //TimerDisplay placeholder"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": "    private AnchorPane timerDisplayPlaceholder;"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "    private StackPane statusbarPlaceholder;"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "dragontho"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "dragontho"
        },
        "content": "    private StackPane currentModePlaceholder;"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "dragontho"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "dragontho"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": "    public MainWindow(Stage primaryStage, AppManager appManager) {"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "        super(FXML, primaryStage);"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "        // Set dependencies"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "        this.primaryStage \u003d primaryStage;"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": "        this.appManager \u003d appManager;"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": "        this.modularDisplay \u003d new ModularDisplay(appManager);"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": "        this.uiLogicHelper \u003d appManager.getLogic();"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "        // Configure the UI"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": "        setWindowDefaultSize(appManager.getGuiSettings());"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "        setAccelerators();"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "        helpWindow \u003d new HelpWindow();"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "    public Stage getPrimaryStage() {"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "        return primaryStage;"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "    private void setAccelerators() {"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "        setAccelerator(helpMenuItem, KeyCombination.valueOf(\"F1\"));"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "     * Sets the accelerator of a MenuItem."
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "chrischenhui"
        },
        "content": "     *"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param keyCombination the KeyCombination value of the accelerator"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "    private void setAccelerator(MenuItem menuItem, KeyCombination keyCombination) {"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "        menuItem.setAccelerator(keyCombination);"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "        /*"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "         * TODO: the code below can be removed once the bug reported here"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "         * https://bugs.openjdk.java.net/browse/JDK-8131666"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "         * is fixed in later version of SDK."
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "         *"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "         * According to the bug report, TextInputControl (TextField, TextArea) will"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "         * consume function-key events. Because CommandBox contains a TextField, and"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "         * ResultDisplay contains a TextArea, thus some accelerators (e.g F1) will"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "         * not work when the focus is in them because the key event is consumed by"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "         * the TextInputControl(s)."
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "         *"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "         * For now, we add following event filter to capture such key events and open"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "         * help window purposely so to support accelerators even when focus is"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "         * in CommandBox or ResultDisplay."
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "         */"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "        getRoot().addEventFilter(KeyEvent.KEY_PRESSED, event -\u003e {"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "            if (event.getTarget() instanceof TextInputControl \u0026\u0026 keyCombination.match(event)) {"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "                menuItem.getOnAction().handle(new ActionEvent());"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": "                event.consume();"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": "        });"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": "     * Fills up all the placeholders of this window."
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": "    void fillInnerParts() {"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": "        //Setting modularDisplay to load mode by default."
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "dragontho"
        },
        "content": "        modularDisplay.swapToHomeDisplay(modularDisplayPlaceholder);"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": "        //Set up the resultDisplay (main feedback for commands)."
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": "        resultDisplay \u003d new ResultDisplay();"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": "        resultDisplayPlaceholder.getChildren().add(resultDisplay.getRoot());"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": "        //Give user instruction to load a bank when first starting up the app."
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": "        resultDisplay.setFeedbackToUser(FIRST_MESSAGE_LOAD_BANK);"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": ""
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": "        //Set up timer display"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": "        timerDisplay \u003d new TimerDisplay();"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": "        timerDisplayPlaceholder.getChildren().add(timerDisplay.getRoot());"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": "        //Set up callback function in AppManager to update TimerDisplay"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": "        appManager.registerTimerDisplayCallBack(this::updateTimerDisplay);"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": "        //Set up callback function in AppManager to update HintDisplay"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": "        appManager.registerHintDisplayCallBack(this::updateHintDisplay);"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": "        //Set up callback function in AppManager to update QuestionDisplay"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": "        appManager.registerQuestionDisplayCallBack(this::updateQuestionDisplay);"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": "        //Set up callback function in AppManager to call MainWindow\u0027s executeCommand"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": "        appManager.registerMainWindowExecuteCallBack(this::executeCommand);"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": ""
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": "        StatusBarFooter statusBarFooter \u003d new StatusBarFooter(appManager.getAddressBookFilePath());"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "-"
        },
        "content": "        statusbarPlaceholder.getChildren().add(statusBarFooter.getRoot());"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "dragontho"
        },
        "content": "        //Displays the current mode. Starts in \"load\" mode."
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "dragontho"
        },
        "content": "        currentModeFooter \u003d new CurrentModeFooter();"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "dragontho"
        },
        "content": "        currentModePlaceholder.getChildren().add(currentModeFooter.getRoot());"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "dragontho"
        },
        "content": ""
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "sreesubbash"
        },
        "content": "        //Set up command box"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "sreesubbash"
        },
        "content": "        commandBox \u003d new CommandBox(this::executeCommand, uiLogicHelper);"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "-"
        },
        "content": "        commandBoxPlaceholder.getChildren().add(commandBox.getRoot());"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "dragontho"
        },
        "content": ""
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "dragontho"
        },
        "content": "        //Assigns only after initialisation."
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": "        updateUi \u003d new UpdateUi(modularDisplay, currentModeFooter);"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "dragontho"
        },
        "content": "        updateUi.setTheme(appManager.getAppSettings().getDefaultTheme(), scene);"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "dragontho"
        },
        "content": ""
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "dragontho"
        },
        "content": ""
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "-"
        },
        "content": "     * Sets the default size based on {@code guiSettings}."
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "-"
        },
        "content": "    private void setWindowDefaultSize(GuiSettings guiSettings) {"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "-"
        },
        "content": "        primaryStage.setHeight(guiSettings.getWindowHeight());"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "-"
        },
        "content": "        primaryStage.setWidth(guiSettings.getWindowWidth());"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "-"
        },
        "content": "        if (guiSettings.getWindowCoordinates() !\u003d null) {"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "-"
        },
        "content": "            primaryStage.setX(guiSettings.getWindowCoordinates().getX());"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "-"
        },
        "content": "            primaryStage.setY(guiSettings.getWindowCoordinates().getY());"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "-"
        },
        "content": "     * Opens the help window or focuses on it if it\u0027s already opened."
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "-"
        },
        "content": "    public void handleHelp() {"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!helpWindow.isShowing()) {"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "-"
        },
        "content": "            helpWindow.show();"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "-"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "-"
        },
        "content": "            helpWindow.focus();"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "-"
        },
        "content": "    void show() {"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "-"
        },
        "content": "        primaryStage.show();"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "-"
        },
        "content": "     * Closes the application."
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "-"
        },
        "content": "    private void handleExit() {"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "-"
        },
        "content": "        GuiSettings guiSettings \u003d new GuiSettings(primaryStage.getWidth(), primaryStage.getHeight(),"
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "-"
        },
        "content": "                (int) primaryStage.getX(), (int) primaryStage.getY());"
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": "        appManager.setGuiSettings(guiSettings);"
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "-"
        },
        "content": "        helpWindow.hide();"
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "-"
        },
        "content": "        primaryStage.hide();"
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "jascxx"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "jascxx"
        },
        "content": "     * Opens the result stats window when the game is finished."
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "jascxx"
        },
        "content": "     */"
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "jascxx"
        },
        "content": "    private void handleFinishedGame() {"
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": "        if (appManager.getGameStatistics() \u003d\u003d null) {"
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "jascxx"
        },
        "content": "            throw new IllegalStateException(\"gameStatistics in gameManager should not be null when game\""
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "jascxx"
        },
        "content": "                    + \"is finished\");"
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "jascxx"
        },
        "content": "        }"
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "dragontho"
        },
        "content": ""
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": "        modularDisplay.swapToGameResult(modularDisplayPlaceholder, appManager.getGameStatistics(),"
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "jascxx"
        },
        "content": "                appManager.getActiveWordBankStatistics());"
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "-"
        },
        "content": "     * Executes the command and returns the result."
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "-"
        },
        "content": "     * @see seedu.address.logic.Logic#execute(String)"
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "-"
        },
        "content": "    private CommandResult executeCommand(String commandText) throws CommandException, ParseException {"
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": ""
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": "            CommandResult commandResult \u003d appManager.execute(commandText);"
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "-"
        },
        "content": "            logger.info(\"Result: \" + commandResult.getFeedbackToUser());"
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": ""
      },
      {
        "lineNumber": 248,
        "author": {
          "gitId": "-"
        },
        "content": "            resultDisplay.setFeedbackToUser(commandResult.getFeedbackToUser());"
      },
      {
        "lineNumber": 249,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 250,
        "author": {
          "gitId": "dragontho"
        },
        "content": "            //Updates the Ui."
      },
      {
        "lineNumber": 251,
        "author": {
          "gitId": "dragontho"
        },
        "content": "            updateUi.updateModularDisplay(uiLogicHelper.getMode(), modularDisplayPlaceholder);"
      },
      {
        "lineNumber": 252,
        "author": {
          "gitId": "dragontho"
        },
        "content": ""
      },
      {
        "lineNumber": 253,
        "author": {
          "gitId": "dragontho"
        },
        "content": "            updateUi.setTheme(appManager.getAppSettings().getDefaultTheme(), scene);"
      },
      {
        "lineNumber": 254,
        "author": {
          "gitId": "dragontho"
        },
        "content": ""
      },
      {
        "lineNumber": 255,
        "author": {
          "gitId": "-"
        },
        "content": "            if (commandResult.isShowHelp()) {"
      },
      {
        "lineNumber": 256,
        "author": {
          "gitId": "-"
        },
        "content": "                handleHelp();"
      },
      {
        "lineNumber": 257,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 258,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 259,
        "author": {
          "gitId": "-"
        },
        "content": "            if (commandResult.isExit()) {"
      },
      {
        "lineNumber": 260,
        "author": {
          "gitId": "-"
        },
        "content": "                handleExit();"
      },
      {
        "lineNumber": 261,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 262,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 263,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": "            if (commandResult.isPromptingGuess()) {"
      },
      {
        "lineNumber": 264,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": "                commandBox.setGuessTextAndCaret();"
      },
      {
        "lineNumber": 265,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 266,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": "                commandBox.clearCommandBox();"
      },
      {
        "lineNumber": 267,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": "            }"
      },
      {
        "lineNumber": 268,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": ""
      },
      {
        "lineNumber": 269,
        "author": {
          "gitId": "jascxx"
        },
        "content": "            if (commandResult instanceof GameCommandResult) {"
      },
      {
        "lineNumber": 270,
        "author": {
          "gitId": "jascxx"
        },
        "content": "                GameCommandResult gameCommandResult \u003d (GameCommandResult) commandResult;"
      },
      {
        "lineNumber": 271,
        "author": {
          "gitId": "jascxx"
        },
        "content": "                if (gameCommandResult.isFinishedGame()) {"
      },
      {
        "lineNumber": 272,
        "author": {
          "gitId": "jascxx"
        },
        "content": "                    handleFinishedGame();"
      },
      {
        "lineNumber": 273,
        "author": {
          "gitId": "jascxx"
        },
        "content": "                }"
      },
      {
        "lineNumber": 274,
        "author": {
          "gitId": "jascxx"
        },
        "content": "            }"
      },
      {
        "lineNumber": 275,
        "author": {
          "gitId": "jascxx"
        },
        "content": ""
      },
      {
        "lineNumber": 276,
        "author": {
          "gitId": "-"
        },
        "content": "            return commandResult;"
      },
      {
        "lineNumber": 277,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (CommandException | ParseException e) {"
      },
      {
        "lineNumber": 278,
        "author": {
          "gitId": "-"
        },
        "content": "            logger.info(\"Invalid command: \" + commandText);"
      },
      {
        "lineNumber": 279,
        "author": {
          "gitId": "-"
        },
        "content": "            resultDisplay.setFeedbackToUser(e.getMessage());"
      },
      {
        "lineNumber": 280,
        "author": {
          "gitId": "-"
        },
        "content": "            throw e;"
      },
      {
        "lineNumber": 281,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 282,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 283,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": ""
      },
      {
        "lineNumber": 284,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 285,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": "     * Updates the timerDisplay module of MainWindow to be called from GameTimerManager."
      },
      {
        "lineNumber": 286,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": "     * @param timerMessage Message to be displayed on the TimerDisplay."
      },
      {
        "lineNumber": 287,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": "     * @param timeLeft Time in milliseconds that is left in the current timer."
      },
      {
        "lineNumber": 288,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": "     */"
      },
      {
        "lineNumber": 289,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": "    private void updateTimerDisplay(String timerMessage, long timeLeft, long totalTimeGiven) {"
      },
      {
        "lineNumber": 290,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": "        double percentageTimeLeft \u003d (timeLeft * 1.0) / totalTimeGiven;"
      },
      {
        "lineNumber": 291,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": ""
      },
      {
        "lineNumber": 292,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": "        /* when time left is \u003c\u003d half of totalTime given, switch to alert colour */"
      },
      {
        "lineNumber": 293,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": "        if (percentageTimeLeft \u003c\u003d 0.5) {"
      },
      {
        "lineNumber": 294,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": "            this.timerDisplay.setAlertTextColour();"
      },
      {
        "lineNumber": 295,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 296,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": "            this.timerDisplay.setNormalTextColour();"
      },
      {
        "lineNumber": 297,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": "        }"
      },
      {
        "lineNumber": 298,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": "        timerDisplay.setProgressBarProgress(percentageTimeLeft);"
      },
      {
        "lineNumber": 299,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": "        timerDisplay.setFeedbackToUser(timerMessage);"
      },
      {
        "lineNumber": 300,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": "    }"
      },
      {
        "lineNumber": 301,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": ""
      },
      {
        "lineNumber": 302,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 303,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": "     * Updates the HintDisplay section of the UI with the {@code resultDisplayMessage} string."
      },
      {
        "lineNumber": 304,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": "     */"
      },
      {
        "lineNumber": 305,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": "    private void updateHintDisplay(String hintString) {"
      },
      {
        "lineNumber": 306,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": "        modularDisplay.updateHint(hintString, modularDisplayPlaceholder);"
      },
      {
        "lineNumber": 307,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": "    }"
      },
      {
        "lineNumber": 308,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": ""
      },
      {
        "lineNumber": 309,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 310,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": "     * Updates the QuestionDisplay section of the UI in the modularDisplay with"
      },
      {
        "lineNumber": 311,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": "     * {@code questionString}"
      },
      {
        "lineNumber": 312,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": "     */"
      },
      {
        "lineNumber": 313,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": "    private void updateQuestionDisplay(String questionString) {"
      },
      {
        "lineNumber": 314,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": "        modularDisplay.updateQuestion(questionString, modularDisplayPlaceholder);"
      },
      {
        "lineNumber": 315,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": "    }"
      },
      {
        "lineNumber": 316,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": ""
      },
      {
        "lineNumber": 317,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "dragontho": 31,
      "sreesubbash": 4,
      "jascxx": 15,
      "chrischenhui": 6,
      "kohyida1997": 82,
      "-": 179
    }
  },
  {
    "path": "src/main/java/seedu/address/ui/ModularDisplay.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "dragontho"
        },
        "content": "package seedu.address.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "dragontho"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "jascxx"
        },
        "content": "import java.util.Random;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "jascxx"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "dragontho"
        },
        "content": "import javafx.scene.layout.StackPane;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": "import seedu.address.appmanager.AppManager;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "jascxx"
        },
        "content": "import seedu.address.model.globalstatistics.GlobalStatistics;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "jascxx"
        },
        "content": "import seedu.address.model.wordbankstatslist.WordBankStatisticsList;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "jascxx"
        },
        "content": "import seedu.address.statistics.GameStatistics;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "jascxx"
        },
        "content": "import seedu.address.statistics.WordBankStatistics;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "dragontho"
        },
        "content": "import seedu.address.ui.layouts.TwoSplitColumnLayout;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "dragontho"
        },
        "content": "import seedu.address.ui.layouts.TwoSplitRowLayout;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": "import seedu.address.ui.modules.BankLabelPanel;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": "import seedu.address.ui.modules.CardListPanel;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": "import seedu.address.ui.modules.GameResultPanel;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": "import seedu.address.ui.modules.HintLabel;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": "import seedu.address.ui.modules.LoadBankPanel;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": "import seedu.address.ui.modules.MainTitlePanel;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": "import seedu.address.ui.modules.QuestionLabel;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": "import seedu.address.ui.modules.SettingsPanel;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": "import seedu.address.ui.modules.TitleScreenPanel;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": "import seedu.address.ui.modules.WordBankStatisticsPanel;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "dragontho"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "dragontho"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "chrischenhui"
        },
        "content": "/**"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "chrischenhui"
        },
        "content": " * Displays the screen for Dukemon."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "chrischenhui"
        },
        "content": " */"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "dragontho"
        },
        "content": "public class ModularDisplay {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "dragontho"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "dragontho"
        },
        "content": "    //Layouts for non single-pane displays"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "dragontho"
        },
        "content": "    private TwoSplitColumnLayout twoSplitColumnLayout;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "dragontho"
        },
        "content": "    private TwoSplitRowLayout twoSplitRowLayout;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "dragontho"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "dragontho"
        },
        "content": "    //Modules"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "dragontho"
        },
        "content": "    private BankLabelPanel bankLabelPanel;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "sreesubbash"
        },
        "content": "    private final LoadBankPanel loadBankPanel;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "dragontho"
        },
        "content": "    private final TitleScreenPanel titleScreenPanel;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "dragontho"
        },
        "content": "    private final SettingsPanel settingsPanel;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": "    private final AppManager appManager;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "dragontho"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": "    //For the game"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": "    private QuestionLabel questionLabel;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": "    private HintLabel hintLabel;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "chrischenhui"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "chrischenhui"
        },
        "content": "     * Changes the screen."
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "chrischenhui"
        },
        "content": "     *"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": "     * @param appManager GameManager who will render lists."
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "chrischenhui"
        },
        "content": "     */"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": "    public ModularDisplay(AppManager appManager) {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "chrischenhui"
        },
        "content": "        loadBankPanel \u003d new LoadBankPanel(appManager.getStorage());"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "dragontho"
        },
        "content": "        titleScreenPanel \u003d new TitleScreenPanel();"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "dragontho"
        },
        "content": "        settingsPanel \u003d new SettingsPanel(appManager.getAppSettings());"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": "        questionLabel \u003d new QuestionLabel();"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": "        hintLabel \u003d new HintLabel();"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": "        this.appManager \u003d appManager;"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "dragontho"
        },
        "content": "    }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "dragontho"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "dragontho"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "dragontho"
        },
        "content": "     * Initially displays loading."
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "dragontho"
        },
        "content": "     *"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "dragontho"
        },
        "content": "     * @param paneToDisplay The view to change."
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "dragontho"
        },
        "content": "     */"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "dragontho"
        },
        "content": "    public void swapToHomeDisplay(StackPane paneToDisplay) {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "dragontho"
        },
        "content": "        twoSplitRowLayout \u003d new TwoSplitRowLayout();"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "dragontho"
        },
        "content": "        twoSplitColumnLayout \u003d new TwoSplitColumnLayout();"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "dragontho"
        },
        "content": "        int avatarId \u003d appManager.getAppSettings().getAvatarId();"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "dragontho"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "jascxx"
        },
        "content": "        WordBankStatisticsList wbStatsList \u003d appManager.getActiveWordBankStatisticsList();"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "jascxx"
        },
        "content": "        GlobalStatistics globalStats \u003d appManager.getGlobalStatistics();"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "jascxx"
        },
        "content": "        twoSplitColumnLayout.addToLeftPane(new MainTitlePanel("
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "jascxx"
        },
        "content": "                globalStats,"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "jascxx"
        },
        "content": "                wbStatsList.getMostPlayedWordBankStatistics(),"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "dragontho"
        },
        "content": "                avatarId \u003d\u003d 0"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "dragontho"
        },
        "content": "                ? new Random().nextInt(AvatarImageUtil.TOTAL_NUM) + 1"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "dragontho"
        },
        "content": "                : avatarId).getRoot());"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "dragontho"
        },
        "content": "        twoSplitColumnLayout.addToRightPane(loadBankPanel.getRoot());"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "dragontho"
        },
        "content": "        paneToDisplay.getChildren().add(twoSplitColumnLayout.getRoot());"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "dragontho"
        },
        "content": "    }"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "dragontho"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "dragontho"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "dragontho"
        },
        "content": "     * Changes to the bank preview screen where the user can see the cards in his word bank."
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "dragontho"
        },
        "content": "     *"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "dragontho"
        },
        "content": "     * @param paneToDisplay The view to change."
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "dragontho"
        },
        "content": "     */"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "dragontho"
        },
        "content": "    public void swapToOpenDisplay(StackPane paneToDisplay) {"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "jascxx"
        },
        "content": "        bankLabelPanel \u003d new BankLabelPanel(appManager.getSelectedWbName());"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "dragontho"
        },
        "content": "        twoSplitRowLayout \u003d new TwoSplitRowLayout();"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "dragontho"
        },
        "content": "        twoSplitColumnLayout \u003d new TwoSplitColumnLayout();"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "dragontho"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "jascxx"
        },
        "content": "        twoSplitColumnLayout.addToLeftPane("
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "jascxx"
        },
        "content": "                new WordBankStatisticsPanel(appManager.getActiveWordBankStatistics(),"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "jascxx"
        },
        "content": "                        appManager.getActiveWordBank()).getRoot());"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "jascxx"
        },
        "content": "        twoSplitColumnLayout.addToRightPane("
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "jascxx"
        },
        "content": "                new CardListPanel(appManager.getFilteredPersonList()).getRoot());"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "dragontho"
        },
        "content": "        paneToDisplay.getChildren().add(twoSplitColumnLayout.getRoot());"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "dragontho"
        },
        "content": "    }"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "dragontho"
        },
        "content": ""
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "chrischenhui"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "chrischenhui"
        },
        "content": "     * Changes back to home display."
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "chrischenhui"
        },
        "content": "     *"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "dragontho"
        },
        "content": "     * @param paneToDisplay The view to change."
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "chrischenhui"
        },
        "content": "     */"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "dragontho"
        },
        "content": "    public void swapToHome(StackPane paneToDisplay) {"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "dragontho"
        },
        "content": "        paneToDisplay.getChildren().clear();"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "dragontho"
        },
        "content": "        paneToDisplay.getChildren().add(titleScreenPanel.getRoot());"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "dragontho"
        },
        "content": "    }"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "dragontho"
        },
        "content": ""
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "chrischenhui"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "dragontho"
        },
        "content": "     * Changes to the word list."
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "chrischenhui"
        },
        "content": "     *"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "dragontho"
        },
        "content": "     * @param paneToDisplay The view to change."
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "chrischenhui"
        },
        "content": "     */"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "dragontho"
        },
        "content": "    public void swapToList(StackPane paneToDisplay) {"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "dragontho"
        },
        "content": "        paneToDisplay.getChildren().clear();"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "jascxx"
        },
        "content": "        paneToDisplay.getChildren().add(new CardListPanel(appManager.getFilteredPersonList()).getRoot());"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "dragontho"
        },
        "content": "    }"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "dragontho"
        },
        "content": ""
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "jascxx"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "jascxx"
        },
        "content": "     * Changes to the game result."
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "jascxx"
        },
        "content": "     *"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "jascxx"
        },
        "content": "     * @param paneToDisplay The view to change."
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "jascxx"
        },
        "content": "     * @param gameStatistics The statistics to be shown in the game result panel."
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "jascxx"
        },
        "content": "     * @param wbStatistics The overall word bank statistics."
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "jascxx"
        },
        "content": "     */"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "jascxx"
        },
        "content": "    public void swapToGameResult(StackPane paneToDisplay, GameStatistics gameStatistics,"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "jascxx"
        },
        "content": "                                 WordBankStatistics wbStatistics) {"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "jascxx"
        },
        "content": "        paneToDisplay.getChildren().clear();"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "dragontho"
        },
        "content": "        if (gameStatistics \u003d\u003d null || wbStatistics \u003d\u003d null) {"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "dragontho"
        },
        "content": "            System.out.println(\"YOOOOO somthings null here\");"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "dragontho"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "jascxx"
        },
        "content": "            paneToDisplay.getChildren().add(new GameResultPanel(gameStatistics, wbStatistics).getRoot());"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "jascxx"
        },
        "content": "        }"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "jascxx"
        },
        "content": ""
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "dragontho"
        },
        "content": "    }"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "dragontho"
        },
        "content": ""
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "dragontho"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "dragontho"
        },
        "content": "     * Changes to list the word banks."
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "dragontho"
        },
        "content": "     *"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "dragontho"
        },
        "content": "     * @param paneToDisplay The view to change."
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "dragontho"
        },
        "content": "     */"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "sreesubbash"
        },
        "content": "    public void swapToBanks(StackPane paneToDisplay) {"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "sreesubbash"
        },
        "content": "        paneToDisplay.getChildren().clear();"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "sreesubbash"
        },
        "content": "        paneToDisplay.getChildren().add(loadBankPanel.getRoot());"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "sreesubbash"
        },
        "content": "    }"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "dragontho"
        },
        "content": ""
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "dragontho"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "dragontho"
        },
        "content": "     * Changes to the settings page."
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "dragontho"
        },
        "content": "     *"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "dragontho"
        },
        "content": "     * @param paneToDisplay"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "dragontho"
        },
        "content": "     */"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "dragontho"
        },
        "content": "    public void swapToSettings(StackPane paneToDisplay) {"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "dragontho"
        },
        "content": "        paneToDisplay.getChildren().clear();"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "dragontho"
        },
        "content": "        settingsPanel.updateSettings();"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "dragontho"
        },
        "content": "        paneToDisplay.getChildren().add(settingsPanel.getRoot());"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "dragontho"
        },
        "content": "    }"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "dragontho"
        },
        "content": ""
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": ""
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": "     * Creates and returns a {@code TwoSplitRowLayout} that contains the question and hint label."
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": "     * @return"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": "     */"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": "    public TwoSplitRowLayout createQuestionHints() {"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": "        twoSplitRowLayout \u003d new TwoSplitRowLayout();"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": "        twoSplitRowLayout.addToTopPane(questionLabel.getRoot());"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": "        twoSplitRowLayout.addToBottomPane(hintLabel.getRoot());"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": "        return twoSplitRowLayout;"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": "    }"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": ""
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": "     * Updates the question label and reconstructs the TwoSplitRowDisplay with"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": "     * {@code question} on the {@code StackPaneToDisplay}."
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": "     */"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": "    public void updateQuestion(String question, StackPane paneToDisplay) {"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": "        questionLabel.updateQuestionLabel(question);"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": "        hintLabel.updateHintLabel(\"No Hints To Display\");"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": "        paneToDisplay.getChildren().clear();"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": "        paneToDisplay.getChildren().add(createQuestionHints().getRoot());"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": "    }"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": ""
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": "     * Updates the hint label and reconstructs the TwoSplitRowDisplay with"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": "     * {@code hint} on the {@code StackPaneToDisplay}."
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": "     */"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": "    public void updateHint(String hint, StackPane paneToDisplay) {"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": "        hintLabel.updateHintLabel(hint);"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": "        paneToDisplay.getChildren().clear();"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": "        paneToDisplay.getChildren().add(createQuestionHints().getRoot());"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": "    }"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "dragontho"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "dragontho": 86,
      "sreesubbash": 5,
      "jascxx": 31,
      "chrischenhui": 15,
      "kohyida1997": 54
    }
  },
  {
    "path": "src/main/java/seedu/address/ui/ResultDisplay.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.control.TextArea;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.layout.Region;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": " * A ui for the status bar that is displayed at the header of the application."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "public class ResultDisplay extends UiPart\u003cRegion\u003e {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String FXML \u003d \"ResultDisplay.fxml\";"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    private TextArea resultDisplay;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    public ResultDisplay() {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "        super(FXML);"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setFeedbackToUser(String feedbackToUser) {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(feedbackToUser);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "        resultDisplay.setText(feedbackToUser);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": "    public String getCurrentTextOnDisplay() {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": "        return resultDisplay.getText();"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "kohyida1997": 3,
      "-": 28
    }
  },
  {
    "path": "src/main/java/seedu/address/ui/TimerDisplay.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": "package seedu.address.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": "import javafx.scene.control.ProgressBar;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": "import javafx.scene.control.TextArea;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": "import javafx.scene.layout.Region;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "jascxx"
        },
        "content": "/**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": " * Represents a timer display that shows the time left in seconds as well as a Progress Bar."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "jascxx"
        },
        "content": " */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": "public class TimerDisplay extends UiPart\u003cRegion\u003e {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": "    private static final String FXML \u003d \"TimerDisplay.fxml\";"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": "    private ProgressBar progressBar;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": "    private TextArea timerText;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": "    public TimerDisplay() {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": "        super(FXML);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": "        progressBar.setVisible(false);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": "    }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": "    public void setAlertTextColour() {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": "        timerText.setId(\"timer-alert-style\");"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": "        progressBar.setId(\"progress-bar-alert\");"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": "    public void setNormalTextColour() {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": "        timerText.setId(\"timer-normal-style\");"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": "        progressBar.setId(\"progress-bar-normal\");"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": "    }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": "    public void setFeedbackToUser(String feedbackToUser) {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": "        timerText.setText(feedbackToUser);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": "     * Sets the percentage progress on the progress bar. Progress is zero, progress bar is made invisible."
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": "     * @param percentage Current progress"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": "     */"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": "    void setProgressBarProgress(double percentage) {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": "        if (percentage \u003c\u003d 0) {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": "            progressBar.setVisible(false);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": "            return;"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": "        }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": "        progressBar.setVisible(true);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": "        this.progressBar.setProgress(percentage);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": "    }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "jascxx": 2,
      "kohyida1997": 53
    }
  },
  {
    "path": "src/main/java/seedu/address/ui/UiManager.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.application.Platform;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.control.Alert;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.control.Alert.AlertType;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.image.Image;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.stage.Stage;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.MainApp;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": "import seedu.address.appmanager.AppManager;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.util.StringUtil;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": " * The manager of the UI component."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "public class UiManager implements Ui {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String ALERT_DIALOG_PANE_FIELD_ID \u003d \"alertDialogPane\";"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final Logger logger \u003d LogsCenter.getLogger(UiManager.class);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String ICON_APPLICATION \u003d \"/images/address_book_32.png\";"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": "    private AppManager appManager;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    private MainWindow mainWindow;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": "    public UiManager(AppManager appManager) {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        super();"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": "        this.appManager \u003d appManager;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    public void start(Stage primaryStage) {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "        logger.info(\"Starting UI...\");"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        //Set the application icon."
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        primaryStage.getIcons().add(getImage(ICON_APPLICATION));"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": "            mainWindow \u003d new MainWindow(primaryStage, appManager);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "            mainWindow.show(); //This should be called before creating other UI parts"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "            mainWindow.fillInnerParts();"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (Throwable e) {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "            logger.severe(StringUtil.getDetails(e));"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "            showFatalErrorDialogAndShutdown(\"Fatal error during initializing\", e);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    private Image getImage(String imagePath) {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        return new Image(MainApp.class.getResourceAsStream(imagePath));"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    void showAlertDialogAndWait(Alert.AlertType type, String title, String headerText, String contentText) {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "        showAlertDialogAndWait(mainWindow.getPrimaryStage(), type, title, headerText, contentText);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "     * Shows an alert dialog on {@code owner} with the given parameters."
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "     * This method only returns after the user has closed the alert dialog."
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "    private static void showAlertDialogAndWait(Stage owner, AlertType type, String title, String headerText,"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "                                               String contentText) {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "        final Alert alert \u003d new Alert(type);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "        alert.getDialogPane().getStylesheets().add(\"view/DarkTheme.css\");"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "        alert.initOwner(owner);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "        alert.setTitle(title);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "        alert.setHeaderText(headerText);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "        alert.setContentText(contentText);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "        alert.getDialogPane().setId(ALERT_DIALOG_PANE_FIELD_ID);"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "        alert.showAndWait();"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "     * Shows an error alert dialog with {@code title} and error message, {@code e},"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "     * and exits the application after the user has closed the alert dialog."
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "    private void showFatalErrorDialogAndShutdown(String title, Throwable e) {"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "        logger.severe(title + \" \" + e.getMessage() + StringUtil.getDetails(e));"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "        showAlertDialogAndWait(Alert.AlertType.ERROR, title, e.getMessage(), e.toString());"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "        Platform.exit();"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "        System.exit(1);"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "kohyida1997": 5,
      "-": 81
    }
  },
  {
    "path": "src/main/java/seedu/address/ui/UpdateUi.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "dragontho"
        },
        "content": "package seedu.address.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "dragontho"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "dragontho"
        },
        "content": "import javafx.scene.Scene;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "dragontho"
        },
        "content": "import javafx.scene.layout.StackPane;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": "import seedu.address.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "dragontho"
        },
        "content": "import seedu.address.logic.util.ModeEnum;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "dragontho"
        },
        "content": "import seedu.address.model.appsettings.ThemeEnum;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "dragontho"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "dragontho"
        },
        "content": "/**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "dragontho"
        },
        "content": " * Class to handle updating of Ui."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "dragontho"
        },
        "content": " */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "dragontho"
        },
        "content": "public class UpdateUi {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "dragontho"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "dragontho"
        },
        "content": "    private ModularDisplay modularDisplay;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "dragontho"
        },
        "content": "    private CurrentModeFooter currentModeFooter;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": "    private final Logger logger \u003d LogsCenter.getLogger(UpdateUi.class);"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "dragontho"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "dragontho"
        },
        "content": "    public UpdateUi(ModularDisplay modularDisplay, CurrentModeFooter currentModeFooter) {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "dragontho"
        },
        "content": "        this.modularDisplay \u003d modularDisplay;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "dragontho"
        },
        "content": "        this.currentModeFooter \u003d currentModeFooter;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "dragontho"
        },
        "content": "    }"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "dragontho"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "dragontho"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "dragontho"
        },
        "content": "     * Updates the {@code ModularDisplay} in {@code MainWindow}."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "dragontho"
        },
        "content": "     *"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "dragontho"
        },
        "content": "     * @param modeEnum The mode that the app is currently in."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "dragontho"
        },
        "content": "     * @param modularDisplayPlaceholder {@code modularDisplayPlaceholder} in {@code MainWindow} that gets updated."
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "dragontho"
        },
        "content": "     */"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "dragontho"
        },
        "content": "    public void updateModularDisplay(ModeEnum modeEnum, StackPane modularDisplayPlaceholder) {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "dragontho"
        },
        "content": "        switch (modeEnum) {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "dragontho"
        },
        "content": "        case OPEN:"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "dragontho"
        },
        "content": "            modularDisplay.swapToOpenDisplay(modularDisplayPlaceholder);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "dragontho"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "dragontho"
        },
        "content": "        case HOME:"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "dragontho"
        },
        "content": "            modularDisplay.swapToHomeDisplay(modularDisplayPlaceholder);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "dragontho"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "dragontho"
        },
        "content": "        case SETTINGS:"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "dragontho"
        },
        "content": "            modularDisplay.swapToSettings(modularDisplayPlaceholder);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "dragontho"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "dragontho"
        },
        "content": "        default:"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "dragontho"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "dragontho"
        },
        "content": "        }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "dragontho"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "dragontho"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "dragontho"
        },
        "content": "    public void setTheme(ThemeEnum theme, Scene scene) {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "dragontho"
        },
        "content": "        if (theme.equals(ThemeEnum.DARK)) {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "dragontho"
        },
        "content": "            scene.getStylesheets().clear();"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "dragontho"
        },
        "content": "            scene.getStylesheets().add(theme.getThemeUrl());"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "dragontho"
        },
        "content": "            scene.getStylesheets().add(theme.getExtensionUrl());"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "dragontho"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "dragontho"
        },
        "content": "            scene.getStylesheets().clear();"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "dragontho"
        },
        "content": "            scene.getStylesheets().add(theme.getThemeUrl());"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "dragontho"
        },
        "content": "            scene.getStylesheets().add(theme.getExtensionUrl());"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "dragontho"
        },
        "content": "        }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": "        logger.info(\"----------------[UpdateUI][Setting Stylesheets]\""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": "                + \"\\n\" + \"Current Stylesheet is: \" + theme.toString());"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "dragontho"
        },
        "content": "    }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "dragontho"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "dragontho"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "dragontho": 55,
      "kohyida1997": 7
    }
  },
  {
    "path": "src/main/java/seedu/address/ui/layouts/TwoSplitColumnLayout.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "dragontho"
        },
        "content": "package seedu.address.ui.layouts;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "dragontho"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "dragontho"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "dragontho"
        },
        "content": "import javafx.scene.Node;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "dragontho"
        },
        "content": "import javafx.scene.control.SplitPane;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "dragontho"
        },
        "content": "import javafx.scene.layout.StackPane;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "dragontho"
        },
        "content": "import seedu.address.ui.UiPart;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "dragontho"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "dragontho"
        },
        "content": "/**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "dragontho"
        },
        "content": " * Layout class to use in {@code ModularDisplay} split vertically."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "dragontho"
        },
        "content": " */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "dragontho"
        },
        "content": "public class TwoSplitColumnLayout extends UiPart\u003cNode\u003e {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "dragontho"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "dragontho"
        },
        "content": "    private static final String FXML \u003d \"TwoSplitColumnLayout.fxml\";"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "dragontho"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "dragontho"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "dragontho"
        },
        "content": "    private SplitPane splitPane;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "dragontho"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "dragontho"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "dragontho"
        },
        "content": "    private StackPane leftPane;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "dragontho"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "dragontho"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "dragontho"
        },
        "content": "    private StackPane rightPane;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "dragontho"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "dragontho"
        },
        "content": "    public TwoSplitColumnLayout() {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "dragontho"
        },
        "content": "        super(FXML);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "dragontho"
        },
        "content": "        SplitPane.Divider divider \u003d splitPane.getDividers().get(0);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "dragontho"
        },
        "content": "        divider.positionProperty().addListener((observable, oldvalue, newvalue) -\u003e divider.setPosition(0.5));"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "dragontho"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "dragontho"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "dragontho"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "dragontho"
        },
        "content": "     * Adds node to the left pane of the layout."
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "dragontho"
        },
        "content": "     *"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "dragontho"
        },
        "content": "     * @param uiPartToAdd The {@code Node} to add."
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "dragontho"
        },
        "content": "     */"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "dragontho"
        },
        "content": "    public void addToLeftPane(Node uiPartToAdd) {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "dragontho"
        },
        "content": "        leftPane.getChildren().clear();"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "dragontho"
        },
        "content": "        leftPane.getChildren().add(uiPartToAdd);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "dragontho"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "dragontho"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "dragontho"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "dragontho"
        },
        "content": "     * Adds node to the right pane of the layout."
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "dragontho"
        },
        "content": "     *"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "dragontho"
        },
        "content": "     * @param uiPartToAdd The {@code Node} to add."
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "dragontho"
        },
        "content": "     */"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "dragontho"
        },
        "content": "    public void addToRightPane(Node uiPartToAdd) {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "dragontho"
        },
        "content": "        rightPane.getChildren().clear();"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "dragontho"
        },
        "content": "        rightPane.getChildren().add(uiPartToAdd);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "dragontho"
        },
        "content": "    }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "dragontho"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "dragontho"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "dragontho": 51
    }
  },
  {
    "path": "src/main/java/seedu/address/ui/layouts/TwoSplitRowLayout.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "dragontho"
        },
        "content": "package seedu.address.ui.layouts;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "dragontho"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "dragontho"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "dragontho"
        },
        "content": "import javafx.scene.Node;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "dragontho"
        },
        "content": "import javafx.scene.control.SplitPane;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "dragontho"
        },
        "content": "import javafx.scene.layout.StackPane;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "dragontho"
        },
        "content": "import seedu.address.ui.UiPart;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "dragontho"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "dragontho"
        },
        "content": "/**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "dragontho"
        },
        "content": " * Layout class to use in {@code ModularDisplay} split horizontally."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "dragontho"
        },
        "content": " */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "dragontho"
        },
        "content": "public class TwoSplitRowLayout extends UiPart\u003cNode\u003e {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "dragontho"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "dragontho"
        },
        "content": "    private static final String FXML \u003d \"TwoSplitRowLayout.fxml\";"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "dragontho"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "dragontho"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "dragontho"
        },
        "content": "    private SplitPane splitPane;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "dragontho"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "dragontho"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "dragontho"
        },
        "content": "    private StackPane topPane;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "dragontho"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "dragontho"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "dragontho"
        },
        "content": "    private StackPane bottomPane;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "dragontho"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "dragontho"
        },
        "content": "    public TwoSplitRowLayout() {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "dragontho"
        },
        "content": "        super(FXML);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "dragontho"
        },
        "content": "        SplitPane.Divider divider \u003d splitPane.getDividers().get(0);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "dragontho"
        },
        "content": "        divider.positionProperty().addListener((observable, oldvalue, newvalue) -\u003e divider.setPosition(0.5));"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "dragontho"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "dragontho"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "dragontho"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "dragontho"
        },
        "content": "     * Adds node to the top pane of the layout."
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "dragontho"
        },
        "content": "     *"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "dragontho"
        },
        "content": "     * @param uiPartToAdd The {@code Node} to add."
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "dragontho"
        },
        "content": "     */"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "dragontho"
        },
        "content": "    public void addToTopPane(Node uiPartToAdd) {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "dragontho"
        },
        "content": "        topPane.getChildren().clear();"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "dragontho"
        },
        "content": "        topPane.getChildren().add(uiPartToAdd);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "dragontho"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "dragontho"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "dragontho"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "dragontho"
        },
        "content": "     * Adds node to the bottom pane of the layout."
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "dragontho"
        },
        "content": "     *"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "dragontho"
        },
        "content": "     * @param uiPartToAdd The {@code Node} to add."
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "dragontho"
        },
        "content": "     */"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "dragontho"
        },
        "content": "    public void addToBottomPane(Node uiPartToAdd) {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "dragontho"
        },
        "content": "        bottomPane.getChildren().clear();"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "dragontho"
        },
        "content": "        bottomPane.getChildren().add(uiPartToAdd);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "dragontho"
        },
        "content": "    }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "dragontho"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "dragontho"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "dragontho": 51
    }
  },
  {
    "path": "src/main/java/seedu/address/ui/modules/BadgesRow.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jascxx"
        },
        "content": "package seedu.address.ui.modules;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "jascxx"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "jascxx"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "jascxx"
        },
        "content": "import javafx.scene.control.Tooltip;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "jascxx"
        },
        "content": "import javafx.scene.image.Image;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "jascxx"
        },
        "content": "import javafx.scene.image.ImageView;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "jascxx"
        },
        "content": "import javafx.scene.layout.Region;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "jascxx"
        },
        "content": "import javafx.util.Duration;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "jascxx"
        },
        "content": "import seedu.address.commons.util.AppUtil;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "jascxx"
        },
        "content": "import seedu.address.ui.UiPart;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "jascxx"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "jascxx"
        },
        "content": "/**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "jascxx"
        },
        "content": " * A ui component of a row of badges."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "jascxx"
        },
        "content": " */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "jascxx"
        },
        "content": "public class BadgesRow extends UiPart\u003cRegion\u003e {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "jascxx"
        },
        "content": "    private static final String FXML \u003d \"BadgesRow.fxml\";"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "jascxx"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "jascxx"
        },
        "content": "    private static final String BADGE_PATH \u003d \"/images/badges/\";"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "jascxx"
        },
        "content": "    private static final Image BADGE_1_BNW \u003d AppUtil.getImage(BADGE_PATH + \"normal_badge_bnw.png\");"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "jascxx"
        },
        "content": "    private static final Image BADGE_2_BNW \u003d AppUtil.getImage(BADGE_PATH + \"medium_badge_bnw.png\");"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "jascxx"
        },
        "content": "    private static final Image BADGE_3_BNW \u003d AppUtil.getImage(BADGE_PATH + \"hard_badge_bnw.png\");"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "jascxx"
        },
        "content": "    private static final Image BADGE_1_COLOR \u003d AppUtil.getImage(BADGE_PATH + \"normal_badge.png\");"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "jascxx"
        },
        "content": "    private static final Image BADGE_2_COLOR \u003d AppUtil.getImage(BADGE_PATH + \"medium_badge.png\");"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "jascxx"
        },
        "content": "    private static final Image BADGE_3_COLOR \u003d AppUtil.getImage(BADGE_PATH + \"hard_badge.png\");"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "jascxx"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "jascxx"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "jascxx"
        },
        "content": "    private ImageView badge1;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "jascxx"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "jascxx"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "jascxx"
        },
        "content": "    private ImageView badge2;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "jascxx"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "jascxx"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "jascxx"
        },
        "content": "    private ImageView badge3;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "jascxx"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "jascxx"
        },
        "content": "    public BadgesRow(boolean isReceived1, boolean isReceived2, boolean isReceived3) {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "jascxx"
        },
        "content": "        super(FXML);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "jascxx"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "jascxx"
        },
        "content": "        if (isReceived1) {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "jascxx"
        },
        "content": "            this.badge1.setImage(BADGE_1_COLOR);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "jascxx"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "jascxx"
        },
        "content": "            this.badge1.setImage(BADGE_1_BNW);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "jascxx"
        },
        "content": "        }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "jascxx"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "jascxx"
        },
        "content": "        if (isReceived2) {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "jascxx"
        },
        "content": "            this.badge2.setImage(BADGE_2_COLOR);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "jascxx"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "jascxx"
        },
        "content": "            this.badge2.setImage(BADGE_2_BNW);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "jascxx"
        },
        "content": "        }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "jascxx"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "jascxx"
        },
        "content": "        if (isReceived3) {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "jascxx"
        },
        "content": "            this.badge3.setImage(BADGE_3_COLOR);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "jascxx"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "jascxx"
        },
        "content": "            this.badge3.setImage(BADGE_3_BNW);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "jascxx"
        },
        "content": "        }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "jascxx"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "jascxx"
        },
        "content": "        Tooltip easyTooltip \u003d new Tooltip(\"Received on clearing easy mode.\");"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "jascxx"
        },
        "content": "        easyTooltip.setShowDelay(Duration.ZERO);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "jascxx"
        },
        "content": "        Tooltip mediumTooltip \u003d new Tooltip(\"Received on clearing medium mode.\");"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "jascxx"
        },
        "content": "        mediumTooltip.setShowDelay(Duration.ZERO);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "jascxx"
        },
        "content": "        Tooltip hardTooltip \u003d new Tooltip(\"Received on clearing hard mode.\");"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "jascxx"
        },
        "content": "        hardTooltip.setShowDelay(Duration.ZERO);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "jascxx"
        },
        "content": "        Tooltip.install(badge1, easyTooltip);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "jascxx"
        },
        "content": "        Tooltip.install(badge2, mediumTooltip);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "jascxx"
        },
        "content": "        Tooltip.install(badge3, hardTooltip);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "jascxx"
        },
        "content": "    }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "jascxx"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "jascxx"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "jascxx": 67
    }
  },
  {
    "path": "src/main/java/seedu/address/ui/modules/BankLabelPanel.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "dragontho"
        },
        "content": "package seedu.address.ui.modules;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "dragontho"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "dragontho"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "dragontho"
        },
        "content": "import javafx.scene.control.Label;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "dragontho"
        },
        "content": "import javafx.scene.layout.Region;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "dragontho"
        },
        "content": "import seedu.address.ui.UiPart;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "dragontho"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "dragontho"
        },
        "content": "/**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "dragontho"
        },
        "content": " * Panel containing the label of the current bank."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "dragontho"
        },
        "content": " */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "dragontho"
        },
        "content": "public class BankLabelPanel extends UiPart\u003cRegion\u003e {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "dragontho"
        },
        "content": "    private static final String FXML \u003d \"BankLabelPanel.fxml\";"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "dragontho"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "dragontho"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "dragontho"
        },
        "content": "    private Label bankName;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "dragontho"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "dragontho"
        },
        "content": "    public BankLabelPanel(String bankName) {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "dragontho"
        },
        "content": "        super(FXML);"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "dragontho"
        },
        "content": "        this.bankName.setText(bankName);"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "dragontho"
        },
        "content": "    }"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "dragontho"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "dragontho": 21
    }
  },
  {
    "path": "src/main/java/seedu/address/ui/modules/CardBoxPanel.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jascxx"
        },
        "content": "package seedu.address.ui.modules;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "jascxx"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "dragontho"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "dragontho"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "dragontho"
        },
        "content": "import java.util.stream.Collectors;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "dragontho"
        },
        "content": "import java.util.stream.IntStream;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "dragontho"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "jascxx"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "jascxx"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "jascxx"
        },
        "content": "import javafx.scene.Node;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "jascxx"
        },
        "content": "import javafx.scene.layout.Region;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "jascxx"
        },
        "content": "import javafx.scene.layout.VBox;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "jascxx"
        },
        "content": "import seedu.address.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "jascxx"
        },
        "content": "import seedu.address.model.card.Card;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "jascxx"
        },
        "content": "import seedu.address.ui.UiPart;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "jascxx"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "jascxx"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "jascxx"
        },
        "content": "/**"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "jascxx"
        },
        "content": " * Panel containing the list of cards."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "jascxx"
        },
        "content": " * The difference with {@code CardListPanel} is that this is not scrollable."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "jascxx"
        },
        "content": " */"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "jascxx"
        },
        "content": "public class CardBoxPanel extends UiPart\u003cRegion\u003e {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "jascxx"
        },
        "content": "    private static final String FXML \u003d \"CardBoxPanel.fxml\";"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "jascxx"
        },
        "content": "    private final Logger logger \u003d LogsCenter.getLogger(CardListPanel.class);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "jascxx"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "jascxx"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "jascxx"
        },
        "content": "    private VBox cardBoxView;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "jascxx"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "jascxx"
        },
        "content": "    public CardBoxPanel(ObservableList\u003cCard\u003e cardList) {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "jascxx"
        },
        "content": "        super(FXML);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "jascxx"
        },
        "content": "        List\u003cNode\u003e nodes \u003d IntStream"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "jascxx"
        },
        "content": "                .range(0, cardList.size())"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "jascxx"
        },
        "content": "                .mapToObj(x -\u003e {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "jascxx"
        },
        "content": "                    Node node \u003d new CardCard(cardList.get(x), x + 1).getRoot();"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "jascxx"
        },
        "content": "                    if (x % 2 \u003d\u003d 0) {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "jascxx"
        },
        "content": "                        node.setId(\"cardPaneEven\"); // to set the colors of the boxes"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "jascxx"
        },
        "content": "                    } else {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "jascxx"
        },
        "content": "                        node.setId(\"cardPaneOdd\");"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "jascxx"
        },
        "content": "                    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "jascxx"
        },
        "content": "                    return node;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "jascxx"
        },
        "content": "                })"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "jascxx"
        },
        "content": "                .collect(Collectors.toList());"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "jascxx"
        },
        "content": "        cardBoxView.getChildren().addAll(nodes);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "jascxx"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "jascxx"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "dragontho": 5,
      "jascxx": 40
    }
  },
  {
    "path": "src/main/java/seedu/address/ui/modules/CardCard.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "dragontho"
        },
        "content": "package seedu.address.ui.modules;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Comparator;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.control.Label;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.layout.FlowPane;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.layout.HBox;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.layout.Region;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "jascxx"
        },
        "content": "import seedu.address.model.card.Card;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "dragontho"
        },
        "content": "import seedu.address.ui.UiPart;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "jascxx"
        },
        "content": " * An UI component that displays information of a {@code Card}."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "jascxx"
        },
        "content": "public class CardCard extends UiPart\u003cRegion\u003e {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "jascxx"
        },
        "content": "    private static final String FXML \u003d \"CardCard.fxml\";"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "     * Note: Certain keywords such as \"location\" and \"resources\" are reserved keywords in JavaFX."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "     * As a consequence, UI elements\u0027 variable names cannot be set to such keywords"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "     * or an exception will be thrown by JavaFX during runtime."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "     * @see \u003ca href\u003d\"https://github.com/se-edu/addressbook-level4/issues/336\"\u003eThe issue on AddressBook level 4\u003c/a\u003e"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "jascxx"
        },
        "content": "    public final Card card;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    private HBox cardPane;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "jascxx"
        },
        "content": "    private Label word;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    private Label id;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "jascxx"
        },
        "content": "    private Label meaning;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    private FlowPane tags;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "jascxx"
        },
        "content": "    public CardCard(Card card, int displayedIndex) {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "        super(FXML);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "jascxx"
        },
        "content": "        this.card \u003d card;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        id.setText(displayedIndex + \". \");"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "chrischenhui"
        },
        "content": "        word.setText(card.getWord().getValue());"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "chrischenhui"
        },
        "content": "        meaning.setText(card.getMeaning().toString());"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "jascxx"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "jascxx"
        },
        "content": "        card.getTags().stream()"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "                .sorted(Comparator.comparing(tag -\u003e tag.tagName))"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "                .forEach(tag -\u003e tags.getChildren().add(new Label(tag.tagName)));"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "        // short circuit if same object"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "        if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "        // instanceof handles nulls"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "jascxx"
        },
        "content": "        if (!(other instanceof CardCard)) {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "        // state check"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "jascxx"
        },
        "content": "        CardCard card \u003d (CardCard) other;"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "        return id.getText().equals(card.id.getText())"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "jascxx"
        },
        "content": "                \u0026\u0026 this.card.equals(card.card);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "dragontho": 2,
      "jascxx": 14,
      "chrischenhui": 2,
      "-": 52
    }
  },
  {
    "path": "src/main/java/seedu/address/ui/modules/CardListPanel.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "dragontho"
        },
        "content": "package seedu.address.ui.modules;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "jascxx"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "jascxx"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.control.ListCell;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.control.ListView;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.layout.Region;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "jascxx"
        },
        "content": "import seedu.address.model.card.Card;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "dragontho"
        },
        "content": "import seedu.address.ui.UiPart;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "jascxx"
        },
        "content": " * Panel containing the list of cards."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "jascxx"
        },
        "content": "public class CardListPanel extends UiPart\u003cRegion\u003e {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "jascxx"
        },
        "content": "    private static final String FXML \u003d \"CardListPanel.fxml\";"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "jascxx"
        },
        "content": "    private final Logger logger \u003d LogsCenter.getLogger(CardListPanel.class);"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "jascxx"
        },
        "content": "    private ListView\u003cCard\u003e cardListView;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "jascxx"
        },
        "content": "    public CardListPanel(ObservableList\u003cCard\u003e cardList) {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "        super(FXML);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "jascxx"
        },
        "content": "        cardListView.setItems(cardList);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "jascxx"
        },
        "content": "        cardListView.setCellFactory(listView -\u003e new CardListPanel.CardListViewCell());"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "jascxx"
        },
        "content": "     * Custom {@code ListCell} that displays the graphics of a {@code Card} using a {@code CardCard}."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "jascxx"
        },
        "content": "    class CardListViewCell extends ListCell\u003cCard\u003e {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "jascxx"
        },
        "content": "        protected void updateItem(Card card, boolean empty) {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "jascxx"
        },
        "content": "            super.updateItem(card, empty);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "jascxx"
        },
        "content": "            if (empty || card \u003d\u003d null) {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "                setGraphic(null);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "                setText(null);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "jascxx"
        },
        "content": "                setGraphic(new CardCard(card, getIndex() + 1).getRoot());"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "dragontho": 2,
      "jascxx": 17,
      "-": 27
    }
  },
  {
    "path": "src/main/java/seedu/address/ui/modules/CardWithInfoCard.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jascxx"
        },
        "content": "package seedu.address.ui.modules;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "jascxx"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "jascxx"
        },
        "content": "import java.util.Comparator;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "jascxx"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "jascxx"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "jascxx"
        },
        "content": "import javafx.scene.control.Label;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "jascxx"
        },
        "content": "import javafx.scene.layout.FlowPane;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "jascxx"
        },
        "content": "import javafx.scene.layout.Region;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "jascxx"
        },
        "content": "import javafx.scene.layout.VBox;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "jascxx"
        },
        "content": "import seedu.address.model.card.Card;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "jascxx"
        },
        "content": "import seedu.address.statistics.CardStatistics;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "jascxx"
        },
        "content": "import seedu.address.ui.UiPart;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "jascxx"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "jascxx"
        },
        "content": "/**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "jascxx"
        },
        "content": " * An UI component that displays information of a {@code Card} with additional info."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "jascxx"
        },
        "content": " */"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "jascxx"
        },
        "content": "public class CardWithInfoCard extends UiPart\u003cRegion\u003e {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "jascxx"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "jascxx"
        },
        "content": "    private static final String FXML \u003d \"CardWithInfoCard.fxml\";"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "jascxx"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "jascxx"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "jascxx"
        },
        "content": "     * Note: Certain keywords such as \"location\" and \"resources\" are reserved keywords in JavaFX."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "jascxx"
        },
        "content": "     * As a consequence, UI elements\u0027 variable names cannot be set to such keywords"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "jascxx"
        },
        "content": "     * or an exception will be thrown by JavaFX during runtime."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "jascxx"
        },
        "content": "     *"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "jascxx"
        },
        "content": "     * @see \u003ca href\u003d\"https://github.com/se-edu/addressbook-level4/issues/336\"\u003eThe issue on AddressBook level 4\u003c/a\u003e"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "jascxx"
        },
        "content": "     */"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "jascxx"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "jascxx"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "jascxx"
        },
        "content": "    private VBox cardContainer;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "jascxx"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "jascxx"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "jascxx"
        },
        "content": "    private Label cardWord;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "jascxx"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "jascxx"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "jascxx"
        },
        "content": "    private Label cardMeaning;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "jascxx"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "jascxx"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "jascxx"
        },
        "content": "    private FlowPane tags;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "jascxx"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "jascxx"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "jascxx"
        },
        "content": "    private Label correctRate;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "jascxx"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "jascxx"
        },
        "content": "    public CardWithInfoCard(Card card, CardStatistics cardStatistics) {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "jascxx"
        },
        "content": "        super(FXML);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "jascxx"
        },
        "content": "        if (!card.getId().equals(cardStatistics.getCardId())) {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "jascxx"
        },
        "content": "            throw new AssertionError(\"Card and card statistics should have the same id.\\n\""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "jascxx"
        },
        "content": "                + card + \"\\n\\n\\n\" + cardStatistics);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "jascxx"
        },
        "content": "        }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "jascxx"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "chrischenhui"
        },
        "content": "        cardWord.setText(card.getWord().getValue());"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "chrischenhui"
        },
        "content": "        cardMeaning.setText(card.getMeaning().getValue());"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "jascxx"
        },
        "content": "        cardMeaning.setWrapText(true);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "jascxx"
        },
        "content": "        cardMeaning.prefWidthProperty().bind(cardContainer.widthProperty());"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "jascxx"
        },
        "content": "        card.getTags().stream()"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "jascxx"
        },
        "content": "                .sorted(Comparator.comparing(tag -\u003e tag.tagName))"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "jascxx"
        },
        "content": "                .forEach(tag -\u003e tags.getChildren().add(new Label(tag.tagName)));"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "jascxx"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "jascxx"
        },
        "content": "        double correctRateToShow \u003d cardStatistics.getNumShown() \u003d\u003d 0"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "jascxx"
        },
        "content": "                ? 0"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "jascxx"
        },
        "content": "                : cardStatistics.getNumCorrect() * 100.0 / cardStatistics.getNumShown();"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "jascxx"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "jascxx"
        },
        "content": "        correctRate.setText(String.format(\"%.1f%%\", correctRateToShow));"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "jascxx"
        },
        "content": "        if (correctRateToShow \u003c\u003d 50) {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "jascxx"
        },
        "content": "            correctRate.setStyle(\"-fx-text-fill: #FF69B4;\");"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "jascxx"
        },
        "content": "        } else if (correctRateToShow \u003e\u003d 80) {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "jascxx"
        },
        "content": "            correctRate.setStyle(\"-fx-text-fill: #ADFF2F;\");"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "jascxx"
        },
        "content": "        }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "jascxx"
        },
        "content": "    }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "jascxx"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "jascxx": 68,
      "chrischenhui": 2
    }
  },
  {
    "path": "src/main/java/seedu/address/ui/modules/GameResultPanel.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jascxx"
        },
        "content": "package seedu.address.ui.modules;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "jascxx"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "dragontho"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "jascxx"
        },
        "content": "import java.util.OptionalInt;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "dragontho"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "jascxx"
        },
        "content": "import javafx.collections.FXCollections;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "dragontho"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "jascxx"
        },
        "content": "import javafx.geometry.Pos;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "jascxx"
        },
        "content": "import javafx.scene.control.Label;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "jascxx"
        },
        "content": "import javafx.scene.layout.AnchorPane;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "jascxx"
        },
        "content": "import javafx.scene.layout.HBox;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "jascxx"
        },
        "content": "import javafx.scene.layout.Region;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "jascxx"
        },
        "content": "import javafx.scene.layout.StackPane;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "jascxx"
        },
        "content": "import javafx.scene.layout.VBox;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "jascxx"
        },
        "content": "import seedu.address.model.card.Card;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "jascxx"
        },
        "content": "import seedu.address.statistics.GameStatistics;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "jascxx"
        },
        "content": "import seedu.address.statistics.ScoreData;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "jascxx"
        },
        "content": "import seedu.address.statistics.ScoreGrade;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "jascxx"
        },
        "content": "import seedu.address.statistics.WordBankStatistics;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "jascxx"
        },
        "content": "import seedu.address.ui.UiPart;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "jascxx"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "jascxx"
        },
        "content": "/**"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "jascxx"
        },
        "content": " * Panel containing the game result."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "jascxx"
        },
        "content": " */"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "jascxx"
        },
        "content": "public class GameResultPanel extends UiPart\u003cRegion\u003e {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "jascxx"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "jascxx"
        },
        "content": "    private static final String FXML \u003d \"GameResultPanel.fxml\";"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "jascxx"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "jascxx"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "jascxx"
        },
        "content": "    private Label title;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "jascxx"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "jascxx"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "jascxx"
        },
        "content": "    private StackPane badgesRowPlaceholder;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "jascxx"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "jascxx"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "jascxx"
        },
        "content": "    private Label scoreText;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "jascxx"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "jascxx"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "jascxx"
        },
        "content": "    private Label timeTakenText;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "jascxx"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "jascxx"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "jascxx"
        },
        "content": "    private Label gameFeedbackHeader;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "jascxx"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "jascxx"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "jascxx"
        },
        "content": "    private VBox wrongAnswersBox;"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "jascxx"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "jascxx"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "jascxx"
        },
        "content": "    private StackPane wrongAnswersList;"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "jascxx"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "jascxx"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "jascxx"
        },
        "content": "    private HBox highScoreHbox;"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "jascxx"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "jascxx"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "jascxx"
        },
        "content": "    private Label highScoreText;"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "jascxx"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "jascxx"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "jascxx"
        },
        "content": "    private HBox fastestClearHbox;"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "jascxx"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "jascxx"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "jascxx"
        },
        "content": "    private Label fastestClearText;"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "jascxx"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "jascxx"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "jascxx"
        },
        "content": "    private StackPane progressChartPlaceholder;"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "jascxx"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "jascxx"
        },
        "content": "    public GameResultPanel(GameStatistics gameStatistics, WordBankStatistics wbStatistics) {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "jascxx"
        },
        "content": "        super(FXML);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "jascxx"
        },
        "content": "        AnchorPane.setLeftAnchor(title, 0.0);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "jascxx"
        },
        "content": "        title.setText(gameStatistics.getTitle());"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "jascxx"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "jascxx"
        },
        "content": "        badgesRowPlaceholder.getChildren().add(new BadgesRow(wbStatistics.isReceivedBadgeEasy(),"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "jascxx"
        },
        "content": "                wbStatistics.isReceivedBadgeNormal(), wbStatistics.isReceivedBadgeHard()).getRoot());"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "jascxx"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "jascxx"
        },
        "content": "        // init score text"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "jascxx"
        },
        "content": "        int score \u003d gameStatistics.getScore();"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "jascxx"
        },
        "content": "        ScoreGrade grade \u003d gameStatistics.getGrade();"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "jascxx"
        },
        "content": "        scoreText.setText(score + \"\");"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "jascxx"
        },
        "content": "        switch (grade) {"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "jascxx"
        },
        "content": "        case HIGH:"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "jascxx"
        },
        "content": "            scoreText.setStyle(\"-fx-text-fill: #ADFF2F;\");"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "jascxx"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "jascxx"
        },
        "content": "        case MEDIUM:"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "jascxx"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "jascxx"
        },
        "content": "        case LOW:"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "jascxx"
        },
        "content": "            scoreText.setStyle(\"-fx-text-fill: #FF69B4;\");"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "jascxx"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "jascxx"
        },
        "content": "        default:"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "jascxx"
        },
        "content": "            throw new IllegalArgumentException(\"This happens if there is an enum value not put as a case block\");"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "jascxx"
        },
        "content": "        }"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "jascxx"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "jascxx"
        },
        "content": "        // init time taken text"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "jascxx"
        },
        "content": "        timeTakenText.setText(String.format(\"%.2fs\", gameStatistics.getSecTaken()));"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "jascxx"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "jascxx"
        },
        "content": "        // init high score text"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "jascxx"
        },
        "content": "        highScoreHbox.setAlignment(Pos.CENTER);"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "jascxx"
        },
        "content": "        highScoreText.setText(wbStatistics.getHighestScore().toString());"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "jascxx"
        },
        "content": "        OptionalInt previousMax \u003d wbStatistics.getScoreStats()"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "jascxx"
        },
        "content": "                .stream()"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "jascxx"
        },
        "content": "                .mapToInt(ScoreData::getScore)"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "jascxx"
        },
        "content": "                .limit(wbStatistics.getScoreStats().size() - 1)"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "jascxx"
        },
        "content": "                .max(); // the highest score before this game"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "jascxx"
        },
        "content": "        if (wbStatistics.getGamesPlayed() \u003d\u003d 1"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "jascxx"
        },
        "content": "                || (previousMax.isPresent() \u0026\u0026 previousMax.getAsInt() \u003c wbStatistics.getHighestScore().getScore())) {"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "jascxx"
        },
        "content": "            // is highest score, give some visual feedback"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "jascxx"
        },
        "content": "            highScoreText.setStyle(\"-fx-text-fill: yellow; -fx-font-size: 16pt\");"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "jascxx"
        },
        "content": "        }"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "jascxx"
        },
        "content": ""
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "jascxx"
        },
        "content": "        // init fastest clear text"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "jascxx"
        },
        "content": "        fastestClearHbox.setAlignment(Pos.CENTER);"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "jascxx"
        },
        "content": "        fastestClearText.setText("
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "jascxx"
        },
        "content": "                wbStatistics.getFastestClear().isPresent()"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "jascxx"
        },
        "content": "                        ? String.format(\"%.2fs\", wbStatistics.getFastestClear().get())"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "jascxx"
        },
        "content": "                        : \" - \");"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "jascxx"
        },
        "content": "        if (wbStatistics.getFastestClear().isPresent()"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "jascxx"
        },
        "content": "            \u0026\u0026 wbStatistics.getFastestClear().get().equals(gameStatistics.getSecTaken())"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "jascxx"
        },
        "content": "            \u0026\u0026 gameStatistics.isAllCorrect()) {"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "jascxx"
        },
        "content": "            // reach fastest clear, give some visual feedback"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "jascxx"
        },
        "content": "            fastestClearText.setStyle(\"-fx-text-fill: yellow; -fx-font-size: 16pt\");"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "jascxx"
        },
        "content": "        }"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "jascxx"
        },
        "content": ""
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "jascxx"
        },
        "content": "        // init wrongAnswersBox"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "jascxx"
        },
        "content": "        if (gameStatistics.isAllCorrect()) {"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "jascxx"
        },
        "content": "            wrongAnswersBox.setMaxHeight(0);"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "jascxx"
        },
        "content": "            gameFeedbackHeader.setText(\"Good Job! You answered everything correctly!\");"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "jascxx"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "jascxx"
        },
        "content": "            List\u003cCard\u003e wrongCards \u003d gameStatistics.getWrongCards();"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "jascxx"
        },
        "content": "            CardBoxPanel cardBoxPanel \u003d new CardBoxPanel(FXCollections.observableArrayList(wrongCards));"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "jascxx"
        },
        "content": "            wrongAnswersList.getChildren().add(cardBoxPanel.getRoot());"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "jascxx"
        },
        "content": "            gameFeedbackHeader.setText(\"Remember these!\");"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "jascxx"
        },
        "content": "        }"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "jascxx"
        },
        "content": ""
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "jascxx"
        },
        "content": "        // init progress chart"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "jascxx"
        },
        "content": "        progressChartPlaceholder.getChildren().add("
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "jascxx"
        },
        "content": "                new WordBankProgressChart(wbStatistics).getRoot());"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "jascxx"
        },
        "content": "    }"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "jascxx"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "dragontho": 3,
      "jascxx": 132
    }
  },
  {
    "path": "src/main/java/seedu/address/ui/modules/HintLabel.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": "package seedu.address.ui.modules;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": "import javafx.scene.control.Label;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": "import javafx.scene.layout.Region;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": "import seedu.address.ui.UiPart;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": "/**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": " * UI Class that represents the region for the hints to be displayed on."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": " */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": "public class HintLabel extends UiPart\u003cRegion\u003e {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": "    private static final String FXML \u003d \"HintLabel.fxml\";"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": "    private Label hintLabel;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": "    public HintLabel() {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": "        super(FXML);"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": "    }"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": "    public void updateHintLabel(String string) {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": "        hintLabel.setText(string);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": "    }"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "kohyida1997": 25
    }
  },
  {
    "path": "src/main/java/seedu/address/ui/modules/LoadBankPanel.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "dragontho"
        },
        "content": "package seedu.address.ui.modules;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "dragontho"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "chrischenhui"
        },
        "content": "import java.io.File;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "chrischenhui"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "chrischenhui"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "dragontho"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "dragontho"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "dragontho"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "dragontho"
        },
        "content": "import javafx.scene.control.ListCell;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "dragontho"
        },
        "content": "import javafx.scene.control.ListView;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "chrischenhui"
        },
        "content": "import javafx.scene.input.DragEvent;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "chrischenhui"
        },
        "content": "import javafx.scene.input.TransferMode;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "dragontho"
        },
        "content": "import javafx.scene.layout.Region;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "dragontho"
        },
        "content": "import seedu.address.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "sreesubbash"
        },
        "content": "import seedu.address.model.wordbank.WordBank;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "chrischenhui"
        },
        "content": "import seedu.address.storage.Storage;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "dragontho"
        },
        "content": "import seedu.address.ui.UiPart;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "dragontho"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "dragontho"
        },
        "content": "/**"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "dragontho"
        },
        "content": " * Panel containing the list of word banks."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "dragontho"
        },
        "content": " */"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "dragontho"
        },
        "content": "public class LoadBankPanel extends UiPart\u003cRegion\u003e {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "dragontho"
        },
        "content": "    private static final String FXML \u003d \"LoadBankPanel.fxml\";"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "dragontho"
        },
        "content": "    private final Logger logger \u003d LogsCenter.getLogger(LoadBankPanel.class);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "chrischenhui"
        },
        "content": "    private Storage storage;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "dragontho"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "dragontho"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "sreesubbash"
        },
        "content": "    private ListView\u003cWordBank\u003e loadBankView;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "dragontho"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "chrischenhui"
        },
        "content": "    public LoadBankPanel(Storage storage) {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "dragontho"
        },
        "content": "        super(FXML);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "chrischenhui"
        },
        "content": "        this.storage \u003d storage;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "chrischenhui"
        },
        "content": "        loadBankView.setItems(storage.getFilteredWordBankList());"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "dragontho"
        },
        "content": "        loadBankView.setCellFactory(listView -\u003e new LoadBankViewCell());"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "dragontho"
        },
        "content": "    }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "dragontho"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "dragontho"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "dragontho"
        },
        "content": "     * Custom {@code ListCell} that displays the graphics of a {@code Card} using a {@code CardCard}."
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "dragontho"
        },
        "content": "     */"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "sreesubbash"
        },
        "content": "    class LoadBankViewCell extends ListCell\u003cWordBank\u003e {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "dragontho"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "sreesubbash"
        },
        "content": "        protected void updateItem(WordBank wordBank, boolean empty) {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "sreesubbash"
        },
        "content": "            super.updateItem(wordBank, empty);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "dragontho"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "sreesubbash"
        },
        "content": "            if (empty || wordBank \u003d\u003d null) {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "dragontho"
        },
        "content": "                setGraphic(null);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "dragontho"
        },
        "content": "                setText(null);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "dragontho"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "sreesubbash"
        },
        "content": "                setGraphic(new WordBankCard(wordBank, getIndex() + 1).getRoot());"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "dragontho"
        },
        "content": "            }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "dragontho"
        },
        "content": "        }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "dragontho"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "dragontho"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "chrischenhui"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "chrischenhui"
        },
        "content": "     * Accepts the file"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "chrischenhui"
        },
        "content": "     *"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "chrischenhui"
        },
        "content": "     * @param event that contains the dragged file."
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "chrischenhui"
        },
        "content": "     */"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "chrischenhui"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "chrischenhui"
        },
        "content": "    public void handleDragOver(DragEvent event) {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "chrischenhui"
        },
        "content": "        if (event.getDragboard().hasFiles()) {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "chrischenhui"
        },
        "content": "            event.acceptTransferModes(TransferMode.ANY);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "chrischenhui"
        },
        "content": "        }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "chrischenhui"
        },
        "content": "    }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "chrischenhui"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "chrischenhui"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "chrischenhui"
        },
        "content": "     * Receives the file"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "chrischenhui"
        },
        "content": "     *"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "chrischenhui"
        },
        "content": "     * @param event that contains the dragged file."
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "chrischenhui"
        },
        "content": "     */"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "chrischenhui"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "chrischenhui"
        },
        "content": "    public void handleDragDropped(DragEvent event) {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "chrischenhui"
        },
        "content": "        List\u003cFile\u003e files \u003d event.getDragboard().getFiles();"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "chrischenhui"
        },
        "content": "        File firstFile \u003d files.get(0);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "chrischenhui"
        },
        "content": "        if (firstFile.exists() \u0026\u0026 getExtension(firstFile).equals(\"json\")) {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "chrischenhui"
        },
        "content": "            Path p \u003d firstFile.toPath();"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "chrischenhui"
        },
        "content": "            String childString \u003d p.getFileName().toString();"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "chrischenhui"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "chrischenhui"
        },
        "content": "            String wordBankName \u003d childString.substring(0, childString.length() - \".json\".length());"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "chrischenhui"
        },
        "content": "            storage.importWordBank(p.getParent(), wordBankName);"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "chrischenhui"
        },
        "content": "        }"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "chrischenhui"
        },
        "content": "    }"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "chrischenhui"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "chrischenhui"
        },
        "content": "    private String getExtension(File file) {"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "chrischenhui"
        },
        "content": "        String fileName \u003d file.toString();"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "chrischenhui"
        },
        "content": "        String extension \u003d \"\";"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "chrischenhui"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "chrischenhui"
        },
        "content": "        int i \u003d fileName.lastIndexOf(\u0027.\u0027);"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "chrischenhui"
        },
        "content": "        if (i \u003e 0 \u0026\u0026 i \u003c fileName.length() - 1) { //if the name is not empty"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "chrischenhui"
        },
        "content": "            return fileName.substring(i + 1).toLowerCase();"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "chrischenhui"
        },
        "content": "        }"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "chrischenhui"
        },
        "content": "        return extension;"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "chrischenhui"
        },
        "content": "    }"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "dragontho"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "dragontho": 37,
      "sreesubbash": 7,
      "chrischenhui": 50
    }
  },
  {
    "path": "src/main/java/seedu/address/ui/modules/MainTitlePanel.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jascxx"
        },
        "content": "package seedu.address.ui.modules;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "jascxx"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "jascxx"
        },
        "content": "import java.time.DayOfWeek;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "jascxx"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "jascxx"
        },
        "content": "import java.util.Comparator;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "jascxx"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "jascxx"
        },
        "content": "import java.util.Map;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "jascxx"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "jascxx"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "jascxx"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "jascxx"
        },
        "content": "import javafx.scene.chart.BarChart;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "jascxx"
        },
        "content": "import javafx.scene.chart.CategoryAxis;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "jascxx"
        },
        "content": "import javafx.scene.chart.NumberAxis;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "jascxx"
        },
        "content": "import javafx.scene.chart.XYChart;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "jascxx"
        },
        "content": "import javafx.scene.control.Label;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "jascxx"
        },
        "content": "import javafx.scene.control.ScrollPane;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "jascxx"
        },
        "content": "import javafx.scene.image.Image;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "jascxx"
        },
        "content": "import javafx.scene.image.ImageView;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "jascxx"
        },
        "content": "import javafx.scene.layout.BorderPane;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "jascxx"
        },
        "content": "import javafx.scene.layout.Region;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "jascxx"
        },
        "content": "import javafx.scene.layout.StackPane;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "jascxx"
        },
        "content": "import javafx.scene.shape.Circle;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "jascxx"
        },
        "content": "import javafx.util.StringConverter;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "jascxx"
        },
        "content": "import seedu.address.commons.util.AppUtil;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "jascxx"
        },
        "content": "import seedu.address.model.globalstatistics.GlobalStatistics;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "jascxx"
        },
        "content": "import seedu.address.model.globalstatistics.WeeklyPlayed;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "jascxx"
        },
        "content": "import seedu.address.statistics.WordBankStatistics;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "jascxx"
        },
        "content": "import seedu.address.ui.AvatarImageUtil;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "jascxx"
        },
        "content": "import seedu.address.ui.UiPart;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "jascxx"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "jascxx"
        },
        "content": "/**"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "jascxx"
        },
        "content": " * A UI component for the main title panel, containing title and global statistics."
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "jascxx"
        },
        "content": " */"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "jascxx"
        },
        "content": "public class MainTitlePanel extends UiPart\u003cRegion\u003e {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "jascxx"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "jascxx"
        },
        "content": "    private static final String FXML \u003d \"MainTitlePanel.fxml\";"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "jascxx"
        },
        "content": "    private static final Image LOGO \u003d AppUtil.getImage(\"/images/logo.png\");"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "jascxx"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "jascxx"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "jascxx"
        },
        "content": "    private ScrollPane scrollPane;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "jascxx"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "jascxx"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "jascxx"
        },
        "content": "    private BorderPane logoPlaceholder;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "jascxx"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "jascxx"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "jascxx"
        },
        "content": "    private Label playedTimesText;"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "jascxx"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "jascxx"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "jascxx"
        },
        "content": "    private Label timesText;"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "jascxx"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "jascxx"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "jascxx"
        },
        "content": "    private Label favoriteWordBankText;"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "jascxx"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "jascxx"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "jascxx"
        },
        "content": "    private StackPane weeklyBarChartPlaceholder;"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "jascxx"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "jascxx"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "jascxx"
        },
        "content": "    private ImageView avatarImageView;"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "jascxx"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "jascxx"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "jascxx"
        },
        "content": "    private Circle avatarShadow;"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "jascxx"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "jascxx"
        },
        "content": "    public MainTitlePanel(GlobalStatistics globalStats, Optional\u003cWordBankStatistics\u003e maxWbStats,"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "jascxx"
        },
        "content": "                          int avatarId) {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "jascxx"
        },
        "content": "        super(FXML);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "jascxx"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "jascxx"
        },
        "content": "        scrollPane.setVbarPolicy(ScrollPane.ScrollBarPolicy.NEVER);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "jascxx"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "jascxx"
        },
        "content": "        ImageView titleImage \u003d new ImageView();"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "jascxx"
        },
        "content": "        titleImage.setImage(LOGO);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "jascxx"
        },
        "content": "        titleImage.setPreserveRatio(true);"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "jascxx"
        },
        "content": "        titleImage.setScaleX(0.4);"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "jascxx"
        },
        "content": "        titleImage.setScaleY(0.4);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "jascxx"
        },
        "content": "        titleImage.setTranslateX(-500);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "jascxx"
        },
        "content": "        titleImage.setTranslateY(15);"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "jascxx"
        },
        "content": "        logoPlaceholder.setCenter(titleImage);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "jascxx"
        },
        "content": "        int playedTimes \u003d globalStats.getNumPlayed();"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "jascxx"
        },
        "content": "        playedTimesText.setText(playedTimes + \"\");"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "jascxx"
        },
        "content": "        timesText.setText(playedTimes \u003d\u003d 1 ? \" time\" : \" times\");"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "jascxx"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "jascxx"
        },
        "content": "        favoriteWordBankText.setText(\" - \");"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "jascxx"
        },
        "content": "        maxWbStats.ifPresent(statistics -\u003e favoriteWordBankText.setText(statistics.getWordBankName()));"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "jascxx"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "jascxx"
        },
        "content": "        final CategoryAxis xAxis \u003d new CategoryAxis();"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "jascxx"
        },
        "content": "        final NumberAxis yAxis \u003d new NumberAxis();"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "jascxx"
        },
        "content": "        yAxis.setTickLabelFormatter(new StringConverter\u003c\u003e() { // set to only showing integer values"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "jascxx"
        },
        "content": "            @Override"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "jascxx"
        },
        "content": "            public String toString(Number object) {"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "jascxx"
        },
        "content": "                if (object.intValue() !\u003d object.doubleValue()) {"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "jascxx"
        },
        "content": "                    return \"\";"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "jascxx"
        },
        "content": "                }"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "jascxx"
        },
        "content": "                return object.intValue() + \"\";"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "jascxx"
        },
        "content": "            }"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "jascxx"
        },
        "content": ""
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "jascxx"
        },
        "content": "            @Override"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "jascxx"
        },
        "content": "            public Number fromString(String string) {"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "jascxx"
        },
        "content": "                Number val \u003d Double.parseDouble(string);"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "jascxx"
        },
        "content": "                return val.intValue();"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "jascxx"
        },
        "content": "            }"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "jascxx"
        },
        "content": "        });"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "jascxx"
        },
        "content": "        BarChart\u003cString, Number\u003e barChart \u003d new BarChart\u003c\u003e(xAxis, yAxis);"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "jascxx"
        },
        "content": "        WeeklyPlayed weeklyPlayed \u003d globalStats.getWeeklyPlayed();"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "jascxx"
        },
        "content": "        XYChart.Series\u003cString, Number\u003e dataSeries \u003d new XYChart.Series\u003c\u003e();"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "jascxx"
        },
        "content": "        List\u003cMap.Entry\u003cDayOfWeek, Integer\u003e\u003e sortedData \u003d new ArrayList\u003c\u003e(weeklyPlayed.getNumPlayed().entrySet());"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "jascxx"
        },
        "content": "        sortedData.sort(Comparator.comparing(Map.Entry::getKey));"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "jascxx"
        },
        "content": "        for (Map.Entry\u003cDayOfWeek, Integer\u003e entry : sortedData) {"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "jascxx"
        },
        "content": "            dataSeries.getData().add(new XYChart.Data\u003c\u003e(entry.getKey().toString().substring(0, 3),"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "jascxx"
        },
        "content": "                    entry.getValue()));"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "jascxx"
        },
        "content": "        }"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "jascxx"
        },
        "content": "        barChart.getData().add(dataSeries);"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "jascxx"
        },
        "content": "        weeklyBarChartPlaceholder.getChildren().add(barChart);"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "jascxx"
        },
        "content": ""
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "jascxx"
        },
        "content": "        Image avatarImage \u003d AvatarImageUtil.get(avatarId);"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "jascxx"
        },
        "content": "        avatarImageView.setImage(avatarImage);"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "jascxx"
        },
        "content": ""
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "jascxx"
        },
        "content": "        avatarShadow.setId(\"avatar-shadow\");"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "jascxx"
        },
        "content": "    }"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "jascxx"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "jascxx": 118
    }
  },
  {
    "path": "src/main/java/seedu/address/ui/modules/QuestionLabel.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": "package seedu.address.ui.modules;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": "import javafx.scene.control.Label;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": "import javafx.scene.layout.Region;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": "import seedu.address.ui.UiPart;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": "/**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": " * UI Class that represents the region for the question to be displayed on."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": " */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": "public class QuestionLabel extends UiPart\u003cRegion\u003e {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": "    private static final String FXML \u003d \"QuestionLabel.fxml\";"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": "    private Label questionLabel;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": "    public QuestionLabel() {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": "        super(FXML);"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": "        questionLabel.setWrapText(true);"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": "    }"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": "    public void updateQuestionLabel(String string) {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": "        questionLabel.setText(string);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": "    }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "kohyida1997": 26
    }
  },
  {
    "path": "src/main/java/seedu/address/ui/modules/QuestionPanel.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "dragontho"
        },
        "content": "package seedu.address.ui.modules;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "dragontho"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "dragontho"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "dragontho"
        },
        "content": "import javafx.scene.control.Label;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "dragontho"
        },
        "content": "import javafx.scene.layout.Region;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "dragontho"
        },
        "content": "import seedu.address.ui.UiPart;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "dragontho"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "dragontho"
        },
        "content": "/**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "dragontho"
        },
        "content": " * Panel containing the introduction screen."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "dragontho"
        },
        "content": " */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "dragontho"
        },
        "content": "public class QuestionPanel extends UiPart\u003cRegion\u003e {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "dragontho"
        },
        "content": "    private static final String FXML \u003d \"QuestionPanel.fxml\";"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "dragontho"
        },
        "content": "    private static final String QUESTION \u003d \"Question \";"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "dragontho"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "dragontho"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "dragontho"
        },
        "content": "    private Label questionNumber;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "dragontho"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "dragontho"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "dragontho"
        },
        "content": "    private Label description;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "dragontho"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "dragontho"
        },
        "content": "    public QuestionPanel(int questionNumber, String description) {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "dragontho"
        },
        "content": "        super(FXML);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "dragontho"
        },
        "content": "        this.questionNumber.setText(QUESTION + questionNumber + \":\");"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "dragontho"
        },
        "content": "        this.description.setText(description);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "dragontho"
        },
        "content": "    }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "dragontho"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "dragontho"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "dragontho": 27
    }
  },
  {
    "path": "src/main/java/seedu/address/ui/modules/SettingsPanel.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "dragontho"
        },
        "content": "package seedu.address.ui.modules;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "dragontho"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "dragontho"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "dragontho"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "dragontho"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "dragontho"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "dragontho"
        },
        "content": "import javafx.scene.control.Label;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "dragontho"
        },
        "content": "import javafx.scene.layout.HBox;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "dragontho"
        },
        "content": "import javafx.scene.layout.Region;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "dragontho"
        },
        "content": "import seedu.address.model.appsettings.AppSettings;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "dragontho"
        },
        "content": "import seedu.address.ui.UiPart;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "dragontho"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "dragontho"
        },
        "content": "/**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "dragontho"
        },
        "content": " * Panel that displays the current user settings."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "dragontho"
        },
        "content": " */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "dragontho"
        },
        "content": "public class SettingsPanel extends UiPart\u003cRegion\u003e {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "dragontho"
        },
        "content": "    private static final String FXML \u003d \"SettingsPanel.fxml\";"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "dragontho"
        },
        "content": "    private static final String LABEL_STYLE \u003d \"label-unhighlighted\";"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "dragontho"
        },
        "content": "    private static final String HIGHLIGHTED \u003d \"label-highlighted\";"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "dragontho"
        },
        "content": "    private AppSettings appSettings;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "dragontho"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "dragontho"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "dragontho"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "dragontho"
        },
        "content": "    private HBox difficultyOptions;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "dragontho"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "dragontho"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "dragontho"
        },
        "content": "    private HBox themeOptions;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "dragontho"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "dragontho"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "dragontho"
        },
        "content": "    private HBox hintsOptions;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "dragontho"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "dragontho"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "dragontho"
        },
        "content": "    private HBox avatarId;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "dragontho"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "dragontho"
        },
        "content": "    public SettingsPanel(AppSettings currentSettings) {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "dragontho"
        },
        "content": "        super(FXML);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "dragontho"
        },
        "content": "        this.appSettings \u003d currentSettings;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "dragontho"
        },
        "content": "        addOptions(difficultyOptions, \"EASY\", \"MEDIUM\", \"HARD\");"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "dragontho"
        },
        "content": "        addOptions(themeOptions, \"DARK\", \"LIGHT\");"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "dragontho"
        },
        "content": "        addOptions(hintsOptions, \"ON\", \"OFF\");"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "dragontho"
        },
        "content": "        setOption(avatarId, currentSettings.getAvatarId() + \"\");"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "dragontho"
        },
        "content": "        updateSettings();"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "dragontho"
        },
        "content": "    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "dragontho"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "dragontho"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "dragontho"
        },
        "content": "     * Adds options to the field specified."
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "dragontho"
        },
        "content": "     *"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "dragontho"
        },
        "content": "     * @param field The settings field to add options to."
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "dragontho"
        },
        "content": "     * @param names The names of the options to add."
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "dragontho"
        },
        "content": "     */"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "dragontho"
        },
        "content": "    private void addOptions(HBox field, String... names) {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "dragontho"
        },
        "content": "        List\u003cLabel\u003e options \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "dragontho"
        },
        "content": "        for (String labelTitle: names) {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "dragontho"
        },
        "content": "            Label option \u003d new Label(labelTitle);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "dragontho"
        },
        "content": "            option.getStyleClass().add(LABEL_STYLE);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "dragontho"
        },
        "content": "            options.add(option);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "dragontho"
        },
        "content": "        }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "dragontho"
        },
        "content": "        field.getChildren().addAll(options);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "dragontho"
        },
        "content": "    }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "dragontho"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "dragontho"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "dragontho"
        },
        "content": "     * For settings that have a range of values to choose from."
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "dragontho"
        },
        "content": "     *"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "dragontho"
        },
        "content": "     * @param name The name to set the option to."
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "dragontho"
        },
        "content": "     * @param field The settings field to set the options in."
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "dragontho"
        },
        "content": "     */"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "dragontho"
        },
        "content": "    private void setOption(HBox field, String name) {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "dragontho"
        },
        "content": "        field.getChildren().clear();"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "dragontho"
        },
        "content": "        Label newOption \u003d new Label(name);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "dragontho"
        },
        "content": "        newOption.getStyleClass().add(HIGHLIGHTED);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "dragontho"
        },
        "content": "        field.getChildren().add(newOption);"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "dragontho"
        },
        "content": "    }"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "dragontho"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "dragontho"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "dragontho"
        },
        "content": "     * Highlights the chosen option."
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "dragontho"
        },
        "content": "     *"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "dragontho"
        },
        "content": "     * @param field The settings field that is being chosen from."
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "dragontho"
        },
        "content": "     * @param option The option that is chosen."
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "dragontho"
        },
        "content": "     */"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "dragontho"
        },
        "content": "    public void highlightChoice(HBox field, String option) {"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "dragontho"
        },
        "content": "        int sizeOfList \u003d field.getChildren().size();"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "dragontho"
        },
        "content": "        for (int i \u003d 0; i \u003c sizeOfList; i++) {"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "dragontho"
        },
        "content": "            Label child \u003d (Label) field.getChildren().get(i);"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "dragontho"
        },
        "content": "            if (child.getStyleClass().contains(HIGHLIGHTED)) {"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "dragontho"
        },
        "content": "                unhighlightText(child);"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "dragontho"
        },
        "content": "                break;"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "dragontho"
        },
        "content": "            }"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "dragontho"
        },
        "content": "        }"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "dragontho"
        },
        "content": "        for (int i \u003d 0; i \u003c sizeOfList; i++) {"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "dragontho"
        },
        "content": "            Label child \u003d (Label) field.getChildren().get(i);"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "dragontho"
        },
        "content": "            if (child.getText().equals(option)) {"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "dragontho"
        },
        "content": "                highlightText(child);"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "dragontho"
        },
        "content": "                break;"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "dragontho"
        },
        "content": "            }"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "dragontho"
        },
        "content": "        }"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "dragontho"
        },
        "content": "    }"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "dragontho"
        },
        "content": ""
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "dragontho"
        },
        "content": "    private void highlightText(Label label) {"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "dragontho"
        },
        "content": "        label.getStyleClass().remove(LABEL_STYLE);"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "dragontho"
        },
        "content": "        label.getStyleClass().add(HIGHLIGHTED);"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "dragontho"
        },
        "content": "    }"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "dragontho"
        },
        "content": ""
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "dragontho"
        },
        "content": "    private void unhighlightText(Label label) {"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "dragontho"
        },
        "content": "        label.getStyleClass().remove(HIGHLIGHTED);"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "dragontho"
        },
        "content": "        label.getStyleClass().add(LABEL_STYLE);"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "dragontho"
        },
        "content": "    }"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "dragontho"
        },
        "content": ""
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "dragontho"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "dragontho"
        },
        "content": "     * Updates the panel to match the current state of settings."
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "dragontho"
        },
        "content": "     */"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "dragontho"
        },
        "content": "    public void updateSettings() {"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "dragontho"
        },
        "content": "        highlightChoice(difficultyOptions, appSettings.getDefaultDifficulty().toString());"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "dragontho"
        },
        "content": "        highlightChoice(themeOptions, appSettings.getDefaultTheme().toString());"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "dragontho"
        },
        "content": "        highlightChoice(hintsOptions, (appSettings.getHintsEnabled() ? \"ON\" : \"OFF\"));"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "dragontho"
        },
        "content": ""
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "dragontho"
        },
        "content": "        int avatarId \u003d appSettings.getAvatarId();"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "dragontho"
        },
        "content": "        setOption(this.avatarId, avatarId \u003d\u003d 0 ? \"RANDOM\" : avatarId + \"\");"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "dragontho"
        },
        "content": "    }"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "dragontho"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "dragontho": 119
    }
  },
  {
    "path": "src/main/java/seedu/address/ui/modules/TitleScreenPanel.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "dragontho"
        },
        "content": "package seedu.address.ui.modules;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "dragontho"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "dragontho"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "dragontho"
        },
        "content": "import javafx.scene.control.Label;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "dragontho"
        },
        "content": "import javafx.scene.layout.Region;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "dragontho"
        },
        "content": "import seedu.address.ui.UiPart;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "dragontho"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "dragontho"
        },
        "content": "/**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "dragontho"
        },
        "content": " * Panel containing the introduction screen."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "dragontho"
        },
        "content": " */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "dragontho"
        },
        "content": "public class TitleScreenPanel extends UiPart\u003cRegion\u003e {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "dragontho"
        },
        "content": "    private static final String FXML \u003d \"TitleScreenPanel.fxml\";"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "dragontho"
        },
        "content": "    private static final String MESSAGE_INTRODUCTION \u003d \"Welcome to Dukemon!\";"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "dragontho"
        },
        "content": "    private static final String MESSAGE_INFORMATION \u003d \"Welcome to the world of Dukemon, user!\\n\\n\""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "dragontho"
        },
        "content": "            + \"Type \\\"load [WORDBANK NUMBER]\\\" to load a word bank of your choice.\\n\""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "dragontho"
        },
        "content": "            + \"Type \\\"start\\\" to immediately start the default word bank immediately.\";"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "dragontho"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "dragontho"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "dragontho"
        },
        "content": "    private Label introduction;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "dragontho"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "dragontho"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "dragontho"
        },
        "content": "    private Label body;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "dragontho"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "dragontho"
        },
        "content": "    public TitleScreenPanel() {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "dragontho"
        },
        "content": "        super(FXML);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "dragontho"
        },
        "content": "        introduction.setText(MESSAGE_INTRODUCTION);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "dragontho"
        },
        "content": "        body.setText(MESSAGE_INFORMATION);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "dragontho"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "dragontho"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "dragontho"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "dragontho": 30
    }
  },
  {
    "path": "src/main/java/seedu/address/ui/modules/WordBankCard.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "dragontho"
        },
        "content": "package seedu.address.ui.modules;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "jascxx"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "chrischenhui"
        },
        "content": "import java.io.File;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "chrischenhui"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "chrischenhui"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "chrischenhui"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.control.Label;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "chrischenhui"
        },
        "content": "import javafx.scene.input.ClipboardContent;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "chrischenhui"
        },
        "content": "import javafx.scene.input.Dragboard;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "chrischenhui"
        },
        "content": "import javafx.scene.input.MouseEvent;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "chrischenhui"
        },
        "content": "import javafx.scene.input.TransferMode;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.layout.HBox;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.layout.Region;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "sreesubbash"
        },
        "content": "import seedu.address.model.wordbank.WordBank;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "dragontho"
        },
        "content": "import seedu.address.ui.UiPart;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "jascxx"
        },
        "content": " * An UI component that displays information of a {@code Card}."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "dragontho"
        },
        "content": "public class WordBankCard extends UiPart\u003cRegion\u003e {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "sreesubbash"
        },
        "content": "    private static final String FXML \u003d \"WordBankCard.fxml\";"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "     * Note: Certain keywords such as \"location\" and \"resources\" are reserved keywords in JavaFX."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "     * As a consequence, UI elements\u0027 variable names cannot be set to such keywords"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "     * or an exception will be thrown by JavaFX during runtime."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "     * @see \u003ca href\u003d\"https://github.com/se-edu/addressbook-level4/issues/336\"\u003eThe issue on AddressBook level 4\u003c/a\u003e"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "sreesubbash"
        },
        "content": "    public final WordBank wordBank;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    private HBox cardPane;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    private Label name;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    private Label id;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "dragontho"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "dragontho"
        },
        "content": "     * Card containing the details of the word bank."
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "dragontho"
        },
        "content": "     *"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "chrischenhui"
        },
        "content": "     * @param wordBank       The card representing its corresponding word bank."
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "dragontho"
        },
        "content": "     * @param displayedIndex The index of the word bank."
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "dragontho"
        },
        "content": "     */"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "sreesubbash"
        },
        "content": "    public WordBankCard(WordBank wordBank, int displayedIndex) {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        super(FXML);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "sreesubbash"
        },
        "content": "        this.wordBank \u003d wordBank;"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        id.setText(displayedIndex + \". \");"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "sreesubbash"
        },
        "content": "        name.setText(wordBank.getName());"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "        // short circuit if same object"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "        if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "        // instanceof handles nulls"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "dragontho"
        },
        "content": "        if (!(other instanceof WordBankCard)) {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "        // state check"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "sreesubbash"
        },
        "content": "        WordBankCard wordBankCard \u003d (WordBankCard) other;"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "sreesubbash"
        },
        "content": "        return false;"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "chrischenhui"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "chrischenhui"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "chrischenhui"
        },
        "content": "     * Drags and drop a word bank file outside of the app."
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "chrischenhui"
        },
        "content": "     *"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "chrischenhui"
        },
        "content": "     * @param event mouse event."
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "chrischenhui"
        },
        "content": "     */"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "chrischenhui"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "chrischenhui"
        },
        "content": "    private void handleDragDetection(MouseEvent event) {"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "chrischenhui"
        },
        "content": "        /* drag was detected, start drag-and-drop gesture*/"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "chrischenhui"
        },
        "content": "        System.out.println(\"onDragDetected\");"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "chrischenhui"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "chrischenhui"
        },
        "content": "        /* allow MOVE transfer mode */"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "chrischenhui"
        },
        "content": "        Dragboard db \u003d cardPane.startDragAndDrop(TransferMode.COPY);"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "chrischenhui"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "chrischenhui"
        },
        "content": "        /* put a string on dragboard */"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "chrischenhui"
        },
        "content": "        ClipboardContent content \u003d new ClipboardContent();"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "chrischenhui"
        },
        "content": "        //        content.putString(wordBank.getName());"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "chrischenhui"
        },
        "content": "        String wordBankPath \u003d \"data/wordBanks/\" + wordBank.getName() + \".json\";"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "chrischenhui"
        },
        "content": "        File tmpFile \u003d new File(wordBankPath);"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "chrischenhui"
        },
        "content": "        System.out.println(tmpFile);"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "chrischenhui"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "chrischenhui"
        },
        "content": "        //        List\u003cString\u003e filePathStringList \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "chrischenhui"
        },
        "content": "        //        filePathStringList.add(wordBankPath);"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "chrischenhui"
        },
        "content": ""
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "chrischenhui"
        },
        "content": "        List\u003cFile\u003e filePathList \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "chrischenhui"
        },
        "content": "        filePathList.add(tmpFile);"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "chrischenhui"
        },
        "content": ""
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "chrischenhui"
        },
        "content": "        content.putFiles(filePathList);"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "chrischenhui"
        },
        "content": "        //        content.putFilesByPath(filePathStringList);"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "chrischenhui"
        },
        "content": ""
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "chrischenhui"
        },
        "content": "        db.setContent(content);"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "chrischenhui"
        },
        "content": ""
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "chrischenhui"
        },
        "content": "        event.consume();"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "chrischenhui"
        },
        "content": "        System.out.println(\"dragDetection done\");"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "chrischenhui"
        },
        "content": "    }"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "chrischenhui"
        },
        "content": ""
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "chrischenhui"
        },
        "content": ""
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "chrischenhui"
        },
        "content": "    //    public void handle(MouseEvent event) {"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "chrischenhui"
        },
        "content": "    //        List\u003cFile\u003e vec \u003d new ArrayList\u003cFile\u003e();"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "chrischenhui"
        },
        "content": "    //        Dragboard db \u003d source.startDragAndDrop(TransferMode.ANY);"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "chrischenhui"
        },
        "content": "    //        File tmpFile \u003d new File(\"test.txt\");"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "chrischenhui"
        },
        "content": "    //        try {"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "chrischenhui"
        },
        "content": "    //            tmpFile.createNewFile();"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "chrischenhui"
        },
        "content": "    //        } catch (IOException e) {"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "chrischenhui"
        },
        "content": "    //            // TODO Auto-generated catch block"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "chrischenhui"
        },
        "content": "    //            e.printStackTrace();"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "chrischenhui"
        },
        "content": "    //        }"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "chrischenhui"
        },
        "content": "    //        vec.add(tmpFile);"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "chrischenhui"
        },
        "content": "    //        ClipboardContent content \u003d new ClipboardContent();"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "chrischenhui"
        },
        "content": "    //        content.putFiles(vec);"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "chrischenhui"
        },
        "content": "    //        db.setContent(content);"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "chrischenhui"
        },
        "content": "    //        event.consume();"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "chrischenhui"
        },
        "content": "    //    }"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "chrischenhui"
        },
        "content": ""
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "chrischenhui"
        },
        "content": ""
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "chrischenhui"
        },
        "content": "    //    @FXML"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "chrischenhui"
        },
        "content": "    //    private void handleDragDropped(DragEvent event) {"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "chrischenhui"
        },
        "content": "    //"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "chrischenhui"
        },
        "content": "    //        /* data dropped */"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "chrischenhui"
        },
        "content": "    //        System.out.println(\"onDragDropped\");"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "chrischenhui"
        },
        "content": "    //        /* if there is a string data on dragboard, read it and use it */"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "chrischenhui"
        },
        "content": "    //        Dragboard db \u003d event.getDragboard();"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "chrischenhui"
        },
        "content": "    //        boolean success \u003d false;"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "chrischenhui"
        },
        "content": "    //        if (db.hasFiles()) {"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "chrischenhui"
        },
        "content": "    //            System.out.println(\"db has files\");"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "chrischenhui"
        },
        "content": "    //            name.setText(db.getString());"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "chrischenhui"
        },
        "content": "    //            success \u003d true;"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "chrischenhui"
        },
        "content": "    //        }"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "chrischenhui"
        },
        "content": "    //        /* let the source know whether the string was successfully"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "chrischenhui"
        },
        "content": "    //         * transferred and used */"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "chrischenhui"
        },
        "content": "    //        event.setDropCompleted(success);"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "chrischenhui"
        },
        "content": "    //"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "chrischenhui"
        },
        "content": "    //        event.consume();"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "chrischenhui"
        },
        "content": "    //    }"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "chrischenhui"
        },
        "content": ""
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "chrischenhui"
        },
        "content": "    //    @FXML"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "chrischenhui"
        },
        "content": "    //    private void handleDragDone(DragEvent event) {"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "chrischenhui"
        },
        "content": "    //        /* the drag-and-drop gesture ended */"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "chrischenhui"
        },
        "content": "    //        System.out.println(\"onDragDone\");"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "chrischenhui"
        },
        "content": "    //        /* if the data was successfully moved, clear it */"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "chrischenhui"
        },
        "content": "    //        if (event.getTransferMode() \u003d\u003d TransferMode.MOVE) {"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "chrischenhui"
        },
        "content": "    //            name.setText(\"\");"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "chrischenhui"
        },
        "content": "    //        }"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "chrischenhui"
        },
        "content": "    //"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "chrischenhui"
        },
        "content": "    //        event.consume();"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "chrischenhui"
        },
        "content": "    //    }"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "dragontho": 9,
      "sreesubbash": 8,
      "jascxx": 2,
      "chrischenhui": 95,
      "-": 43
    }
  },
  {
    "path": "src/main/java/seedu/address/ui/modules/WordBankProgressChart.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jascxx"
        },
        "content": "package seedu.address.ui.modules;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "jascxx"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "jascxx"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "jascxx"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "jascxx"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "jascxx"
        },
        "content": "import javafx.beans.value.ChangeListener;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "jascxx"
        },
        "content": "import javafx.beans.value.ObservableValue;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "jascxx"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "jascxx"
        },
        "content": "import javafx.scene.chart.LineChart;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "jascxx"
        },
        "content": "import javafx.scene.chart.NumberAxis;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "jascxx"
        },
        "content": "import javafx.scene.chart.XYChart;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "jascxx"
        },
        "content": "import javafx.scene.control.ComboBox;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "jascxx"
        },
        "content": "import javafx.scene.layout.Region;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "jascxx"
        },
        "content": "import javafx.scene.layout.StackPane;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "jascxx"
        },
        "content": "import javafx.util.StringConverter;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "jascxx"
        },
        "content": "import seedu.address.statistics.ScoreData;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "jascxx"
        },
        "content": "import seedu.address.statistics.WordBankStatistics;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "jascxx"
        },
        "content": "import seedu.address.ui.UiPart;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "jascxx"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "jascxx"
        },
        "content": "/**"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "jascxx"
        },
        "content": " * A ui component of the word bank progress chart."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "jascxx"
        },
        "content": " */"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "jascxx"
        },
        "content": "public class WordBankProgressChart extends UiPart\u003cRegion\u003e {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "jascxx"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "jascxx"
        },
        "content": "    private static final String FXML \u003d \"WordBankProgressChart.fxml\";"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "jascxx"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "jascxx"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "jascxx"
        },
        "content": "    private StackPane progressChartPlaceholder;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "jascxx"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "jascxx"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "jascxx"
        },
        "content": "    private ComboBox\u003cString\u003e progressChartModeSelector;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "jascxx"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "jascxx"
        },
        "content": "    public WordBankProgressChart(WordBankStatistics wbStatistics) {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "jascxx"
        },
        "content": "        super(FXML);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "jascxx"
        },
        "content": "        NumGamesValues[] numGamesValues \u003d NumGamesValues.values();"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "jascxx"
        },
        "content": "        for (NumGamesValues numGamesValue : numGamesValues) {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "jascxx"
        },
        "content": "            progressChartModeSelector.getItems().add(numGamesValue.getMsg());"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "jascxx"
        },
        "content": "        }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "jascxx"
        },
        "content": "        progressChartModeSelector.getSelectionModel().selectFirst();"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "jascxx"
        },
        "content": "        progressChartModeSelector.valueProperty().addListener(new ChangeListener\u003cString\u003e() {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "jascxx"
        },
        "content": "            @Override"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "jascxx"
        },
        "content": "            public void changed(ObservableValue\u003c? extends String\u003e observable, String oldValue, String newValue) {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "jascxx"
        },
        "content": "                Arrays.stream(NumGamesValues.values())"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "jascxx"
        },
        "content": "                        .filter(x -\u003e x.getMsg().equals(newValue))"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "jascxx"
        },
        "content": "                        .findFirst()"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "jascxx"
        },
        "content": "                        .ifPresent(x -\u003e initProgressChart(wbStatistics, x.getNumGames()));"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "jascxx"
        },
        "content": "            }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "jascxx"
        },
        "content": "        });"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "jascxx"
        },
        "content": "        initProgressChart(wbStatistics, numGamesValues[0].getNumGames());"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "jascxx"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "jascxx"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "jascxx"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "jascxx"
        },
        "content": "     * Initialize the progress chart ui."
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "jascxx"
        },
        "content": "     * @param wbStatistics The statistics to be used to populate the chart."
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "jascxx"
        },
        "content": "     * @param numGames The most recent number of games to be shown."
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "jascxx"
        },
        "content": "     */"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "jascxx"
        },
        "content": "    private void initProgressChart(WordBankStatistics wbStatistics, int numGames) {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "jascxx"
        },
        "content": "        progressChartPlaceholder.getChildren().clear();"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "jascxx"
        },
        "content": "        NumberAxis xAxis \u003d new NumberAxis();"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "jascxx"
        },
        "content": "        NumberAxis yAxis \u003d new NumberAxis();"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "jascxx"
        },
        "content": "        xAxis.setTickLabelFormatter(new StringConverter\u003cNumber\u003e() {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "jascxx"
        },
        "content": "            @Override"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "jascxx"
        },
        "content": "            public String toString(Number object) {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "jascxx"
        },
        "content": "                if (object.intValue() !\u003d object.doubleValue() || object.intValue() % 5 !\u003d 0) {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "jascxx"
        },
        "content": "                    return \"\";"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "jascxx"
        },
        "content": "                }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "jascxx"
        },
        "content": "                return \"\" + object.intValue();"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "jascxx"
        },
        "content": "            }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "jascxx"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "jascxx"
        },
        "content": "            @Override"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "jascxx"
        },
        "content": "            public Number fromString(String string) {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "jascxx"
        },
        "content": "                Number val \u003d Double.parseDouble(string);"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "jascxx"
        },
        "content": "                return val.intValue();"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "jascxx"
        },
        "content": "            }"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "jascxx"
        },
        "content": "        });"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "jascxx"
        },
        "content": "        xAxis.setTickUnit(1);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "jascxx"
        },
        "content": "        xAxis.setMinorTickVisible(false);"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "jascxx"
        },
        "content": "        xAxis.setAutoRanging(false);"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "jascxx"
        },
        "content": "        xAxis.setUpperBound(Math.max(numGames, wbStatistics.getGamesPlayed()) + 0.5);"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "jascxx"
        },
        "content": "        xAxis.setLowerBound(Math.max(0, wbStatistics.getGamesPlayed() - numGames + 0.5));"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "jascxx"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "jascxx"
        },
        "content": "        yAxis.setAutoRanging(false);"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "jascxx"
        },
        "content": "        yAxis.setUpperBound(ScoreData.MAX_SCORE + 2); // give some room at the top"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "jascxx"
        },
        "content": "        yAxis.setLowerBound(ScoreData.MIN_SCORE);"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "jascxx"
        },
        "content": "        yAxis.setTickUnit(10);"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "jascxx"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "jascxx"
        },
        "content": "        LineChart\u003cNumber, Number\u003e progressChart \u003d new LineChart\u003c\u003e(xAxis, yAxis);"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "jascxx"
        },
        "content": "        XYChart.Series\u003cNumber, Number\u003e series \u003d new XYChart.Series\u003c\u003e();"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "jascxx"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "jascxx"
        },
        "content": "        List\u003cScoreData\u003e scoreStats \u003d wbStatistics.getScoreStats();"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "jascxx"
        },
        "content": "        for (int i \u003d Math.max(0, scoreStats.size() - numGames); i \u003c scoreStats.size(); ++i) {"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "jascxx"
        },
        "content": "            int gameIndex \u003d i + 1;"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "jascxx"
        },
        "content": "            int curScore \u003d scoreStats.get(i).getScore();"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "jascxx"
        },
        "content": "            series.getData().add(new XYChart.Data\u003c\u003e(gameIndex, curScore));"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "jascxx"
        },
        "content": "        }"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "jascxx"
        },
        "content": ""
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "jascxx"
        },
        "content": "        progressChart.setLegendVisible(false);"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "jascxx"
        },
        "content": "        progressChart.getData().add(series);"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "jascxx"
        },
        "content": "        progressChart.setMinHeight(200);"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "jascxx"
        },
        "content": "        progressChart.setCreateSymbols(false);"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "jascxx"
        },
        "content": ""
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "jascxx"
        },
        "content": "        progressChartPlaceholder.getChildren().add(progressChart);"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "jascxx"
        },
        "content": "    }"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "jascxx"
        },
        "content": ""
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "jascxx"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "jascxx"
        },
        "content": "     * Possible values for the most recent number of games shown in the progress chart."
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "jascxx"
        },
        "content": "     */"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "jascxx"
        },
        "content": "    private enum NumGamesValues {"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "jascxx"
        },
        "content": "        THIRTY(30, \"Last 30 games\"),"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "jascxx"
        },
        "content": "        ONE_HUNDRED(100, \"Last 100 games\");"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "jascxx"
        },
        "content": ""
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "jascxx"
        },
        "content": "        private int numGames;"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "jascxx"
        },
        "content": "        private String msg;"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "jascxx"
        },
        "content": ""
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "jascxx"
        },
        "content": "        NumGamesValues(int numGames, String msg) {"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "jascxx"
        },
        "content": "            this.numGames \u003d numGames;"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "jascxx"
        },
        "content": "            this.msg \u003d msg;"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "jascxx"
        },
        "content": "        }"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "jascxx"
        },
        "content": ""
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "jascxx"
        },
        "content": "        int getNumGames() {"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "jascxx"
        },
        "content": "            return numGames;"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "jascxx"
        },
        "content": "        }"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "jascxx"
        },
        "content": ""
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "jascxx"
        },
        "content": "        String getMsg() {"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "jascxx"
        },
        "content": "            return msg;"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "jascxx"
        },
        "content": "        }"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "jascxx"
        },
        "content": "    }"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "jascxx"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "jascxx": 128
    }
  },
  {
    "path": "src/main/java/seedu/address/ui/modules/WordBankStatisticsPanel.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jascxx"
        },
        "content": "package seedu.address.ui.modules;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "jascxx"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "jascxx"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "jascxx"
        },
        "content": "import java.util.Map;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "jascxx"
        },
        "content": "import java.util.TreeMap;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "jascxx"
        },
        "content": "import java.util.stream.Collectors;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "jascxx"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "jascxx"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "jascxx"
        },
        "content": "import javafx.scene.control.Label;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "jascxx"
        },
        "content": "import javafx.scene.control.ScrollPane;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "jascxx"
        },
        "content": "import javafx.scene.layout.Region;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "jascxx"
        },
        "content": "import javafx.scene.layout.StackPane;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "jascxx"
        },
        "content": "import javafx.scene.layout.VBox;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "jascxx"
        },
        "content": "import seedu.address.model.card.Card;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "jascxx"
        },
        "content": "import seedu.address.model.wordbank.ReadOnlyWordBank;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "jascxx"
        },
        "content": "import seedu.address.statistics.CardStatistics;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "jascxx"
        },
        "content": "import seedu.address.statistics.WordBankStatistics;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "jascxx"
        },
        "content": "import seedu.address.ui.UiPart;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "jascxx"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "jascxx"
        },
        "content": "/**"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "jascxx"
        },
        "content": " * Panel containing the word bank statistics"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "jascxx"
        },
        "content": " */"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "jascxx"
        },
        "content": "public class WordBankStatisticsPanel extends UiPart\u003cRegion\u003e {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "jascxx"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "jascxx"
        },
        "content": "    private static final int HARDEST_CARDS_NUM_SHOW \u003d 5;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "jascxx"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "jascxx"
        },
        "content": "    private static final String FXML \u003d \"WordBankStatisticsPanel.fxml\";"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "jascxx"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "jascxx"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "jascxx"
        },
        "content": "    private ScrollPane scrollPane;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "jascxx"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "jascxx"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "jascxx"
        },
        "content": "    private Label title;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "jascxx"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "jascxx"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "jascxx"
        },
        "content": "    private StackPane badgesRowPlaceholder;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "jascxx"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "jascxx"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "jascxx"
        },
        "content": "    private Label playedTimesText;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "jascxx"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "jascxx"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "jascxx"
        },
        "content": "    private Label highScoreText;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "jascxx"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "jascxx"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "jascxx"
        },
        "content": "    private Label fastestClearText;"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "jascxx"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "jascxx"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "jascxx"
        },
        "content": "    private StackPane progressChartPlaceholder;"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "jascxx"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "jascxx"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "jascxx"
        },
        "content": "    private VBox mostMissedBox;"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "jascxx"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "jascxx"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "jascxx"
        },
        "content": "    private VBox mostMissedList;"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "jascxx"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "jascxx"
        },
        "content": "    public WordBankStatisticsPanel(WordBankStatistics wbStatistics, ReadOnlyWordBank wordBank) {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "jascxx"
        },
        "content": "        super(FXML);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "jascxx"
        },
        "content": "        scrollPane.setVbarPolicy(ScrollPane.ScrollBarPolicy.NEVER);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "jascxx"
        },
        "content": "        this.title.setText(wbStatistics.getWordBankName());"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "jascxx"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "jascxx"
        },
        "content": "        badgesRowPlaceholder.getChildren().add(new BadgesRow(wbStatistics.isReceivedBadgeEasy(),"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "jascxx"
        },
        "content": "                wbStatistics.isReceivedBadgeNormal(), wbStatistics.isReceivedBadgeHard()).getRoot());"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "jascxx"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "jascxx"
        },
        "content": "        this.playedTimesText.setText(wbStatistics.getGamesPlayed()"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "jascxx"
        },
        "content": "            + (wbStatistics.getGamesPlayed() \u003d\u003d 1"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "jascxx"
        },
        "content": "                ? \" time\""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "jascxx"
        },
        "content": "                : \" times\"));"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "jascxx"
        },
        "content": "        this.highScoreText.setText(wbStatistics.getHighestScore() + \"\");"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "jascxx"
        },
        "content": "        this.fastestClearText.setText(wbStatistics.getFastestClear().isPresent()"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "jascxx"
        },
        "content": "            ? String.format(\"%.2fs\", wbStatistics.getFastestClear().get())"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "jascxx"
        },
        "content": "            : \" - \");"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "jascxx"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "jascxx"
        },
        "content": "        // init progress chart"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "jascxx"
        },
        "content": "        progressChartPlaceholder.getChildren().add("
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "jascxx"
        },
        "content": "                new WordBankProgressChart(wbStatistics).getRoot());"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "jascxx"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "jascxx"
        },
        "content": "        // init most missed list"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "jascxx"
        },
        "content": "        Map\u003cCardStatistics, Card\u003e mostMissedMap \u003d new TreeMap\u003c\u003e((x, y) -\u003e {"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "jascxx"
        },
        "content": "            double xCorrectRate \u003d x.getNumCorrect() * 1.0 / x.getNumShown();"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "jascxx"
        },
        "content": "            double yCorrectRate \u003d y.getNumCorrect() * 1.0 / y.getNumShown();"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "jascxx"
        },
        "content": "            if (Math.abs(xCorrectRate - yCorrectRate) \u003c 1e-9) {"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "jascxx"
        },
        "content": "                if (y.getNumShown() \u003d\u003d x.getNumShown()) {"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "jascxx"
        },
        "content": "                    return x.getCardId().compareTo(y.getCardId());"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "jascxx"
        },
        "content": "                } else {"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "jascxx"
        },
        "content": "                    return y.getNumShown() - x.getNumShown();"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "jascxx"
        },
        "content": "                }"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "jascxx"
        },
        "content": "            } else if (xCorrectRate \u003e yCorrectRate) {"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "jascxx"
        },
        "content": "                return 1;"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "jascxx"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "jascxx"
        },
        "content": "                return -1;"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "jascxx"
        },
        "content": "            }"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "jascxx"
        },
        "content": "        });"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "jascxx"
        },
        "content": ""
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "jascxx"
        },
        "content": "        List\u003cCardStatistics\u003e mostMissedCardStats \u003d wbStatistics.getMostMissedCardStats();"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "jascxx"
        },
        "content": "        for (CardStatistics cardStats : mostMissedCardStats) {"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "jascxx"
        },
        "content": "            wordBank.getCardList().stream()"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "jascxx"
        },
        "content": "                    .filter(x -\u003e x.getId().equals(cardStats.getCardId()))"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "jascxx"
        },
        "content": "                    .findFirst()"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "jascxx"
        },
        "content": "                    .ifPresent(x -\u003e {"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "jascxx"
        },
        "content": "                        mostMissedMap.put(cardStats, x);"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "jascxx"
        },
        "content": "                    });"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "jascxx"
        },
        "content": "        }"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "jascxx"
        },
        "content": "        if (mostMissedMap.isEmpty()) {"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "jascxx"
        },
        "content": "            mostMissedBox.setVisible(false);"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "jascxx"
        },
        "content": "            mostMissedBox.setMaxHeight(0);"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "jascxx"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "jascxx"
        },
        "content": "            mostMissedList.getChildren().addAll(mostMissedMap.entrySet().stream()"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "jascxx"
        },
        "content": "                    .limit(HARDEST_CARDS_NUM_SHOW)"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "jascxx"
        },
        "content": "                    .map(x -\u003e new CardWithInfoCard(x.getValue(), x.getKey()).getRoot())"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "jascxx"
        },
        "content": "                    .collect(Collectors.toList()));"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "jascxx"
        },
        "content": "        }"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "jascxx"
        },
        "content": ""
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "jascxx"
        },
        "content": "    }"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "jascxx"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "jascxx": 114
    }
  },
  {
    "path": "src/main/resources/view/BadgesRow.fxml",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jascxx"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "jascxx"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "jascxx"
        },
        "content": "\u003c?import javafx.scene.image.ImageView?\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "jascxx"
        },
        "content": "\u003c?import javafx.scene.layout.HBox?\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "jascxx"
        },
        "content": "\u003c?import javafx.scene.layout.Region?\u003e"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "jascxx"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "jascxx"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": "\u003cHBox minWidth\u003d\"0.0\" prefHeight\u003d\"30.0\" prefWidth\u003d\"0.0\" xmlns\u003d\"http://javafx.com/javafx/11\" xmlns:fx\u003d\"http://javafx.com/fxml/1\"\u003e"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "jascxx"
        },
        "content": "   \u003cchildren\u003e"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "jascxx"
        },
        "content": "      \u003cRegion prefHeight\u003d\"200.0\" HBox.hgrow\u003d\"ALWAYS\" /\u003e"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "jascxx"
        },
        "content": "      \u003cImageView fx:id\u003d\"badge1\" fitHeight\u003d\"30.0\" fitWidth\u003d\"30.0\" pickOnBounds\u003d\"true\" preserveRatio\u003d\"true\" /\u003e"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "jascxx"
        },
        "content": "      \u003cImageView fx:id\u003d\"badge2\" fitHeight\u003d\"30.0\" fitWidth\u003d\"30.0\" pickOnBounds\u003d\"true\" preserveRatio\u003d\"true\" /\u003e"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "jascxx"
        },
        "content": "      \u003cImageView fx:id\u003d\"badge3\" fitHeight\u003d\"30.0\" fitWidth\u003d\"30.0\" pickOnBounds\u003d\"true\" preserveRatio\u003d\"true\" /\u003e"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "jascxx"
        },
        "content": "      \u003cRegion prefHeight\u003d\"200.0\" HBox.hgrow\u003d\"ALWAYS\" /\u003e"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "jascxx"
        },
        "content": "   \u003c/children\u003e"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "jascxx"
        },
        "content": "\u003c/HBox\u003e"
      }
    ],
    "authorContributionMap": {
      "jascxx": 15,
      "kohyida1997": 1
    }
  },
  {
    "path": "src/main/resources/view/BankLabelPanel.fxml",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "dragontho"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "dragontho"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "dragontho"
        },
        "content": "\u003c?import javafx.scene.control.Label?\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "dragontho"
        },
        "content": "\u003c?import javafx.scene.layout.StackPane?\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "dragontho"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": "\u003cStackPane prefHeight\u003d\"150.0\" prefWidth\u003d\"200.0\" xmlns\u003d\"http://javafx.com/javafx/11\" xmlns:fx\u003d\"http://javafx.com/fxml/1\"\u003e"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "dragontho"
        },
        "content": "   \u003cchildren\u003e"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "dragontho"
        },
        "content": "      \u003cLabel fx:id\u003d\"bankName\" alignment\u003d\"TOP_LEFT\" styleClass\u003d\"label-header\" text\u003d\"BankName\" StackPane.alignment\u003d\"CENTER\" /\u003e"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "dragontho"
        },
        "content": "   \u003c/children\u003e"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "dragontho"
        },
        "content": "\u003c/StackPane\u003e"
      }
    ],
    "authorContributionMap": {
      "dragontho": 9,
      "kohyida1997": 1
    }
  },
  {
    "path": "src/main/resources/view/CardBoxPanel.fxml",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jascxx"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "jascxx"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "jascxx"
        },
        "content": "\u003c?import javafx.scene.layout.VBox?\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "jascxx"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "jascxx"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": "\u003cVBox fx:id\u003d\"cardBoxView\" xmlns\u003d\"http://javafx.com/javafx/11\" xmlns:fx\u003d\"http://javafx.com/fxml/1\"\u003e"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "jascxx"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "jascxx"
        },
        "content": "\u003c/VBox\u003e"
      }
    ],
    "authorContributionMap": {
      "jascxx": 7,
      "kohyida1997": 1
    }
  },
  {
    "path": "src/main/resources/view/CardCard.fxml",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.geometry.Insets?\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.control.Label?\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.layout.ColumnConstraints?\u003e"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.layout.FlowPane?\u003e"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.layout.GridPane?\u003e"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.layout.HBox?\u003e"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.layout.Region?\u003e"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "jascxx"
        },
        "content": "\u003c?import javafx.scene.layout.RowConstraints?\u003e"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.layout.VBox?\u003e"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": "\u003cHBox id\u003d\"cardPane\" fx:id\u003d\"cardPane\" xmlns\u003d\"http://javafx.com/javafx/11\" xmlns:fx\u003d\"http://javafx.com/fxml/1\"\u003e"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "  \u003cGridPane HBox.hgrow\u003d\"ALWAYS\"\u003e"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003ccolumnConstraints\u003e"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "      \u003cColumnConstraints hgrow\u003d\"SOMETIMES\" minWidth\u003d\"10\" prefWidth\u003d\"150\" /\u003e"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003c/columnConstraints\u003e"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003cVBox alignment\u003d\"CENTER_LEFT\" minHeight\u003d\"105\" GridPane.columnIndex\u003d\"0\"\u003e"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "      \u003cpadding\u003e"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "jascxx"
        },
        "content": "        \u003cInsets bottom\u003d\"5\" left\u003d\"15\" right\u003d\"5\" top\u003d\"5\" /\u003e"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "      \u003c/padding\u003e"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "jascxx"
        },
        "content": "      \u003cHBox alignment\u003d\"CENTER_LEFT\" spacing\u003d\"5\"\u003e"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003cLabel fx:id\u003d\"id\" styleClass\u003d\"cell_big_label\"\u003e"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "          \u003cminWidth\u003e"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "            \u003c!-- Ensures that the label text is never truncated --\u003e"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "            \u003cRegion fx:constant\u003d\"USE_PREF_SIZE\" /\u003e"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "          \u003c/minWidth\u003e"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003c/Label\u003e"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "jascxx"
        },
        "content": "        \u003cLabel fx:id\u003d\"word\" styleClass\u003d\"cell_big_label\" text\u003d\"\\$word\" /\u003e"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "      \u003c/HBox\u003e"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "      \u003cFlowPane fx:id\u003d\"tags\" /\u003e"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "jascxx"
        },
        "content": "      \u003cLabel fx:id\u003d\"meaning\" styleClass\u003d\"cell_small_label\" text\u003d\"\\$meaning\"\u003e"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "jascxx"
        },
        "content": "            \u003cVBox.margin\u003e"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "jascxx"
        },
        "content": "               \u003cInsets top\u003d\"4.0\" /\u003e"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "jascxx"
        },
        "content": "            \u003c/VBox.margin\u003e\u003c/Label\u003e"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003c/VBox\u003e"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "jascxx"
        },
        "content": "      \u003crowConstraints\u003e"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "jascxx"
        },
        "content": "         \u003cRowConstraints /\u003e"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "jascxx"
        },
        "content": "      \u003c/rowConstraints\u003e"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "  \u003c/GridPane\u003e"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c/HBox\u003e"
      }
    ],
    "authorContributionMap": {
      "jascxx": 11,
      "kohyida1997": 1,
      "-": 29
    }
  },
  {
    "path": "src/main/resources/view/CardListPanel.fxml",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jascxx"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "jascxx"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "jascxx"
        },
        "content": "\u003c?import javafx.scene.control.ListView?\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "jascxx"
        },
        "content": "\u003c?import javafx.scene.layout.VBox?\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "jascxx"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "dragontho"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": "\u003cVBox xmlns\u003d\"http://javafx.com/javafx/11\" xmlns:fx\u003d\"http://javafx.com/fxml/1\"\u003e"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "jascxx"
        },
        "content": "  \u003cListView fx:id\u003d\"cardListView\" VBox.vgrow\u003d\"ALWAYS\" /\u003e"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "jascxx"
        },
        "content": "\u003c/VBox\u003e"
      }
    ],
    "authorContributionMap": {
      "dragontho": 1,
      "jascxx": 7,
      "kohyida1997": 1
    }
  },
  {
    "path": "src/main/resources/view/CardWithInfoCard.fxml",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jascxx"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "jascxx"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "jascxx"
        },
        "content": "\u003c?import javafx.geometry.Insets?\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "jascxx"
        },
        "content": "\u003c?import javafx.scene.Cursor?\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "jascxx"
        },
        "content": "\u003c?import javafx.scene.control.Label?\u003e"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "jascxx"
        },
        "content": "\u003c?import javafx.scene.control.Separator?\u003e"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "jascxx"
        },
        "content": "\u003c?import javafx.scene.layout.FlowPane?\u003e"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "jascxx"
        },
        "content": "\u003c?import javafx.scene.layout.HBox?\u003e"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "jascxx"
        },
        "content": "\u003c?import javafx.scene.layout.VBox?\u003e"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "jascxx"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": "\u003cVBox maxHeight\u003d\"1.7976931348623157E308\" xmlns\u003d\"http://javafx.com/javafx/11\" xmlns:fx\u003d\"http://javafx.com/fxml/1\"\u003e"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "jascxx"
        },
        "content": "   \u003cchildren\u003e"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "jascxx"
        },
        "content": "      \u003cHBox id\u003d\"cardPane\" fx:id\u003d\"cardPane\" maxHeight\u003d\"1.7976931348623157E308\"\u003e"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "jascxx"
        },
        "content": "         \u003cchildren\u003e"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "jascxx"
        },
        "content": "            \u003cVBox fx:id\u003d\"cardContainer\" alignment\u003d\"CENTER_LEFT\" maxHeight\u003d\"1.7976931348623157E308\" HBox.hgrow\u003d\"ALWAYS\"\u003e"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "jascxx"
        },
        "content": "               \u003cchildren\u003e"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "jascxx"
        },
        "content": "                  \u003cLabel fx:id\u003d\"cardWord\" styleClass\u003d\"cell_big_label\" text\u003d\"Word\" /\u003e"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "jascxx"
        },
        "content": "                  \u003cFlowPane fx:id\u003d\"tags\" /\u003e"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "jascxx"
        },
        "content": "                  \u003cLabel fx:id\u003d\"cardMeaning\" maxHeight\u003d\"1.7976931348623157E308\" styleClass\u003d\"cell_small_label\" text\u003d\"Meaning Meaning Meaning Meaning Meaning Meaning Meaning Meaning Meaning Meaning Meaning Meaning Meaning Meaning Meaning Meaning Meaning Meaning Meaning Meaning Meaning Meaning Meaning Meaning Meaning Meaning Meaning \" wrapText\u003d\"true\" VBox.vgrow\u003d\"ALWAYS\" /\u003e"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "jascxx"
        },
        "content": "               \u003c/children\u003e"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "jascxx"
        },
        "content": "            \u003c/VBox\u003e"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "jascxx"
        },
        "content": "            \u003cVBox alignment\u003d\"TOP_RIGHT\" fillWidth\u003d\"false\" prefHeight\u003d\"0.0\" HBox.hgrow\u003d\"NEVER\"\u003e"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "jascxx"
        },
        "content": "               \u003cchildren\u003e"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "jascxx"
        },
        "content": "                  \u003cHBox alignment\u003d\"CENTER_RIGHT\" prefHeight\u003d\"0.0\" VBox.vgrow\u003d\"ALWAYS\"\u003e"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "jascxx"
        },
        "content": "                     \u003cchildren\u003e"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "jascxx"
        },
        "content": "                        \u003cLabel fx:id\u003d\"correctRate\" alignment\u003d\"CENTER_RIGHT\" contentDisplay\u003d\"RIGHT\" prefWidth\u003d\"60.0\" styleClass\u003d\"label-header2\" text\u003d\"XX%\" textAlignment\u003d\"CENTER\" textOverrun\u003d\"CLIP\"\u003e"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "jascxx"
        },
        "content": "                           \u003cHBox.margin\u003e"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "jascxx"
        },
        "content": "                              \u003cInsets /\u003e"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "jascxx"
        },
        "content": "                           \u003c/HBox.margin\u003e"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "jascxx"
        },
        "content": "                        \u003c/Label\u003e"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "jascxx"
        },
        "content": "                     \u003c/children\u003e"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "jascxx"
        },
        "content": "                  \u003c/HBox\u003e"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "jascxx"
        },
        "content": "               \u003c/children\u003e"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "jascxx"
        },
        "content": "               \u003cHBox.margin\u003e"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "jascxx"
        },
        "content": "                  \u003cInsets left\u003d\"8.0\" /\u003e"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "jascxx"
        },
        "content": "               \u003c/HBox.margin\u003e"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "jascxx"
        },
        "content": "            \u003c/VBox\u003e"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "jascxx"
        },
        "content": "         \u003c/children\u003e"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "jascxx"
        },
        "content": "         \u003cpadding\u003e"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "jascxx"
        },
        "content": "            \u003cInsets left\u003d\"4.0\" /\u003e"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "jascxx"
        },
        "content": "         \u003c/padding\u003e"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "jascxx"
        },
        "content": "      \u003c/HBox\u003e"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "jascxx"
        },
        "content": "      \u003cSeparator prefWidth\u003d\"200.0\"\u003e"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "jascxx"
        },
        "content": "         \u003cVBox.margin\u003e"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "jascxx"
        },
        "content": "            \u003cInsets top\u003d\"2.0\" /\u003e"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "jascxx"
        },
        "content": "         \u003c/VBox.margin\u003e\u003c/Separator\u003e"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "jascxx"
        },
        "content": "   \u003c/children\u003e"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "jascxx"
        },
        "content": "   \u003ccursor\u003e"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "jascxx"
        },
        "content": "      \u003cCursor fx:constant\u003d\"CROSSHAIR\" /\u003e"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "jascxx"
        },
        "content": "   \u003c/cursor\u003e"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "jascxx"
        },
        "content": "   \u003cpadding\u003e"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "jascxx"
        },
        "content": "      \u003cInsets bottom\u003d\"4.0\" /\u003e"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "jascxx"
        },
        "content": "   \u003c/padding\u003e"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "jascxx"
        },
        "content": "\u003c/VBox\u003e"
      }
    ],
    "authorContributionMap": {
      "jascxx": 53,
      "kohyida1997": 1
    }
  },
  {
    "path": "src/main/resources/view/CommandBox.fxml",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "sreesubbash"
        },
        "content": "\u003c?import java.lang.*?\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "sreesubbash"
        },
        "content": "\u003c?import javafx.scene.control.*?\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "sreesubbash"
        },
        "content": "\u003c?import javafx.scene.layout.*?\u003e"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "sreesubbash"
        },
        "content": "\u003c?import javafx.scene.text.*?\u003e"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "dragontho"
        },
        "content": "\u003c?import javafx.scene.control.ComboBox?\u003e"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "dragontho"
        },
        "content": "\u003c?import javafx.scene.control.Label?\u003e"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "dragontho"
        },
        "content": "\u003c?import javafx.scene.control.Menu?\u003e"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "dragontho"
        },
        "content": "\u003c?import javafx.scene.control.MenuBar?\u003e"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.control.TextField?\u003e"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "dragontho"
        },
        "content": "\u003c?import javafx.scene.layout.HBox?\u003e"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.layout.StackPane?\u003e"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "dragontho"
        },
        "content": "\u003c?import javafx.scene.layout.VBox?\u003e"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "sreesubbash"
        },
        "content": "\u003cStackPane prefHeight\u003d\"0.0\" prefWidth\u003d\"1077.0\" xmlns\u003d\"http://javafx.com/javafx/11\" xmlns:fx\u003d\"http://javafx.com/fxml/1\"\u003e"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "sreesubbash"
        },
        "content": "   \u003cchildren\u003e"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "sreesubbash"
        },
        "content": "      \u003cVBox prefHeight\u003d\"0.0\" prefWidth\u003d\"1077.0\"\u003e"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "sreesubbash"
        },
        "content": "         \u003cchildren\u003e"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "sreesubbash"
        },
        "content": "            \u003cHBox prefHeight\u003d\"30.0\" prefWidth\u003d\"1077.0\"\u003e"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "sreesubbash"
        },
        "content": "               \u003cchildren\u003e"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "sreesubbash"
        },
        "content": "                  \u003cVBox prefHeight\u003d\"100.0\" prefWidth\u003d\"100.0\"\u003e"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "sreesubbash"
        },
        "content": "                     \u003cchildren\u003e"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "sreesubbash"
        },
        "content": "                        \u003cLabel fx:id\u003d\"modeHeader\" text\u003d\"Current Mode\" textFill\u003d\"WHITE\"/\u003e"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "sreesubbash"
        },
        "content": "                        \u003cLabel fx:id\u003d\"modeLabel\" text\u003d\"home\" textFill\u003d\"WHITE\" /\u003e"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "sreesubbash"
        },
        "content": "                     \u003c/children\u003e"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "sreesubbash"
        },
        "content": "                  \u003c/VBox\u003e"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "sreesubbash"
        },
        "content": "                   \u003cVBox prefHeight\u003d\"100.0\" prefWidth\u003d\"234.0\"\u003e"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "sreesubbash"
        },
        "content": "                       \u003cchildren\u003e"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "sreesubbash"
        },
        "content": "                           \u003cLabel text\u003d\"Available Modes\" textFill\u003d\"WHITE\" /\u003e"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "sreesubbash"
        },
        "content": "                           \u003cLabel fx:id\u003d\"modesLabel\" text\u003d\"home\" textFill\u003d\"WHITE\" /\u003e"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "sreesubbash"
        },
        "content": "                       \u003c/children\u003e"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "sreesubbash"
        },
        "content": "                   \u003c/VBox\u003e"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "sreesubbash"
        },
        "content": "                 \u003cTextField fx:id\u003d\"commandTextField\" onAction\u003d\"#handleCommandEntered\" prefHeight\u003d\"40.0\" prefWidth\u003d\"400.0\" promptText\u003d\"Enter command here...\" text\u003d\"\" HBox.hgrow\u003d\"ALWAYS\" /\u003e"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "sreesubbash"
        },
        "content": "               \u003c/children\u003e"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "sreesubbash"
        },
        "content": "            \u003c/HBox\u003e"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "jascxx"
        },
        "content": "            \u003cMenuBar fx:id\u003d\"commandMenuField\" minHeight\u003d\"-Infinity\" prefHeight\u003d\"30.0\" prefWidth\u003d\"1077.0\"\u003e"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "sreesubbash"
        },
        "content": "              \u003cmenus\u003e"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "sreesubbash"
        },
        "content": "              \u003c/menus\u003e"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "sreesubbash"
        },
        "content": "            \u003c/MenuBar\u003e"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "sreesubbash"
        },
        "content": "         \u003c/children\u003e"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "sreesubbash"
        },
        "content": "      \u003c/VBox\u003e"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "sreesubbash"
        },
        "content": "   \u003c/children\u003e"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c/StackPane\u003e"
      }
    ],
    "authorContributionMap": {
      "sreesubbash": 31,
      "dragontho": 6,
      "jascxx": 1,
      "-": 7
    }
  },
  {
    "path": "src/main/resources/view/CurrentModeFooter.fxml",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "dragontho"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "dragontho"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "dragontho"
        },
        "content": "\u003c?import javafx.scene.control.Label?\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "dragontho"
        },
        "content": "\u003c?import javafx.scene.layout.ColumnConstraints?\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "dragontho"
        },
        "content": "\u003c?import javafx.scene.layout.GridPane?\u003e"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "dragontho"
        },
        "content": "\u003c?import javafx.scene.layout.RowConstraints?\u003e"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "dragontho"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": "\u003cGridPane nodeOrientation\u003d\"RIGHT_TO_LEFT\" styleClass\u003d\"status-bar\" xmlns\u003d\"http://javafx.com/javafx/11\" xmlns:fx\u003d\"http://javafx.com/fxml/1\"\u003e"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "dragontho"
        },
        "content": "  \u003ccolumnConstraints\u003e"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "dragontho"
        },
        "content": "    \u003cColumnConstraints hgrow\u003d\"SOMETIMES\" minWidth\u003d\"10\" /\u003e"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "dragontho"
        },
        "content": "  \u003c/columnConstraints\u003e"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "dragontho"
        },
        "content": "  \u003cLabel fx:id\u003d\"currentMode\" /\u003e"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "dragontho"
        },
        "content": "   \u003crowConstraints\u003e"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "dragontho"
        },
        "content": "      \u003cRowConstraints /\u003e"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "dragontho"
        },
        "content": "   \u003c/rowConstraints\u003e"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "dragontho"
        },
        "content": "\u003c/GridPane\u003e"
      }
    ],
    "authorContributionMap": {
      "dragontho": 15,
      "kohyida1997": 1
    }
  },
  {
    "path": "src/main/resources/view/DarkTheme.css",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": ".background {"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: derive(#1d1d1d, 20%);"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "    background-color: #383838; /* Used in the default.html file */"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ".label {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-size: 11pt;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-family: \"Segoe UI Semibold\";"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-text-fill: #555555;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-opacity: 0.9;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ".label-bright {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-size: 11pt;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-family: \"Segoe UI Semibold\";"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-text-fill: white;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-opacity: 1;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ".label-header {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-size: 32pt;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-family: \"Segoe UI Light\";"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-text-fill: white;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-opacity: 1;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "jascxx"
        },
        "content": ".label-header2 {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "jascxx"
        },
        "content": "    -fx-font-size: 14pt;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "jascxx"
        },
        "content": "    -fx-font-family: \"Segoe UI Light\";"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "jascxx"
        },
        "content": "    -fx-text-fill: white;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "jascxx"
        },
        "content": "    -fx-opacity: 1;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "jascxx"
        },
        "content": "}"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "jascxx"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "dragontho"
        },
        "content": ".label-unhighlighted {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "dragontho"
        },
        "content": "    -fx-font-size: 11pt;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "dragontho"
        },
        "content": "    -fx-font-family: \"Segoe UI SemiBold\";"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "dragontho"
        },
        "content": "    -fx-opacity: 0.5;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "dragontho"
        },
        "content": "    -fx-padding: 20 20 20 0;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "dragontho"
        },
        "content": "    -fx-text-fill: rgba(255, 255, 255, 100);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "dragontho"
        },
        "content": "}"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "dragontho"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "dragontho"
        },
        "content": ".label-highlighted {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "dragontho"
        },
        "content": "     -fx-font-size: 11pt;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "dragontho"
        },
        "content": "     -fx-font-family: \"Segoe UI SemiBold\";"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "dragontho"
        },
        "content": "     -fx-opacity: 0.9;"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "dragontho"
        },
        "content": "     -fx-padding: 20 20 20 0;"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "dragontho"
        },
        "content": "     -fx-text-fill: rgba(85, 255, 68, 100);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "dragontho"
        },
        "content": " }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "dragontho"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": ".text-field {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-size: 12pt;"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-family: \"Segoe UI Semibold\";"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "jascxx"
        },
        "content": ".small-text-field {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "jascxx"
        },
        "content": "    -fx-font-size: 10pt;"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "jascxx"
        },
        "content": "    -fx-font-family: \"Segoe UI Semibold\";"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "jascxx"
        },
        "content": "    -fx-text-fill: white;"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "jascxx"
        },
        "content": "}"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "jascxx"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": ".tab-pane {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-padding: 0 0 0 1;"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": ".tab-pane .tab-header-area {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-padding: 0 0 0 0;"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-min-height: 0;"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-max-height: 0;"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": ".table-view {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-base: #1d1d1d;"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-control-inner-background: #1d1d1d;"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: #1d1d1d;"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-table-cell-border-color: transparent;"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-table-header-border-color: transparent;"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-padding: 5;"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": ".table-view .column-header-background {"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: transparent;"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": ".table-view .column-header, .table-view .filler {"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-size: 35;"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-border-width: 0 0 1 0;"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: transparent;"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-border-color:"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "        transparent"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "        transparent"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "        derive(-fx-base, 80%)"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "        transparent;"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-border-insets: 0 10 1 0;"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": ".table-view .column-header .label {"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-size: 20pt;"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-family: \"Segoe UI Light\";"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-text-fill: white;"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-alignment: center-left;"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-opacity: 1;"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": ".table-view:focused .table-row-cell:filled:focused:selected {"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: -fx-focus-color;"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": ".split-pane:horizontal .split-pane-divider {"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: derive(#1d1d1d, 20%);"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-border-color: transparent transparent transparent #4d4d4d;"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": ".split-pane {"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-border-radius: 1;"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-border-width: 1;"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: derive(#1d1d1d, 20%);"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": ".list-view {"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-insets: 0;"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-padding: 0;"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: derive(#1d1d1d, 20%);"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": ".list-cell {"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-label-padding: 0 0 0 0;"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-graphic-text-gap : 0;"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-padding: 0 0 0 0;"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "jascxx"
        },
        "content": ".list-cell:filled:even, #cardPaneEven {"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: #3c3e3f;"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "jascxx"
        },
        "content": ".list-cell:filled:odd, #cardPaneOddd {"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: #515658;"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": ".list-cell:filled:selected {"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: #424d5f;"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": ".list-cell:filled:selected #cardPane {"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-border-color: #3e7b91;"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-border-width: 1;"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": ".list-cell .label {"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-text-fill: white;"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": ".cell_big_label {"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-family: \"Segoe UI Semibold\";"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-size: 16px;"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "jascxx"
        },
        "content": "    -fx-text-fill: white;"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "-"
        },
        "content": ".cell_small_label {"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-family: \"Segoe UI\";"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "jascxx"
        },
        "content": "    -fx-font-size: 14px;"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "jascxx"
        },
        "content": "    -fx-text-fill: white;"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "-"
        },
        "content": ".stack-pane {"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "-"
        },
        "content": "     -fx-background-color: derive(#1d1d1d, 20%);"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "jascxx"
        },
        "content": ".scroll-pane {"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "jascxx"
        },
        "content": "    -fx-background: derive(#1d1d1d, 20%);"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "jascxx"
        },
        "content": "    -fx-border-color: derive(#1d1d1d, 10%);"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "jascxx"
        },
        "content": "}"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "jascxx"
        },
        "content": ""
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "-"
        },
        "content": ".pane-with-border {"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "-"
        },
        "content": "     -fx-background-color: derive(#1d1d1d, 20%);"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "-"
        },
        "content": "     -fx-border-color: derive(#1d1d1d, 10%);"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "-"
        },
        "content": "     -fx-border-top-width: 1px;"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "-"
        },
        "content": ".status-bar {"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: derive(#1d1d1d, 30%);"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "-"
        },
        "content": ".result-display {"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: transparent;"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-family: \"Segoe UI Light\";"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": "    -fx-font-size: 12.5pt;"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-text-fill: white;"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": "    -fx-underline: true;"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": ".timer-display {"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": "    -fx-background-color: transparent;"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": "    -fx-font-family: \"monospace\";"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": "    -fx-font-size: 11.7pt;"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": "    -fx-text-fill: pink;"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": "}"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": ""
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": ".hint-display {"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": "    -fx-background-color: transparent;"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": "    -fx-font-family: \"monospace\";"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": "    -fx-font-size: 11.7pt;"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": "    -fx-text-fill: pink;"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": "}"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": ""
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": ""
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "-"
        },
        "content": ".result-display .label {"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-text-fill: black !important;"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "-"
        },
        "content": ".status-bar .label {"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-family: \"Segoe UI Light\";"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-text-fill: white;"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-padding: 4px;"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-pref-height: 30px;"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "-"
        },
        "content": ".status-bar-with-border {"
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: derive(#1d1d1d, 30%);"
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-border-color: derive(#1d1d1d, 25%);"
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-border-width: 1px;"
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "-"
        },
        "content": ".status-bar-with-border .label {"
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-text-fill: white;"
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "-"
        },
        "content": ".grid-pane {"
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: derive(#1d1d1d, 30%);"
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-border-color: derive(#1d1d1d, 30%);"
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-border-width: 1px;"
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "-"
        },
        "content": ".grid-pane .stack-pane {"
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: derive(#1d1d1d, 30%);"
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "-"
        },
        "content": ".context-menu {"
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: derive(#1d1d1d, 50%);"
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "-"
        },
        "content": ".context-menu .label {"
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-text-fill: white;"
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "-"
        },
        "content": ".menu-bar {"
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: derive(#1d1d1d, 20%);"
      },
      {
        "lineNumber": 248,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 249,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 250,
        "author": {
          "gitId": "-"
        },
        "content": ".menu-bar .label {"
      },
      {
        "lineNumber": 251,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-size: 14pt;"
      },
      {
        "lineNumber": 252,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-family: \"Segoe UI Light\";"
      },
      {
        "lineNumber": 253,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-text-fill: white;"
      },
      {
        "lineNumber": 254,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-opacity: 0.9;"
      },
      {
        "lineNumber": 255,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 256,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 257,
        "author": {
          "gitId": "-"
        },
        "content": ".menu .left-container {"
      },
      {
        "lineNumber": 258,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: black;"
      },
      {
        "lineNumber": 259,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 260,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 261,
        "author": {
          "gitId": "-"
        },
        "content": "/*"
      },
      {
        "lineNumber": 262,
        "author": {
          "gitId": "-"
        },
        "content": " * Metro style Push Button"
      },
      {
        "lineNumber": 263,
        "author": {
          "gitId": "-"
        },
        "content": " * Author: Pedro Duque Vieira"
      },
      {
        "lineNumber": 264,
        "author": {
          "gitId": "-"
        },
        "content": " * http://pixelduke.wordpress.com/2012/10/23/jmetro-windows-8-controls-on-java/"
      },
      {
        "lineNumber": 265,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 266,
        "author": {
          "gitId": "-"
        },
        "content": ".button {"
      },
      {
        "lineNumber": 267,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-padding: 5 22 5 22;"
      },
      {
        "lineNumber": 268,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-border-color: #e2e2e2;"
      },
      {
        "lineNumber": 269,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-border-width: 2;"
      },
      {
        "lineNumber": 270,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-radius: 0;"
      },
      {
        "lineNumber": 271,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: #1d1d1d;"
      },
      {
        "lineNumber": 272,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-family: \"Segoe UI\", Helvetica, Arial, sans-serif;"
      },
      {
        "lineNumber": 273,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-size: 11pt;"
      },
      {
        "lineNumber": 274,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-text-fill: #d8d8d8;"
      },
      {
        "lineNumber": 275,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-insets: 0 0 0 0, 0, 1, 2;"
      },
      {
        "lineNumber": 276,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 277,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 278,
        "author": {
          "gitId": "-"
        },
        "content": ".button:hover {"
      },
      {
        "lineNumber": 279,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: #3a3a3a;"
      },
      {
        "lineNumber": 280,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 281,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 282,
        "author": {
          "gitId": "-"
        },
        "content": ".button:pressed, .button:default:hover:pressed {"
      },
      {
        "lineNumber": 283,
        "author": {
          "gitId": "-"
        },
        "content": "  -fx-background-color: white;"
      },
      {
        "lineNumber": 284,
        "author": {
          "gitId": "-"
        },
        "content": "  -fx-text-fill: #1d1d1d;"
      },
      {
        "lineNumber": 285,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 286,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 287,
        "author": {
          "gitId": "-"
        },
        "content": ".button:focused {"
      },
      {
        "lineNumber": 288,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-border-color: white, white;"
      },
      {
        "lineNumber": 289,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-border-width: 1, 1;"
      },
      {
        "lineNumber": 290,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-border-style: solid, segments(1, 1);"
      },
      {
        "lineNumber": 291,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-border-radius: 0, 0;"
      },
      {
        "lineNumber": 292,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-border-insets: 1 1 1 1, 0;"
      },
      {
        "lineNumber": 293,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 294,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 295,
        "author": {
          "gitId": "-"
        },
        "content": ".button:disabled, .button:default:disabled {"
      },
      {
        "lineNumber": 296,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-opacity: 0.4;"
      },
      {
        "lineNumber": 297,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: #1d1d1d;"
      },
      {
        "lineNumber": 298,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-text-fill: white;"
      },
      {
        "lineNumber": 299,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 300,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 301,
        "author": {
          "gitId": "-"
        },
        "content": ".button:default {"
      },
      {
        "lineNumber": 302,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: -fx-focus-color;"
      },
      {
        "lineNumber": 303,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-text-fill: #ffffff;"
      },
      {
        "lineNumber": 304,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 305,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 306,
        "author": {
          "gitId": "-"
        },
        "content": ".button:default:hover {"
      },
      {
        "lineNumber": 307,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: derive(-fx-focus-color, 30%);"
      },
      {
        "lineNumber": 308,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 309,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 310,
        "author": {
          "gitId": "-"
        },
        "content": ".dialog-pane {"
      },
      {
        "lineNumber": 311,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: #1d1d1d;"
      },
      {
        "lineNumber": 312,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 313,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 314,
        "author": {
          "gitId": "-"
        },
        "content": ".dialog-pane \u003e *.button-bar \u003e *.container {"
      },
      {
        "lineNumber": 315,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: #1d1d1d;"
      },
      {
        "lineNumber": 316,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 317,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 318,
        "author": {
          "gitId": "-"
        },
        "content": ".dialog-pane \u003e *.label.content {"
      },
      {
        "lineNumber": 319,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-size: 14px;"
      },
      {
        "lineNumber": 320,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-weight: bold;"
      },
      {
        "lineNumber": 321,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-text-fill: white;"
      },
      {
        "lineNumber": 322,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 323,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 324,
        "author": {
          "gitId": "-"
        },
        "content": ".dialog-pane:header *.header-panel {"
      },
      {
        "lineNumber": 325,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: derive(#1d1d1d, 25%);"
      },
      {
        "lineNumber": 326,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 327,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 328,
        "author": {
          "gitId": "-"
        },
        "content": ".dialog-pane:header *.header-panel *.label {"
      },
      {
        "lineNumber": 329,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-size: 18px;"
      },
      {
        "lineNumber": 330,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-style: italic;"
      },
      {
        "lineNumber": 331,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-fill: white;"
      },
      {
        "lineNumber": 332,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-text-fill: white;"
      },
      {
        "lineNumber": 333,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 334,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 335,
        "author": {
          "gitId": "-"
        },
        "content": ".scroll-bar {"
      },
      {
        "lineNumber": 336,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: derive(#1d1d1d, 20%);"
      },
      {
        "lineNumber": 337,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 338,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 339,
        "author": {
          "gitId": "-"
        },
        "content": ".scroll-bar .thumb {"
      },
      {
        "lineNumber": 340,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: derive(#1d1d1d, 50%);"
      },
      {
        "lineNumber": 341,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-insets: 3;"
      },
      {
        "lineNumber": 342,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 343,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 344,
        "author": {
          "gitId": "-"
        },
        "content": ".scroll-bar .increment-button, .scroll-bar .decrement-button {"
      },
      {
        "lineNumber": 345,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: transparent;"
      },
      {
        "lineNumber": 346,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-padding: 0 0 0 0;"
      },
      {
        "lineNumber": 347,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 348,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 349,
        "author": {
          "gitId": "-"
        },
        "content": ".scroll-bar .increment-arrow, .scroll-bar .decrement-arrow {"
      },
      {
        "lineNumber": 350,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-shape: \" \";"
      },
      {
        "lineNumber": 351,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 352,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 353,
        "author": {
          "gitId": "-"
        },
        "content": ".scroll-bar:vertical .increment-arrow, .scroll-bar:vertical .decrement-arrow {"
      },
      {
        "lineNumber": 354,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-padding: 1 8 1 8;"
      },
      {
        "lineNumber": 355,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 356,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 357,
        "author": {
          "gitId": "-"
        },
        "content": ".scroll-bar:horizontal .increment-arrow, .scroll-bar:horizontal .decrement-arrow {"
      },
      {
        "lineNumber": 358,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-padding: 8 1 8 1;"
      },
      {
        "lineNumber": 359,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 360,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 361,
        "author": {
          "gitId": "-"
        },
        "content": "#cardPane {"
      },
      {
        "lineNumber": 362,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: transparent;"
      },
      {
        "lineNumber": 363,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-border-width: 0;"
      },
      {
        "lineNumber": 364,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 365,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 366,
        "author": {
          "gitId": "-"
        },
        "content": "#commandTypeLabel {"
      },
      {
        "lineNumber": 367,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-size: 11px;"
      },
      {
        "lineNumber": 368,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-text-fill: #F70D1A;"
      },
      {
        "lineNumber": 369,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 370,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 371,
        "author": {
          "gitId": "-"
        },
        "content": "#commandTextField {"
      },
      {
        "lineNumber": 372,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: transparent #383838 transparent #383838;"
      },
      {
        "lineNumber": 373,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-insets: 0;"
      },
      {
        "lineNumber": 374,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-border-color: #383838 #383838 #ffffff #383838;"
      },
      {
        "lineNumber": 375,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-border-insets: 0;"
      },
      {
        "lineNumber": 376,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-border-width: 1;"
      },
      {
        "lineNumber": 377,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-family: \"Segoe UI Light\";"
      },
      {
        "lineNumber": 378,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-size: 13pt;"
      },
      {
        "lineNumber": 379,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-text-fill: white;"
      },
      {
        "lineNumber": 380,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 381,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 382,
        "author": {
          "gitId": "-"
        },
        "content": "#filterField, #personListPanel, #personWebpage {"
      },
      {
        "lineNumber": 383,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-effect: innershadow(gaussian, black, 10, 0, 0, 0);"
      },
      {
        "lineNumber": 384,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 385,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 386,
        "author": {
          "gitId": "-"
        },
        "content": "#resultDisplay .content {"
      },
      {
        "lineNumber": 387,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: transparent, #383838, transparent, #383838;"
      },
      {
        "lineNumber": 388,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-radius: 0;"
      },
      {
        "lineNumber": 389,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 390,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 391,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": "#timerText .content {"
      },
      {
        "lineNumber": 392,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": "    -fx-background-color: transparent, #383838, transparent, #383838;"
      },
      {
        "lineNumber": 393,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": "    -fx-background-radius: 0;"
      },
      {
        "lineNumber": 394,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": "}"
      },
      {
        "lineNumber": 395,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": ""
      },
      {
        "lineNumber": 396,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": ".hint-label {"
      },
      {
        "lineNumber": 397,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": "    -fx-font-family: \"monospace\";"
      },
      {
        "lineNumber": 398,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": "    -fx-font-size: 20pt;"
      },
      {
        "lineNumber": 399,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": "    -fx-text-fill: pink;"
      },
      {
        "lineNumber": 400,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": "}"
      },
      {
        "lineNumber": 401,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": ""
      },
      {
        "lineNumber": 402,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": ".question-label {"
      },
      {
        "lineNumber": 403,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": "    -fx-font-family: \"Times New Roman\";"
      },
      {
        "lineNumber": 404,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": "    -fx-underline: true;"
      },
      {
        "lineNumber": 405,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": "    -fx-font-size: 24pt;"
      },
      {
        "lineNumber": 406,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": "    -fx-text-fill: lightgreen;"
      },
      {
        "lineNumber": 407,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": "}"
      },
      {
        "lineNumber": 408,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": ""
      },
      {
        "lineNumber": 409,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": "#progress-bar-alert \u003e .track {"
      },
      {
        "lineNumber": 410,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": "    -fx-box-border: red;"
      },
      {
        "lineNumber": 411,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": "    -fx-control-inner-background: #383838;"
      },
      {
        "lineNumber": 412,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": "}"
      },
      {
        "lineNumber": 413,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": ""
      },
      {
        "lineNumber": 414,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": "#progress-bar-alert {"
      },
      {
        "lineNumber": 415,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": "    -fx-accent: red;"
      },
      {
        "lineNumber": 416,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": "}"
      },
      {
        "lineNumber": 417,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": ""
      },
      {
        "lineNumber": 418,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": "#progress-bar-normal \u003e .track {"
      },
      {
        "lineNumber": 419,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": "    -fx-box-border: red;"
      },
      {
        "lineNumber": 420,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": "    -fx-control-inner-background: #383838;"
      },
      {
        "lineNumber": 421,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": "}"
      },
      {
        "lineNumber": 422,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": ""
      },
      {
        "lineNumber": 423,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": "#progress-bar-normal {"
      },
      {
        "lineNumber": 424,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": "    -fx-accent: lightgreen;"
      },
      {
        "lineNumber": 425,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": "}"
      },
      {
        "lineNumber": 426,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": ""
      },
      {
        "lineNumber": 427,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": ""
      },
      {
        "lineNumber": 428,
        "author": {
          "gitId": "jascxx"
        },
        "content": "/*combo box*/"
      },
      {
        "lineNumber": 429,
        "author": {
          "gitId": "jascxx"
        },
        "content": ".combo-box .list-cell {"
      },
      {
        "lineNumber": 430,
        "author": {
          "gitId": "jascxx"
        },
        "content": "    -fx-background: grey;"
      },
      {
        "lineNumber": 431,
        "author": {
          "gitId": "jascxx"
        },
        "content": "    -fx-background-color: transparent;"
      },
      {
        "lineNumber": 432,
        "author": {
          "gitId": "jascxx"
        },
        "content": "    -fx-text-fill: white;"
      },
      {
        "lineNumber": 433,
        "author": {
          "gitId": "jascxx"
        },
        "content": "    -fx-padding: 3 0 2 7;"
      },
      {
        "lineNumber": 434,
        "author": {
          "gitId": "jascxx"
        },
        "content": "    -fx-cell-size: 1.66667em;"
      },
      {
        "lineNumber": 435,
        "author": {
          "gitId": "jascxx"
        },
        "content": "}"
      },
      {
        "lineNumber": 436,
        "author": {
          "gitId": "jascxx"
        },
        "content": ""
      },
      {
        "lineNumber": 437,
        "author": {
          "gitId": "jascxx"
        },
        "content": ""
      },
      {
        "lineNumber": 438,
        "author": {
          "gitId": "jascxx"
        },
        "content": ".combo-box-popup .list-view .list-cell:filled:selected, .combo-box-popup .list-view .list-cell:filled:selected:hover {"
      },
      {
        "lineNumber": 439,
        "author": {
          "gitId": "jascxx"
        },
        "content": "    -fx-background: -fx-accent;"
      },
      {
        "lineNumber": 440,
        "author": {
          "gitId": "jascxx"
        },
        "content": "    -fx-background-color: -fx-selection-bar;"
      },
      {
        "lineNumber": 441,
        "author": {
          "gitId": "jascxx"
        },
        "content": "    -fx-text-fill: white;"
      },
      {
        "lineNumber": 442,
        "author": {
          "gitId": "jascxx"
        },
        "content": "}"
      },
      {
        "lineNumber": 443,
        "author": {
          "gitId": "jascxx"
        },
        "content": ""
      },
      {
        "lineNumber": 444,
        "author": {
          "gitId": "jascxx"
        },
        "content": ".combo-box-base {"
      },
      {
        "lineNumber": 445,
        "author": {
          "gitId": "jascxx"
        },
        "content": "    -fx-background-color: grey, grey, grey, grey;"
      },
      {
        "lineNumber": 446,
        "author": {
          "gitId": "jascxx"
        },
        "content": "    -fx-background-radius: 5, 5, 4, 3;"
      },
      {
        "lineNumber": 447,
        "author": {
          "gitId": "jascxx"
        },
        "content": "    -fx-background-insets: 0 0 -1 0, 0, 1, 2;"
      },
      {
        "lineNumber": 448,
        "author": {
          "gitId": "jascxx"
        },
        "content": "    -fx-padding: 0;"
      },
      {
        "lineNumber": 449,
        "author": {
          "gitId": "jascxx"
        },
        "content": "}"
      },
      {
        "lineNumber": 450,
        "author": {
          "gitId": "jascxx"
        },
        "content": ""
      },
      {
        "lineNumber": 451,
        "author": {
          "gitId": "jascxx"
        },
        "content": ".tooltip {"
      },
      {
        "lineNumber": 452,
        "author": {
          "gitId": "jascxx"
        },
        "content": "    -fx-font-size: 10pt;"
      },
      {
        "lineNumber": 453,
        "author": {
          "gitId": "jascxx"
        },
        "content": "}"
      },
      {
        "lineNumber": 454,
        "author": {
          "gitId": "jascxx"
        },
        "content": ""
      },
      {
        "lineNumber": 455,
        "author": {
          "gitId": "jascxx"
        },
        "content": "#highlighted {"
      },
      {
        "lineNumber": 456,
        "author": {
          "gitId": "jascxx"
        },
        "content": "    -fx-text-fill: #8cb0f5;"
      },
      {
        "lineNumber": 457,
        "author": {
          "gitId": "jascxx"
        },
        "content": "}"
      },
      {
        "lineNumber": 458,
        "author": {
          "gitId": "jascxx"
        },
        "content": ""
      },
      {
        "lineNumber": 459,
        "author": {
          "gitId": "jascxx"
        },
        "content": "#slogan {"
      },
      {
        "lineNumber": 460,
        "author": {
          "gitId": "jascxx"
        },
        "content": "    -fx-text-fill: #ec4c4c;"
      },
      {
        "lineNumber": 461,
        "author": {
          "gitId": "jascxx"
        },
        "content": "}"
      },
      {
        "lineNumber": 462,
        "author": {
          "gitId": "jascxx"
        },
        "content": ""
      },
      {
        "lineNumber": 463,
        "author": {
          "gitId": "jascxx"
        },
        "content": "#avatar-shadow {"
      },
      {
        "lineNumber": 464,
        "author": {
          "gitId": "jascxx"
        },
        "content": "    -fx-fill: #353535;"
      },
      {
        "lineNumber": 465,
        "author": {
          "gitId": "jascxx"
        },
        "content": "}"
      },
      {
        "lineNumber": 466,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": ""
      },
      {
        "lineNumber": 467,
        "author": {
          "gitId": "-"
        },
        "content": "#tags {"
      },
      {
        "lineNumber": 468,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-hgap: 7;"
      },
      {
        "lineNumber": 469,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-vgap: 3;"
      },
      {
        "lineNumber": 470,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 471,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 472,
        "author": {
          "gitId": "-"
        },
        "content": "#tags .label {"
      },
      {
        "lineNumber": 473,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-text-fill: white;"
      },
      {
        "lineNumber": 474,
        "author": {
          "gitId": "jascxx"
        },
        "content": "    -fx-background-color: #3e4061;"
      },
      {
        "lineNumber": 475,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-padding: 1 3 1 3;"
      },
      {
        "lineNumber": 476,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-border-radius: 2;"
      },
      {
        "lineNumber": 477,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-radius: 2;"
      },
      {
        "lineNumber": 478,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-size: 11;"
      },
      {
        "lineNumber": 479,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 480,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": ""
      },
      {
        "lineNumber": 481,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": "#timer-alert-style .content {"
      },
      {
        "lineNumber": 482,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": "    -fx-background-color: transparent, #383838, transparent, #383838;"
      },
      {
        "lineNumber": 483,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": "    -fx-background-radius: 0;"
      },
      {
        "lineNumber": 484,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": "}"
      },
      {
        "lineNumber": 485,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": ""
      },
      {
        "lineNumber": 486,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": "#timer-alert-style {"
      },
      {
        "lineNumber": 487,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": "    -fx-text-fill: #FF69B4;"
      },
      {
        "lineNumber": 488,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": "}"
      },
      {
        "lineNumber": 489,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": ""
      },
      {
        "lineNumber": 490,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": "#timer-normal-style .content {"
      },
      {
        "lineNumber": 491,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": "    -fx-background-color: transparent, #383838, transparent, #383838;"
      },
      {
        "lineNumber": 492,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": "    -fx-background-radius: 0;"
      },
      {
        "lineNumber": 493,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": "}"
      },
      {
        "lineNumber": 494,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": ""
      },
      {
        "lineNumber": 495,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": "#timer-normal-style {"
      },
      {
        "lineNumber": 496,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": "    -fx-text-fill: #ADFF2F;"
      },
      {
        "lineNumber": 497,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "dragontho": 16,
      "jascxx": 62,
      "kohyida1997": 73,
      "-": 346
    }
  },
  {
    "path": "src/main/resources/view/ExtensionsLight.css",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "dragontho"
        },
        "content": ""
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "dragontho"
        },
        "content": ".error {"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "dragontho"
        },
        "content": "    -fx-text-fill: #d06651 !important; /* The error class should always override the default text-fill style */"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "dragontho"
        },
        "content": "}"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "dragontho"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "dragontho"
        },
        "content": ".list-cell:empty {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "dragontho"
        },
        "content": "    /* Empty cells will not have alternating colours */"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "dragontho"
        },
        "content": "    -fx-background: #c7c7c7;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "dragontho"
        },
        "content": "}"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "dragontho"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "dragontho"
        },
        "content": ".tag-selector {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "dragontho"
        },
        "content": "    -fx-border-width: 1;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "dragontho"
        },
        "content": "    -fx-border-color: #000000;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "dragontho"
        },
        "content": "    -fx-border-radius: 3;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "dragontho"
        },
        "content": "    -fx-background-radius: 3;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "dragontho"
        },
        "content": "}"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "dragontho"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "dragontho"
        },
        "content": ".tooltip-text {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "dragontho"
        },
        "content": "    -fx-text-fill: #000000;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "dragontho"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "dragontho": 20
    }
  },
  {
    "path": "src/main/resources/view/GameResultPanel.fxml",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jascxx"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "jascxx"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "jascxx"
        },
        "content": "\u003c?import javafx.geometry.Insets?\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "jascxx"
        },
        "content": "\u003c?import javafx.scene.control.Label?\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "jascxx"
        },
        "content": "\u003c?import javafx.scene.control.ScrollPane?\u003e"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "jascxx"
        },
        "content": "\u003c?import javafx.scene.control.Separator?\u003e"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "jascxx"
        },
        "content": "\u003c?import javafx.scene.layout.HBox?\u003e"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "jascxx"
        },
        "content": "\u003c?import javafx.scene.layout.Region?\u003e"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "jascxx"
        },
        "content": "\u003c?import javafx.scene.layout.StackPane?\u003e"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "jascxx"
        },
        "content": "\u003c?import javafx.scene.layout.VBox?\u003e"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "jascxx"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": "\u003cScrollPane fitToHeight\u003d\"true\" fitToWidth\u003d\"true\" xmlns\u003d\"http://javafx.com/javafx/11\" xmlns:fx\u003d\"http://javafx.com/fxml/1\"\u003e"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "jascxx"
        },
        "content": "   \u003ccontent\u003e"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "dragontho"
        },
        "content": "      \u003cVBox maxHeight\u003d\"-Infinity\" maxWidth\u003d\"1.7976931348623157E308\" minHeight\u003d\"-Infinity\" minWidth\u003d\"-Infinity\" prefWidth\u003d\"600.0\"\u003e"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "jascxx"
        },
        "content": "          \u003cchildren\u003e"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "jascxx"
        },
        "content": "              \u003cLabel fx:id\u003d\"title\" alignment\u003d\"CENTER\" maxHeight\u003d\"-Infinity\" maxWidth\u003d\"1.7976931348623157E308\" minHeight\u003d\"-Infinity\" minWidth\u003d\"-Infinity\" styleClass\u003d\"label-header\" text\u003d\"Title\" textAlignment\u003d\"CENTER\" /\u003e"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "jascxx"
        },
        "content": "            \u003cStackPane fx:id\u003d\"badgesRowPlaceholder\" /\u003e"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "jascxx"
        },
        "content": "            \u003cRegion prefHeight\u003d\"20.0\" /\u003e"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "jascxx"
        },
        "content": "            \u003cLabel fx:id\u003d\"title1\" alignment\u003d\"CENTER\" maxHeight\u003d\"-Infinity\" maxWidth\u003d\"1.7976931348623157E308\" minHeight\u003d\"-Infinity\" minWidth\u003d\"-Infinity\" styleClass\u003d\"cell_big_label\" text\u003d\"Score:\" textAlignment\u003d\"CENTER\" /\u003e"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "jascxx"
        },
        "content": "            \u003cLabel fx:id\u003d\"scoreText\" alignment\u003d\"CENTER\" maxHeight\u003d\"-Infinity\" maxWidth\u003d\"1.7976931348623157E308\" minHeight\u003d\"-Infinity\" minWidth\u003d\"-Infinity\" styleClass\u003d\"label-header\" text\u003d\"XX\" textAlignment\u003d\"CENTER\" /\u003e"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "jascxx"
        },
        "content": "            \u003cHBox minWidth\u003d\"0.0\" prefHeight\u003d\"30.0\" prefWidth\u003d\"0.0\"\u003e"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "jascxx"
        },
        "content": "               \u003cchildren\u003e"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "jascxx"
        },
        "content": "                  \u003cRegion prefHeight\u003d\"200.0\" HBox.hgrow\u003d\"ALWAYS\" /\u003e"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "jascxx"
        },
        "content": "                  \u003cLabel fx:id\u003d\"title11\" alignment\u003d\"CENTER\" maxHeight\u003d\"-Infinity\" maxWidth\u003d\"1.7976931348623157E308\" minHeight\u003d\"-Infinity\" minWidth\u003d\"-Infinity\" styleClass\u003d\"label-bright\" text\u003d\"Time taken: \" textAlignment\u003d\"CENTER\" /\u003e"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "jascxx"
        },
        "content": "                  \u003cLabel fx:id\u003d\"timeTakenText\" alignment\u003d\"CENTER\" maxHeight\u003d\"-Infinity\" maxWidth\u003d\"1.7976931348623157E308\" minHeight\u003d\"-Infinity\" minWidth\u003d\"-Infinity\" styleClass\u003d\"label-bright\" text\u003d\"XXs\" textAlignment\u003d\"CENTER\" /\u003e"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "jascxx"
        },
        "content": "                  \u003cRegion prefHeight\u003d\"200.0\" HBox.hgrow\u003d\"ALWAYS\" /\u003e"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "jascxx"
        },
        "content": "               \u003c/children\u003e"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "jascxx"
        },
        "content": "               \u003cpadding\u003e"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "jascxx"
        },
        "content": "                  \u003cInsets top\u003d\"10.0\" /\u003e"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "jascxx"
        },
        "content": "               \u003c/padding\u003e"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "jascxx"
        },
        "content": "               \u003cVBox.margin\u003e"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "jascxx"
        },
        "content": "                  \u003cInsets bottom\u003d\"8.0\" /\u003e"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "jascxx"
        },
        "content": "               \u003c/VBox.margin\u003e"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "jascxx"
        },
        "content": "            \u003c/HBox\u003e"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "jascxx"
        },
        "content": "            \u003cHBox fx:id\u003d\"highScoreHbox\" minWidth\u003d\"0.0\" prefHeight\u003d\"30.0\" prefWidth\u003d\"0.0\"\u003e"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "jascxx"
        },
        "content": "               \u003cchildren\u003e"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "jascxx"
        },
        "content": "                  \u003cRegion HBox.hgrow\u003d\"ALWAYS\" /\u003e"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "jascxx"
        },
        "content": "                  \u003cLabel fx:id\u003d\"title111\" alignment\u003d\"CENTER\" contentDisplay\u003d\"CENTER\" maxHeight\u003d\"-Infinity\" maxWidth\u003d\"1.7976931348623157E308\" minHeight\u003d\"-Infinity\" minWidth\u003d\"-Infinity\" styleClass\u003d\"label-bright\" text\u003d\"High Score: \" textAlignment\u003d\"CENTER\" /\u003e"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "jascxx"
        },
        "content": "                  \u003cLabel fx:id\u003d\"highScoreText\" alignment\u003d\"CENTER\" maxHeight\u003d\"-Infinity\" maxWidth\u003d\"1.7976931348623157E308\" minHeight\u003d\"-Infinity\" minWidth\u003d\"-Infinity\" styleClass\u003d\"label-bright\" text\u003d\"XX\" textAlignment\u003d\"CENTER\" /\u003e"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "jascxx"
        },
        "content": "                  \u003cRegion HBox.hgrow\u003d\"ALWAYS\" /\u003e"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "jascxx"
        },
        "content": "               \u003c/children\u003e"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "jascxx"
        },
        "content": "               \u003cpadding\u003e"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "jascxx"
        },
        "content": "                  \u003cInsets top\u003d\"10.0\" /\u003e"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "jascxx"
        },
        "content": "               \u003c/padding\u003e"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "jascxx"
        },
        "content": "            \u003c/HBox\u003e"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "jascxx"
        },
        "content": "            \u003cHBox fx:id\u003d\"fastestClearHbox\" minWidth\u003d\"0.0\" prefHeight\u003d\"30.0\" prefWidth\u003d\"0.0\" VBox.vgrow\u003d\"ALWAYS\"\u003e"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "jascxx"
        },
        "content": "               \u003cchildren\u003e"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "jascxx"
        },
        "content": "                  \u003cRegion prefHeight\u003d\"200.0\" HBox.hgrow\u003d\"ALWAYS\" /\u003e"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "jascxx"
        },
        "content": "                  \u003cLabel fx:id\u003d\"title1111\" alignment\u003d\"CENTER\" contentDisplay\u003d\"CENTER\" maxHeight\u003d\"-Infinity\" maxWidth\u003d\"1.7976931348623157E308\" minHeight\u003d\"-Infinity\" minWidth\u003d\"-Infinity\" styleClass\u003d\"label-bright\" text\u003d\"Fastest Clear: \" textAlignment\u003d\"CENTER\" /\u003e"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "jascxx"
        },
        "content": "                  \u003cLabel fx:id\u003d\"fastestClearText\" alignment\u003d\"CENTER\" maxHeight\u003d\"-Infinity\" maxWidth\u003d\"1.7976931348623157E308\" minHeight\u003d\"-Infinity\" minWidth\u003d\"-Infinity\" styleClass\u003d\"label-bright\" text\u003d\"XXs\" textAlignment\u003d\"CENTER\" /\u003e"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "jascxx"
        },
        "content": "                  \u003cRegion prefHeight\u003d\"200.0\" HBox.hgrow\u003d\"ALWAYS\" /\u003e"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "jascxx"
        },
        "content": "               \u003c/children\u003e"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "jascxx"
        },
        "content": "               \u003cpadding\u003e"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "jascxx"
        },
        "content": "                  \u003cInsets top\u003d\"3.0\" /\u003e"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "jascxx"
        },
        "content": "               \u003c/padding\u003e"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "jascxx"
        },
        "content": "            \u003c/HBox\u003e"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "jascxx"
        },
        "content": "            \u003cSeparator opacity\u003d\"0.6\" prefWidth\u003d\"200.0\"\u003e"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "jascxx"
        },
        "content": "               \u003cpadding\u003e"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "jascxx"
        },
        "content": "                  \u003cInsets left\u003d\"10.0\" right\u003d\"10.0\" /\u003e"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "jascxx"
        },
        "content": "               \u003c/padding\u003e"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "jascxx"
        },
        "content": "               \u003cVBox.margin\u003e"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "jascxx"
        },
        "content": "                  \u003cInsets bottom\u003d\"8.0\" top\u003d\"25.0\" /\u003e"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "jascxx"
        },
        "content": "               \u003c/VBox.margin\u003e"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "jascxx"
        },
        "content": "            \u003c/Separator\u003e"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "jascxx"
        },
        "content": "            \u003cVBox fx:id\u003d\"wrongAnswersBox\" prefHeight\u003d\"0.0\" prefWidth\u003d\"100.0\"\u003e"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "jascxx"
        },
        "content": "               \u003cchildren\u003e"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "jascxx"
        },
        "content": "                  \u003cLabel fx:id\u003d\"gameFeedbackHeader\" maxHeight\u003d\"-Infinity\" maxWidth\u003d\"1.7976931348623157E308\" minHeight\u003d\"-Infinity\" minWidth\u003d\"-Infinity\" styleClass\u003d\"label-header2\" text\u003d\"Remember these!\" textAlignment\u003d\"CENTER\"\u003e"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "jascxx"
        },
        "content": "                     \u003cVBox.margin\u003e"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "jascxx"
        },
        "content": "                        \u003cInsets bottom\u003d\"6.0\" left\u003d\"16.0\" top\u003d\"8.0\" /\u003e"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "jascxx"
        },
        "content": "                     \u003c/VBox.margin\u003e"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "jascxx"
        },
        "content": "                  \u003c/Label\u003e"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "jascxx"
        },
        "content": "                  \u003cStackPane fx:id\u003d\"wrongAnswersList\" prefHeight\u003d\"0.0\" prefWidth\u003d\"200.0\"\u003e"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "jascxx"
        },
        "content": "                     \u003cpadding\u003e"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "jascxx"
        },
        "content": "                        \u003cInsets bottom\u003d\"4.0\" top\u003d\"4.0\" /\u003e"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "jascxx"
        },
        "content": "                     \u003c/padding\u003e"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "jascxx"
        },
        "content": "                  \u003c/StackPane\u003e"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "jascxx"
        },
        "content": "               \u003c/children\u003e"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "jascxx"
        },
        "content": "               \u003cVBox.margin\u003e"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "jascxx"
        },
        "content": "                  \u003cInsets bottom\u003d\"4.0\" left\u003d\"8.0\" right\u003d\"8.0\" top\u003d\"4.0\" /\u003e"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "jascxx"
        },
        "content": "               \u003c/VBox.margin\u003e"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "jascxx"
        },
        "content": "            \u003c/VBox\u003e"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "jascxx"
        },
        "content": "            \u003cSeparator opacity\u003d\"0.6\" prefWidth\u003d\"200.0\"\u003e"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "jascxx"
        },
        "content": "               \u003cpadding\u003e"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "jascxx"
        },
        "content": "                  \u003cInsets left\u003d\"10.0\" right\u003d\"10.0\" /\u003e"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "jascxx"
        },
        "content": "               \u003c/padding\u003e"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "jascxx"
        },
        "content": "               \u003cVBox.margin\u003e"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "jascxx"
        },
        "content": "                  \u003cInsets bottom\u003d\"8.0\" top\u003d\"25.0\" /\u003e"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "jascxx"
        },
        "content": "               \u003c/VBox.margin\u003e"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "jascxx"
        },
        "content": "            \u003c/Separator\u003e"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "jascxx"
        },
        "content": "            \u003cStackPane fx:id\u003d\"progressChartPlaceholder\"\u003e"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "jascxx"
        },
        "content": "               \u003cVBox.margin\u003e"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "jascxx"
        },
        "content": "                  \u003cInsets bottom\u003d\"4.0\" left\u003d\"8.0\" right\u003d\"8.0\" top\u003d\"4.0\" /\u003e"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "jascxx"
        },
        "content": "               \u003c/VBox.margin\u003e"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "jascxx"
        },
        "content": "            \u003c/StackPane\u003e"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "jascxx"
        },
        "content": "               \u003c/children\u003e"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "jascxx"
        },
        "content": "      \u003c/VBox\u003e"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "jascxx"
        },
        "content": "   \u003c/content\u003e"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "jascxx"
        },
        "content": "\u003c/ScrollPane\u003e"
      }
    ],
    "authorContributionMap": {
      "dragontho": 1,
      "jascxx": 96,
      "kohyida1997": 1
    }
  },
  {
    "path": "src/main/resources/view/HintDisplay.fxml",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": "\u003c?import javafx.scene.control.TextArea?\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": "\u003c?import javafx.scene.layout.StackPane?\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": "\u003cStackPane fx:id\u003d\"placeHolder\" styleClass\u003d\"pane-with-border\" xmlns\u003d\"http://javafx.com/javafx/8\""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": "           xmlns:fx\u003d\"http://javafx.com/fxml/1\"\u003e"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": "    \u003cTextArea fx:id\u003d\"hintDisplay\" editable\u003d\"false\" styleClass\u003d\"hint-display\"/\u003e"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": "\u003c/StackPane\u003e"
      }
    ],
    "authorContributionMap": {
      "kohyida1997": 9
    }
  },
  {
    "path": "src/main/resources/view/HintLabel.fxml",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": "\u003c?import javafx.scene.control.Label?\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": "\u003cLabel fx:id\u003d\"hintLabel\" text\u003d\"No Hints To Display!\" styleClass\u003d\"hint-label\" xmlns\u003d\"http://javafx.com/javafx/11\" xmlns:fx\u003d\"http://javafx.com/fxml/1\" /\u003e"
      }
    ],
    "authorContributionMap": {
      "kohyida1997": 6
    }
  },
  {
    "path": "src/main/resources/view/LightTheme.css",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "dragontho"
        },
        "content": ".background {"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "dragontho"
        },
        "content": "    -fx-background-color: derive(#d1d1d1, 20%);"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "dragontho"
        },
        "content": "    background-color: #c7c7c7; /* Used in the default.html file */"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "dragontho"
        },
        "content": "}"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "dragontho"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "dragontho"
        },
        "content": ".label {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "dragontho"
        },
        "content": "    -fx-font-size: 11pt;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "dragontho"
        },
        "content": "    -fx-font-family: \"Segoe UI Semibold\";"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "dragontho"
        },
        "content": "    -fx-text-fill: #aaaaaa;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "dragontho"
        },
        "content": "    -fx-opacity: 0.9;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "dragontho"
        },
        "content": "}"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "dragontho"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "dragontho"
        },
        "content": ".label-bright {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "dragontho"
        },
        "content": "    -fx-font-size: 11pt;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "dragontho"
        },
        "content": "    -fx-font-family: \"Segoe UI Semibold\";"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "dragontho"
        },
        "content": "    -fx-text-fill: #000000;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "dragontho"
        },
        "content": "    -fx-opacity: 1;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "dragontho"
        },
        "content": "}"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "dragontho"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "dragontho"
        },
        "content": ".label-header {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "dragontho"
        },
        "content": "    -fx-font-size: 32pt;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "dragontho"
        },
        "content": "    -fx-font-family: \"Segoe UI Light\";"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "dragontho"
        },
        "content": "    -fx-text-fill: #000000;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "dragontho"
        },
        "content": "    -fx-opacity: 1;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "dragontho"
        },
        "content": "}"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "dragontho"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "dragontho"
        },
        "content": ".label-header2 {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "dragontho"
        },
        "content": "    -fx-font-size: 14pt;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "dragontho"
        },
        "content": "    -fx-font-family: \"Segoe UI Light\";"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "dragontho"
        },
        "content": "    -fx-text-fill: #000000;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "dragontho"
        },
        "content": "    -fx-opacity: 1;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "dragontho"
        },
        "content": "}"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "dragontho"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "dragontho"
        },
        "content": ".label-unhighlighted {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "dragontho"
        },
        "content": "    -fx-font-size: 11pt;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "dragontho"
        },
        "content": "    -fx-font-family: \"Segoe UI SemiBold\";"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "dragontho"
        },
        "content": "    -fx-opacity: 0.5;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "dragontho"
        },
        "content": "    -fx-padding: 20 20 20 0;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "dragontho"
        },
        "content": "    -fx-text-fill: rgb(0, 0, 0);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "dragontho"
        },
        "content": "}"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "dragontho"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "dragontho"
        },
        "content": ".label-highlighted {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "dragontho"
        },
        "content": "     -fx-font-size: 11pt;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "dragontho"
        },
        "content": "     -fx-font-family: \"Segoe UI SemiBold\";"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "dragontho"
        },
        "content": "     -fx-opacity: 0.9;"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "dragontho"
        },
        "content": "     -fx-padding: 20 20 20 0;"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "dragontho"
        },
        "content": "     -fx-text-fill: rgb(145, 11, 17);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "dragontho"
        },
        "content": " }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "dragontho"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "dragontho"
        },
        "content": ".text-field {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "dragontho"
        },
        "content": "    -fx-font-size: 12pt;"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "dragontho"
        },
        "content": "    -fx-font-family: \"Segoe UI Semibold\";"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "dragontho"
        },
        "content": "}"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "dragontho"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "dragontho"
        },
        "content": ".small-text-field {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "dragontho"
        },
        "content": "    -fx-font-size: 10pt;"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "dragontho"
        },
        "content": "    -fx-font-family: \"Segoe UI Semibold\";"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "dragontho"
        },
        "content": "    -fx-text-fill: #000000;"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "dragontho"
        },
        "content": "}"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "dragontho"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "dragontho"
        },
        "content": ".tab-pane {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "dragontho"
        },
        "content": "    -fx-padding: 0 0 0 1;"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "dragontho"
        },
        "content": "}"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "dragontho"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "dragontho"
        },
        "content": ".tab-pane .tab-header-area {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "dragontho"
        },
        "content": "    -fx-padding: 0 0 0 0;"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "dragontho"
        },
        "content": "    -fx-min-height: 0;"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "dragontho"
        },
        "content": "    -fx-max-height: 0;"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "dragontho"
        },
        "content": "}"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "dragontho"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "dragontho"
        },
        "content": ".table-view {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "dragontho"
        },
        "content": "    -fx-base: #e2e2e2;"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "dragontho"
        },
        "content": "    -fx-control-inner-background: #e2e2e2;"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "dragontho"
        },
        "content": "    -fx-background-color: #e2e2e2;"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "dragontho"
        },
        "content": "    -fx-table-cell-border-color: transparent;"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "dragontho"
        },
        "content": "    -fx-table-header-border-color: transparent;"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "dragontho"
        },
        "content": "    -fx-padding: 5;"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "dragontho"
        },
        "content": "}"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "dragontho"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "dragontho"
        },
        "content": ".table-view .column-header-background {"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "dragontho"
        },
        "content": "    -fx-background-color: transparent;"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "dragontho"
        },
        "content": "}"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "dragontho"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "dragontho"
        },
        "content": ".table-view .column-header, .table-view .filler {"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "dragontho"
        },
        "content": "    -fx-size: 35;"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "dragontho"
        },
        "content": "    -fx-border-width: 0 0 1 0;"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "dragontho"
        },
        "content": "    -fx-background-color: transparent;"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "dragontho"
        },
        "content": "    -fx-border-color:"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "dragontho"
        },
        "content": "        transparent"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "dragontho"
        },
        "content": "        transparent"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "dragontho"
        },
        "content": "        derive(-fx-base, 80%)"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "dragontho"
        },
        "content": "        transparent;"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "dragontho"
        },
        "content": "    -fx-border-insets: 0 10 1 0;"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "dragontho"
        },
        "content": "}"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "dragontho"
        },
        "content": ""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "dragontho"
        },
        "content": ".table-view .column-header .label {"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "dragontho"
        },
        "content": "    -fx-font-size: 20pt;"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "dragontho"
        },
        "content": "    -fx-font-family: \"Segoe UI Light\";"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "dragontho"
        },
        "content": "    -fx-text-fill: #000000;"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "dragontho"
        },
        "content": "    -fx-alignment: center-left;"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "dragontho"
        },
        "content": "    -fx-opacity: 1;"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "dragontho"
        },
        "content": "}"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "dragontho"
        },
        "content": ""
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "dragontho"
        },
        "content": ".table-view:focused .table-row-cell:filled:focused:selected {"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "dragontho"
        },
        "content": "    -fx-background-color: -fx-focus-color;"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "dragontho"
        },
        "content": "}"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "dragontho"
        },
        "content": ""
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "dragontho"
        },
        "content": ".split-pane:horizontal .split-pane-divider {"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "dragontho"
        },
        "content": "    -fx-background-color: derive(#e2e2e2, 20%);"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "dragontho"
        },
        "content": "    -fx-border-color: transparent transparent transparent #b2b2b2;"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "dragontho"
        },
        "content": "}"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "dragontho"
        },
        "content": ""
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "dragontho"
        },
        "content": ".split-pane {"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "dragontho"
        },
        "content": "    -fx-border-radius: 1;"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "dragontho"
        },
        "content": "    -fx-border-width: 1;"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "dragontho"
        },
        "content": "    -fx-background-color: derive(#e2e2e2, 20%);"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "dragontho"
        },
        "content": "}"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "dragontho"
        },
        "content": ""
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "dragontho"
        },
        "content": ".list-view {"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "dragontho"
        },
        "content": "    -fx-background-insets: 0;"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "dragontho"
        },
        "content": "    -fx-padding: 0;"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "dragontho"
        },
        "content": "    -fx-background-color: derive(#e2e2e2, 20%);"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "dragontho"
        },
        "content": "}"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "dragontho"
        },
        "content": ""
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "dragontho"
        },
        "content": ".list-cell {"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "dragontho"
        },
        "content": "    -fx-label-padding: 0 0 0 0;"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "dragontho"
        },
        "content": "    -fx-graphic-text-gap : 0;"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "dragontho"
        },
        "content": "    -fx-padding: 0 0 0 0;"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "dragontho"
        },
        "content": "}"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "dragontho"
        },
        "content": ""
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "dragontho"
        },
        "content": ".list-cell:filled:even, #cardPaneEven {"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "dragontho"
        },
        "content": "    -fx-background-color: #b6bdc0;"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "dragontho"
        },
        "content": "}"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "dragontho"
        },
        "content": ""
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "dragontho"
        },
        "content": ".list-cell:filled:odd, #cardPaneOddd {"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "dragontho"
        },
        "content": "    -fx-background-color: #9aa3a7;"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "dragontho"
        },
        "content": "}"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "dragontho"
        },
        "content": ""
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "dragontho"
        },
        "content": ".list-cell:filled:selected {"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "dragontho"
        },
        "content": "    -fx-background-color: #7384a0;"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "dragontho"
        },
        "content": "}"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "dragontho"
        },
        "content": ""
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "dragontho"
        },
        "content": ".list-cell:filled:selected #cardPane {"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "dragontho"
        },
        "content": "    -fx-border-color: #365b6e;"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "dragontho"
        },
        "content": "    -fx-border-width: 1;"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "dragontho"
        },
        "content": "}"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "dragontho"
        },
        "content": ""
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "dragontho"
        },
        "content": ".list-cell .label {"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "dragontho"
        },
        "content": "    -fx-text-fill: #000000;"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "dragontho"
        },
        "content": "}"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "dragontho"
        },
        "content": ""
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "dragontho"
        },
        "content": ".cell_big_label {"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "dragontho"
        },
        "content": "    -fx-font-family: \"Segoe UI Semibold\";"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "dragontho"
        },
        "content": "    -fx-font-size: 16px;"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "dragontho"
        },
        "content": "    -fx-text-fill: #000000;"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "dragontho"
        },
        "content": "}"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "dragontho"
        },
        "content": ""
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "dragontho"
        },
        "content": ".cell_small_label {"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "dragontho"
        },
        "content": "    -fx-font-family: \"Segoe UI\";"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "dragontho"
        },
        "content": "    -fx-font-size: 14px;"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "dragontho"
        },
        "content": "    -fx-text-fill: #000000;"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "dragontho"
        },
        "content": "}"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "dragontho"
        },
        "content": ""
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "dragontho"
        },
        "content": ".stack-pane {"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "dragontho"
        },
        "content": "     -fx-background-color: derive(#e2e2e2, 20%);"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "dragontho"
        },
        "content": "}"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "dragontho"
        },
        "content": ""
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "dragontho"
        },
        "content": ".scroll-pane {"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "dragontho"
        },
        "content": "    -fx-background: derive(#e2e2e2, 20%);"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "dragontho"
        },
        "content": "    -fx-border-color: derive(#e2e2e2, 10%);"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "dragontho"
        },
        "content": "}"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "dragontho"
        },
        "content": ""
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "dragontho"
        },
        "content": ".pane-with-border {"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "dragontho"
        },
        "content": "     -fx-background-color: derive(#e2e2e2, 20%);"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "dragontho"
        },
        "content": "     -fx-border-color: derive(#e2e2e2, 10%);"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "dragontho"
        },
        "content": "     -fx-border-top-width: 1px;"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "dragontho"
        },
        "content": "}"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "dragontho"
        },
        "content": ""
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "dragontho"
        },
        "content": ".status-bar {"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "dragontho"
        },
        "content": "    -fx-background-color: derive(#e2e2e2, 30%);"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "dragontho"
        },
        "content": "}"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "dragontho"
        },
        "content": ""
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "dragontho"
        },
        "content": ".result-display {"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "dragontho"
        },
        "content": "    -fx-background-color: transparent;"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "dragontho"
        },
        "content": "    -fx-font-family: \"Segoe UI Light\";"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "dragontho"
        },
        "content": "    -fx-font-size: 12.5pt;"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "dragontho"
        },
        "content": "    -fx-text-fill: #000000;"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "dragontho"
        },
        "content": "    -fx-underline: true;"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "dragontho"
        },
        "content": "}"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "dragontho"
        },
        "content": ""
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "dragontho"
        },
        "content": ".timer-display {"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "dragontho"
        },
        "content": "    -fx-background-color: transparent;"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "dragontho"
        },
        "content": "    -fx-font-family: \"monospace\";"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "dragontho"
        },
        "content": "    -fx-font-size: 11.7pt;"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "dragontho"
        },
        "content": "    -fx-text-fill: #712224;"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "dragontho"
        },
        "content": "}"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "dragontho"
        },
        "content": ""
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "dragontho"
        },
        "content": ".hint-display {"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "dragontho"
        },
        "content": "    -fx-background-color: transparent;"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "dragontho"
        },
        "content": "    -fx-font-family: \"monospace\";"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "dragontho"
        },
        "content": "    -fx-font-size: 11.7pt;"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": "    -fx-text-fill: indigo;"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "dragontho"
        },
        "content": "}"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "dragontho"
        },
        "content": ""
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "dragontho"
        },
        "content": ".hint-display .text {"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "dragontho"
        },
        "content": "    -fx-underline: true;"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "dragontho"
        },
        "content": "}"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "dragontho"
        },
        "content": ""
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": ".hint-label {"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": "    -fx-font-family: \"monospace\";"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": "    -fx-font-size: 20pt;"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": "    -fx-text-fill: maroon;"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": "}"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": ""
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": ".question-label {"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": "    -fx-font-family: \"Times New Roman\";"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": "    -fx-underline: true;"
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": "    -fx-font-size: 24pt;"
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": "    -fx-text-fill: black;"
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": "}"
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": ""
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "dragontho"
        },
        "content": ".result-display .label {"
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "dragontho"
        },
        "content": "    -fx-text-fill: #ffffff !important;"
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "dragontho"
        },
        "content": "}"
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "dragontho"
        },
        "content": ""
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "dragontho"
        },
        "content": ".result-display .label {"
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "dragontho"
        },
        "content": "    -fx-text-fill: #ffffff !important;"
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "dragontho"
        },
        "content": "}"
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "dragontho"
        },
        "content": ""
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "dragontho"
        },
        "content": ".status-bar .label {"
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "dragontho"
        },
        "content": "    -fx-font-family: \"Segoe UI Light\";"
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "dragontho"
        },
        "content": "    -fx-text-fill: #000000;"
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "dragontho"
        },
        "content": "    -fx-padding: 4px;"
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "dragontho"
        },
        "content": "    -fx-pref-height: 30px;"
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "dragontho"
        },
        "content": "}"
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "dragontho"
        },
        "content": ""
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "dragontho"
        },
        "content": ".status-bar-with-border {"
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "dragontho"
        },
        "content": "    -fx-background-color: derive(#e2e2e2, 30%);"
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "dragontho"
        },
        "content": "    -fx-border-color: derive(#e2e2e2, 25%);"
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "dragontho"
        },
        "content": "    -fx-border-width: 1px;"
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "dragontho"
        },
        "content": "}"
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "dragontho"
        },
        "content": ""
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "dragontho"
        },
        "content": ".status-bar-with-border .label {"
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "dragontho"
        },
        "content": "    -fx-text-fill: #000000;"
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "dragontho"
        },
        "content": "}"
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "dragontho"
        },
        "content": ""
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "dragontho"
        },
        "content": ".grid-pane {"
      },
      {
        "lineNumber": 248,
        "author": {
          "gitId": "dragontho"
        },
        "content": "    -fx-background-color: derive(#e2e2e2, 30%);"
      },
      {
        "lineNumber": 249,
        "author": {
          "gitId": "dragontho"
        },
        "content": "    -fx-border-color: derive(#e2e2e2, 30%);"
      },
      {
        "lineNumber": 250,
        "author": {
          "gitId": "dragontho"
        },
        "content": "    -fx-border-width: 1px;"
      },
      {
        "lineNumber": 251,
        "author": {
          "gitId": "dragontho"
        },
        "content": "}"
      },
      {
        "lineNumber": 252,
        "author": {
          "gitId": "dragontho"
        },
        "content": ""
      },
      {
        "lineNumber": 253,
        "author": {
          "gitId": "dragontho"
        },
        "content": ".grid-pane .stack-pane {"
      },
      {
        "lineNumber": 254,
        "author": {
          "gitId": "dragontho"
        },
        "content": "    -fx-background-color: derive(#e2e2e2, 30%);"
      },
      {
        "lineNumber": 255,
        "author": {
          "gitId": "dragontho"
        },
        "content": "}"
      },
      {
        "lineNumber": 256,
        "author": {
          "gitId": "dragontho"
        },
        "content": ""
      },
      {
        "lineNumber": 257,
        "author": {
          "gitId": "dragontho"
        },
        "content": ".context-menu {"
      },
      {
        "lineNumber": 258,
        "author": {
          "gitId": "dragontho"
        },
        "content": "    -fx-background-color: derive(#e2e2e2, 50%);"
      },
      {
        "lineNumber": 259,
        "author": {
          "gitId": "dragontho"
        },
        "content": "}"
      },
      {
        "lineNumber": 260,
        "author": {
          "gitId": "dragontho"
        },
        "content": ""
      },
      {
        "lineNumber": 261,
        "author": {
          "gitId": "dragontho"
        },
        "content": ".context-menu .label {"
      },
      {
        "lineNumber": 262,
        "author": {
          "gitId": "dragontho"
        },
        "content": "    -fx-text-fill: #000000;"
      },
      {
        "lineNumber": 263,
        "author": {
          "gitId": "dragontho"
        },
        "content": "}"
      },
      {
        "lineNumber": 264,
        "author": {
          "gitId": "dragontho"
        },
        "content": ""
      },
      {
        "lineNumber": 265,
        "author": {
          "gitId": "dragontho"
        },
        "content": ".menu-bar {"
      },
      {
        "lineNumber": 266,
        "author": {
          "gitId": "dragontho"
        },
        "content": "    -fx-background-color: derive(#e2e2e2, 20%);"
      },
      {
        "lineNumber": 267,
        "author": {
          "gitId": "dragontho"
        },
        "content": "}"
      },
      {
        "lineNumber": 268,
        "author": {
          "gitId": "dragontho"
        },
        "content": ""
      },
      {
        "lineNumber": 269,
        "author": {
          "gitId": "dragontho"
        },
        "content": ".menu-bar .label {"
      },
      {
        "lineNumber": 270,
        "author": {
          "gitId": "dragontho"
        },
        "content": "    -fx-font-size: 14pt;"
      },
      {
        "lineNumber": 271,
        "author": {
          "gitId": "dragontho"
        },
        "content": "    -fx-font-family: \"Segoe UI Light\";"
      },
      {
        "lineNumber": 272,
        "author": {
          "gitId": "dragontho"
        },
        "content": "    -fx-text-fill: #000000;"
      },
      {
        "lineNumber": 273,
        "author": {
          "gitId": "dragontho"
        },
        "content": "    -fx-opacity: 0.9;"
      },
      {
        "lineNumber": 274,
        "author": {
          "gitId": "dragontho"
        },
        "content": "}"
      },
      {
        "lineNumber": 275,
        "author": {
          "gitId": "dragontho"
        },
        "content": ""
      },
      {
        "lineNumber": 276,
        "author": {
          "gitId": "dragontho"
        },
        "content": ".menu .left-container {"
      },
      {
        "lineNumber": 277,
        "author": {
          "gitId": "dragontho"
        },
        "content": "    -fx-background-color: #ffffff;"
      },
      {
        "lineNumber": 278,
        "author": {
          "gitId": "dragontho"
        },
        "content": "}"
      },
      {
        "lineNumber": 279,
        "author": {
          "gitId": "dragontho"
        },
        "content": ""
      },
      {
        "lineNumber": 280,
        "author": {
          "gitId": "dragontho"
        },
        "content": "/*"
      },
      {
        "lineNumber": 281,
        "author": {
          "gitId": "dragontho"
        },
        "content": " * Metro style Push Button"
      },
      {
        "lineNumber": 282,
        "author": {
          "gitId": "dragontho"
        },
        "content": " * Author: Pedro Duque Vieira"
      },
      {
        "lineNumber": 283,
        "author": {
          "gitId": "dragontho"
        },
        "content": " * http://pixelduke.wordpress.com/2012/10/23/jmetro-windows-8-controls-on-java/"
      },
      {
        "lineNumber": 284,
        "author": {
          "gitId": "dragontho"
        },
        "content": " */"
      },
      {
        "lineNumber": 285,
        "author": {
          "gitId": "dragontho"
        },
        "content": ".button {"
      },
      {
        "lineNumber": 286,
        "author": {
          "gitId": "dragontho"
        },
        "content": "    -fx-padding: 5 22 5 22;"
      },
      {
        "lineNumber": 287,
        "author": {
          "gitId": "dragontho"
        },
        "content": "    -fx-border-color: #1d1d1d;"
      },
      {
        "lineNumber": 288,
        "author": {
          "gitId": "dragontho"
        },
        "content": "    -fx-border-width: 2;"
      },
      {
        "lineNumber": 289,
        "author": {
          "gitId": "dragontho"
        },
        "content": "    -fx-background-radius: 0;"
      },
      {
        "lineNumber": 290,
        "author": {
          "gitId": "dragontho"
        },
        "content": "    -fx-background-color: #e2e2e2;"
      },
      {
        "lineNumber": 291,
        "author": {
          "gitId": "dragontho"
        },
        "content": "    -fx-font-family: \"Segoe UI\", Helvetica, Arial, sans-serif;"
      },
      {
        "lineNumber": 292,
        "author": {
          "gitId": "dragontho"
        },
        "content": "    -fx-font-size: 11pt;"
      },
      {
        "lineNumber": 293,
        "author": {
          "gitId": "dragontho"
        },
        "content": "    -fx-text-fill: #272727;"
      },
      {
        "lineNumber": 294,
        "author": {
          "gitId": "dragontho"
        },
        "content": "    -fx-background-insets: 0 0 0 0, 0, 1, 2;"
      },
      {
        "lineNumber": 295,
        "author": {
          "gitId": "dragontho"
        },
        "content": "}"
      },
      {
        "lineNumber": 296,
        "author": {
          "gitId": "dragontho"
        },
        "content": ""
      },
      {
        "lineNumber": 297,
        "author": {
          "gitId": "dragontho"
        },
        "content": ".button:hover {"
      },
      {
        "lineNumber": 298,
        "author": {
          "gitId": "dragontho"
        },
        "content": "    -fx-background-color: #3a3a3a;"
      },
      {
        "lineNumber": 299,
        "author": {
          "gitId": "dragontho"
        },
        "content": "}"
      },
      {
        "lineNumber": 300,
        "author": {
          "gitId": "dragontho"
        },
        "content": ""
      },
      {
        "lineNumber": 301,
        "author": {
          "gitId": "dragontho"
        },
        "content": ".button:pressed, .button:default:hover:pressed {"
      },
      {
        "lineNumber": 302,
        "author": {
          "gitId": "dragontho"
        },
        "content": "  -fx-background-color: #000000;"
      },
      {
        "lineNumber": 303,
        "author": {
          "gitId": "dragontho"
        },
        "content": "  -fx-text-fill: #e2e2e2;"
      },
      {
        "lineNumber": 304,
        "author": {
          "gitId": "dragontho"
        },
        "content": "}"
      },
      {
        "lineNumber": 305,
        "author": {
          "gitId": "dragontho"
        },
        "content": ""
      },
      {
        "lineNumber": 306,
        "author": {
          "gitId": "dragontho"
        },
        "content": ".button:focused {"
      },
      {
        "lineNumber": 307,
        "author": {
          "gitId": "dragontho"
        },
        "content": "    -fx-border-color: #000000, #000000;"
      },
      {
        "lineNumber": 308,
        "author": {
          "gitId": "dragontho"
        },
        "content": "    -fx-border-width: 1, 1;"
      },
      {
        "lineNumber": 309,
        "author": {
          "gitId": "dragontho"
        },
        "content": "    -fx-border-style: solid, segments(1, 1);"
      },
      {
        "lineNumber": 310,
        "author": {
          "gitId": "dragontho"
        },
        "content": "    -fx-border-radius: 0, 0;"
      },
      {
        "lineNumber": 311,
        "author": {
          "gitId": "dragontho"
        },
        "content": "    -fx-border-insets: 1 1 1 1, 0;"
      },
      {
        "lineNumber": 312,
        "author": {
          "gitId": "dragontho"
        },
        "content": "}"
      },
      {
        "lineNumber": 313,
        "author": {
          "gitId": "dragontho"
        },
        "content": ""
      },
      {
        "lineNumber": 314,
        "author": {
          "gitId": "dragontho"
        },
        "content": ".button:disabled, .button:default:disabled {"
      },
      {
        "lineNumber": 315,
        "author": {
          "gitId": "dragontho"
        },
        "content": "    -fx-opacity: 0.4;"
      },
      {
        "lineNumber": 316,
        "author": {
          "gitId": "dragontho"
        },
        "content": "    -fx-background-color: #e2e2e2;"
      },
      {
        "lineNumber": 317,
        "author": {
          "gitId": "dragontho"
        },
        "content": "    -fx-text-fill: #000000;"
      },
      {
        "lineNumber": 318,
        "author": {
          "gitId": "dragontho"
        },
        "content": "}"
      },
      {
        "lineNumber": 319,
        "author": {
          "gitId": "dragontho"
        },
        "content": ""
      },
      {
        "lineNumber": 320,
        "author": {
          "gitId": "dragontho"
        },
        "content": ".button:default {"
      },
      {
        "lineNumber": 321,
        "author": {
          "gitId": "dragontho"
        },
        "content": "    -fx-background-color: -fx-focus-color;"
      },
      {
        "lineNumber": 322,
        "author": {
          "gitId": "dragontho"
        },
        "content": "    -fx-text-fill: #000000;"
      },
      {
        "lineNumber": 323,
        "author": {
          "gitId": "dragontho"
        },
        "content": "}"
      },
      {
        "lineNumber": 324,
        "author": {
          "gitId": "dragontho"
        },
        "content": ""
      },
      {
        "lineNumber": 325,
        "author": {
          "gitId": "dragontho"
        },
        "content": ".button:default:hover {"
      },
      {
        "lineNumber": 326,
        "author": {
          "gitId": "dragontho"
        },
        "content": "    -fx-background-color: derive(-fx-focus-color, 30%);"
      },
      {
        "lineNumber": 327,
        "author": {
          "gitId": "dragontho"
        },
        "content": "}"
      },
      {
        "lineNumber": 328,
        "author": {
          "gitId": "dragontho"
        },
        "content": ""
      },
      {
        "lineNumber": 329,
        "author": {
          "gitId": "dragontho"
        },
        "content": ".dialog-pane {"
      },
      {
        "lineNumber": 330,
        "author": {
          "gitId": "dragontho"
        },
        "content": "    -fx-background-color: #e2e2e2;"
      },
      {
        "lineNumber": 331,
        "author": {
          "gitId": "dragontho"
        },
        "content": "}"
      },
      {
        "lineNumber": 332,
        "author": {
          "gitId": "dragontho"
        },
        "content": ""
      },
      {
        "lineNumber": 333,
        "author": {
          "gitId": "dragontho"
        },
        "content": ".dialog-pane \u003e *.button-bar \u003e *.container {"
      },
      {
        "lineNumber": 334,
        "author": {
          "gitId": "dragontho"
        },
        "content": "    -fx-background-color: #e2e2e2;"
      },
      {
        "lineNumber": 335,
        "author": {
          "gitId": "dragontho"
        },
        "content": "}"
      },
      {
        "lineNumber": 336,
        "author": {
          "gitId": "dragontho"
        },
        "content": ""
      },
      {
        "lineNumber": 337,
        "author": {
          "gitId": "dragontho"
        },
        "content": ".dialog-pane \u003e *.label.content {"
      },
      {
        "lineNumber": 338,
        "author": {
          "gitId": "dragontho"
        },
        "content": "    -fx-font-size: 14px;"
      },
      {
        "lineNumber": 339,
        "author": {
          "gitId": "dragontho"
        },
        "content": "    -fx-font-weight: bold;"
      },
      {
        "lineNumber": 340,
        "author": {
          "gitId": "dragontho"
        },
        "content": "    -fx-text-fill: #000000;"
      },
      {
        "lineNumber": 341,
        "author": {
          "gitId": "dragontho"
        },
        "content": "}"
      },
      {
        "lineNumber": 342,
        "author": {
          "gitId": "dragontho"
        },
        "content": ""
      },
      {
        "lineNumber": 343,
        "author": {
          "gitId": "dragontho"
        },
        "content": ".dialog-pane:header *.header-panel {"
      },
      {
        "lineNumber": 344,
        "author": {
          "gitId": "dragontho"
        },
        "content": "    -fx-background-color: derive(#e2e2e2, 25%);"
      },
      {
        "lineNumber": 345,
        "author": {
          "gitId": "dragontho"
        },
        "content": "}"
      },
      {
        "lineNumber": 346,
        "author": {
          "gitId": "dragontho"
        },
        "content": ""
      },
      {
        "lineNumber": 347,
        "author": {
          "gitId": "dragontho"
        },
        "content": ".dialog-pane:header *.header-panel *.label {"
      },
      {
        "lineNumber": 348,
        "author": {
          "gitId": "dragontho"
        },
        "content": "    -fx-font-size: 18px;"
      },
      {
        "lineNumber": 349,
        "author": {
          "gitId": "dragontho"
        },
        "content": "    -fx-font-style: italic;"
      },
      {
        "lineNumber": 350,
        "author": {
          "gitId": "dragontho"
        },
        "content": "    -fx-fill: #000000;"
      },
      {
        "lineNumber": 351,
        "author": {
          "gitId": "dragontho"
        },
        "content": "    -fx-text-fill: #000000;"
      },
      {
        "lineNumber": 352,
        "author": {
          "gitId": "dragontho"
        },
        "content": "}"
      },
      {
        "lineNumber": 353,
        "author": {
          "gitId": "dragontho"
        },
        "content": ""
      },
      {
        "lineNumber": 354,
        "author": {
          "gitId": "dragontho"
        },
        "content": ".scroll-bar {"
      },
      {
        "lineNumber": 355,
        "author": {
          "gitId": "dragontho"
        },
        "content": "    -fx-background-color: derive(#e2e2e2, 20%);"
      },
      {
        "lineNumber": 356,
        "author": {
          "gitId": "dragontho"
        },
        "content": "}"
      },
      {
        "lineNumber": 357,
        "author": {
          "gitId": "dragontho"
        },
        "content": ""
      },
      {
        "lineNumber": 358,
        "author": {
          "gitId": "dragontho"
        },
        "content": ".scroll-bar .thumb {"
      },
      {
        "lineNumber": 359,
        "author": {
          "gitId": "dragontho"
        },
        "content": "    -fx-background-color: derive(#e2e2e2, 50%);"
      },
      {
        "lineNumber": 360,
        "author": {
          "gitId": "dragontho"
        },
        "content": "    -fx-background-insets: 3;"
      },
      {
        "lineNumber": 361,
        "author": {
          "gitId": "dragontho"
        },
        "content": "}"
      },
      {
        "lineNumber": 362,
        "author": {
          "gitId": "dragontho"
        },
        "content": ""
      },
      {
        "lineNumber": 363,
        "author": {
          "gitId": "dragontho"
        },
        "content": ".scroll-bar .increment-button, .scroll-bar .decrement-button {"
      },
      {
        "lineNumber": 364,
        "author": {
          "gitId": "dragontho"
        },
        "content": "    -fx-background-color: transparent;"
      },
      {
        "lineNumber": 365,
        "author": {
          "gitId": "dragontho"
        },
        "content": "    -fx-padding: 0 0 0 0;"
      },
      {
        "lineNumber": 366,
        "author": {
          "gitId": "dragontho"
        },
        "content": "}"
      },
      {
        "lineNumber": 367,
        "author": {
          "gitId": "dragontho"
        },
        "content": ""
      },
      {
        "lineNumber": 368,
        "author": {
          "gitId": "dragontho"
        },
        "content": ".scroll-bar .increment-arrow, .scroll-bar .decrement-arrow {"
      },
      {
        "lineNumber": 369,
        "author": {
          "gitId": "dragontho"
        },
        "content": "    -fx-shape: \" \";"
      },
      {
        "lineNumber": 370,
        "author": {
          "gitId": "dragontho"
        },
        "content": "}"
      },
      {
        "lineNumber": 371,
        "author": {
          "gitId": "dragontho"
        },
        "content": ""
      },
      {
        "lineNumber": 372,
        "author": {
          "gitId": "dragontho"
        },
        "content": ".scroll-bar:vertical .increment-arrow, .scroll-bar:vertical .decrement-arrow {"
      },
      {
        "lineNumber": 373,
        "author": {
          "gitId": "dragontho"
        },
        "content": "    -fx-padding: 1 8 1 8;"
      },
      {
        "lineNumber": 374,
        "author": {
          "gitId": "dragontho"
        },
        "content": "}"
      },
      {
        "lineNumber": 375,
        "author": {
          "gitId": "dragontho"
        },
        "content": ""
      },
      {
        "lineNumber": 376,
        "author": {
          "gitId": "dragontho"
        },
        "content": ".scroll-bar:horizontal .increment-arrow, .scroll-bar:horizontal .decrement-arrow {"
      },
      {
        "lineNumber": 377,
        "author": {
          "gitId": "dragontho"
        },
        "content": "    -fx-padding: 8 1 8 1;"
      },
      {
        "lineNumber": 378,
        "author": {
          "gitId": "dragontho"
        },
        "content": "}"
      },
      {
        "lineNumber": 379,
        "author": {
          "gitId": "dragontho"
        },
        "content": ""
      },
      {
        "lineNumber": 380,
        "author": {
          "gitId": "dragontho"
        },
        "content": "#cardPane {"
      },
      {
        "lineNumber": 381,
        "author": {
          "gitId": "dragontho"
        },
        "content": "    -fx-background-color: transparent;"
      },
      {
        "lineNumber": 382,
        "author": {
          "gitId": "dragontho"
        },
        "content": "    -fx-border-width: 0;"
      },
      {
        "lineNumber": 383,
        "author": {
          "gitId": "dragontho"
        },
        "content": "}"
      },
      {
        "lineNumber": 384,
        "author": {
          "gitId": "dragontho"
        },
        "content": ""
      },
      {
        "lineNumber": 385,
        "author": {
          "gitId": "dragontho"
        },
        "content": "#commandTypeLabel {"
      },
      {
        "lineNumber": 386,
        "author": {
          "gitId": "dragontho"
        },
        "content": "    -fx-font-size: 11px;"
      },
      {
        "lineNumber": 387,
        "author": {
          "gitId": "dragontho"
        },
        "content": "    -fx-text-fill: #f70d1a;"
      },
      {
        "lineNumber": 388,
        "author": {
          "gitId": "dragontho"
        },
        "content": "}"
      },
      {
        "lineNumber": 389,
        "author": {
          "gitId": "dragontho"
        },
        "content": ""
      },
      {
        "lineNumber": 390,
        "author": {
          "gitId": "dragontho"
        },
        "content": "#commandTextField {"
      },
      {
        "lineNumber": 391,
        "author": {
          "gitId": "dragontho"
        },
        "content": "    -fx-background-color: transparent #c7c7c7 transparent #c7c7c7;"
      },
      {
        "lineNumber": 392,
        "author": {
          "gitId": "dragontho"
        },
        "content": "    -fx-background-insets: 0;"
      },
      {
        "lineNumber": 393,
        "author": {
          "gitId": "dragontho"
        },
        "content": "    -fx-border-color: #c7c7c7 #c7c7c7 #000000 #c7c7c7;"
      },
      {
        "lineNumber": 394,
        "author": {
          "gitId": "dragontho"
        },
        "content": "    -fx-border-insets: 0;"
      },
      {
        "lineNumber": 395,
        "author": {
          "gitId": "dragontho"
        },
        "content": "    -fx-border-width: 1;"
      },
      {
        "lineNumber": 396,
        "author": {
          "gitId": "dragontho"
        },
        "content": "    -fx-font-family: \"Segoe UI Light\";"
      },
      {
        "lineNumber": 397,
        "author": {
          "gitId": "dragontho"
        },
        "content": "    -fx-font-size: 13pt;"
      },
      {
        "lineNumber": 398,
        "author": {
          "gitId": "dragontho"
        },
        "content": "    -fx-text-fill: #000000;"
      },
      {
        "lineNumber": 399,
        "author": {
          "gitId": "dragontho"
        },
        "content": "}"
      },
      {
        "lineNumber": 400,
        "author": {
          "gitId": "dragontho"
        },
        "content": ""
      },
      {
        "lineNumber": 401,
        "author": {
          "gitId": "dragontho"
        },
        "content": "#filterField, #personListPanel, #personWebpage {"
      },
      {
        "lineNumber": 402,
        "author": {
          "gitId": "dragontho"
        },
        "content": "    -fx-effect: innershadow(gaussian, #ffffff, 10, 0, 0, 0);"
      },
      {
        "lineNumber": 403,
        "author": {
          "gitId": "dragontho"
        },
        "content": "}"
      },
      {
        "lineNumber": 404,
        "author": {
          "gitId": "dragontho"
        },
        "content": ""
      },
      {
        "lineNumber": 405,
        "author": {
          "gitId": "dragontho"
        },
        "content": "#resultDisplay .content {"
      },
      {
        "lineNumber": 406,
        "author": {
          "gitId": "dragontho"
        },
        "content": "    -fx-background-color: transparent, #c7c7c7, transparent, #c7c7c7;"
      },
      {
        "lineNumber": 407,
        "author": {
          "gitId": "dragontho"
        },
        "content": "    -fx-background-radius: 0;"
      },
      {
        "lineNumber": 408,
        "author": {
          "gitId": "dragontho"
        },
        "content": "}"
      },
      {
        "lineNumber": 409,
        "author": {
          "gitId": "dragontho"
        },
        "content": ""
      },
      {
        "lineNumber": 410,
        "author": {
          "gitId": "dragontho"
        },
        "content": "#timerText .content {"
      },
      {
        "lineNumber": 411,
        "author": {
          "gitId": "dragontho"
        },
        "content": "    -fx-background-color: transparent, #c7c7c7, transparent, #c7c7c7;"
      },
      {
        "lineNumber": 412,
        "author": {
          "gitId": "dragontho"
        },
        "content": "    -fx-background-radius: 0;"
      },
      {
        "lineNumber": 413,
        "author": {
          "gitId": "dragontho"
        },
        "content": "}"
      },
      {
        "lineNumber": 414,
        "author": {
          "gitId": "dragontho"
        },
        "content": ""
      },
      {
        "lineNumber": 415,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": "#progress-bar-alert \u003e .track {"
      },
      {
        "lineNumber": 416,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": "    -fx-box-border: red;"
      },
      {
        "lineNumber": 417,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": "    -fx-control-inner-background: #c7c7c7;"
      },
      {
        "lineNumber": 418,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": "}"
      },
      {
        "lineNumber": 419,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": ""
      },
      {
        "lineNumber": 420,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": "#progress-bar-alert {"
      },
      {
        "lineNumber": 421,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": "    -fx-accent: crimson;"
      },
      {
        "lineNumber": 422,
        "author": {
          "gitId": "dragontho"
        },
        "content": "}"
      },
      {
        "lineNumber": 423,
        "author": {
          "gitId": "dragontho"
        },
        "content": ""
      },
      {
        "lineNumber": 424,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": "#progress-bar-normal \u003e .track {"
      },
      {
        "lineNumber": 425,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": "    -fx-box-border: red;"
      },
      {
        "lineNumber": 426,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": "    -fx-control-inner-background: #c7c7c7;"
      },
      {
        "lineNumber": 427,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": "}"
      },
      {
        "lineNumber": 428,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": ""
      },
      {
        "lineNumber": 429,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": "#progress-bar-normal {"
      },
      {
        "lineNumber": 430,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": "    -fx-accent: forestgreen;"
      },
      {
        "lineNumber": 431,
        "author": {
          "gitId": "dragontho"
        },
        "content": "}"
      },
      {
        "lineNumber": 432,
        "author": {
          "gitId": "dragontho"
        },
        "content": ""
      },
      {
        "lineNumber": 433,
        "author": {
          "gitId": "dragontho"
        },
        "content": "/*combo box*/"
      },
      {
        "lineNumber": 434,
        "author": {
          "gitId": "dragontho"
        },
        "content": ".combo-box .list-cell {"
      },
      {
        "lineNumber": 435,
        "author": {
          "gitId": "dragontho"
        },
        "content": "    -fx-background: #b3b3b3;"
      },
      {
        "lineNumber": 436,
        "author": {
          "gitId": "dragontho"
        },
        "content": "    -fx-background-color: transparent;"
      },
      {
        "lineNumber": 437,
        "author": {
          "gitId": "dragontho"
        },
        "content": "    -fx-text-fill: #000000;"
      },
      {
        "lineNumber": 438,
        "author": {
          "gitId": "dragontho"
        },
        "content": "    -fx-padding: 3 0 2 7;"
      },
      {
        "lineNumber": 439,
        "author": {
          "gitId": "dragontho"
        },
        "content": "    -fx-cell-size: 1.66667em;"
      },
      {
        "lineNumber": 440,
        "author": {
          "gitId": "dragontho"
        },
        "content": "}"
      },
      {
        "lineNumber": 441,
        "author": {
          "gitId": "dragontho"
        },
        "content": ""
      },
      {
        "lineNumber": 442,
        "author": {
          "gitId": "dragontho"
        },
        "content": ""
      },
      {
        "lineNumber": 443,
        "author": {
          "gitId": "dragontho"
        },
        "content": ".combo-box-popup .list-view .list-cell:filled:selected, .combo-box-popup .list-view .list-cell:filled:selected:hover {"
      },
      {
        "lineNumber": 444,
        "author": {
          "gitId": "dragontho"
        },
        "content": "    -fx-background: -fx-accent;"
      },
      {
        "lineNumber": 445,
        "author": {
          "gitId": "dragontho"
        },
        "content": "    -fx-background-color: -fx-selection-bar;"
      },
      {
        "lineNumber": 446,
        "author": {
          "gitId": "dragontho"
        },
        "content": "    -fx-text-fill: #000000;"
      },
      {
        "lineNumber": 447,
        "author": {
          "gitId": "dragontho"
        },
        "content": "}"
      },
      {
        "lineNumber": 448,
        "author": {
          "gitId": "dragontho"
        },
        "content": ""
      },
      {
        "lineNumber": 449,
        "author": {
          "gitId": "dragontho"
        },
        "content": ".combo-box-base {"
      },
      {
        "lineNumber": 450,
        "author": {
          "gitId": "dragontho"
        },
        "content": "    -fx-background-color: #b8b8b8, #b8b8b8, #b8b8b8, #b8b8b8;"
      },
      {
        "lineNumber": 451,
        "author": {
          "gitId": "dragontho"
        },
        "content": "    -fx-background-radius: 5, 5, 4, 3;"
      },
      {
        "lineNumber": 452,
        "author": {
          "gitId": "dragontho"
        },
        "content": "    -fx-background-insets: 0 0 -1 0, 0, 1, 2;"
      },
      {
        "lineNumber": 453,
        "author": {
          "gitId": "dragontho"
        },
        "content": "    -fx-padding: 0;"
      },
      {
        "lineNumber": 454,
        "author": {
          "gitId": "dragontho"
        },
        "content": "}"
      },
      {
        "lineNumber": 455,
        "author": {
          "gitId": "dragontho"
        },
        "content": ""
      },
      {
        "lineNumber": 456,
        "author": {
          "gitId": "dragontho"
        },
        "content": ".tooltip {"
      },
      {
        "lineNumber": 457,
        "author": {
          "gitId": "dragontho"
        },
        "content": "    -fx-font-size: 10pt;"
      },
      {
        "lineNumber": 458,
        "author": {
          "gitId": "dragontho"
        },
        "content": "}"
      },
      {
        "lineNumber": 459,
        "author": {
          "gitId": "dragontho"
        },
        "content": ""
      },
      {
        "lineNumber": 460,
        "author": {
          "gitId": "dragontho"
        },
        "content": "#highlighted {"
      },
      {
        "lineNumber": 461,
        "author": {
          "gitId": "dragontho"
        },
        "content": "    -fx-text-fill: #0900f5;"
      },
      {
        "lineNumber": 462,
        "author": {
          "gitId": "dragontho"
        },
        "content": "}"
      },
      {
        "lineNumber": 463,
        "author": {
          "gitId": "dragontho"
        },
        "content": ""
      },
      {
        "lineNumber": 464,
        "author": {
          "gitId": "dragontho"
        },
        "content": "#slogan {"
      },
      {
        "lineNumber": 465,
        "author": {
          "gitId": "dragontho"
        },
        "content": "    -fx-text-fill: #131313;"
      },
      {
        "lineNumber": 466,
        "author": {
          "gitId": "dragontho"
        },
        "content": "}"
      },
      {
        "lineNumber": 467,
        "author": {
          "gitId": "dragontho"
        },
        "content": ""
      },
      {
        "lineNumber": 468,
        "author": {
          "gitId": "dragontho"
        },
        "content": "#avatar-shadow {"
      },
      {
        "lineNumber": 469,
        "author": {
          "gitId": "dragontho"
        },
        "content": "    -fx-fill: #cacaca;"
      },
      {
        "lineNumber": 470,
        "author": {
          "gitId": "dragontho"
        },
        "content": "}"
      },
      {
        "lineNumber": 471,
        "author": {
          "gitId": "dragontho"
        },
        "content": ""
      },
      {
        "lineNumber": 472,
        "author": {
          "gitId": "dragontho"
        },
        "content": "#tags {"
      },
      {
        "lineNumber": 473,
        "author": {
          "gitId": "dragontho"
        },
        "content": "    -fx-hgap: 7;"
      },
      {
        "lineNumber": 474,
        "author": {
          "gitId": "dragontho"
        },
        "content": "    -fx-vgap: 3;"
      },
      {
        "lineNumber": 475,
        "author": {
          "gitId": "dragontho"
        },
        "content": "}"
      },
      {
        "lineNumber": 476,
        "author": {
          "gitId": "dragontho"
        },
        "content": ""
      },
      {
        "lineNumber": 477,
        "author": {
          "gitId": "dragontho"
        },
        "content": "#tags .label {"
      },
      {
        "lineNumber": 478,
        "author": {
          "gitId": "dragontho"
        },
        "content": "    -fx-text-fill: #000000;"
      },
      {
        "lineNumber": 479,
        "author": {
          "gitId": "dragontho"
        },
        "content": "    -fx-background-color: #6c6e9e;"
      },
      {
        "lineNumber": 480,
        "author": {
          "gitId": "dragontho"
        },
        "content": "    -fx-padding: 1 3 1 3;"
      },
      {
        "lineNumber": 481,
        "author": {
          "gitId": "dragontho"
        },
        "content": "    -fx-border-radius: 2;"
      },
      {
        "lineNumber": 482,
        "author": {
          "gitId": "dragontho"
        },
        "content": "    -fx-background-radius: 2;"
      },
      {
        "lineNumber": 483,
        "author": {
          "gitId": "dragontho"
        },
        "content": "    -fx-font-size: 11;"
      },
      {
        "lineNumber": 484,
        "author": {
          "gitId": "dragontho"
        },
        "content": "}"
      },
      {
        "lineNumber": 485,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": ""
      },
      {
        "lineNumber": 486,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": "#timer-alert-style .content {"
      },
      {
        "lineNumber": 487,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": "    -fx-background-color: transparent, #c7c7c7, transparent, #c7c7c7;"
      },
      {
        "lineNumber": 488,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": "    -fx-background-radius: 0;"
      },
      {
        "lineNumber": 489,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": "}"
      },
      {
        "lineNumber": 490,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": ""
      },
      {
        "lineNumber": 491,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": "#timer-alert-style {"
      },
      {
        "lineNumber": 492,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": "    -fx-text-fill: darkred;"
      },
      {
        "lineNumber": 493,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": "}"
      },
      {
        "lineNumber": 494,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": ""
      },
      {
        "lineNumber": 495,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": "#timer-normal-style .content {"
      },
      {
        "lineNumber": 496,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": "    -fx-background-color: transparent, #c7c7c7, transparent, #c7c7c7;"
      },
      {
        "lineNumber": 497,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": "    -fx-background-radius: 0;"
      },
      {
        "lineNumber": 498,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": "}"
      },
      {
        "lineNumber": 499,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": ""
      },
      {
        "lineNumber": 500,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": "#timer-normal-style {"
      },
      {
        "lineNumber": 501,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": "    -fx-text-fill: black;"
      },
      {
        "lineNumber": 502,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "dragontho": 456,
      "kohyida1997": 46
    }
  },
  {
    "path": "src/main/resources/view/LoadBankCard.fxml",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "dragontho"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "dragontho"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "dragontho"
        },
        "content": "\u003c?import javafx.geometry.Insets?\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "dragontho"
        },
        "content": "\u003c?import javafx.scene.control.Label?\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "dragontho"
        },
        "content": "\u003c?import javafx.scene.layout.ColumnConstraints?\u003e"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "dragontho"
        },
        "content": "\u003c?import javafx.scene.layout.GridPane?\u003e"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "dragontho"
        },
        "content": "\u003c?import javafx.scene.layout.HBox?\u003e"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "dragontho"
        },
        "content": "\u003c?import javafx.scene.layout.Region?\u003e"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "dragontho"
        },
        "content": "\u003c?import javafx.scene.layout.RowConstraints?\u003e"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "dragontho"
        },
        "content": "\u003c?import javafx.scene.layout.VBox?\u003e"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "dragontho"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": "\u003cHBox id\u003d\"cardPane\" fx:id\u003d\"cardPane\" xmlns\u003d\"http://javafx.com/javafx/11\" xmlns:fx\u003d\"http://javafx.com/fxml/1\"\u003e"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "dragontho"
        },
        "content": "  \u003cGridPane HBox.hgrow\u003d\"ALWAYS\"\u003e"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "dragontho"
        },
        "content": "    \u003ccolumnConstraints\u003e"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "dragontho"
        },
        "content": "      \u003cColumnConstraints hgrow\u003d\"SOMETIMES\" minWidth\u003d\"10\" prefWidth\u003d\"150\" /\u003e"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "dragontho"
        },
        "content": "    \u003c/columnConstraints\u003e"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "dragontho"
        },
        "content": "    \u003cVBox alignment\u003d\"CENTER_LEFT\" minHeight\u003d\"105\" GridPane.columnIndex\u003d\"0\"\u003e"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "dragontho"
        },
        "content": "      \u003cpadding\u003e"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "dragontho"
        },
        "content": "        \u003cInsets bottom\u003d\"5\" left\u003d\"15\" right\u003d\"5\" top\u003d\"5\" /\u003e"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "dragontho"
        },
        "content": "      \u003c/padding\u003e"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "dragontho"
        },
        "content": "      \u003cHBox alignment\u003d\"CENTER_LEFT\" spacing\u003d\"5\"\u003e"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "dragontho"
        },
        "content": "        \u003cLabel fx:id\u003d\"id\" styleClass\u003d\"cell_big_label\"\u003e"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "dragontho"
        },
        "content": "          \u003cminWidth\u003e"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "dragontho"
        },
        "content": "            \u003c!-- Ensures that the label text is never truncated --\u003e"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "dragontho"
        },
        "content": "            \u003cRegion fx:constant\u003d\"USE_PREF_SIZE\" /\u003e"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "dragontho"
        },
        "content": "          \u003c/minWidth\u003e"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "dragontho"
        },
        "content": "        \u003c/Label\u003e"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "dragontho"
        },
        "content": "        \u003cLabel fx:id\u003d\"name\" styleClass\u003d\"cell_big_label\" text\u003d\"\\$first\" /\u003e"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "dragontho"
        },
        "content": "      \u003c/HBox\u003e"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "dragontho"
        },
        "content": "      \u003cLabel fx:id\u003d\"description\" styleClass\u003d\"cell_small_label\" text\u003d\"\\$description\" /\u003e"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "dragontho"
        },
        "content": "    \u003c/VBox\u003e"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "dragontho"
        },
        "content": "      \u003crowConstraints\u003e"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "dragontho"
        },
        "content": "         \u003cRowConstraints /\u003e"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "dragontho"
        },
        "content": "      \u003c/rowConstraints\u003e"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "dragontho"
        },
        "content": "  \u003c/GridPane\u003e"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "dragontho"
        },
        "content": "\u003c/HBox\u003e"
      }
    ],
    "authorContributionMap": {
      "dragontho": 35,
      "kohyida1997": 1
    }
  },
  {
    "path": "src/main/resources/view/LoadBankPanel.fxml",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "dragontho"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "dragontho"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "dragontho"
        },
        "content": "\u003c?import javafx.scene.control.ListView?\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "dragontho"
        },
        "content": "\u003c?import javafx.scene.layout.VBox?\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "dragontho"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": "\u003cVBox xmlns\u003d\"http://javafx.com/javafx/11\" xmlns:fx\u003d\"http://javafx.com/fxml/1\"\u003e"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "chrischenhui"
        },
        "content": "  \u003cListView fx:id\u003d\"loadBankView\" onDragDropped\u003d\"#handleDragDropped\" onDragOver\u003d\"#handleDragOver\" VBox.vgrow\u003d\"ALWAYS\" /\u003e"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "dragontho"
        },
        "content": "\u003c/VBox\u003e"
      }
    ],
    "authorContributionMap": {
      "dragontho": 6,
      "chrischenhui": 1,
      "kohyida1997": 1
    }
  },
  {
    "path": "src/main/resources/view/MainTitlePanel.fxml",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jascxx"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "jascxx"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "jascxx"
        },
        "content": "\u003c?import javafx.geometry.Insets?\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "jascxx"
        },
        "content": "\u003c?import javafx.scene.control.Label?\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "jascxx"
        },
        "content": "\u003c?import javafx.scene.control.ScrollPane?\u003e"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "jascxx"
        },
        "content": "\u003c?import javafx.scene.control.Separator?\u003e"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "jascxx"
        },
        "content": "\u003c?import javafx.scene.image.ImageView?\u003e"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "jascxx"
        },
        "content": "\u003c?import javafx.scene.layout.BorderPane?\u003e"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "jascxx"
        },
        "content": "\u003c?import javafx.scene.layout.HBox?\u003e"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "jascxx"
        },
        "content": "\u003c?import javafx.scene.layout.Region?\u003e"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "jascxx"
        },
        "content": "\u003c?import javafx.scene.layout.StackPane?\u003e"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "jascxx"
        },
        "content": "\u003c?import javafx.scene.layout.VBox?\u003e"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "jascxx"
        },
        "content": "\u003c?import javafx.scene.shape.Circle?\u003e"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "jascxx"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "jascxx"
        },
        "content": "\u003cScrollPane fx:id\u003d\"scrollPane\" fitToHeight\u003d\"true\" fitToWidth\u003d\"true\" xmlns\u003d\"http://javafx.com/javafx/11.0.1\" xmlns:fx\u003d\"http://javafx.com/fxml/1\"\u003e"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "jascxx"
        },
        "content": "    \u003ccontent\u003e"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "dragontho"
        },
        "content": "        \u003cVBox maxHeight\u003d\"-Infinity\" maxWidth\u003d\"1.7976931348623157E308\" minHeight\u003d\"-Infinity\" minWidth\u003d\"-Infinity\" prefWidth\u003d\"600.0\"\u003e"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "jascxx"
        },
        "content": "            \u003cchildren\u003e"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "jascxx"
        },
        "content": "            \u003cBorderPane fx:id\u003d\"logoPlaceholder\" maxHeight\u003d\"-Infinity\" minHeight\u003d\"-Infinity\" prefHeight\u003d\"200.0\" VBox.vgrow\u003d\"NEVER\" /\u003e"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "jascxx"
        },
        "content": "            \u003cHBox\u003e"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "jascxx"
        },
        "content": "               \u003cchildren\u003e"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "jascxx"
        },
        "content": "                  \u003cRegion HBox.hgrow\u003d\"ALWAYS\" /\u003e"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "jascxx"
        },
        "content": "                  \u003cLabel id\u003d\"slogan\" fx:id\u003d\"slogan\" style\u003d\"-fx-font-style: italic\" styleClass\u003d\"cell_big_label\" text\u003d\"The FlashCard App Of The Future\" translateY\u003d\"-40.0\" /\u003e"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "jascxx"
        },
        "content": "                  \u003cRegion HBox.hgrow\u003d\"ALWAYS\" /\u003e"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "jascxx"
        },
        "content": "               \u003c/children\u003e"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "jascxx"
        },
        "content": "            \u003c/HBox\u003e"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "jascxx"
        },
        "content": "            \u003cSeparator prefWidth\u003d\"200.0\"\u003e"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "jascxx"
        },
        "content": "               \u003cVBox.margin\u003e"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "jascxx"
        },
        "content": "                  \u003cInsets bottom\u003d\"12.0\" /\u003e"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "jascxx"
        },
        "content": "               \u003c/VBox.margin\u003e"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "jascxx"
        },
        "content": "            \u003c/Separator\u003e"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "jascxx"
        },
        "content": "            \u003cHBox prefHeight\u003d\"100.0\" prefWidth\u003d\"200.0\"\u003e"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "jascxx"
        },
        "content": "               \u003cchildren\u003e"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "jascxx"
        },
        "content": "                  \u003cStackPane prefHeight\u003d\"150.0\" prefWidth\u003d\"200.0\"\u003e"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "jascxx"
        },
        "content": "                     \u003cchildren\u003e"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "dragontho"
        },
        "content": "                        \u003cCircle fx:id\u003d\"avatarShadow\" fill\u003d\"#c2c2c2\" radius\u003d\"195.0\" stroke\u003d\"TRANSPARENT\" strokeType\u003d\"INSIDE\" /\u003e"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "jascxx"
        },
        "content": "                        \u003cImageView fx:id\u003d\"avatarImageView\" fitHeight\u003d\"440.0\" fitWidth\u003d\"440.0\" pickOnBounds\u003d\"true\" preserveRatio\u003d\"true\" /\u003e"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "jascxx"
        },
        "content": "                     \u003c/children\u003e"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "jascxx"
        },
        "content": "                  \u003c/StackPane\u003e"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "jascxx"
        },
        "content": "                  \u003cVBox HBox.hgrow\u003d\"ALWAYS\"\u003e"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "jascxx"
        },
        "content": "                     \u003cchildren\u003e"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "jascxx"
        },
        "content": "                        \u003cRegion prefHeight\u003d\"200.0\" prefWidth\u003d\"200.0\" /\u003e"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "jascxx"
        },
        "content": "                        \u003cVBox prefHeight\u003d\"200.0\" prefWidth\u003d\"100.0\"\u003e"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "jascxx"
        },
        "content": "                           \u003cchildren\u003e"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "jascxx"
        },
        "content": "                                    \u003cLabel fx:id\u003d\"title1112\" alignment\u003d\"CENTER\" maxHeight\u003d\"-Infinity\" maxWidth\u003d\"1.7976931348623157E308\" minHeight\u003d\"-Infinity\" minWidth\u003d\"-Infinity\" styleClass\u003d\"label-bright\" text\u003d\"Total played:\" textAlignment\u003d\"CENTER\"\u003e"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "jascxx"
        },
        "content": "                                 \u003cVBox.margin\u003e"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "jascxx"
        },
        "content": "                                    \u003cInsets /\u003e"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "jascxx"
        },
        "content": "                                 \u003c/VBox.margin\u003e"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "jascxx"
        },
        "content": "                              \u003c/Label\u003e"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "jascxx"
        },
        "content": "                                    \u003cLabel id\u003d\"highlighted\" fx:id\u003d\"playedTimesText\" alignment\u003d\"CENTER\" maxHeight\u003d\"-Infinity\" maxWidth\u003d\"1.7976931348623157E308\" minHeight\u003d\"-Infinity\" minWidth\u003d\"-Infinity\" styleClass\u003d\"label-header\" text\u003d\"XX\" textAlignment\u003d\"CENTER\" /\u003e"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "jascxx"
        },
        "content": "                              \u003cLabel fx:id\u003d\"timesText\" alignment\u003d\"CENTER\" maxHeight\u003d\"-Infinity\" maxWidth\u003d\"1.7976931348623157E308\" minHeight\u003d\"-Infinity\" minWidth\u003d\"-Infinity\" styleClass\u003d\"label-bright\" text\u003d\"times\" textAlignment\u003d\"CENTER\" /\u003e"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "jascxx"
        },
        "content": "                                    \u003cLabel fx:id\u003d\"title1111\" alignment\u003d\"CENTER\" maxHeight\u003d\"-Infinity\" maxWidth\u003d\"1.7976931348623157E308\" minHeight\u003d\"-Infinity\" minWidth\u003d\"-Infinity\" styleClass\u003d\"label-bright\" text\u003d\"Most played:\" textAlignment\u003d\"CENTER\"\u003e"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "jascxx"
        },
        "content": "                                 \u003cVBox.margin\u003e"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "jascxx"
        },
        "content": "                                    \u003cInsets top\u003d\"30.0\" /\u003e"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "jascxx"
        },
        "content": "                                 \u003c/VBox.margin\u003e"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "jascxx"
        },
        "content": "                              \u003c/Label\u003e"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "jascxx"
        },
        "content": "                                    \u003cLabel id\u003d\"highlighted\" fx:id\u003d\"favoriteWordBankText\" alignment\u003d\"CENTER\" maxHeight\u003d\"-Infinity\" maxWidth\u003d\"1.7976931348623157E308\" minHeight\u003d\"-Infinity\" minWidth\u003d\"-Infinity\" styleClass\u003d\"label-header2\" text\u003d\"XXXX\" textAlignment\u003d\"CENTER\"\u003e"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "jascxx"
        },
        "content": "                                 \u003cVBox.margin\u003e"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "jascxx"
        },
        "content": "                                    \u003cInsets bottom\u003d\"8.0\" top\u003d\"8.0\" /\u003e"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "jascxx"
        },
        "content": "                                 \u003c/VBox.margin\u003e"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "jascxx"
        },
        "content": "                              \u003c/Label\u003e"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "jascxx"
        },
        "content": "                              \u003cLabel fx:id\u003d\"title11111\" alignment\u003d\"CENTER\" maxHeight\u003d\"-Infinity\" maxWidth\u003d\"1.7976931348623157E308\" minHeight\u003d\"-Infinity\" minWidth\u003d\"-Infinity\" styleClass\u003d\"label-bright\" text\u003d\"Played this week:\" textAlignment\u003d\"CENTER\"\u003e"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "jascxx"
        },
        "content": "                                 \u003cVBox.margin\u003e"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "jascxx"
        },
        "content": "                                    \u003cInsets bottom\u003d\"10.0\" top\u003d\"30.0\" /\u003e"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "jascxx"
        },
        "content": "                                 \u003c/VBox.margin\u003e"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "jascxx"
        },
        "content": "                              \u003c/Label\u003e"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "jascxx"
        },
        "content": "                              \u003cStackPane fx:id\u003d\"weeklyBarChartPlaceholder\" prefHeight\u003d\"100.0\" /\u003e"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "jascxx"
        },
        "content": "                           \u003c/children\u003e"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "jascxx"
        },
        "content": "                           \u003cVBox.margin\u003e"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "jascxx"
        },
        "content": "                              \u003cInsets top\u003d\"12.0\" /\u003e"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "jascxx"
        },
        "content": "                           \u003c/VBox.margin\u003e"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "jascxx"
        },
        "content": "                        \u003c/VBox\u003e"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "jascxx"
        },
        "content": "                        \u003cRegion prefHeight\u003d\"200.0\" prefWidth\u003d\"200.0\" /\u003e"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "jascxx"
        },
        "content": "                     \u003c/children\u003e"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "jascxx"
        },
        "content": "                  \u003c/VBox\u003e"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "jascxx"
        },
        "content": "               \u003c/children\u003e"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "jascxx"
        },
        "content": "            \u003c/HBox\u003e"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "jascxx"
        },
        "content": "            \u003c/children\u003e"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "jascxx"
        },
        "content": "        \u003c/VBox\u003e"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "jascxx"
        },
        "content": "    \u003c/content\u003e"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "jascxx"
        },
        "content": "\u003c/ScrollPane\u003e"
      }
    ],
    "authorContributionMap": {
      "dragontho": 2,
      "jascxx": 79
    }
  },
  {
    "path": "src/main/resources/view/MainWindow.fxml",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.geometry.Insets?\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.Scene?\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.control.Menu?\u003e"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.control.MenuBar?\u003e"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.control.MenuItem?\u003e"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.image.Image?\u003e"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "dragontho"
        },
        "content": "\u003c?import javafx.scene.layout.AnchorPane?\u003e"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "dragontho"
        },
        "content": "\u003c?import javafx.scene.layout.HBox?\u003e"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.layout.StackPane?\u003e"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.layout.VBox?\u003e"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "dragontho"
        },
        "content": "\u003c?import javafx.stage.Stage?\u003e"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": "\u003cfx:root minHeight\u003d\"660.0\" minWidth\u003d\"900\" onCloseRequest\u003d\"#handleExit\" title\u003d\"Dukemon\" type\u003d\"javafx.stage.Stage\" xmlns\u003d\"http://javafx.com/javafx/11\" xmlns:fx\u003d\"http://javafx.com/fxml/1\"\u003e"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "  \u003cicons\u003e"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003cImage url\u003d\"@/images/address_book_32.png\" /\u003e"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "  \u003c/icons\u003e"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "  \u003cscene\u003e"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "dragontho"
        },
        "content": "    \u003cScene fx:id\u003d\"scene\"\u003e"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "      \u003cVBox\u003e"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "dragontho"
        },
        "content": "            \u003cHBox VBox.vgrow\u003d\"NEVER\"\u003e"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "dragontho"
        },
        "content": "               \u003cchildren\u003e"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": "              \u003cMenuBar fx:id\u003d\"menuBar\" prefHeight\u003d\"35.0\" HBox.hgrow\u003d\"ALWAYS\" \u003e"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "                \u003cMenu mnemonicParsing\u003d\"false\" text\u003d\"File\"\u003e"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "                  \u003cMenuItem mnemonicParsing\u003d\"false\" onAction\u003d\"#handleExit\" text\u003d\"Exit\" /\u003e"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "                \u003c/Menu\u003e"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "                \u003cMenu mnemonicParsing\u003d\"false\" text\u003d\"Help\"\u003e"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "                  \u003cMenuItem fx:id\u003d\"helpMenuItem\" mnemonicParsing\u003d\"false\" onAction\u003d\"#handleHelp\" text\u003d\"Help\" /\u003e"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "                \u003c/Menu\u003e"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "              \u003c/MenuBar\u003e"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": "                    \u003cAnchorPane fx:id\u003d\"timerDisplayPlaceholder\" maxHeight\u003d\"-Infinity\" minHeight\u003d\"-Infinity\""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": "                                minWidth\u003d\"500\" prefHeight\u003d\"35.0\" HBox.hgrow\u003d\"NEVER\"\u003e"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": "                    \u003c/AnchorPane\u003e"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "dragontho"
        },
        "content": "               \u003c/children\u003e"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "dragontho"
        },
        "content": "            \u003c/HBox\u003e"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "dragontho"
        },
        "content": "        \u003cStackPane fx:id\u003d\"commandBoxPlaceholder\" styleClass\u003d\"pane-with-border\" VBox.vgrow\u003d\"NEVER\"\u003e"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "          \u003cpadding\u003e"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "dragontho"
        },
        "content": "            \u003cInsets bottom\u003d\"5\" left\u003d\"10\" right\u003d\"10\" top\u003d\"5\" /\u003e"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "          \u003c/padding\u003e"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003c/StackPane\u003e"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "dragontho"
        },
        "content": "                          \u003cStackPane fx:id\u003d\"resultDisplayPlaceholder\" maxHeight\u003d\"100\" minHeight\u003d\"100\" prefHeight\u003d\"100\" styleClass\u003d\"pane-with-border\" VBox.vgrow\u003d\"NEVER\"\u003e"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "          \u003cpadding\u003e"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "dragontho"
        },
        "content": "            \u003cInsets bottom\u003d\"5\" left\u003d\"10\" right\u003d\"10\" top\u003d\"5\" /\u003e"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "          \u003c/padding\u003e"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": "        \u003c/StackPane\u003e"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "dragontho"
        },
        "content": "            \u003cStackPane fx:id\u003d\"modularDisplayPlaceholder\" styleClass\u003d\"pane-with-border\" VBox.vgrow\u003d\"ALWAYS\" /\u003e"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "dragontho"
        },
        "content": "            \u003cHBox fillHeight\u003d\"false\" maxHeight\u003d\"-Infinity\" minHeight\u003d\"-Infinity\" prefHeight\u003d\"30.0\" styleClass\u003d\"status-bar\" VBox.vgrow\u003d\"NEVER\"\u003e"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "dragontho"
        },
        "content": "               \u003cchildren\u003e"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "dragontho"
        },
        "content": "              \u003cStackPane fx:id\u003d\"statusbarPlaceholder\" HBox.hgrow\u003d\"ALWAYS\" /\u003e"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "dragontho"
        },
        "content": "                  \u003cStackPane fx:id\u003d\"currentModePlaceholder\" HBox.hgrow\u003d\"ALWAYS\" /\u003e"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "dragontho"
        },
        "content": "               \u003c/children\u003e"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "dragontho"
        },
        "content": "            \u003c/HBox\u003e"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "      \u003c/VBox\u003e"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003c/Scene\u003e"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "  \u003c/scene\u003e"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c/fx:root\u003e"
      }
    ],
    "authorContributionMap": {
      "dragontho": 19,
      "kohyida1997": 6,
      "-": 36
    }
  },
  {
    "path": "src/main/resources/view/QuestionLabel.fxml",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": "\u003c?import javafx.scene.control.Label?\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": "\u003cLabel fx:id\u003d\"questionLabel\" styleClass\u003d\"question-label\" text\u003d\"Question\" xmlns\u003d\"http://javafx.com/javafx/11\" xmlns:fx\u003d\"http://javafx.com/fxml/1\" /\u003e"
      }
    ],
    "authorContributionMap": {
      "kohyida1997": 6
    }
  },
  {
    "path": "src/main/resources/view/SettingsPanel.fxml",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "dragontho"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "dragontho"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "dragontho"
        },
        "content": "\u003c?import javafx.geometry.Insets?\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "dragontho"
        },
        "content": "\u003c?import javafx.scene.control.Label?\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "dragontho"
        },
        "content": "\u003c?import javafx.scene.control.ScrollPane?\u003e"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "dragontho"
        },
        "content": "\u003c?import javafx.scene.layout.HBox?\u003e"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "dragontho"
        },
        "content": "\u003c?import javafx.scene.layout.VBox?\u003e"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "dragontho"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": "\u003cScrollPane fitToHeight\u003d\"true\" fitToWidth\u003d\"true\" maxHeight\u003d\"1.7976931348623157E308\" maxWidth\u003d\"1.7976931348623157E308\" xmlns\u003d\"http://javafx.com/javafx/11\" xmlns:fx\u003d\"http://javafx.com/fxml/1\"\u003e"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "dragontho"
        },
        "content": "   \u003ccontent\u003e"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "dragontho"
        },
        "content": "      \u003cVBox\u003e"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "dragontho"
        },
        "content": "         \u003cchildren\u003e"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "dragontho"
        },
        "content": "            \u003cHBox alignment\u003d\"CENTER_LEFT\" prefHeight\u003d\"100.0\" styleClass\u003d\"pane-with-border\"\u003e"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "dragontho"
        },
        "content": "               \u003cchildren\u003e"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "dragontho"
        },
        "content": "                  \u003cLabel styleClass\u003d\"label-header2\" text\u003d\"Difficulty\"\u003e"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "dragontho"
        },
        "content": "                     \u003cpadding\u003e"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "dragontho"
        },
        "content": "                        \u003cInsets left\u003d\"20.0\" /\u003e"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "dragontho"
        },
        "content": "                     \u003c/padding\u003e"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "dragontho"
        },
        "content": "                  \u003c/Label\u003e"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "dragontho"
        },
        "content": "                  \u003cHBox fx:id\u003d\"difficultyOptions\" alignment\u003d\"CENTER_RIGHT\" HBox.hgrow\u003d\"ALWAYS\" /\u003e"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "dragontho"
        },
        "content": "               \u003c/children\u003e"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "dragontho"
        },
        "content": "            \u003c/HBox\u003e"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "dragontho"
        },
        "content": "            \u003cHBox alignment\u003d\"CENTER_LEFT\" prefHeight\u003d\"100.0\" styleClass\u003d\"pane-with-border\"\u003e"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "dragontho"
        },
        "content": "               \u003cchildren\u003e"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "dragontho"
        },
        "content": "                  \u003cLabel styleClass\u003d\"label-header2\" text\u003d\"Theme\"\u003e"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "dragontho"
        },
        "content": "                     \u003cpadding\u003e"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "dragontho"
        },
        "content": "                        \u003cInsets left\u003d\"20.0\" /\u003e"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "dragontho"
        },
        "content": "                     \u003c/padding\u003e"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "dragontho"
        },
        "content": "                  \u003c/Label\u003e"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "dragontho"
        },
        "content": "                  \u003cHBox fx:id\u003d\"themeOptions\" alignment\u003d\"CENTER_RIGHT\" HBox.hgrow\u003d\"ALWAYS\" /\u003e"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "dragontho"
        },
        "content": "               \u003c/children\u003e"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "dragontho"
        },
        "content": "            \u003c/HBox\u003e"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "dragontho"
        },
        "content": "            \u003cHBox alignment\u003d\"CENTER_LEFT\" prefHeight\u003d\"100.0\" styleClass\u003d\"pane-with-border\"\u003e"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "dragontho"
        },
        "content": "               \u003cchildren\u003e"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "dragontho"
        },
        "content": "                  \u003cLabel styleClass\u003d\"label-header2\" text\u003d\"Hints\"\u003e"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "dragontho"
        },
        "content": "                     \u003cpadding\u003e"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "dragontho"
        },
        "content": "                        \u003cInsets left\u003d\"20.0\" /\u003e"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "dragontho"
        },
        "content": "                     \u003c/padding\u003e"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "dragontho"
        },
        "content": "                  \u003c/Label\u003e"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "dragontho"
        },
        "content": "                  \u003cHBox fx:id\u003d\"hintsOptions\" alignment\u003d\"CENTER_RIGHT\" HBox.hgrow\u003d\"ALWAYS\" /\u003e"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "dragontho"
        },
        "content": "               \u003c/children\u003e"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "dragontho"
        },
        "content": "            \u003c/HBox\u003e"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "dragontho"
        },
        "content": "            \u003cHBox alignment\u003d\"CENTER_LEFT\" prefHeight\u003d\"100.0\" styleClass\u003d\"pane-with-border\"\u003e"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "dragontho"
        },
        "content": "               \u003cchildren\u003e"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "dragontho"
        },
        "content": "                  \u003cLabel styleClass\u003d\"label-header2\" text\u003d\"Avatar\"\u003e"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "dragontho"
        },
        "content": "                     \u003cpadding\u003e"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "dragontho"
        },
        "content": "                        \u003cInsets left\u003d\"20.0\" /\u003e"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "dragontho"
        },
        "content": "                     \u003c/padding\u003e"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "dragontho"
        },
        "content": "                  \u003c/Label\u003e"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "dragontho"
        },
        "content": "                  \u003cHBox fx:id\u003d\"avatarId\" alignment\u003d\"CENTER_RIGHT\" HBox.hgrow\u003d\"ALWAYS\" /\u003e"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "dragontho"
        },
        "content": "               \u003c/children\u003e"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "dragontho"
        },
        "content": "            \u003c/HBox\u003e"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "dragontho"
        },
        "content": "         \u003c/children\u003e"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "dragontho"
        },
        "content": "      \u003c/VBox\u003e"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "dragontho"
        },
        "content": "   \u003c/content\u003e"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "dragontho"
        },
        "content": "\u003c/ScrollPane\u003e"
      }
    ],
    "authorContributionMap": {
      "dragontho": 55,
      "kohyida1997": 1
    }
  },
  {
    "path": "src/main/resources/view/TimerDisplay.fxml",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": "\u003c?import javafx.geometry.Insets?\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": "\u003c?import javafx.scene.control.ProgressBar?\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": "\u003c?import javafx.scene.control.TextArea?\u003e"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": "\u003c?import javafx.scene.layout.AnchorPane?\u003e"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": "\u003c?import javafx.scene.layout.HBox?\u003e"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": "\u003cAnchorPane fx:id\u003d\"placeHolder\" styleClass\u003d\"pane-with-border\" maxWidth\u003d\"Infinity\" HBox.hgrow\u003d\"ALWAYS\""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": "            xmlns\u003d\"http://javafx.com/javafx/11\" xmlns:fx\u003d\"http://javafx.com/fxml/1\"\u003e"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": "   \u003cHBox HBox.hgrow\u003d\"ALWAYS\"\u003e"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": "      \u003cchildren\u003e"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": "        \u003cTextArea fx:id\u003d\"timerText\" editable\u003d\"false\" styleClass\u003d\"timer-display\" prefWidth\u003d\"200.0\"\u003e"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": "        \u003c/TextArea\u003e"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": "        \u003cProgressBar fx:id\u003d\"progressBar\" styleClass\u003d\"progress-bar\" HBox.hgrow\u003d\"ALWAYS\""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": "                     prefWidth\u003d\"570\" maxWidth\u003d\"Infinity\"\u003e"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": "            \u003cpadding\u003e"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": "               \u003cInsets left\u003d\"5.0\" right\u003d\"5.0\" top\u003d\"7.0\" /\u003e"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": "            \u003c/padding\u003e"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": "         \u003c/ProgressBar\u003e"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": "      \u003c/children\u003e"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": "   \u003c/HBox\u003e"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": "\u003c/AnchorPane\u003e"
      }
    ],
    "authorContributionMap": {
      "kohyida1997": 23
    }
  },
  {
    "path": "src/main/resources/view/TitleScreenPanel.fxml",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "dragontho"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "dragontho"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "dragontho"
        },
        "content": "\u003c?import javafx.scene.control.Label?\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "dragontho"
        },
        "content": "\u003c?import javafx.scene.layout.VBox?\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "dragontho"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": "\u003cVBox maxHeight\u003d\"-Infinity\" maxWidth\u003d\"-Infinity\" minHeight\u003d\"-Infinity\" minWidth\u003d\"-Infinity\" xmlns\u003d\"http://javafx.com/javafx/11\" xmlns:fx\u003d\"http://javafx.com/fxml/1\"\u003e"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "dragontho"
        },
        "content": "   \u003cchildren\u003e"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "dragontho"
        },
        "content": "      \u003cLabel fx:id\u003d\"introduction\" maxHeight\u003d\"-Infinity\" maxWidth\u003d\"-Infinity\" minHeight\u003d\"-Infinity\" minWidth\u003d\"-Infinity\" styleClass\u003d\"label-header\" text\u003d\"Introduction\" /\u003e"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "dragontho"
        },
        "content": "      \u003cLabel fx:id\u003d\"body\" maxHeight\u003d\"-Infinity\" maxWidth\u003d\"-Infinity\" minHeight\u003d\"-Infinity\" minWidth\u003d\"-Infinity\" styleClass\u003d\"label-bright\" text\u003d\"Body\" wrapText\u003d\"true\" /\u003e"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "dragontho"
        },
        "content": "   \u003c/children\u003e"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "dragontho"
        },
        "content": "\u003c/VBox\u003e"
      }
    ],
    "authorContributionMap": {
      "dragontho": 10,
      "kohyida1997": 1
    }
  },
  {
    "path": "src/main/resources/view/TwoSplitColumnLayout.fxml",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "dragontho"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "dragontho"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "jascxx"
        },
        "content": "\u003c?import javafx.scene.Cursor?\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "dragontho"
        },
        "content": "\u003c?import javafx.scene.control.SplitPane?\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "dragontho"
        },
        "content": "\u003c?import javafx.scene.layout.StackPane?\u003e"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "dragontho"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": "\u003cSplitPane fx:id\u003d\"splitPane\" dividerPositions\u003d\"0.5\" xmlns\u003d\"http://javafx.com/javafx/11\" xmlns:fx\u003d\"http://javafx.com/fxml/1\"\u003e"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "dragontho"
        },
        "content": "   \u003citems\u003e"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "jascxx"
        },
        "content": "      \u003cStackPane fx:id\u003d\"leftPane\"\u003e"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "jascxx"
        },
        "content": "         \u003ccursor\u003e"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "jascxx"
        },
        "content": "            \u003cCursor fx:constant\u003d\"DEFAULT\" /\u003e"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "jascxx"
        },
        "content": "         \u003c/cursor\u003e\u003c/StackPane\u003e"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "jascxx"
        },
        "content": "      \u003cStackPane fx:id\u003d\"rightPane\"\u003e"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "jascxx"
        },
        "content": "         \u003ccursor\u003e"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "jascxx"
        },
        "content": "            \u003cCursor fx:constant\u003d\"DEFAULT\" /\u003e"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "jascxx"
        },
        "content": "         \u003c/cursor\u003e\u003c/StackPane\u003e"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "dragontho"
        },
        "content": "   \u003c/items\u003e"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "jascxx"
        },
        "content": "   \u003ccursor\u003e"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "jascxx"
        },
        "content": "      \u003cCursor fx:constant\u003d\"DEFAULT\" /\u003e"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "jascxx"
        },
        "content": "   \u003c/cursor\u003e"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "dragontho"
        },
        "content": "\u003c/SplitPane\u003e"
      }
    ],
    "authorContributionMap": {
      "dragontho": 8,
      "jascxx": 12,
      "kohyida1997": 1
    }
  },
  {
    "path": "src/main/resources/view/TwoSplitRowLayout.fxml",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "dragontho"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "dragontho"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "dragontho"
        },
        "content": "\u003c?import javafx.scene.control.SplitPane?\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "dragontho"
        },
        "content": "\u003c?import javafx.scene.layout.StackPane?\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "dragontho"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": "\u003cSplitPane fx:id\u003d\"splitPane\" dividerPositions\u003d\"0.5\" orientation\u003d\"VERTICAL\" xmlns\u003d\"http://javafx.com/javafx/11\" xmlns:fx\u003d\"http://javafx.com/fxml/1\"\u003e"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "dragontho"
        },
        "content": "   \u003citems\u003e"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "dragontho"
        },
        "content": "      \u003cStackPane fx:id\u003d\"topPane\" /\u003e"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "dragontho"
        },
        "content": "      \u003cStackPane fx:id\u003d\"bottomPane\" /\u003e"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "dragontho"
        },
        "content": "   \u003c/items\u003e"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "dragontho"
        },
        "content": "\u003c/SplitPane\u003e"
      }
    ],
    "authorContributionMap": {
      "dragontho": 10,
      "kohyida1997": 1
    }
  },
  {
    "path": "src/main/resources/view/WordBankCard.fxml",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "sreesubbash"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "sreesubbash"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "sreesubbash"
        },
        "content": "\u003c?import javafx.geometry.Insets?\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "sreesubbash"
        },
        "content": "\u003c?import javafx.scene.control.Label?\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "sreesubbash"
        },
        "content": "\u003c?import javafx.scene.layout.ColumnConstraints?\u003e"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "sreesubbash"
        },
        "content": "\u003c?import javafx.scene.layout.FlowPane?\u003e"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "sreesubbash"
        },
        "content": "\u003c?import javafx.scene.layout.GridPane?\u003e"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "sreesubbash"
        },
        "content": "\u003c?import javafx.scene.layout.HBox?\u003e"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "sreesubbash"
        },
        "content": "\u003c?import javafx.scene.layout.Region?\u003e"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "sreesubbash"
        },
        "content": "\u003c?import javafx.scene.layout.RowConstraints?\u003e"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "sreesubbash"
        },
        "content": "\u003c?import javafx.scene.layout.VBox?\u003e"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "sreesubbash"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "dragontho"
        },
        "content": "\u003cHBox id\u003d\"cardPane\" fx:id\u003d\"cardPane\" xmlns\u003d\"http://javafx.com/javafx/11.0.0\" xmlns:fx\u003d\"http://javafx.com/fxml/1\"\u003e"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "sreesubbash"
        },
        "content": "  \u003cGridPane HBox.hgrow\u003d\"ALWAYS\"\u003e"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "sreesubbash"
        },
        "content": "    \u003ccolumnConstraints\u003e"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "sreesubbash"
        },
        "content": "      \u003cColumnConstraints hgrow\u003d\"SOMETIMES\" minWidth\u003d\"10\" prefWidth\u003d\"150\" /\u003e"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "sreesubbash"
        },
        "content": "    \u003c/columnConstraints\u003e"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "chrischenhui"
        },
        "content": "    \u003cVBox alignment\u003d\"CENTER_LEFT\" minHeight\u003d\"105\" onDragDetected\u003d\"#handleDragDetection\" GridPane.columnIndex\u003d\"0\"\u003e"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "sreesubbash"
        },
        "content": "      \u003cpadding\u003e"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "sreesubbash"
        },
        "content": "        \u003cInsets bottom\u003d\"5\" left\u003d\"15\" right\u003d\"5\" top\u003d\"5\" /\u003e"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "sreesubbash"
        },
        "content": "      \u003c/padding\u003e"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "sreesubbash"
        },
        "content": "      \u003cHBox alignment\u003d\"CENTER_LEFT\" spacing\u003d\"5\"\u003e"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "sreesubbash"
        },
        "content": "        \u003cLabel fx:id\u003d\"id\" styleClass\u003d\"cell_big_label\"\u003e"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "sreesubbash"
        },
        "content": "          \u003cminWidth\u003e"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "sreesubbash"
        },
        "content": "            \u003c!-- Ensures that the label text is never truncated --\u003e"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "sreesubbash"
        },
        "content": "            \u003cRegion fx:constant\u003d\"USE_PREF_SIZE\" /\u003e"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "sreesubbash"
        },
        "content": "          \u003c/minWidth\u003e"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "sreesubbash"
        },
        "content": "        \u003c/Label\u003e"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "sreesubbash"
        },
        "content": "        \u003cLabel fx:id\u003d\"name\" styleClass\u003d\"cell_big_label\" text\u003d\"\\$name\" /\u003e"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "sreesubbash"
        },
        "content": "      \u003c/HBox\u003e"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "sreesubbash"
        },
        "content": "      \u003cFlowPane fx:id\u003d\"tags\" /\u003e"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "chrischenhui"
        },
        "content": "\u003c!--      \u003cLabel fx:id\u003d\"meaning\" styleClass\u003d\"cell_small_label\" text\u003d\"\\$meaning\"\u003e--\u003e"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "chrischenhui"
        },
        "content": "\u003c!--            \u003cVBox.margin\u003e--\u003e"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "chrischenhui"
        },
        "content": "\u003c!--               \u003cInsets top\u003d\"4.0\" /\u003e--\u003e"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "chrischenhui"
        },
        "content": "\u003c!--            \u003c/VBox.margin\u003e\u003c/Label\u003e--\u003e"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "sreesubbash"
        },
        "content": "    \u003c/VBox\u003e"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "sreesubbash"
        },
        "content": "      \u003crowConstraints\u003e"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "sreesubbash"
        },
        "content": "         \u003cRowConstraints /\u003e"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "sreesubbash"
        },
        "content": "      \u003c/rowConstraints\u003e"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "sreesubbash"
        },
        "content": "  \u003c/GridPane\u003e"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "sreesubbash"
        },
        "content": "\u003c/HBox\u003e"
      }
    ],
    "authorContributionMap": {
      "sreesubbash": 35,
      "dragontho": 1,
      "chrischenhui": 5
    }
  },
  {
    "path": "src/main/resources/view/WordBankProgressChart.fxml",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jascxx"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "jascxx"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "jascxx"
        },
        "content": "\u003c?import javafx.geometry.Insets?\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "jascxx"
        },
        "content": "\u003c?import javafx.scene.control.ComboBox?\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "jascxx"
        },
        "content": "\u003c?import javafx.scene.control.Label?\u003e"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "jascxx"
        },
        "content": "\u003c?import javafx.scene.layout.HBox?\u003e"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "jascxx"
        },
        "content": "\u003c?import javafx.scene.layout.StackPane?\u003e"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "jascxx"
        },
        "content": "\u003c?import javafx.scene.layout.VBox?\u003e"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "jascxx"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": "\u003cVBox prefHeight\u003d\"0.0\" prefWidth\u003d\"100.0\" xmlns\u003d\"http://javafx.com/javafx/11\" xmlns:fx\u003d\"http://javafx.com/fxml/1\"\u003e"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "jascxx"
        },
        "content": "   \u003cchildren\u003e"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "jascxx"
        },
        "content": "      \u003cHBox prefHeight\u003d\"100.0\" prefWidth\u003d\"200.0\"\u003e"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "jascxx"
        },
        "content": "         \u003cchildren\u003e"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "dragontho"
        },
        "content": "            \u003cLabel fx:id\u003d\"title121\" maxHeight\u003d\"-Infinity\" maxWidth\u003d\"1.7976931348623157E308\" minHeight\u003d\"-Infinity\" minWidth\u003d\"-Infinity\" styleClass\u003d\"label-header2\" text\u003d\"Progress\" textAlignment\u003d\"CENTER\"\u003e"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "jascxx"
        },
        "content": "               \u003cpadding\u003e"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "jascxx"
        },
        "content": "                  \u003cInsets right\u003d\"20.0\" /\u003e"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "jascxx"
        },
        "content": "               \u003c/padding\u003e"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "jascxx"
        },
        "content": "               \u003cHBox.margin\u003e"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "jascxx"
        },
        "content": "                  \u003cInsets bottom\u003d\"6.0\" left\u003d\"16.0\" top\u003d\"8.0\" /\u003e"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "jascxx"
        },
        "content": "               \u003c/HBox.margin\u003e"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "jascxx"
        },
        "content": "            \u003c/Label\u003e"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "dragontho"
        },
        "content": "            \u003cComboBox id\u003d\"progressChartModeSelector\" fx:id\u003d\"progressChartModeSelector\"\u003e"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "jascxx"
        },
        "content": "               \u003cHBox.margin\u003e"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "jascxx"
        },
        "content": "                  \u003cInsets bottom\u003d\"6.0\" top\u003d\"8.0\" /\u003e"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "jascxx"
        },
        "content": "               \u003c/HBox.margin\u003e"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "jascxx"
        },
        "content": "            \u003c/ComboBox\u003e"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "jascxx"
        },
        "content": "         \u003c/children\u003e"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "jascxx"
        },
        "content": "      \u003c/HBox\u003e"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "jascxx"
        },
        "content": "      \u003cStackPane fx:id\u003d\"progressChartPlaceholder\" prefHeight\u003d\"1000.0\" prefWidth\u003d\"200.0\" /\u003e"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "jascxx"
        },
        "content": "   \u003c/children\u003e"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "jascxx"
        },
        "content": "\u003c/VBox\u003e"
      }
    ],
    "authorContributionMap": {
      "dragontho": 2,
      "jascxx": 28,
      "kohyida1997": 1
    }
  },
  {
    "path": "src/main/resources/view/WordBankStatisticsPanel.fxml",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jascxx"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "jascxx"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "jascxx"
        },
        "content": "\u003c?import javafx.geometry.Insets?\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "jascxx"
        },
        "content": "\u003c?import javafx.scene.control.Label?\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "jascxx"
        },
        "content": "\u003c?import javafx.scene.control.ScrollPane?\u003e"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "jascxx"
        },
        "content": "\u003c?import javafx.scene.control.Separator?\u003e"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "jascxx"
        },
        "content": "\u003c?import javafx.scene.layout.HBox?\u003e"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "jascxx"
        },
        "content": "\u003c?import javafx.scene.layout.Region?\u003e"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "jascxx"
        },
        "content": "\u003c?import javafx.scene.layout.StackPane?\u003e"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "jascxx"
        },
        "content": "\u003c?import javafx.scene.layout.VBox?\u003e"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "jascxx"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": "\u003cScrollPane fx:id\u003d\"scrollPane\" fitToHeight\u003d\"true\" fitToWidth\u003d\"true\" xmlns\u003d\"http://javafx.com/javafx/11\" xmlns:fx\u003d\"http://javafx.com/fxml/1\"\u003e"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "jascxx"
        },
        "content": "   \u003ccontent\u003e"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "dragontho"
        },
        "content": "      \u003cVBox maxHeight\u003d\"-Infinity\" maxWidth\u003d\"1.7976931348623157E308\" minHeight\u003d\"-Infinity\" minWidth\u003d\"-Infinity\" prefWidth\u003d\"600.0\"\u003e"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "jascxx"
        },
        "content": "         \u003cchildren\u003e"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "jascxx"
        },
        "content": "            \u003cLabel fx:id\u003d\"title\" alignment\u003d\"CENTER\" maxHeight\u003d\"-Infinity\" maxWidth\u003d\"1.7976931348623157E308\" minHeight\u003d\"-Infinity\" minWidth\u003d\"-Infinity\" styleClass\u003d\"label-header\" text\u003d\"Title\" textAlignment\u003d\"CENTER\" /\u003e"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "jascxx"
        },
        "content": "            \u003cStackPane fx:id\u003d\"badgesRowPlaceholder\" /\u003e"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "jascxx"
        },
        "content": "            \u003cHBox minWidth\u003d\"0.0\" prefHeight\u003d\"30.0\" prefWidth\u003d\"0.0\"\u003e"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "jascxx"
        },
        "content": "               \u003cchildren\u003e"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "jascxx"
        },
        "content": "                  \u003cRegion HBox.hgrow\u003d\"ALWAYS\" /\u003e"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "jascxx"
        },
        "content": "                  \u003cLabel fx:id\u003d\"title1112\" alignment\u003d\"CENTER\" maxHeight\u003d\"-Infinity\" maxWidth\u003d\"1.7976931348623157E308\" minHeight\u003d\"-Infinity\" minWidth\u003d\"-Infinity\" styleClass\u003d\"label-bright\" text\u003d\"Played \" textAlignment\u003d\"CENTER\" /\u003e"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "jascxx"
        },
        "content": "                  \u003cLabel fx:id\u003d\"playedTimesText\" alignment\u003d\"CENTER\" maxHeight\u003d\"-Infinity\" maxWidth\u003d\"1.7976931348623157E308\" minHeight\u003d\"-Infinity\" minWidth\u003d\"-Infinity\" styleClass\u003d\"label-bright\" text\u003d\"X times\" textAlignment\u003d\"CENTER\" /\u003e"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "jascxx"
        },
        "content": "                  \u003cRegion HBox.hgrow\u003d\"ALWAYS\" /\u003e"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "jascxx"
        },
        "content": "               \u003c/children\u003e"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "jascxx"
        },
        "content": "               \u003cpadding\u003e"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "jascxx"
        },
        "content": "                  \u003cInsets top\u003d\"10.0\" /\u003e"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "jascxx"
        },
        "content": "               \u003c/padding\u003e"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "jascxx"
        },
        "content": "            \u003c/HBox\u003e"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "jascxx"
        },
        "content": "            \u003cHBox minWidth\u003d\"0.0\" prefHeight\u003d\"30.0\" prefWidth\u003d\"0.0\"\u003e"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "jascxx"
        },
        "content": "               \u003cchildren\u003e"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "jascxx"
        },
        "content": "                  \u003cRegion prefHeight\u003d\"200.0\" HBox.hgrow\u003d\"ALWAYS\" /\u003e"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "jascxx"
        },
        "content": "                  \u003cLabel fx:id\u003d\"title111\" alignment\u003d\"CENTER\" maxHeight\u003d\"-Infinity\" maxWidth\u003d\"1.7976931348623157E308\" minHeight\u003d\"-Infinity\" minWidth\u003d\"-Infinity\" styleClass\u003d\"label-bright\" text\u003d\"High Score: \" textAlignment\u003d\"CENTER\" /\u003e"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "jascxx"
        },
        "content": "                  \u003cLabel fx:id\u003d\"highScoreText\" alignment\u003d\"CENTER\" maxHeight\u003d\"-Infinity\" maxWidth\u003d\"1.7976931348623157E308\" minHeight\u003d\"-Infinity\" minWidth\u003d\"-Infinity\" styleClass\u003d\"label-bright\" text\u003d\"XX\" textAlignment\u003d\"CENTER\" /\u003e"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "jascxx"
        },
        "content": "                  \u003cRegion prefHeight\u003d\"200.0\" HBox.hgrow\u003d\"ALWAYS\" /\u003e"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "jascxx"
        },
        "content": "               \u003c/children\u003e"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "jascxx"
        },
        "content": "               \u003cpadding\u003e"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "jascxx"
        },
        "content": "                  \u003cInsets top\u003d\"10.0\" /\u003e"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "jascxx"
        },
        "content": "               \u003c/padding\u003e"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "jascxx"
        },
        "content": "            \u003c/HBox\u003e"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "jascxx"
        },
        "content": "            \u003cHBox minWidth\u003d\"0.0\" prefHeight\u003d\"30.0\" prefWidth\u003d\"0.0\"\u003e"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "jascxx"
        },
        "content": "               \u003cchildren\u003e"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "jascxx"
        },
        "content": "                  \u003cRegion prefHeight\u003d\"200.0\" HBox.hgrow\u003d\"ALWAYS\" /\u003e"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "jascxx"
        },
        "content": "                  \u003cLabel fx:id\u003d\"title1111\" alignment\u003d\"CENTER\" maxHeight\u003d\"-Infinity\" maxWidth\u003d\"1.7976931348623157E308\" minHeight\u003d\"-Infinity\" minWidth\u003d\"-Infinity\" styleClass\u003d\"label-bright\" text\u003d\"Fastest Clear: \" textAlignment\u003d\"CENTER\" /\u003e"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "jascxx"
        },
        "content": "                  \u003cLabel fx:id\u003d\"fastestClearText\" alignment\u003d\"CENTER\" maxHeight\u003d\"-Infinity\" maxWidth\u003d\"1.7976931348623157E308\" minHeight\u003d\"-Infinity\" minWidth\u003d\"-Infinity\" styleClass\u003d\"label-bright\" text\u003d\"XXs\" textAlignment\u003d\"CENTER\" /\u003e"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "jascxx"
        },
        "content": "                  \u003cRegion prefHeight\u003d\"200.0\" HBox.hgrow\u003d\"ALWAYS\" /\u003e"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "jascxx"
        },
        "content": "               \u003c/children\u003e"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "jascxx"
        },
        "content": "               \u003cpadding\u003e"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "jascxx"
        },
        "content": "                  \u003cInsets top\u003d\"3.0\" /\u003e"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "jascxx"
        },
        "content": "               \u003c/padding\u003e"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "jascxx"
        },
        "content": "            \u003c/HBox\u003e"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "jascxx"
        },
        "content": "            \u003cSeparator opacity\u003d\"0.6\" prefWidth\u003d\"200.0\"\u003e"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "jascxx"
        },
        "content": "               \u003cpadding\u003e"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "jascxx"
        },
        "content": "                  \u003cInsets left\u003d\"10.0\" right\u003d\"10.0\" /\u003e"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "jascxx"
        },
        "content": "               \u003c/padding\u003e"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "jascxx"
        },
        "content": "               \u003cVBox.margin\u003e"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "jascxx"
        },
        "content": "                  \u003cInsets bottom\u003d\"8.0\" top\u003d\"25.0\" /\u003e"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "jascxx"
        },
        "content": "               \u003c/VBox.margin\u003e"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "jascxx"
        },
        "content": "            \u003c/Separator\u003e"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "jascxx"
        },
        "content": "            \u003cVBox prefHeight\u003d\"0.0\" prefWidth\u003d\"100.0\"\u003e"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "jascxx"
        },
        "content": "               \u003cchildren\u003e"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "jascxx"
        },
        "content": "                  \u003cStackPane fx:id\u003d\"progressChartPlaceholder\" prefHeight\u003d\"1000.0\" prefWidth\u003d\"200.0\" /\u003e"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "jascxx"
        },
        "content": "               \u003c/children\u003e"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "jascxx"
        },
        "content": "               \u003cVBox.margin\u003e"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "jascxx"
        },
        "content": "                  \u003cInsets bottom\u003d\"4.0\" left\u003d\"8.0\" right\u003d\"8.0\" top\u003d\"4.0\" /\u003e"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "jascxx"
        },
        "content": "               \u003c/VBox.margin\u003e"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "jascxx"
        },
        "content": "            \u003c/VBox\u003e"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "jascxx"
        },
        "content": "            \u003cSeparator opacity\u003d\"0.6\" prefWidth\u003d\"200.0\"\u003e"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "jascxx"
        },
        "content": "               \u003cpadding\u003e"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "jascxx"
        },
        "content": "                  \u003cInsets left\u003d\"10.0\" right\u003d\"10.0\" /\u003e"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "jascxx"
        },
        "content": "               \u003c/padding\u003e"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "jascxx"
        },
        "content": "               \u003cVBox.margin\u003e"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "jascxx"
        },
        "content": "                  \u003cInsets bottom\u003d\"8.0\" top\u003d\"25.0\" /\u003e"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "jascxx"
        },
        "content": "               \u003c/VBox.margin\u003e"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "jascxx"
        },
        "content": "            \u003c/Separator\u003e"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "jascxx"
        },
        "content": "            \u003cVBox fx:id\u003d\"mostMissedBox\" prefHeight\u003d\"0.0\" prefWidth\u003d\"100.0\"\u003e"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "jascxx"
        },
        "content": "               \u003cchildren\u003e"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "jascxx"
        },
        "content": "                  \u003cHBox prefHeight\u003d\"100.0\"\u003e"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "jascxx"
        },
        "content": "                     \u003cchildren\u003e"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "jascxx"
        },
        "content": "                        \u003cLabel fx:id\u003d\"gameFeedbackHeader\" maxHeight\u003d\"-Infinity\" maxWidth\u003d\"1.7976931348623157E308\" minHeight\u003d\"-Infinity\" minWidth\u003d\"-Infinity\" styleClass\u003d\"label-header2\" text\u003d\"Hardest cards\" textAlignment\u003d\"CENTER\" HBox.hgrow\u003d\"ALWAYS\"\u003e"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "jascxx"
        },
        "content": "                           \u003cHBox.margin\u003e"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "jascxx"
        },
        "content": "                              \u003cInsets left\u003d\"8.0\" /\u003e"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "jascxx"
        },
        "content": "                           \u003c/HBox.margin\u003e"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "jascxx"
        },
        "content": "                        \u003c/Label\u003e"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "jascxx"
        },
        "content": "                        \u003cLabel alignment\u003d\"BOTTOM_RIGHT\" styleClass\u003d\"cell_big_label\" text\u003d\"Hit rate\" textAlignment\u003d\"RIGHT\" HBox.hgrow\u003d\"ALWAYS\"\u003e"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "jascxx"
        },
        "content": "                           \u003cHBox.margin\u003e"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "jascxx"
        },
        "content": "                              \u003cInsets top\u003d\"3.0\" /\u003e"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "jascxx"
        },
        "content": "                           \u003c/HBox.margin\u003e"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "jascxx"
        },
        "content": "                        \u003c/Label\u003e"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "jascxx"
        },
        "content": "                     \u003c/children\u003e"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "jascxx"
        },
        "content": "                     \u003cVBox.margin\u003e"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "jascxx"
        },
        "content": "                        \u003cInsets bottom\u003d\"6.0\" left\u003d\"8.0\" /\u003e"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "jascxx"
        },
        "content": "                     \u003c/VBox.margin\u003e"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "jascxx"
        },
        "content": "                  \u003c/HBox\u003e"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "jascxx"
        },
        "content": "                  \u003cVBox fx:id\u003d\"mostMissedList\" prefHeight\u003d\"200.0\" prefWidth\u003d\"0.0\"\u003e"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "jascxx"
        },
        "content": "                     \u003cVBox.margin\u003e"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "jascxx"
        },
        "content": "                        \u003cInsets left\u003d\"16.0\" /\u003e"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "jascxx"
        },
        "content": "                     \u003c/VBox.margin\u003e"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "jascxx"
        },
        "content": "                  \u003c/VBox\u003e"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "jascxx"
        },
        "content": "               \u003c/children\u003e"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "jascxx"
        },
        "content": "               \u003cVBox.margin\u003e"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "jascxx"
        },
        "content": "                  \u003cInsets bottom\u003d\"4.0\" left\u003d\"8.0\" right\u003d\"8.0\" top\u003d\"4.0\" /\u003e"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "jascxx"
        },
        "content": "               \u003c/VBox.margin\u003e"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "jascxx"
        },
        "content": "            \u003c/VBox\u003e"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "jascxx"
        },
        "content": "         \u003c/children\u003e"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "jascxx"
        },
        "content": "      \u003c/VBox\u003e"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "jascxx"
        },
        "content": "   \u003c/content\u003e"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "jascxx"
        },
        "content": "\u003c/ScrollPane\u003e"
      }
    ],
    "authorContributionMap": {
      "dragontho": 1,
      "jascxx": 105,
      "kohyida1997": 1
    }
  },
  {
    "path": "src/test/java/seedu/address/appmanager/AppManagerTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": "package seedu.address.appmanager;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertThrows;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": "import static org.junit.jupiter.api.Assertions.fail;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": "import static seedu.address.testutil.TypicalCards.SINGLE_LETTER_CARD;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": "import java.lang.reflect.Field;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": "import org.junit.jupiter.api.BeforeEach;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": "import seedu.address.commons.core.GuiSettings;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": "import seedu.address.logic.Logic;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": "import seedu.address.logic.commands.CommandResult;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": "import seedu.address.logic.util.AutoFillAction;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": "import seedu.address.logic.util.ModeEnum;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "chrischenhui"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": "import seedu.address.model.appsettings.AppSettings;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": "import seedu.address.model.card.Card;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": "import seedu.address.model.card.FormattedHint;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": "import seedu.address.model.globalstatistics.GlobalStatistics;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": "import seedu.address.model.wordbank.ReadOnlyWordBank;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": "import seedu.address.model.wordbank.WordBank;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": "import seedu.address.model.wordbankstatslist.WordBankStatisticsList;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": "import seedu.address.statistics.GameStatistics;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": "import seedu.address.statistics.GameStatisticsBuilder;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": "import seedu.address.statistics.WordBankStatistics;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "chrischenhui"
        },
        "content": "import seedu.address.storage.Storage;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": "class AppManagerTest {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": "    private AppManager dummyAppManager;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": "    @BeforeEach"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": "    void setUp() {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": "        dummyAppManager \u003d new AppManager(new LogicStub());"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": "    void setGuiSettings() {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": "    void execute() {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": "    void getSelectedWbName() {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": "    }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": "    void getLogic() {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": "        LogicStub logicStub \u003d new LogicStub();"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": "        dummyAppManager \u003d new AppManager(logicStub);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": "        assertTrue(dummyAppManager.getLogic().equals(logicStub));"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": "    }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": "    void constructor_nullLogic_throwsNullPointerException() {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e new AppManager(null));"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": "    }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": "    void getActiveWordBank() {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": "    }"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": "    void getAppSettings() {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": "    }"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": "    void getGameStatistics() {"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": "    }"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": "    void initGameStatistics() {"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": "        GameStatisticsBuilder tempStatisticsBuilder \u003d new GameStatisticsBuilder(\"dummyStatistics\");"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": "        dummyAppManager.initGameStatistics(\"dummyStatistics\");"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": "            final Field field \u003d dummyAppManager.getClass().getDeclaredField(\"gameStatisticsBuilder\");"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": "            field.setAccessible(true);"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": "            GameStatisticsBuilder newlyInitializedBuilder \u003d (GameStatisticsBuilder) field.get(dummyAppManager);"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": "            assertTrue(tempStatisticsBuilder.getTitle()"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": "                    .equals(newlyInitializedBuilder.getTitle()));"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": "        } catch (NoSuchFieldException | IllegalAccessException e) {"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": "            fail();"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": "        }"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": "    }"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": ""
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": "    void getActiveWordBankStatistics() {"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": "    }"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": ""
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": "    void getActiveWordBankStatisticsList() {"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": "    }"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": ""
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": "    void getGlobalStatistics() {"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": "    }"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": ""
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": "    void getFilteredPersonList() {"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": "    }"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": ""
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": "    void getFilteredWordBankList() {"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": "    }"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": ""
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": "    void getGuiSettings() {"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": "    }"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": ""
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": "    void getAddressBookFilePath() {"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": "    }"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": ""
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": "    void setTimerDisplayCallBack() {"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": "        TimerDisplayStub timerDisplayStub \u003d new TimerDisplayStub();"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": "        AppManager.TimerDisplayCallBack dummyCallBack \u003d timerDisplayStub::updateTimerDisplay;"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": "        dummyAppManager.registerTimerDisplayCallBack(dummyCallBack);"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": "            final Field field \u003d dummyAppManager.getClass().getDeclaredField(\"timerDisplayCallBack\");"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": "            field.setAccessible(true);"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": "            assertTrue(dummyCallBack.equals(field.get(dummyAppManager)));"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": "        } catch (NoSuchFieldException | IllegalAccessException e) {"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": "            fail();"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": "        }"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": "    }"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": ""
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": "    void setTimerDisplayCallBack_null_throwsNullPointerException() {"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e dummyAppManager.registerTimerDisplayCallBack(null));"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": "    }"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": ""
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": "    void setHintDisplayCallBack() {"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": "        HintDisplayStub hintDisplayStub \u003d new HintDisplayStub();"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": "        AppManager.HintDisplayCallBack dummyCallBack \u003d hintDisplayStub::updateHintDisplay;"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": "        dummyAppManager.registerHintDisplayCallBack(dummyCallBack);"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": "            final Field field \u003d dummyAppManager.getClass().getDeclaredField(\"hintDisplayCallBack\");"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": "            field.setAccessible(true);"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": "            assertTrue(dummyCallBack.equals(field.get(dummyAppManager)));"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": "        } catch (NoSuchFieldException | IllegalAccessException e) {"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": "            fail();"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": "        }"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": "    }"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": ""
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": "    void setHintDisplayCallBack_null_throwsNullPointerException() {"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e dummyAppManager.registerHintDisplayCallBack(null));"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": "    }"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": ""
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": "    void setMainWindowExecuteCallBack() {"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": "        MainWindowStub mainWindowStub \u003d new MainWindowStub();"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": "        AppManager.MainWindowExecuteCallBack dummyCallBack \u003d mainWindowStub::execute;"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": "        dummyAppManager.registerMainWindowExecuteCallBack(dummyCallBack);"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": "            final Field field \u003d dummyAppManager.getClass().getDeclaredField(\"mainWindowExecuteCallBack\");"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": "            field.setAccessible(true);"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": "            assertTrue(dummyCallBack.equals(field.get(dummyAppManager)));"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": "        } catch (NoSuchFieldException | IllegalAccessException e) {"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": "            fail();"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": "        }"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": "    }"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": ""
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": "    void setMainWindowExecuteCallBack_null_throwsNullPointerException() {"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e dummyAppManager.registerMainWindowExecuteCallBack(null));"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": "    }"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": ""
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": "    void setQuestionDisplayCallBack() {"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": "        QuestionDisplayStub questionDisplayStub \u003d new QuestionDisplayStub();"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": "        AppManager.QuestionDisplayCallBack dummyCallBack \u003d questionDisplayStub::updateQuestionDisplay;"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": "        dummyAppManager.registerQuestionDisplayCallBack(dummyCallBack);"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": "            final Field field \u003d dummyAppManager.getClass().getDeclaredField(\"questionDisplayCallBack\");"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": "            field.setAccessible(true);"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": "            assertTrue(dummyCallBack.equals(field.get(dummyAppManager)));"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": "        } catch (NoSuchFieldException | IllegalAccessException e) {"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": "            fail();"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": "        }"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": "    }"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": ""
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": "    void setQuestionDisplayCallBack_null_throwsNullPointerException() {"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e dummyAppManager.registerQuestionDisplayCallBack(null));"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": "    }"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": ""
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": "    private class LogicStub implements Logic {"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": ""
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": "        public CommandResult execute(String commandText) throws CommandException, ParseException {"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": "            return null;"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": "        }"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": ""
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": "        public ReadOnlyWordBank getAddressBook() {"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": "            return null;"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": "        }"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": ""
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": "        public ObservableList\u003cCard\u003e getFilteredPersonList() {"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": "            return null;"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": "        }"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": ""
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": "        public ObservableList\u003cWordBank\u003e getFilteredWordBankList() {"
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": "            return null;"
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": "        }"
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": ""
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": "        public Path getAddressBookFilePath() {"
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": "            return null;"
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": "        }"
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": ""
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": "        public GuiSettings getGuiSettings() {"
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": "            return null;"
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": "        }"
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": ""
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": "        public void setGuiSettings(GuiSettings guiSettings) {"
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": ""
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": "        }"
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": ""
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": "        public void saveUpdatedWbStatistics(GameStatistics gameStats) throws CommandException {"
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": ""
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": "        }"
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": ""
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": "        public void incrementPlay() throws CommandException {"
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": ""
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": "        }"
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": ""
      },
      {
        "lineNumber": 248,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 249,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": "        public WordBankStatistics getActiveWordBankStatistics() {"
      },
      {
        "lineNumber": 250,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": "            return null;"
      },
      {
        "lineNumber": 251,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": "        }"
      },
      {
        "lineNumber": 252,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": ""
      },
      {
        "lineNumber": 253,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 254,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": "        public WordBankStatisticsList getWordBankStatisticsList() {"
      },
      {
        "lineNumber": 255,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": "            return null;"
      },
      {
        "lineNumber": 256,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": "        }"
      },
      {
        "lineNumber": 257,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": ""
      },
      {
        "lineNumber": 258,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 259,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": "        public GlobalStatistics getGlobalStatistics() {"
      },
      {
        "lineNumber": 260,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": "            return null;"
      },
      {
        "lineNumber": 261,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": "        }"
      },
      {
        "lineNumber": 262,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": ""
      },
      {
        "lineNumber": 263,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 264,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": "        public ReadOnlyWordBank getActiveWordBank() {"
      },
      {
        "lineNumber": 265,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": "            return null;"
      },
      {
        "lineNumber": 266,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": "        }"
      },
      {
        "lineNumber": 267,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": ""
      },
      {
        "lineNumber": 268,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 269,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": "        public long getTimeAllowedPerQuestion() {"
      },
      {
        "lineNumber": 270,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": "            return 0;"
      },
      {
        "lineNumber": 271,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": "        }"
      },
      {
        "lineNumber": 272,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": ""
      },
      {
        "lineNumber": 273,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 274,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": "        public AppSettings getAppSettings() {"
      },
      {
        "lineNumber": 275,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": "            return null;"
      },
      {
        "lineNumber": 276,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": "        }"
      },
      {
        "lineNumber": 277,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": ""
      },
      {
        "lineNumber": 278,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 279,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": "        public String getCurrentQuestion() {"
      },
      {
        "lineNumber": 280,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": "            return null;"
      },
      {
        "lineNumber": 281,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": "        }"
      },
      {
        "lineNumber": 282,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": ""
      },
      {
        "lineNumber": 283,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 284,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": "        public FormattedHint getHintFormatFromCurrentGame() {"
      },
      {
        "lineNumber": 285,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": "            return SINGLE_LETTER_CARD.clone().getHint();"
      },
      {
        "lineNumber": 286,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": "        }"
      },
      {
        "lineNumber": 287,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": ""
      },
      {
        "lineNumber": 288,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 289,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": "        public int getHintFormatSizeFromCurrentGame() {"
      },
      {
        "lineNumber": 290,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": "            return 0;"
      },
      {
        "lineNumber": 291,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": "        }"
      },
      {
        "lineNumber": 292,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": ""
      },
      {
        "lineNumber": 293,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 294,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": "        public boolean hintsAreEnabled() {"
      },
      {
        "lineNumber": 295,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 296,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": "        }"
      },
      {
        "lineNumber": 297,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": ""
      },
      {
        "lineNumber": 298,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 299,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": "        public List\u003cAutoFillAction\u003e getMenuItems(String text) {"
      },
      {
        "lineNumber": 300,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": "            return null;"
      },
      {
        "lineNumber": 301,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": "        }"
      },
      {
        "lineNumber": 302,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": ""
      },
      {
        "lineNumber": 303,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 304,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": "        public ModeEnum getMode() {"
      },
      {
        "lineNumber": 305,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": "            return null;"
      },
      {
        "lineNumber": 306,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": "        }"
      },
      {
        "lineNumber": 307,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": ""
      },
      {
        "lineNumber": 308,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 309,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": "        public List\u003cModeEnum\u003e getModes() {"
      },
      {
        "lineNumber": 310,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": "            return null;"
      },
      {
        "lineNumber": 311,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": "        }"
      },
      {
        "lineNumber": 312,
        "author": {
          "gitId": "chrischenhui"
        },
        "content": ""
      },
      {
        "lineNumber": 313,
        "author": {
          "gitId": "chrischenhui"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 314,
        "author": {
          "gitId": "chrischenhui"
        },
        "content": "        public Storage getStorage() {"
      },
      {
        "lineNumber": 315,
        "author": {
          "gitId": "chrischenhui"
        },
        "content": "            return null;"
      },
      {
        "lineNumber": 316,
        "author": {
          "gitId": "chrischenhui"
        },
        "content": "        }"
      },
      {
        "lineNumber": 317,
        "author": {
          "gitId": "chrischenhui"
        },
        "content": ""
      },
      {
        "lineNumber": 318,
        "author": {
          "gitId": "chrischenhui"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 319,
        "author": {
          "gitId": "chrischenhui"
        },
        "content": "        public Model getModel() {"
      },
      {
        "lineNumber": 320,
        "author": {
          "gitId": "chrischenhui"
        },
        "content": "            return null;"
      },
      {
        "lineNumber": 321,
        "author": {
          "gitId": "chrischenhui"
        },
        "content": "        }"
      },
      {
        "lineNumber": 322,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": "    }"
      },
      {
        "lineNumber": 323,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": ""
      },
      {
        "lineNumber": 324,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": "    private class HintDisplayStub {"
      },
      {
        "lineNumber": 325,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": "        private boolean isUpdatedFromGameTimer \u003d false;"
      },
      {
        "lineNumber": 326,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": ""
      },
      {
        "lineNumber": 327,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": "        void updateHintDisplay(String message) {"
      },
      {
        "lineNumber": 328,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": "            this.isUpdatedFromGameTimer \u003d true;"
      },
      {
        "lineNumber": 329,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": "        }"
      },
      {
        "lineNumber": 330,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": "    }"
      },
      {
        "lineNumber": 331,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": ""
      },
      {
        "lineNumber": 332,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": "    // Stub class for TimerDisplay component of UI"
      },
      {
        "lineNumber": 333,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": "    private class TimerDisplayStub {"
      },
      {
        "lineNumber": 334,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": "        private boolean isUpdatedFromGameTimer \u003d false;"
      },
      {
        "lineNumber": 335,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": ""
      },
      {
        "lineNumber": 336,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": "        void updateTimerDisplay(String timerMessage, long timeLeft, long totalTimeGiven) {"
      },
      {
        "lineNumber": 337,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": "            this.isUpdatedFromGameTimer \u003d true;"
      },
      {
        "lineNumber": 338,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": "        }"
      },
      {
        "lineNumber": 339,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": "    }"
      },
      {
        "lineNumber": 340,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": ""
      },
      {
        "lineNumber": 341,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": "    // Stub class for MainWindow component of UI"
      },
      {
        "lineNumber": 342,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": "    private class MainWindowStub {"
      },
      {
        "lineNumber": 343,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": "        private boolean isExecutedFromGameTimer \u003d false;"
      },
      {
        "lineNumber": 344,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": ""
      },
      {
        "lineNumber": 345,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": "        CommandResult execute(String commandText) {"
      },
      {
        "lineNumber": 346,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": "            isExecutedFromGameTimer \u003d true;"
      },
      {
        "lineNumber": 347,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": "            return null;"
      },
      {
        "lineNumber": 348,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": "        }"
      },
      {
        "lineNumber": 349,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": "    }"
      },
      {
        "lineNumber": 350,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": ""
      },
      {
        "lineNumber": 351,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": "    private class QuestionDisplayStub {"
      },
      {
        "lineNumber": 352,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": "        private boolean isExecutedFromAppManager \u003d false;"
      },
      {
        "lineNumber": 353,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": ""
      },
      {
        "lineNumber": 354,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": "        void updateQuestionDisplay(String message) {"
      },
      {
        "lineNumber": 355,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": "            isExecutedFromAppManager \u003d true;"
      },
      {
        "lineNumber": 356,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": "        }"
      },
      {
        "lineNumber": 357,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": "    }"
      },
      {
        "lineNumber": 358,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "chrischenhui": 12,
      "kohyida1997": 346
    }
  },
  {
    "path": "src/test/java/seedu/address/appmanager/GameTimerTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": "package seedu.address.appmanager;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": "import org.junit.jupiter.api.extension.ExtendWith;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": "import org.testfx.framework.junit5.ApplicationExtension;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": "import org.testfx.framework.junit5.Start;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": "import javafx.application.Platform;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": "import javafx.stage.Stage;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": "import seedu.address.appmanager.timer.GameTimer;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": "@ExtendWith(ApplicationExtension.class)"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": "public class GameTimerTest {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": "    private GameTimer dummyTimer;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": "    private AppManagerStub appManagerStub;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": "     * Initializes the JavaFX Application Thread when this test starts."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": "     */"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": "    @Start"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": "    public void start(Stage stage) {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": "    public void run() {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": "        Platform.runLater(() -\u003e {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": "            appManagerStub \u003d new AppManagerStub();"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": "            GameTimer.SkipOverCallBack dummySkipCallBack \u003d appManagerStub::skipOver;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": "            GameTimer.UpdateTimerCallBack dummyTimerCallBack \u003d appManagerStub::updateTimer;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": "            GameTimer.UpdateHintCallBack dummyHintCallBack \u003d appManagerStub::updateHints;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": "            dummyTimer \u003d GameTimer.getInstance(\"Dummy Message\","
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": "                    10, dummySkipCallBack, dummyTimerCallBack, dummyHintCallBack);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": "            dummyTimer.run();"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": "            try {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": "                Thread.sleep(100);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": "            } catch (InterruptedException e) {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": "                e.printStackTrace();"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": "            }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": "            Platform.runLater(() -\u003e {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": "                assertTrue(appManagerStub.skipCalled);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": "                assertTrue(appManagerStub.timerDisplayUpdated);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": "            });"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": "        });"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": "        // todo: create own implementation of clock that can support manual elapsing of time, to avoid using"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": "    }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": "    public void run_durationIsZero() {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": "        Platform.runLater(() -\u003e {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": "            appManagerStub \u003d new AppManagerStub();"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": "            GameTimer.SkipOverCallBack dummySkipCallBack \u003d appManagerStub::skipOver;"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": "            GameTimer.UpdateTimerCallBack dummyTimerCallBack \u003d appManagerStub::updateTimer;"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": "            GameTimer.UpdateHintCallBack dummyHintCallBack \u003d appManagerStub::updateHints;"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": "            dummyTimer \u003d GameTimer.getInstance(\"Dummy Message\","
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": "                    10, dummySkipCallBack, dummyTimerCallBack, dummyHintCallBack);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": "            dummyTimer.run();"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": "            Platform.runLater(() -\u003e {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": "                assertFalse(appManagerStub.skipCalled);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": "                assertFalse(appManagerStub.timerDisplayUpdated);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": "            });"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": "        });"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": "    }"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": "    public void abortTimer() {"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": "        Platform.runLater(() -\u003e {"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": "            appManagerStub \u003d new AppManagerStub();"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": "            GameTimer.SkipOverCallBack dummySkipCallBack \u003d appManagerStub::skipOver;"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": "            GameTimer.UpdateTimerCallBack dummyTimerCallBack \u003d appManagerStub::updateTimer;"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": "            GameTimer.UpdateHintCallBack dummyHintCallBack \u003d appManagerStub::updateHints;"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": "            dummyTimer \u003d GameTimer.getInstance(\"Dummy Message\","
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": "                    10, dummySkipCallBack, dummyTimerCallBack, dummyHintCallBack);"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": "            dummyTimer.abortTimer();"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": "            // abortTimer() is supposed to pass timeLeft \u003d 0 to the timerDisplay."
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": "            assertTrue(appManagerStub.timeLeftIsZero);"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": "        });"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": "    }"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": ""
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": ""
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": "    // Stub Class for AppManager\u0027s methods that will be called from GameTimer"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": "    private class AppManagerStub {"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": ""
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": "        private boolean skipCalled \u003d false;"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": "        private boolean hintsUpdated \u003d false;"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": "        private boolean timerDisplayUpdated \u003d false;"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": "        private boolean timeLeftIsZero \u003d false;"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": ""
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": "        private void skipOver() {"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": "            skipCalled \u003d true;"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": "        }"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": ""
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": "        private void updateHints() {"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": "            hintsUpdated \u003d true;"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": "        }"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": ""
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": "        private void updateTimer(String timerMessage, long timeLeft, long totalTimeGiven) {"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": "            timeLeftIsZero \u003d timeLeft \u003d\u003d 0 ? true : false;"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": "            timerDisplayUpdated \u003d true;"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": "        }"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": ""
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": "    }"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": ""
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "kohyida1997": 118
    }
  },
  {
    "path": "src/test/java/seedu/address/appmanager/timer/HintTimingQueueTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": "package seedu.address.appmanager.timer;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertThrows;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": "import java.util.LinkedList;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": "import java.util.Queue;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": "import seedu.address.model.appsettings.DifficultyEnum;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": "class HintTimingQueueTest {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": "    public void pollNextTimeToUpdate_queueSizeZero_throwsNullPointerException() {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": "        HintTimingQueue testQueue \u003d new HintTimingQueue(0, 1000);"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": "            testQueue.pollNextTimeToUpdate();"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": "        });"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": "    }"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": "    public void pollNextTimeToUpdate_queueSizeIsOne() {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": "        HintTimingQueue testQueue \u003d new HintTimingQueue(1, 1000);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": "        assertTrue(testQueue.pollNextTimeToUpdate() \u003d\u003d 50L);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": "    public void isEmpty() {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": "        HintTimingQueue testQueue \u003d new HintTimingQueue(2, 5000);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": "        assertFalse(testQueue.isEmpty());"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": "        testQueue.pollNextTimeToUpdate();"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": "        testQueue.pollNextTimeToUpdate();"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": "        assertTrue(testQueue.isEmpty());"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": "    void pollNextTimeToUpdate() {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": "        HintTimingQueue testQueue \u003d new HintTimingQueue(7, 5000);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": "        long expectedDelta \u003d (long) (DifficultyEnum.EASY.getTimeAllowedPerQuestion() * 0.75) / (7 - 1);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": "        Queue\u003cLong\u003e expectedTimings \u003d new LinkedList\u003c\u003e();"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": "        for (int i \u003d 0; i \u003c 7; i++) {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": "            long currentTiming \u003d (long) (5000 * 0.75) - (i * expectedDelta);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": "            if (currentTiming \u003c\u003d 0) {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": "                expectedTimings.add(50L); // Last Hint Shown at 50ms"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": "                expectedTimings.add(currentTiming);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": "            }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": "        }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": "        for (int i \u003d 0; i \u003c 7; i++) {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": "            assertEquals(expectedTimings.poll(), testQueue.pollNextTimeToUpdate());"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": "        }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": "    }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "kohyida1997": 61
    }
  },
  {
    "path": "src/test/java/seedu/address/commons/util/ConfigUtilTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.commons.util;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Paths;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.logging.Level;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.io.TempDir;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.Config;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.exceptions.DataConversionException;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "public class ConfigUtilTest {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final Path TEST_DATA_FOLDER \u003d Paths.get(\"src\", \"test\", \"data\", \"ConfigUtilTest\");"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    @TempDir"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    public Path tempDir;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    public void read_null_throwsNullPointerException() {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e read(null));"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    public void read_missingFile_emptyResult() throws DataConversionException {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(read(\"NonExistentFile.json\").isPresent());"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    public void read_notJsonFormat_exceptionThrown() {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(DataConversionException.class, () -\u003e read(\"NotJsonFormatConfig.json\"));"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    public void read_fileInOrder_successfullyRead() throws DataConversionException {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        Config expected \u003d getTypicalConfig();"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        Config actual \u003d read(\"TypicalConfig.json\").get();"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expected, actual);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    public void read_valuesMissingFromFile_defaultValuesUsed() throws DataConversionException {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        Config actual \u003d read(\"EmptyConfig.json\").get();"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(new Config(), actual);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    public void read_extraValuesInFile_extraValuesIgnored() throws DataConversionException {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "        Config expected \u003d getTypicalConfig();"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "        Config actual \u003d read(\"ExtraValuesConfig.json\").get();"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expected, actual);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "    private Config getTypicalConfig() {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "        Config config \u003d new Config();"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "        config.setLogLevel(Level.INFO);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "        config.setUserPrefsFilePath(Paths.get(\"preferences.json\"));"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "        return config;"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "    private Optional\u003cConfig\u003e read(String configFileInTestDataFolder) throws DataConversionException {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "        Path configFilePath \u003d addToTestDataPathIfNotNull(configFileInTestDataFolder);"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "        return ConfigUtil.readConfig(configFilePath);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "    public void save_nullConfig_throwsNullPointerException() {"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e save(null, \"SomeFile.json\"));"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "    public void save_nullFile_throwsNullPointerException() {"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e save(new Config(), null));"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "    public void saveConfig_allInOrder_success() throws DataConversionException, IOException {"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "        Config original \u003d getTypicalConfig();"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "        Path configFilePath \u003d tempDir.resolve(\"TempConfig.json\");"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "        //Try writing when the file doesn\u0027t exist"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "        ConfigUtil.saveConfig(original, configFilePath);"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "        Config readBack \u003d ConfigUtil.readConfig(configFilePath).get();"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(original, readBack);"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "        //Try saving when the file exists"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "        original.setLogLevel(Level.FINE);"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "        ConfigUtil.saveConfig(original, configFilePath);"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "        readBack \u003d ConfigUtil.readConfig(configFilePath).get();"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(original, readBack);"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "    private void save(Config config, String configFileInTestDataFolder) throws IOException {"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "chrischenhui"
        },
        "content": "        Path configFilePath \u003d Paths.get(\"test/data/ConfigUtilTest\","
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "chrischenhui"
        },
        "content": "                addToTestDataPathIfNotNull(configFileInTestDataFolder).toString());"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "        ConfigUtil.saveConfig(config, configFilePath);"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "    private Path addToTestDataPathIfNotNull(String configFileInTestDataFolder) {"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "        return configFileInTestDataFolder !\u003d null"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "                ? TEST_DATA_FOLDER.resolve(configFileInTestDataFolder)"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "                : null;"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "chrischenhui": 2,
      "-": 115
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/LogicManagerTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_UNKNOWN_COMMAND;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "chrischenhui"
        },
        "content": "import java.nio.file.Paths;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.BeforeEach;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "chrischenhui"
        },
        "content": "//import seedu.address.logic.commands.CommandResult;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "chrischenhui"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "chrischenhui"
        },
        "content": "//import seedu.address.logic.commands.switches.HomeCommand;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "chrischenhui"
        },
        "content": "//import seedu.address.logic.commands.switches.OpenCommand;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "chrischenhui"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "chrischenhui"
        },
        "content": "import seedu.address.commons.exceptions.DataConversionException;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "chrischenhui"
        },
        "content": "import seedu.address.commons.exceptions.IllegalValueException;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.ModelManager;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "jascxx"
        },
        "content": "import seedu.address.model.wordbank.ReadOnlyWordBank;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.storage.StorageManager;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": "import seedu.address.storage.appsettings.AppSettingsStorage;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": "import seedu.address.storage.appsettings.JsonAppSettingsStorage;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": "import seedu.address.storage.globalstatistics.GlobalStatisticsStorage;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": "import seedu.address.storage.globalstatistics.JsonGlobalStatisticsStorage;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": "import seedu.address.storage.statistics.JsonWordBankStatisticsListStorage;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": "import seedu.address.storage.statistics.WordBankStatisticsListStorage;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": "import seedu.address.storage.userprefs.JsonUserPrefsStorage;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "chrischenhui"
        },
        "content": "import seedu.address.storage.wordbanks.JsonWordBankListStorage;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "public class LogicManagerTest {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final IOException DUMMY_IO_EXCEPTION \u003d new IOException(\"dummy exception\");"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "chrischenhui"
        },
        "content": "    private Path temporaryFolder \u003d"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "chrischenhui"
        },
        "content": "            Paths.get(\"src\", \"test\", \"data\", \"LogicManagerTest\");"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "chrischenhui"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    private Model model \u003d new ModelManager();"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    private Logic logic;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    @BeforeEach"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "chrischenhui"
        },
        "content": "    public void setUp() throws DataConversionException, IllegalValueException {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": "        JsonWordBankListStorage addressBookStorage \u003d"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "chrischenhui"
        },
        "content": "                new JsonWordBankListStorage(temporaryFolder);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "        JsonUserPrefsStorage userPrefsStorage \u003d new JsonUserPrefsStorage(temporaryFolder.resolve(\"userPrefs.json\"));"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": "        WordBankStatisticsListStorage wordBankStatisticsListStorage \u003d"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": "               new JsonWordBankStatisticsListStorage(Path.of(\"dummyWbStats\"));"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": "        GlobalStatisticsStorage globalStatisticsStorage \u003d"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": "               new JsonGlobalStatisticsStorage(Path.of(\"dummyWbStats\"));"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": "        AppSettingsStorage appSettingsStorage \u003d"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": "               new JsonAppSettingsStorage(Path.of(\"dummyWbStats\"));"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": "        StorageManager storage \u003d new StorageManager(addressBookStorage,"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": "                    userPrefsStorage, wordBankStatisticsListStorage,"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": "                    globalStatisticsStorage, appSettingsStorage);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "        logic \u003d new LogicManager(model, storage);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_invalidCommandFormat_throwsParseException() {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "        String invalidCommand \u003d \"uicfhmowqewca\";"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseException(invalidCommand, MESSAGE_UNKNOWN_COMMAND);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "chrischenhui"
        },
        "content": "    //    @Test"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "chrischenhui"
        },
        "content": "    //    public void execute_commandExecutionError_throwsCommandException() {"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": "    //        String bankCommand \u003d \"bank\";"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": "    //        assertCommandException(bankCommand, MESSAGE_INVALID_CARD_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "chrischenhui"
        },
        "content": "    //    }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "chrischenhui"
        },
        "content": "    //"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "chrischenhui"
        },
        "content": "    //    @Test"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "chrischenhui"
        },
        "content": "    //    public void execute_validCommand_success() throws Exception {"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "chrischenhui"
        },
        "content": "    //        String bankBypass \u003d \"bank 123\";"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "chrischenhui"
        },
        "content": "    //        logic.execute(bankBypass);"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "chrischenhui"
        },
        "content": "    //        String homeCommand \u003d HomeCommand.COMMAND_WORD;"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "chrischenhui"
        },
        "content": "    //        String openCommand \u003d OpenCommand.COMMAND_WORD;"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "chrischenhui"
        },
        "content": "    //        CommandResult homeResult \u003d logic.execute(homeCommand);"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "chrischenhui"
        },
        "content": "    //        assertEquals(HomeCommand.MESSAGE_HOME_ACKNOWLEDGEMENT, homeResult.getFeedbackToUser());"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "chrischenhui"
        },
        "content": "    //        CommandResult openResult \u003d logic.execute(openCommand);"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "chrischenhui"
        },
        "content": "    //        assertEquals(OpenCommand.MESSAGE_HOME_ACKNOWLEDGEMENT, openResult.getFeedbackToUser());"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "chrischenhui"
        },
        "content": "    //        assertEquals(model, model);"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "chrischenhui"
        },
        "content": "    //    }"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "jascxx"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "jascxx"
        },
        "content": "    //    todo: storage test"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "jascxx"
        },
        "content": "    //    @Test"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "jascxx"
        },
        "content": "    //    public void execute_storageThrowsIoException_throwsCommandException() {"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "chrischenhui"
        },
        "content": "    //        // Setup LogicManager with JsonWordBankListIoExceptionThrowingStub"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "chrischenhui"
        },
        "content": "    //        JsonWordBankListStorage addressBookStorage \u003d new JsonWordBankListIoExceptionThrowingStub("
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "jascxx"
        },
        "content": "    //                temporaryFolder.resolve(\"ioExceptionAddressBook.json\"));"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "jascxx"
        },
        "content": "    //        JsonUserPrefsStorage userPrefsStorage \u003d"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "jascxx"
        },
        "content": "    //                new JsonUserPrefsStorage(temporaryFolder.resolve(\"ioExceptionUserPrefs.json\"));"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "jascxx"
        },
        "content": "    //        StorageManager storage \u003d new StorageManager(addressBookStorage, userPrefsStorage);"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "jascxx"
        },
        "content": "    //        logic \u003d new LogicManager(model, storage);"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "jascxx"
        },
        "content": "    //"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "jascxx"
        },
        "content": "    //        // Execute add command"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "jascxx"
        },
        "content": "    //        String addCommand \u003d AddCommand.COMMAND_WORD + WORD_DESC_ABRA + MEANING_DESC_ABRA;"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "jascxx"
        },
        "content": "    //        Card expectedPerson \u003d new CardBuilder(ABRA).withTags().build();"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "jascxx"
        },
        "content": "    //        ModelManager expectedModel \u003d new ModelManager();"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "chrischenhui"
        },
        "content": "    //        expectedModel.addBank(expectedPerson);"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "jascxx"
        },
        "content": "    //        String expectedMessage \u003d LogicManager.FILE_OPS_ERROR_MESSAGE + DUMMY_IO_EXCEPTION;"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "jascxx"
        },
        "content": "    //        assertCommandFailure(addCommand, CommandException.class, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "jascxx"
        },
        "content": "    //  }"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "jascxx"
        },
        "content": ""
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "dragontho"
        },
        "content": "    //    @Test"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "dragontho"
        },
        "content": "    //    public void getFilteredPersonList_modifyList_throwsUnsupportedOperationException() {"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "dragontho"
        },
        "content": "    //        assertThrows(UnsupportedOperationException.class, () -\u003e logic.getFilteredPersonList().remove(0));"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "dragontho"
        },
        "content": "    //    }"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "     * Executes the command and confirms that"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "     * - no exceptions are thrown \u003cbr\u003e"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "     * - the feedback message is equal to {@code expectedMessage} \u003cbr\u003e"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "     * - the internal model manager state is the same as that in {@code expectedModel} \u003cbr\u003e"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": "     *"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "     * @see #assertCommandFailure(String, Class, String, Model)"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": "    /*"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertCommandSuccess(String inputCommand, String expectedMessage,"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": "                                      Model expectedModel) throws CommandException, ParseException {"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": ""
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": "    */"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "     * Executes the command, confirms that a ParseException is thrown and that the result message is correct."
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "chrischenhui"
        },
        "content": "     *"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "     * @see #assertCommandFailure(String, Class, String, Model)"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertParseException(String inputCommand, String expectedMessage) {"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandFailure(inputCommand, ParseException.class, expectedMessage);"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": "     * Executes the command, confirms that a CommandException is thrown and that the result message is correct."
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "chrischenhui"
        },
        "content": "     *"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": "     * @see #assertCommandFailure(String, Class, String, Model)"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertCommandException(String inputCommand, String expectedMessage) {"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandFailure(inputCommand, CommandException.class, expectedMessage);"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": "     * Executes the command, confirms that the exception is thrown and that the result message is correct."
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "chrischenhui"
        },
        "content": "     *"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": "     * @see #assertCommandFailure(String, Class, String, Model)"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertCommandFailure(String inputCommand, Class\u003c? extends Throwable\u003e expectedException,"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "jascxx"
        },
        "content": "                                      String expectedMessage) {"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "chrischenhui"
        },
        "content": "        Model expectedModel \u003d new ModelManager();"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandFailure(inputCommand, expectedException, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "-"
        },
        "content": "     * Executes the command and confirms that"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "-"
        },
        "content": "     * - the {@code expectedException} is thrown \u003cbr\u003e"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "-"
        },
        "content": "     * - the resulting error message is equal to {@code expectedMessage} \u003cbr\u003e"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "-"
        },
        "content": "     * - the internal model manager state is the same as that in {@code expectedModel} \u003cbr\u003e"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "chrischenhui"
        },
        "content": "     *"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertCommandFailure(String inputCommand, Class\u003c? extends Throwable\u003e expectedException,"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "jascxx"
        },
        "content": "                                      String expectedMessage, Model expectedModel) {"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(expectedException, expectedMessage, () -\u003e logic.execute(inputCommand));"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expectedModel, model);"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "-"
        },
        "content": "     * A stub class to throw an {@code IOException} when the save method is called."
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "chrischenhui"
        },
        "content": "    private static class JsonWordBankListIoExceptionThrowingStub extends JsonWordBankListStorage {"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "chrischenhui"
        },
        "content": "        private JsonWordBankListIoExceptionThrowingStub(Path filePath)"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "chrischenhui"
        },
        "content": "                throws DataConversionException, IllegalValueException {"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "-"
        },
        "content": "            super(filePath);"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "chrischenhui"
        },
        "content": "        private void saveWordBanks(ReadOnlyWordBank addressBook, Path filePath) throws IOException {"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "-"
        },
        "content": "            throw DUMMY_IO_EXCEPTION;"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "dragontho": 4,
      "jascxx": 21,
      "chrischenhui": 42,
      "kohyida1997": 24,
      "-": 93
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/commands/AddCommandIntegrationTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.BeforeEach;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.ModelManager;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": " * Contains integration tests (interaction with the Model) for {@code AddCommand}."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "public class AddCommandIntegrationTest {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "    private Model model;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    @BeforeEach"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setUp() {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "chrischenhui"
        },
        "content": "        model \u003d new ModelManager();"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "chrischenhui"
        },
        "content": "    //    @Test"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "chrischenhui"
        },
        "content": "    //    public void execute_newPerson_success() {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "chrischenhui"
        },
        "content": "    //        Card validPerson \u003d new CardBuilder().build();"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "chrischenhui"
        },
        "content": "    //"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "chrischenhui"
        },
        "content": "    //        Model expectedModel \u003d model \u003d new ModelManager();"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "chrischenhui"
        },
        "content": "    //"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "chrischenhui"
        },
        "content": "    //        expectedModel.addCard(validPerson);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "chrischenhui"
        },
        "content": "    //"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "chrischenhui"
        },
        "content": "    //        assertCommandSuccess(new AddCommand(validPerson), model,"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "chrischenhui"
        },
        "content": "    //                String.format(AddCommand.MESSAGE_SUCCESS, validPerson), expectedModel);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "chrischenhui"
        },
        "content": "    //    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "jascxx"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "dragontho"
        },
        "content": "    //    @Test"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "dragontho"
        },
        "content": "    //    public void execute_duplicatePerson_throwsCommandException() {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "chrischenhui"
        },
        "content": "    //        Card personInList \u003d model.toModelType().getCardList().get(0);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "dragontho"
        },
        "content": "    //        assertCommandFailure(new AddCommand(personInList), model, AddCommand.MESSAGE_DUPLICATE_CARD);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "dragontho"
        },
        "content": "    //    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "dragontho": 4,
      "jascxx": 1,
      "chrischenhui": 13,
      "-": 20
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/commands/AddCommandTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "jascxx"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "jascxx"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertNotEquals;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.function.Predicate;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.GuiSettings;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "chrischenhui"
        },
        "content": "import seedu.address.logic.commands.cardcommands.AddCommand;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "dragontho"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.ReadOnlyUserPrefs;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "dragontho"
        },
        "content": "import seedu.address.model.appsettings.AppSettings;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "dragontho"
        },
        "content": "import seedu.address.model.appsettings.DifficultyEnum;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "dragontho"
        },
        "content": "import seedu.address.model.appsettings.ThemeEnum;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "jascxx"
        },
        "content": "import seedu.address.model.card.Card;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": "import seedu.address.model.card.FormattedHint;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": "import seedu.address.model.game.Game;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "jascxx"
        },
        "content": "import seedu.address.model.globalstatistics.GlobalStatistics;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "jascxx"
        },
        "content": "import seedu.address.model.wordbank.ReadOnlyWordBank;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "jascxx"
        },
        "content": "import seedu.address.model.wordbank.WordBank;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "dragontho"
        },
        "content": "import seedu.address.model.wordbanklist.WordBankList;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "dragontho"
        },
        "content": "import seedu.address.model.wordbankstatslist.WordBankStatisticsList;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "dragontho"
        },
        "content": "import seedu.address.statistics.WordBankStatistics;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "jascxx"
        },
        "content": "import seedu.address.testutil.CardBuilder;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "public class AddCommandTest {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "jascxx"
        },
        "content": "    public void constructor_nullCard_throwsNullPointerException() {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e new AddCommand(null));"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "jascxx"
        },
        "content": "    public void execute_cardAcceptedByModel_addSuccessful() throws Exception {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "jascxx"
        },
        "content": "        ModelStubAcceptingCardAdded modelStub \u003d new ModelStubAcceptingCardAdded();"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "jascxx"
        },
        "content": "        Card validCard \u003d new CardBuilder().build();"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "jascxx"
        },
        "content": "        CommandResult commandResult \u003d new AddCommand(validCard).execute(modelStub);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "jascxx"
        },
        "content": "        assertEquals(String.format(AddCommand.MESSAGE_SUCCESS, validCard), commandResult.getFeedbackToUser());"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "jascxx"
        },
        "content": "        assertEquals(Arrays.asList(validCard), modelStub.cardsAdded);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "dragontho"
        },
        "content": "    //    @Test"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "dragontho"
        },
        "content": "    //    public void execute_duplicateCard_throwsCommandException() {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "dragontho"
        },
        "content": "    //        Card validCard \u003d new CardBuilder().build();"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "dragontho"
        },
        "content": "    //        AddCommand addCommand \u003d new AddCommand(validCard);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "dragontho"
        },
        "content": "    //        ModelStub modelStub \u003d new ModelStubWithCard(validCard);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "dragontho"
        },
        "content": "    //"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "dragontho"
        },
        "content": "    //     assertThrows(CommandException.class, AddCommand.MESSAGE_DUPLICATE_CARD, () -\u003e addCommand.execute(modelStub));"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "dragontho"
        },
        "content": "    //    }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "jascxx"
        },
        "content": "        Card abra \u003d new CardBuilder().withWord(\"Abra\").build();"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "jascxx"
        },
        "content": "        Card butterfree \u003d new CardBuilder().withWord(\"Butterfree\").build();"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "jascxx"
        },
        "content": "        AddCommand addAbraCommand \u003d new AddCommand(abra);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "jascxx"
        },
        "content": "        AddCommand addButterfreeCommand \u003d new AddCommand(butterfree);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "jascxx"
        },
        "content": "        assertEquals(addAbraCommand, addAbraCommand);"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "        // same values -\u003e returns true"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "jascxx"
        },
        "content": "        AddCommand addAliceCommandCopy \u003d new AddCommand(abra);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "jascxx"
        },
        "content": "        assertEquals(addAbraCommand, addAliceCommandCopy);"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "        // different types -\u003e returns false"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "jascxx"
        },
        "content": "        assertNotEquals(1, addAbraCommand);"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "jascxx"
        },
        "content": "        assertNotEquals(null, addAbraCommand);"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "jascxx"
        },
        "content": "        // different Card -\u003e returns false"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "jascxx"
        },
        "content": "        assertNotEquals(addAbraCommand, addButterfreeCommand);"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "     * A default model stub that have all of the methods failing."
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "    private class ModelStub implements Model {"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": "        public void setGame(Game game) {"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": "        }"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": ""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": "        public Game getGame() {"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": "            return null;"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": "        }"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": ""
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "chrischenhui"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "chrischenhui"
        },
        "content": "        public boolean hasWordBank(String name) {"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "chrischenhui"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "chrischenhui"
        },
        "content": "        }"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "chrischenhui"
        },
        "content": ""
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "chrischenhui"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "chrischenhui"
        },
        "content": "        public WordBank getWordBankFromName(String name) {"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "chrischenhui"
        },
        "content": "            return null;"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "chrischenhui"
        },
        "content": "        }"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "chrischenhui"
        },
        "content": ""
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": "        public boolean gameIsOver() {"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": "        }"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": ""
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "dragontho"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "chrischenhui"
        },
        "content": "        public boolean getHasBank() {"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "dragontho"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "dragontho"
        },
        "content": "        }"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "dragontho"
        },
        "content": ""
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "dragontho"
        },
        "content": "        public AppSettings getAppSettings() {"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "dragontho"
        },
        "content": "            return null;"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "dragontho"
        },
        "content": "        }"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "dragontho"
        },
        "content": ""
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "dragontho"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "dragontho"
        },
        "content": "        public Path getAppSettingsFilePath() {"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "dragontho"
        },
        "content": "            return null;"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "dragontho"
        },
        "content": "        }"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "dragontho"
        },
        "content": ""
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "dragontho"
        },
        "content": "        public void setDefaultDifficulty(DifficultyEnum difficultyEnum) {"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": ""
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": "        }"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": ""
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "dragontho"
        },
        "content": "        public DifficultyEnum getDefaultDifficulty() {"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": "            return null;"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": "        }"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "jascxx"
        },
        "content": ""
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "jascxx"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "jascxx"
        },
        "content": "        public DifficultyEnum getCurrentGameDifficulty() {"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "jascxx"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "jascxx"
        },
        "content": "        }"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": ""
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "dragontho"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "dragontho"
        },
        "content": "        public void setDefaultTheme(ThemeEnum themeEnum) {"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": ""
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": "        }"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": ""
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "dragontho"
        },
        "content": "        public ThemeEnum getDefaultTheme() {"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": "            return null;"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": "        }"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": ""
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "dragontho"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "dragontho"
        },
        "content": "        public void setHintsEnabled(boolean enabled) {"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "dragontho"
        },
        "content": ""
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "dragontho"
        },
        "content": "        }"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "dragontho"
        },
        "content": ""
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": "        public long getTimeAllowedPerQuestion() {"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": "            return 0;"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": "        }"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": ""
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": "        public FormattedHint getHintFormatFromCurrentGame() {"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": "            return null;"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": "        }"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": ""
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": "        public int getHintFormatSizeFromCurrentGame() {"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": "            return 0;"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": "        }"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": ""
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": "        public boolean getHintsEnabled() {"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": "        }"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": ""
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "dragontho"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "dragontho"
        },
        "content": "        public void setAvatarId(int avatarId) {"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "dragontho"
        },
        "content": ""
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "dragontho"
        },
        "content": "        }"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "dragontho"
        },
        "content": ""
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "dragontho"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "dragontho"
        },
        "content": "        public int getAvatarId() {"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "dragontho"
        },
        "content": "            return 0;"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "dragontho"
        },
        "content": "        }"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "dragontho"
        },
        "content": ""
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "-"
        },
        "content": "        public void setUserPrefs(ReadOnlyUserPrefs userPrefs) {"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "-"
        },
        "content": "        public ReadOnlyUserPrefs getUserPrefs() {"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "-"
        },
        "content": "        public GuiSettings getGuiSettings() {"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "-"
        },
        "content": "        public void setGuiSettings(GuiSettings guiSettings) {"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "jascxx"
        },
        "content": "        public Path getWordBankFilePath() {"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "jascxx"
        },
        "content": "        public void setWordBankFilePath(Path addressBookFilePath) {"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "jascxx"
        },
        "content": "        public void addCard(Card card) {"
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "dragontho"
        },
        "content": "        public void setCurrentWordBank(ReadOnlyWordBank newData) {"
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "chrischenhui"
        },
        "content": "        public void updateWordBank(String name) {"
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "chrischenhui"
        },
        "content": ""
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "chrischenhui"
        },
        "content": "        }"
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "chrischenhui"
        },
        "content": ""
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "dragontho"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "dragontho"
        },
        "content": "        public WordBankStatistics getWordBankStatistics() {"
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "dragontho"
        },
        "content": "            return null;"
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "dragontho"
        },
        "content": "        }"
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "dragontho"
        },
        "content": ""
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "dragontho"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "dragontho"
        },
        "content": "        public void setWordBankStatistics(WordBankStatistics wordBankStats) {"
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "dragontho"
        },
        "content": ""
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "dragontho"
        },
        "content": "        }"
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "dragontho"
        },
        "content": ""
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "dragontho"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "dragontho"
        },
        "content": "        public void clearWordBankStatistics() {"
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "dragontho"
        },
        "content": ""
      },
      {
        "lineNumber": 248,
        "author": {
          "gitId": "dragontho"
        },
        "content": "        }"
      },
      {
        "lineNumber": 249,
        "author": {
          "gitId": "dragontho"
        },
        "content": ""
      },
      {
        "lineNumber": 250,
        "author": {
          "gitId": "dragontho"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 251,
        "author": {
          "gitId": "dragontho"
        },
        "content": "        public void clearWordBank() {"
      },
      {
        "lineNumber": 252,
        "author": {
          "gitId": "dragontho"
        },
        "content": ""
      },
      {
        "lineNumber": 253,
        "author": {
          "gitId": "dragontho"
        },
        "content": "        }"
      },
      {
        "lineNumber": 254,
        "author": {
          "gitId": "dragontho"
        },
        "content": ""
      },
      {
        "lineNumber": 255,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 256,
        "author": {
          "gitId": "dragontho"
        },
        "content": "        public ReadOnlyWordBank getCurrentWordBank() {"
      },
      {
        "lineNumber": 257,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 258,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 259,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 260,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 261,
        "author": {
          "gitId": "jascxx"
        },
        "content": "        public boolean hasCard(Card card) {"
      },
      {
        "lineNumber": 262,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 263,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 264,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 265,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 266,
        "author": {
          "gitId": "jascxx"
        },
        "content": "        public void deleteCard(Card target) {"
      },
      {
        "lineNumber": 267,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 268,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 269,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 270,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 271,
        "author": {
          "gitId": "jascxx"
        },
        "content": "        public void setCard(Card target, Card editedCard) {"
      },
      {
        "lineNumber": 272,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 273,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 274,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 275,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 276,
        "author": {
          "gitId": "jascxx"
        },
        "content": "        public ObservableList\u003cCard\u003e getFilteredCardList() {"
      },
      {
        "lineNumber": 277,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 278,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 279,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 280,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 281,
        "author": {
          "gitId": "dragontho"
        },
        "content": "        public ObservableList\u003cWordBank\u003e getFilteredWordBankList() {"
      },
      {
        "lineNumber": 282,
        "author": {
          "gitId": "dragontho"
        },
        "content": "            return null;"
      },
      {
        "lineNumber": 283,
        "author": {
          "gitId": "dragontho"
        },
        "content": "        }"
      },
      {
        "lineNumber": 284,
        "author": {
          "gitId": "dragontho"
        },
        "content": ""
      },
      {
        "lineNumber": 285,
        "author": {
          "gitId": "dragontho"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 286,
        "author": {
          "gitId": "dragontho"
        },
        "content": "        public WordBankList getWordBankList() {"
      },
      {
        "lineNumber": 287,
        "author": {
          "gitId": "dragontho"
        },
        "content": "            return null;"
      },
      {
        "lineNumber": 288,
        "author": {
          "gitId": "dragontho"
        },
        "content": "        }"
      },
      {
        "lineNumber": 289,
        "author": {
          "gitId": "dragontho"
        },
        "content": ""
      },
      {
        "lineNumber": 290,
        "author": {
          "gitId": "dragontho"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 291,
        "author": {
          "gitId": "dragontho"
        },
        "content": "        public WordBankStatisticsList getWordBankStatisticsList() {"
      },
      {
        "lineNumber": 292,
        "author": {
          "gitId": "dragontho"
        },
        "content": "            return null;"
      },
      {
        "lineNumber": 293,
        "author": {
          "gitId": "dragontho"
        },
        "content": "        }"
      },
      {
        "lineNumber": 294,
        "author": {
          "gitId": "dragontho"
        },
        "content": ""
      },
      {
        "lineNumber": 295,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 296,
        "author": {
          "gitId": "jascxx"
        },
        "content": "        public void updateFilteredCardList(Predicate\u003cCard\u003e predicate) {"
      },
      {
        "lineNumber": 297,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 298,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 299,
        "author": {
          "gitId": "chrischenhui"
        },
        "content": ""
      },
      {
        "lineNumber": 300,
        "author": {
          "gitId": "jascxx"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 301,
        "author": {
          "gitId": "jascxx"
        },
        "content": "        public GlobalStatistics getGlobalStatistics() {"
      },
      {
        "lineNumber": 302,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 303,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 304,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 305,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 306,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 307,
        "author": {
          "gitId": "jascxx"
        },
        "content": "     * A Model stub that contains a single card."
      },
      {
        "lineNumber": 308,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 309,
        "author": {
          "gitId": "jascxx"
        },
        "content": "    private class ModelStubWithCard extends ModelStub {"
      },
      {
        "lineNumber": 310,
        "author": {
          "gitId": "jascxx"
        },
        "content": "        private final Card card;"
      },
      {
        "lineNumber": 311,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 312,
        "author": {
          "gitId": "jascxx"
        },
        "content": "        ModelStubWithCard(Card card) {"
      },
      {
        "lineNumber": 313,
        "author": {
          "gitId": "jascxx"
        },
        "content": "            requireNonNull(card);"
      },
      {
        "lineNumber": 314,
        "author": {
          "gitId": "jascxx"
        },
        "content": "            this.card \u003d card;"
      },
      {
        "lineNumber": 315,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 316,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 317,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 318,
        "author": {
          "gitId": "jascxx"
        },
        "content": "        public boolean hasCard(Card card) {"
      },
      {
        "lineNumber": 319,
        "author": {
          "gitId": "jascxx"
        },
        "content": "            requireNonNull(card);"
      },
      {
        "lineNumber": 320,
        "author": {
          "gitId": "jascxx"
        },
        "content": "            return this.card.isSameMeaning(card);"
      },
      {
        "lineNumber": 321,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 322,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 323,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 324,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 325,
        "author": {
          "gitId": "jascxx"
        },
        "content": "     * A Model stub that always accept the card being added."
      },
      {
        "lineNumber": 326,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 327,
        "author": {
          "gitId": "jascxx"
        },
        "content": "    private class ModelStubAcceptingCardAdded extends ModelStub {"
      },
      {
        "lineNumber": 328,
        "author": {
          "gitId": "jascxx"
        },
        "content": "        final ArrayList\u003cCard\u003e cardsAdded \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 329,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 330,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 331,
        "author": {
          "gitId": "jascxx"
        },
        "content": "        public boolean hasCard(Card card) {"
      },
      {
        "lineNumber": 332,
        "author": {
          "gitId": "jascxx"
        },
        "content": "            requireNonNull(card);"
      },
      {
        "lineNumber": 333,
        "author": {
          "gitId": "jascxx"
        },
        "content": "            return cardsAdded.stream().anyMatch(card::isSameMeaning);"
      },
      {
        "lineNumber": 334,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 335,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 336,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 337,
        "author": {
          "gitId": "jascxx"
        },
        "content": "        public void addCard(Card card) {"
      },
      {
        "lineNumber": 338,
        "author": {
          "gitId": "jascxx"
        },
        "content": "            requireNonNull(card);"
      },
      {
        "lineNumber": 339,
        "author": {
          "gitId": "jascxx"
        },
        "content": "            cardsAdded.add(card);"
      },
      {
        "lineNumber": 340,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 341,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 342,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 343,
        "author": {
          "gitId": "dragontho"
        },
        "content": "        public ReadOnlyWordBank getCurrentWordBank() {"
      },
      {
        "lineNumber": 344,
        "author": {
          "gitId": "jascxx"
        },
        "content": "            return new WordBank(\"abc\");"
      },
      {
        "lineNumber": 345,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 346,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 347,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "dragontho": 85,
      "jascxx": 59,
      "chrischenhui": 17,
      "kohyida1997": 52,
      "-": 134
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/commands/ClearCommandTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "chrischenhui"
        },
        "content": "//import static seedu.address.logic.commands.CommandTestUtil.assertCommandSuccess;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "dragontho"
        },
        "content": "//import static seedu.address.testutil.TypicalCards.getTypicalWordBank;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "chrischenhui"
        },
        "content": "//import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "chrischenhui"
        },
        "content": "//import seedu.address.logic.commands.appcommands.ClearCommand;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "chrischenhui"
        },
        "content": "//import seedu.address.model.Model;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "chrischenhui"
        },
        "content": "//import seedu.address.model.ModelManager;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "dragontho"
        },
        "content": "//import seedu.address.model.UserPrefs;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "dragontho"
        },
        "content": "//import seedu.address.model.wordbank.WordBank;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "public class ClearCommandTest {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "chrischenhui"
        },
        "content": "    //    @Test"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "chrischenhui"
        },
        "content": "    //    public void execute_emptyAddressBook_success() {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "chrischenhui"
        },
        "content": "    //        Model model \u003d new ModelManager();"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "chrischenhui"
        },
        "content": "    //        Model expectedModel \u003d new ModelManager();"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "chrischenhui"
        },
        "content": "    //"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "chrischenhui"
        },
        "content": "    //        assertCommandSuccess(new ClearCommand(), model, ClearCommand.MESSAGE_SUCCESS, expectedModel);"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "chrischenhui"
        },
        "content": "    //    }"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "jascxx"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "dragontho"
        },
        "content": "    //    @Test"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "dragontho"
        },
        "content": "    //    public void execute_nonEmptyAddressBook_success() {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "dragontho"
        },
        "content": "    //        Model model \u003d new ModelManager(getTypicalWordBank(), new UserPrefs());"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "dragontho"
        },
        "content": "    //        Model expectedModel \u003d new ModelManager(getTypicalWordBank(), new UserPrefs());"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "dragontho"
        },
        "content": "    //        expectedModel.setWordBank(new WordBank(\"abc\"));"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "dragontho"
        },
        "content": "    //"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "dragontho"
        },
        "content": "    //        assertCommandSuccess(new ClearCommand(), model, ClearCommand.MESSAGE_SUCCESS, expectedModel);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "dragontho"
        },
        "content": "    //    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "dragontho": 11,
      "jascxx": 1,
      "chrischenhui": 12,
      "-": 9
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/commands/CommandResultTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertNotEquals;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "public class CommandResultTest {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "        CommandResult commandResult \u003d new CommandResult(\"feedback\");"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "        // same values -\u003e returns true"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "jascxx"
        },
        "content": "        assertEquals(commandResult, new CommandResult(\"feedback\"));"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "jascxx"
        },
        "content": "        assertEquals(commandResult, new CommandResult(\"feedback\", false, false));"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "jascxx"
        },
        "content": "        assertEquals(commandResult, commandResult);"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "jascxx"
        },
        "content": "        assertNotEquals(null, commandResult);"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "        // different types -\u003e returns false"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "jascxx"
        },
        "content": "        assertNotEquals(0.5f, commandResult);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "        // different feedbackToUser value -\u003e returns false"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "jascxx"
        },
        "content": "        assertNotEquals(commandResult, new CommandResult(\"different\"));"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        // different showHelp value -\u003e returns false"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "jascxx"
        },
        "content": "        assertNotEquals(commandResult, new CommandResult(\"feedback\", true, false));"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        // different exit value -\u003e returns false"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "jascxx"
        },
        "content": "        assertNotEquals(commandResult, new CommandResult(\"feedback\", false, true));"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    public void hashcode() {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        CommandResult commandResult \u003d new CommandResult(\"feedback\");"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "        // same values -\u003e returns same hashcode"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(commandResult.hashCode(), new CommandResult(\"feedback\").hashCode());"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        // different feedbackToUser value -\u003e returns different hashcode"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        assertNotEquals(commandResult.hashCode(), new CommandResult(\"different\").hashCode());"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        // different showHelp value -\u003e returns different hashcode"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        assertNotEquals(commandResult.hashCode(), new CommandResult(\"feedback\", true, false).hashCode());"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        // different exit value -\u003e returns different hashcode"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "        assertNotEquals(commandResult.hashCode(), new CommandResult(\"feedback\", false, true).hashCode());"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "jascxx": 8,
      "-": 44
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/commands/CommandTestUtil.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "jascxx"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_MEANING;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_TAG;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "jascxx"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_WORD;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "dragontho"
        },
        "content": "//import static seedu.address.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "dragontho"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "dragontho"
        },
        "content": "//import java.util.ArrayList;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "dragontho"
        },
        "content": "//import java.util.List;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "chrischenhui"
        },
        "content": "import seedu.address.logic.commands.cardcommands.EditCommand;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "sreesubbash"
        },
        "content": "import seedu.address.model.card.Card;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "sreesubbash"
        },
        "content": "import seedu.address.model.card.WordContainsKeywordsPredicate;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "dragontho"
        },
        "content": "//import seedu.address.model.wordbank.WordBank;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "sreesubbash"
        },
        "content": "import seedu.address.testutil.EditCardDescriptorBuilder;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": " * Contains helper methods for testing commands."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "public class CommandTestUtil {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "sreesubbash"
        },
        "content": "    public static final String VALID_WORD_ABRA \u003d \"Abra\";"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "sreesubbash"
        },
        "content": "    public static final String VALID_WORD_BUTTERFREE \u003d \"Butterfree\";"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "sreesubbash"
        },
        "content": "    public static final String VALID_MEANING_ABRA \u003d \"It sleeps eighteen hours a day, but employs telekinesis \""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "jascxx"
        },
        "content": "            + \"even while sleeping.\";"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "sreesubbash"
        },
        "content": "    public static final String VALID_MEANING_BUTTERFREE \u003d \"Its wings are covered with poisonous dust. If you see \""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "jascxx"
        },
        "content": "            + \"one flapping its wings, be careful not to inhale any of the dust.\";"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "jascxx"
        },
        "content": "    public static final String VALID_TAG_PSYCHIC \u003d \"psychic\";"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "jascxx"
        },
        "content": "    public static final String VALID_TAG_BUG \u003d \"bug\";"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "jascxx"
        },
        "content": "    public static final String VALID_TAG_FLYING \u003d \"flying\";"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "sreesubbash"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "sreesubbash"
        },
        "content": "    public static final String WORD_DESC_ABRA \u003d \" \" + PREFIX_WORD + VALID_WORD_ABRA;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "sreesubbash"
        },
        "content": "    public static final String WORD_DESC_BUTTERFREE \u003d \" \" + PREFIX_WORD + VALID_WORD_BUTTERFREE;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "sreesubbash"
        },
        "content": "    public static final String MEANING_DESC_ABRA \u003d \" \" + PREFIX_MEANING + VALID_MEANING_ABRA;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "sreesubbash"
        },
        "content": "    public static final String MEANING_DESC_BUTTERFREE \u003d \" \" + PREFIX_MEANING + VALID_MEANING_BUTTERFREE;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "sreesubbash"
        },
        "content": "    public static final String TAG_DESC_PSYCHIC \u003d \" \" + PREFIX_TAG + VALID_TAG_PSYCHIC;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "sreesubbash"
        },
        "content": "    public static final String TAG_DESC_BUG \u003d \" \" + PREFIX_TAG + VALID_TAG_BUG;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "jascxx"
        },
        "content": "    public static final String TAG_DESC_FLYING \u003d \" \" + PREFIX_TAG + VALID_TAG_FLYING;"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "sreesubbash"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "sreesubbash"
        },
        "content": "    public static final String INVALID_WORD_DESC \u003d \" \" + PREFIX_WORD + \"      \"; // all white spaces not allowed"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "sreesubbash"
        },
        "content": "    public static final String INVALID_MEANING_DESC \u003d \" \" + PREFIX_MEANING + \"     \"; // all white spaces not allowed"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String INVALID_TAG_DESC \u003d \" \" + PREFIX_TAG + \"hubby*\"; // \u0027*\u0027 not allowed in tags"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String PREAMBLE_WHITESPACE \u003d \"\\t  \\r  \\n\";"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String PREAMBLE_NON_EMPTY \u003d \"NonEmptyPreamble\";"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "sreesubbash"
        },
        "content": "    public static final EditCommand.EditCardDescriptor DESC_ABRA;"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "sreesubbash"
        },
        "content": "    public static final EditCommand.EditCardDescriptor DESC_BUTTERFREE;"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    static {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "sreesubbash"
        },
        "content": "        DESC_ABRA \u003d new EditCardDescriptorBuilder().withWord(VALID_WORD_ABRA)"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "sreesubbash"
        },
        "content": "                .withMeaning(VALID_MEANING_ABRA)"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "sreesubbash"
        },
        "content": "                .withTags(VALID_TAG_PSYCHIC).build();"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "sreesubbash"
        },
        "content": "        DESC_BUTTERFREE \u003d new EditCardDescriptorBuilder().withWord(VALID_WORD_BUTTERFREE)"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "sreesubbash"
        },
        "content": "                .withMeaning(VALID_MEANING_BUTTERFREE)"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "jascxx"
        },
        "content": "                .withTags(VALID_TAG_BUG).withTags(VALID_TAG_FLYING).build();"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "     * Executes the given {@code command}, confirms that \u003cbr\u003e"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "     * - the returned {@link CommandResult} matches {@code expectedCommandResult} \u003cbr\u003e"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "     * - the {@code actualModel} matches {@code expectedModel}"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "sreesubbash"
        },
        "content": "    public static void assertCommandSuccess(Command command, Model actualModel, CommandResult"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "sreesubbash"
        },
        "content": "            expectedCommandResult, Model expectedModel) {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "            CommandResult result \u003d command.execute(actualModel);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "            assertEquals(expectedCommandResult, result);"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "            assertEquals(expectedModel, actualModel);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (CommandException ce) {"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"Execution of command should not fail.\", ce);"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "     * Convenience wrapper to {@link #assertCommandSuccess(Command, Model, CommandResult, Model)}"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "     * that takes a string {@code expectedMessage}."
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "    public static void assertCommandSuccess(Command command, Model actualModel, String expectedMessage,"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "            Model expectedModel) {"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "        CommandResult expectedCommandResult \u003d new CommandResult(expectedMessage);"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(command, actualModel, expectedCommandResult, expectedModel);"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "     * Executes the given {@code command}, confirms that \u003cbr\u003e"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "     * - a {@code CommandException} is thrown \u003cbr\u003e"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "     * - the CommandException message matches {@code expectedMessage} \u003cbr\u003e"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "jascxx"
        },
        "content": "     * - the address book, filtered card list and selected person in {@code actualModel} remain unchanged"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "dragontho"
        },
        "content": "    //    public static void assertCommandFailure(Command command, Model actualModel, String expectedMessage) {"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "dragontho"
        },
        "content": "    //        // we are unable to defensively copy the model for comparison later, so we can"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "dragontho"
        },
        "content": "    //        // only do so by copying its components."
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "chrischenhui"
        },
        "content": "    //        WordBank expectedWordBank \u003d new WordBank(actualModel.toModelType());"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "dragontho"
        },
        "content": "    //        List\u003cCard\u003e expectedFilteredList \u003d new ArrayList\u003c\u003e(actualModel.getFilteredCardList());"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "dragontho"
        },
        "content": "    //"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "dragontho"
        },
        "content": "    //        assertThrows(CommandException.class, expectedMessage, () -\u003e command.execute(actualModel));"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "chrischenhui"
        },
        "content": "    //        assertEquals(expectedWordBank, actualModel.toModelType());"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "dragontho"
        },
        "content": "    //        assertEquals(expectedFilteredList, actualModel.getFilteredCardList());"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "dragontho"
        },
        "content": "    //    }"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "jascxx"
        },
        "content": ""
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "sreesubbash"
        },
        "content": "     * Updates {@code model}\u0027s filtered list to show only the card at the given {@code targetIndex} in the"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "jascxx"
        },
        "content": "     * {@code model}\u0027s word bank."
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "sreesubbash"
        },
        "content": "    public static void showCardAtIndex(Model model, Index targetIndex) {"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "sreesubbash"
        },
        "content": "        assertTrue(targetIndex.getZeroBased() \u003c model.getFilteredCardList().size());"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "sreesubbash"
        },
        "content": "        Card card \u003d model.getFilteredCardList().get(targetIndex.getZeroBased());"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "chrischenhui"
        },
        "content": "        final String[] splitName \u003d card.getWord().getValue().split(\"\\\\s+\");"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "sreesubbash"
        },
        "content": "        model.updateFilteredCardList(new WordContainsKeywordsPredicate(Arrays.asList(splitName[0])));"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "sreesubbash"
        },
        "content": "        assertEquals(1, model.getFilteredCardList().size());"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "dragontho": 13,
      "sreesubbash": 32,
      "jascxx": 12,
      "chrischenhui": 4,
      "-": 61
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/commands/DeleteCommandTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "dragontho"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.TypicalIndexes.INDEX_FIRST_PERSON;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.TypicalIndexes.INDEX_SECOND_PERSON;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "chrischenhui"
        },
        "content": "import seedu.address.logic.commands.cardcommands.DeleteCommand;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.ModelManager;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": " * Contains integration tests (interaction with the Model, UndoCommand and RedoCommand) and unit tests for"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": " * {@code DeleteCommand}."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "public class DeleteCommandTest {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "chrischenhui"
        },
        "content": "    private Model model \u003d new ModelManager();"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "jascxx"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "dragontho"
        },
        "content": "    //    @Test"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "dragontho"
        },
        "content": "    //    public void execute_validIndexUnfilteredList_success() {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "dragontho"
        },
        "content": "    //        Card personToDelete \u003d model.getFilteredCardList().get(INDEX_FIRST_PERSON.getZeroBased());"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "dragontho"
        },
        "content": "    //        DeleteCommand deleteCommand \u003d new DeleteCommand(INDEX_FIRST_PERSON);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "dragontho"
        },
        "content": "    //"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "dragontho"
        },
        "content": "    //        String expectedMessage \u003d String.format(DeleteCommand.MESSAGE_DELETE_CARD_SUCCESS, personToDelete);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "dragontho"
        },
        "content": "    //"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "chrischenhui"
        },
        "content": "    //        ModelManager expectedModel \u003d new ModelManager(model.toModelType(), new UserPrefs());"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "dragontho"
        },
        "content": "    //        expectedModel.deleteCard(personToDelete);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "dragontho"
        },
        "content": "    //"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "dragontho"
        },
        "content": "    //        assertCommandSuccess(deleteCommand, model, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "dragontho"
        },
        "content": "    //    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "dragontho"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "dragontho"
        },
        "content": "    //    @Test"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "dragontho"
        },
        "content": "    //    public void execute_invalidIndexUnfilteredList_throwsCommandException() {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "dragontho"
        },
        "content": "    //        Index outOfBoundIndex \u003d Index.fromOneBased(model.getFilteredCardList().size() + 1);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "dragontho"
        },
        "content": "    //        DeleteCommand deleteCommand \u003d new DeleteCommand(outOfBoundIndex);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "dragontho"
        },
        "content": "    //"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "dragontho"
        },
        "content": "    //        assertCommandFailure(deleteCommand, model, Messages.MESSAGE_INVALID_CARD_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "dragontho"
        },
        "content": "    //    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "dragontho"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "dragontho"
        },
        "content": "    //    @Test"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "dragontho"
        },
        "content": "    //    public void execute_validIndexFilteredList_success() {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "dragontho"
        },
        "content": "    //        showCardAtIndex(model, INDEX_FIRST_PERSON);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "dragontho"
        },
        "content": "    //"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "dragontho"
        },
        "content": "    //        Card personToDelete \u003d model.getFilteredCardList().get(INDEX_FIRST_PERSON.getZeroBased());"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "dragontho"
        },
        "content": "    //        DeleteCommand deleteCommand \u003d new DeleteCommand(INDEX_FIRST_PERSON);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "dragontho"
        },
        "content": "    //"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "dragontho"
        },
        "content": "    //        String expectedMessage \u003d String.format(DeleteCommand.MESSAGE_DELETE_CARD_SUCCESS, personToDelete);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "dragontho"
        },
        "content": "    //"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "chrischenhui"
        },
        "content": "    //        Model expectedModel \u003d new ModelManager(model.toModelType(), new UserPrefs());"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "dragontho"
        },
        "content": "    //        expectedModel.deleteCard(personToDelete);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "dragontho"
        },
        "content": "    //        showNoPerson(expectedModel);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "dragontho"
        },
        "content": "    //"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "dragontho"
        },
        "content": "    //        assertCommandSuccess(deleteCommand, model, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "dragontho"
        },
        "content": "    //    }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "dragontho"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "dragontho"
        },
        "content": "    //    @Test"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "dragontho"
        },
        "content": "    //    public void execute_invalidIndexFilteredList_throwsCommandException() {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "dragontho"
        },
        "content": "    //        showCardAtIndex(model, INDEX_FIRST_PERSON);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "dragontho"
        },
        "content": "    //"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "dragontho"
        },
        "content": "    //        Index outOfBoundIndex \u003d INDEX_SECOND_PERSON;"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "dragontho"
        },
        "content": "    //        // ensures that outOfBoundIndex is still in bounds of address book list"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "chrischenhui"
        },
        "content": "    //        assertTrue(outOfBoundIndex.getZeroBased() \u003c model.toModelType().getCardList().size());"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "dragontho"
        },
        "content": "    //"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "dragontho"
        },
        "content": "    //        DeleteCommand deleteCommand \u003d new DeleteCommand(outOfBoundIndex);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "dragontho"
        },
        "content": "    //"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "dragontho"
        },
        "content": "    //        assertCommandFailure(deleteCommand, model, Messages.MESSAGE_INVALID_CARD_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "dragontho"
        },
        "content": "    //    }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "        DeleteCommand deleteFirstCommand \u003d new DeleteCommand(INDEX_FIRST_PERSON);"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "        DeleteCommand deleteSecondCommand \u003d new DeleteCommand(INDEX_SECOND_PERSON);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(deleteFirstCommand.equals(deleteFirstCommand));"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "        // same values -\u003e returns true"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "        DeleteCommand deleteFirstCommandCopy \u003d new DeleteCommand(INDEX_FIRST_PERSON);"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(deleteFirstCommand.equals(deleteFirstCommandCopy));"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "        // different types -\u003e returns false"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(deleteFirstCommand.equals(1));"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(deleteFirstCommand.equals(null));"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "        // different person -\u003e returns false"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(deleteFirstCommand.equals(deleteSecondCommand));"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "     * Updates {@code model}\u0027s filtered list to show no one."
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "    private void showNoPerson(Model model) {"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "jascxx"
        },
        "content": "        model.updateFilteredCardList(p -\u003e false);"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "jascxx"
        },
        "content": "        assertTrue(model.getFilteredCardList().isEmpty());"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "dragontho": 47,
      "jascxx": 3,
      "chrischenhui": 5,
      "-": 48
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/commands/EditCardDescriptorTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jascxx"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "jascxx"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "jascxx"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "jascxx"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "jascxx"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.DESC_ABRA;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "jascxx"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.DESC_BUTTERFREE;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "jascxx"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_MEANING_BUTTERFREE;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "jascxx"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_TAG_BUG;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "jascxx"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_WORD_BUTTERFREE;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "jascxx"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "jascxx"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "jascxx"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "chrischenhui"
        },
        "content": "import seedu.address.logic.commands.cardcommands.EditCommand;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "jascxx"
        },
        "content": "import seedu.address.testutil.EditCardDescriptorBuilder;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "jascxx"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "jascxx"
        },
        "content": "public class EditCardDescriptorTest {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "jascxx"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "jascxx"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "jascxx"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "jascxx"
        },
        "content": "        // same values -\u003e returns true"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "jascxx"
        },
        "content": "        EditCommand.EditCardDescriptor descriptorWithSameValues \u003d new EditCommand.EditCardDescriptor(DESC_ABRA);"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "jascxx"
        },
        "content": "        assertTrue(DESC_ABRA.equals(descriptorWithSameValues));"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "jascxx"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "jascxx"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "jascxx"
        },
        "content": "        assertTrue(DESC_ABRA.equals(DESC_ABRA));"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "jascxx"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "jascxx"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "jascxx"
        },
        "content": "        assertFalse(DESC_ABRA.equals(null));"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "jascxx"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "jascxx"
        },
        "content": "        // different types -\u003e returns false"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "jascxx"
        },
        "content": "        assertFalse(DESC_ABRA.equals(5));"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "jascxx"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "jascxx"
        },
        "content": "        // different values -\u003e returns false"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "jascxx"
        },
        "content": "        assertFalse(DESC_ABRA.equals(DESC_BUTTERFREE));"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "jascxx"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "jascxx"
        },
        "content": "        // different word -\u003e returns false"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "jascxx"
        },
        "content": "        EditCommand.EditCardDescriptor editedAbra \u003d new EditCardDescriptorBuilder(DESC_ABRA)"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "jascxx"
        },
        "content": "                .withWord(VALID_WORD_BUTTERFREE).build();"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "jascxx"
        },
        "content": "        assertFalse(DESC_ABRA.equals(editedAbra));"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "jascxx"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "jascxx"
        },
        "content": "        // different meaning -\u003e returns false"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "jascxx"
        },
        "content": "        editedAbra \u003d new EditCardDescriptorBuilder(DESC_ABRA).withMeaning(VALID_MEANING_BUTTERFREE).build();"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "jascxx"
        },
        "content": "        assertFalse(DESC_ABRA.equals(editedAbra));"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "jascxx"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "jascxx"
        },
        "content": "        // different tags -\u003e returns false"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "jascxx"
        },
        "content": "        editedAbra \u003d new EditCardDescriptorBuilder(DESC_ABRA).withTags(VALID_TAG_BUG).build();"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "jascxx"
        },
        "content": "        assertFalse(DESC_ABRA.equals(editedAbra));"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "jascxx"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "jascxx"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "jascxx": 48,
      "chrischenhui": 1
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/commands/EditCommandTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "jascxx"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.DESC_ABRA;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "jascxx"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.DESC_BUTTERFREE;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.TypicalIndexes.INDEX_FIRST_PERSON;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.TypicalIndexes.INDEX_SECOND_PERSON;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "chrischenhui"
        },
        "content": "import seedu.address.logic.commands.cardcommands.ClearCommand;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "chrischenhui"
        },
        "content": "import seedu.address.logic.commands.cardcommands.EditCommand;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.ModelManager;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "dragontho"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": " * Contains integration tests (interaction with the Model, UndoCommand and RedoCommand) and unit tests for EditCommand."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "public class EditCommandTest {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "chrischenhui"
        },
        "content": "    private Model model \u003d new ModelManager();"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "jascxx"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "jascxx"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "dragontho"
        },
        "content": "    //    @Test"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "dragontho"
        },
        "content": "    //    public void execute_allFieldsSpecifiedUnfilteredList_success() {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "dragontho"
        },
        "content": "    //        Card editedCard \u003d new CardBuilder().build();"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "dragontho"
        },
        "content": "    //        EditCommand.EditCardDescriptor descriptor \u003d new EditCardDescriptorBuilder(editedCard).build();"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "dragontho"
        },
        "content": "    //        EditCommand editCommand \u003d new EditCommand(INDEX_FIRST_PERSON, descriptor);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "dragontho"
        },
        "content": "    //"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "dragontho"
        },
        "content": "    //        String expectedMessage \u003d String.format(EditCommand.MESSAGE_EDIT_CARD_SUCCESS, editedCard);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "dragontho"
        },
        "content": "    //"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "chrischenhui"
        },
        "content": "    //        Model expectedModel \u003d new ModelManager(new WordBank(model.toModelType()), new UserPrefs());"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "dragontho"
        },
        "content": "    //        expectedModel.setCard(model.getFilteredCardList().get(0), editedCard);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "dragontho"
        },
        "content": "    //"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "dragontho"
        },
        "content": "    //        assertCommandSuccess(editCommand, model, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "dragontho"
        },
        "content": "    //    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "dragontho"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "dragontho"
        },
        "content": "    //    @Test"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "dragontho"
        },
        "content": "    //    public void execute_someFieldsSpecifiedUnfilteredList_success() {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "dragontho"
        },
        "content": "    //        Index indexLastCard \u003d Index.fromOneBased(model.getFilteredCardList().size());"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "dragontho"
        },
        "content": "    //        Card lastCard \u003d model.getFilteredCardList().get(indexLastCard.getZeroBased());"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "dragontho"
        },
        "content": "    //"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "dragontho"
        },
        "content": "    //        CardBuilder cardInList \u003d new CardBuilder(lastCard);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "dragontho"
        },
        "content": "    //        Card editedCard \u003d cardInList.withWord(VALID_WORD_BUTTERFREE).withTags(VALID_TAG_BUG).build();"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "dragontho"
        },
        "content": "    //"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "dragontho"
        },
        "content": "    //        EditCommand.EditCardDescriptor descriptor \u003d new EditCardDescriptorBuilder()"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "dragontho"
        },
        "content": "    //                .withWord(VALID_WORD_BUTTERFREE).withTags(VALID_TAG_BUG).build();"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "dragontho"
        },
        "content": "    //        EditCommand editCommand \u003d new EditCommand(indexLastCard, descriptor);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "dragontho"
        },
        "content": "    //"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "dragontho"
        },
        "content": "    //        String expectedMessage \u003d String.format(EditCommand.MESSAGE_EDIT_CARD_SUCCESS, editedCard);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "dragontho"
        },
        "content": "    //"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "chrischenhui"
        },
        "content": "    //        Model expectedModel \u003d new ModelManager(new WordBank(model.toModelType()), new UserPrefs());"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "dragontho"
        },
        "content": "    //        expectedModel.setCard(lastCard, editedCard);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "dragontho"
        },
        "content": "    //"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "dragontho"
        },
        "content": "    //        assertCommandSuccess(editCommand, model, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "dragontho"
        },
        "content": "    //    }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "dragontho"
        },
        "content": "    //"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "dragontho"
        },
        "content": "    //    @Test"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "dragontho"
        },
        "content": "    //    public void execute_noFieldSpecifiedUnfilteredList_success() {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "dragontho"
        },
        "content": "    //        EditCommand editCommand \u003d new EditCommand(INDEX_FIRST_PERSON, new EditCommand.EditCardDescriptor());"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "dragontho"
        },
        "content": "    //        Card editedCard \u003d model.getFilteredCardList().get(INDEX_FIRST_PERSON.getZeroBased());"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "dragontho"
        },
        "content": "    //"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "dragontho"
        },
        "content": "    //        String expectedMessage \u003d String.format(EditCommand.MESSAGE_EDIT_CARD_SUCCESS, editedCard);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "dragontho"
        },
        "content": "    //"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "chrischenhui"
        },
        "content": "    //        Model expectedModel \u003d new ModelManager(new WordBank(model.toModelType()), new UserPrefs());"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "dragontho"
        },
        "content": "    //"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "dragontho"
        },
        "content": "    //        assertCommandSuccess(editCommand, model, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "dragontho"
        },
        "content": "    //    }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "dragontho"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "dragontho"
        },
        "content": "    //    @Test"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "dragontho"
        },
        "content": "    //    public void execute_filteredList_success() {"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "dragontho"
        },
        "content": "    //        showCardAtIndex(model, INDEX_FIRST_PERSON);"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "dragontho"
        },
        "content": "    //"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "dragontho"
        },
        "content": "    //        Card cardInFilteredList \u003d model.getFilteredCardList().get(INDEX_FIRST_PERSON.getZeroBased());"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "dragontho"
        },
        "content": "    //        Card editedCard \u003d new CardBuilder(cardInFilteredList).withWord(VALID_WORD_BUTTERFREE).build();"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "dragontho"
        },
        "content": "    //        EditCommand editCommand \u003d new EditCommand(INDEX_FIRST_PERSON,"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "dragontho"
        },
        "content": "    //                new EditCardDescriptorBuilder().withWord(VALID_WORD_BUTTERFREE).build());"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "dragontho"
        },
        "content": "    //"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "dragontho"
        },
        "content": "    //        String expectedMessage \u003d String.format(EditCommand.MESSAGE_EDIT_CARD_SUCCESS, editedCard);"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "dragontho"
        },
        "content": "    //"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "chrischenhui"
        },
        "content": "    //        Model expectedModel \u003d new ModelManager(new WordBank(model.toModelType()), new UserPrefs());"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "dragontho"
        },
        "content": "    //        expectedModel.setCard(model.getFilteredCardList().get(0), editedCard);"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "dragontho"
        },
        "content": "    //"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "dragontho"
        },
        "content": "    //        assertCommandSuccess(editCommand, model, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "dragontho"
        },
        "content": "    //    }"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "dragontho"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "dragontho"
        },
        "content": "    //    @Test"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "dragontho"
        },
        "content": "    //    public void execute_duplicateCardUnfilteredList_failure() {"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "dragontho"
        },
        "content": "    //        Card firstPerson \u003d model.getFilteredCardList().get(INDEX_FIRST_PERSON.getZeroBased());"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "dragontho"
        },
        "content": "    //        EditCommand.EditCardDescriptor descriptor \u003d new EditCardDescriptorBuilder(firstPerson).build();"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "dragontho"
        },
        "content": "    //        EditCommand editCommand \u003d new EditCommand(INDEX_SECOND_PERSON, descriptor);"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "dragontho"
        },
        "content": "    //"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "dragontho"
        },
        "content": "    //        assertCommandFailure(editCommand, model, EditCommand.MESSAGE_DUPLICATE_CARD);"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "dragontho"
        },
        "content": "    //    }"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "dragontho"
        },
        "content": ""
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "dragontho"
        },
        "content": "    //    @Test"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "dragontho"
        },
        "content": "    //    public void execute_duplicateCardFilteredList_failure() {"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "dragontho"
        },
        "content": "    //        showCardAtIndex(model, INDEX_FIRST_PERSON);"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "dragontho"
        },
        "content": "    //"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "dragontho"
        },
        "content": "    //        // edit person in filtered list into a duplicate in address book"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "chrischenhui"
        },
        "content": "    //        Card personInList \u003d model.toModelType().getCardList().get(INDEX_SECOND_PERSON.getZeroBased());"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "dragontho"
        },
        "content": "    //        EditCommand editCommand \u003d new EditCommand(INDEX_FIRST_PERSON,"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "dragontho"
        },
        "content": "    //                new EditCardDescriptorBuilder(personInList).build());"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "dragontho"
        },
        "content": "    //"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "dragontho"
        },
        "content": "    //        assertCommandFailure(editCommand, model, EditCommand.MESSAGE_DUPLICATE_CARD);"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "dragontho"
        },
        "content": "    //    }"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "dragontho"
        },
        "content": ""
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "dragontho"
        },
        "content": "    //    @Test"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "dragontho"
        },
        "content": "    //    public void execute_invalidCardIndexUnfilteredList_failure() {"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "dragontho"
        },
        "content": "    //        Index outOfBoundIndex \u003d Index.fromOneBased(model.getFilteredCardList().size() + 1);"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "dragontho"
        },
        "content": "    //        EditCommand.EditCardDescriptor descriptor \u003d"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "dragontho"
        },
        "content": "    //                new EditCardDescriptorBuilder().withWord(VALID_WORD_BUTTERFREE).build();"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "dragontho"
        },
        "content": "    //        EditCommand editCommand \u003d new EditCommand(outOfBoundIndex, descriptor);"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "dragontho"
        },
        "content": "    //"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "dragontho"
        },
        "content": "    //        assertCommandFailure(editCommand, model, Messages.MESSAGE_INVALID_CARD_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "dragontho"
        },
        "content": "    //    }"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "     * Edit filtered list where index is larger than size of filtered list,"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "     * but smaller than size of address book"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "dragontho"
        },
        "content": "    //    @Test"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "dragontho"
        },
        "content": "    //    public void execute_invalidPersonIndexFilteredList_failure() {"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "dragontho"
        },
        "content": "    //        showCardAtIndex(model, INDEX_FIRST_PERSON);"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "dragontho"
        },
        "content": "    //        Index outOfBoundIndex \u003d INDEX_SECOND_PERSON;"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "dragontho"
        },
        "content": "    //        // ensures that outOfBoundIndex is still in bounds of address book list"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "chrischenhui"
        },
        "content": "    //        assertTrue(outOfBoundIndex.getZeroBased() \u003c model.toModelType().getCardList().size());"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "dragontho"
        },
        "content": "    //"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "dragontho"
        },
        "content": "    //        EditCommand editCommand \u003d new EditCommand(outOfBoundIndex,"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "dragontho"
        },
        "content": "    //                new EditCardDescriptorBuilder().withWord(VALID_WORD_BUTTERFREE).build());"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "dragontho"
        },
        "content": "    //"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "dragontho"
        },
        "content": "    //        assertCommandFailure(editCommand, model, Messages.MESSAGE_INVALID_CARD_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "dragontho"
        },
        "content": "    //    }"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "jascxx"
        },
        "content": "        final EditCommand standardCommand \u003d new EditCommand(INDEX_FIRST_PERSON, DESC_ABRA);"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": "        // same values -\u003e returns true"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "chrischenhui"
        },
        "content": "        EditCommand.EditCardDescriptor copyDescriptor \u003d new EditCommand.EditCardDescriptor(DESC_ABRA);"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": "        EditCommand commandWithSameValues \u003d new EditCommand(INDEX_FIRST_PERSON, copyDescriptor);"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(standardCommand.equals(commandWithSameValues));"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(standardCommand.equals(standardCommand));"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(standardCommand.equals(null));"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": "        // different types -\u003e returns false"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(standardCommand.equals(new ClearCommand()));"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "-"
        },
        "content": "        // different index -\u003e returns false"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "jascxx"
        },
        "content": "        assertFalse(standardCommand.equals(new EditCommand(INDEX_SECOND_PERSON, DESC_ABRA)));"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "-"
        },
        "content": "        // different descriptor -\u003e returns false"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "jascxx"
        },
        "content": "        assertFalse(standardCommand.equals(new EditCommand(INDEX_FIRST_PERSON, DESC_BUTTERFREE)));"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "dragontho": 100,
      "jascxx": 7,
      "chrischenhui": 10,
      "kohyida1997": 1,
      "-": 45
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/commands/ExitCommandTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "chrischenhui"
        },
        "content": "//import static seedu.address.logic.commands.CommandTestUtil.assertCommandSuccess;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "sreesubbash"
        },
        "content": "//import static seedu.address.logic.commands.loadcommands.ExitCommand.MESSAGE_EXIT_ACKNOWLEDGEMENT;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "chrischenhui"
        },
        "content": "//"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "chrischenhui"
        },
        "content": "//import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "chrischenhui"
        },
        "content": "//"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "sreesubbash"
        },
        "content": "//import seedu.address.logic.commands.loadcommands.ExitCommand;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.ModelManager;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "public class ExitCommandTest {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "    private Model model \u003d new ModelManager();"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    private Model expectedModel \u003d new ModelManager();"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "chrischenhui"
        },
        "content": "    //    @Test"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "chrischenhui"
        },
        "content": "    //    public void execute_exit_success() {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "chrischenhui"
        },
        "content": "    //        CommandResult expectedCommandResult \u003d new CommandResult(MESSAGE_EXIT_ACKNOWLEDGEMENT, false, true);"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "chrischenhui"
        },
        "content": "    //        assertCommandSuccess(new ExitCommand(), model, expectedCommandResult, expectedModel);"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "chrischenhui"
        },
        "content": "    //    }"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "sreesubbash": 2,
      "chrischenhui": 9,
      "-": 10
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/commands/FindCommandTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Collections;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "chrischenhui"
        },
        "content": "import seedu.address.logic.commands.cardcommands.FindCommand;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.ModelManager;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "jascxx"
        },
        "content": "import seedu.address.model.card.WordContainsKeywordsPredicate;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": " * Contains integration tests (interaction with the Model) for {@code FindCommand}."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "public class FindCommandTest {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "chrischenhui"
        },
        "content": "    private Model model \u003d new ModelManager();"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "chrischenhui"
        },
        "content": "    private Model expectedModel \u003d new ModelManager();"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "jascxx"
        },
        "content": "        WordContainsKeywordsPredicate firstPredicate \u003d"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "jascxx"
        },
        "content": "                new WordContainsKeywordsPredicate(Collections.singletonList(\"first\"));"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "jascxx"
        },
        "content": "        WordContainsKeywordsPredicate secondPredicate \u003d"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "jascxx"
        },
        "content": "                new WordContainsKeywordsPredicate(Collections.singletonList(\"second\"));"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "        FindCommand findFirstCommand \u003d new FindCommand(firstPredicate);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        FindCommand findSecondCommand \u003d new FindCommand(secondPredicate);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(findFirstCommand.equals(findFirstCommand));"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        // same values -\u003e returns true"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        FindCommand findFirstCommandCopy \u003d new FindCommand(firstPredicate);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(findFirstCommand.equals(findFirstCommandCopy));"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "        // different types -\u003e returns false"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(findFirstCommand.equals(1));"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(findFirstCommand.equals(null));"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        // different person -\u003e returns false"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(findFirstCommand.equals(findSecondCommand));"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "dragontho"
        },
        "content": "    //    @Test"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "dragontho"
        },
        "content": "    //    public void execute_zeroKeywords_noPersonFound() {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "dragontho"
        },
        "content": "    //        String expectedMessage \u003d String.format(MESSAGE_CARDS_LISTED_OVERVIEW, 0);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "dragontho"
        },
        "content": "    //        WordContainsKeywordsPredicate predicate \u003d preparePredicate(\" \");"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "dragontho"
        },
        "content": "    //        FindCommand command \u003d new FindCommand(predicate);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "dragontho"
        },
        "content": "    //        expectedModel.updateFilteredCardList(predicate);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "dragontho"
        },
        "content": "    //        assertCommandSuccess(command, model, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "dragontho"
        },
        "content": "    //        assertEquals(Collections.emptyList(), model.getFilteredCardList());"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "dragontho"
        },
        "content": "    //    }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "dragontho"
        },
        "content": "    //    @Test"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "dragontho"
        },
        "content": "    //    public void execute_multipleKeywords_multiplePersonsFound() {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "dragontho"
        },
        "content": "    //        String expectedMessage \u003d String.format(MESSAGE_CARDS_LISTED_OVERVIEW, 2);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "dragontho"
        },
        "content": "    //        WordContainsKeywordsPredicate predicate \u003d preparePredicate(\"ee fl\");"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "dragontho"
        },
        "content": "    //        FindCommand command \u003d new FindCommand(predicate);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "dragontho"
        },
        "content": "    //        expectedModel.updateFilteredCardList(predicate);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "dragontho"
        },
        "content": "    //        assertCommandSuccess(command, model, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "dragontho"
        },
        "content": "    //        assertEquals(Arrays.asList(EEVEE, FLAREON), model.getFilteredCardList());"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "dragontho"
        },
        "content": "    //    }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "jascxx"
        },
        "content": "     * Parses {@code userInput} into a {@code WordContainsKeywordsPredicate}."
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "jascxx"
        },
        "content": "    private WordContainsKeywordsPredicate preparePredicate(String userInput) {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "jascxx"
        },
        "content": "        return new WordContainsKeywordsPredicate(Arrays.asList(userInput.split(\"\\\\s+\")));"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "dragontho": 18,
      "jascxx": 8,
      "chrischenhui": 3,
      "-": 47
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/commands/HelpCommandTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "chrischenhui"
        },
        "content": "//import static seedu.address.logic.commands.CommandTestUtil.assertCommandSuccess;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "chrischenhui"
        },
        "content": "//import static seedu.address.logic.commands.appcommands.HelpCommand.SHOWING_HELP_MESSAGE;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "chrischenhui"
        },
        "content": "//"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "chrischenhui"
        },
        "content": "//import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "chrischenhui"
        },
        "content": "//"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "chrischenhui"
        },
        "content": "//import seedu.address.logic.commands.appcommands.HelpCommand;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.ModelManager;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "public class HelpCommandTest {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "    private Model model \u003d new ModelManager();"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    private Model expectedModel \u003d new ModelManager();"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "chrischenhui"
        },
        "content": "    //    @Test"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "chrischenhui"
        },
        "content": "    //    public void execute_help_success() {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "chrischenhui"
        },
        "content": "    //        CommandResult expectedCommandResult \u003d new CommandResult(SHOWING_HELP_MESSAGE, true, false);"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "chrischenhui"
        },
        "content": "    //        assertCommandSuccess(new HelpCommand(), model, expectedCommandResult, expectedModel);"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "chrischenhui"
        },
        "content": "    //    }"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "chrischenhui": 11,
      "-": 10
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/commands/ListCommandTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "chrischenhui"
        },
        "content": "//import static seedu.address.logic.commands.CommandTestUtil.assertCommandSuccess;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "chrischenhui"
        },
        "content": "//"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "chrischenhui"
        },
        "content": "//import org.junit.jupiter.api.BeforeEach;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "chrischenhui"
        },
        "content": "//import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "chrischenhui"
        },
        "content": "//"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "chrischenhui"
        },
        "content": "//import seedu.address.logic.commands.appcommands.ListCommand;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "chrischenhui"
        },
        "content": "//import seedu.address.model.ModelManager;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": " * Contains integration tests (interaction with the Model) and unit tests for ListCommand."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "public class ListCommandTest {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    private Model model;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    private Model expectedModel;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "chrischenhui"
        },
        "content": "    //    @BeforeEach"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "chrischenhui"
        },
        "content": "    //    public void setUp() {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "chrischenhui"
        },
        "content": "    //        model \u003d new ModelManager();"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "chrischenhui"
        },
        "content": "    //        expectedModel \u003d new ModelManager();"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "chrischenhui"
        },
        "content": "    //    }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "chrischenhui"
        },
        "content": "    //"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "chrischenhui"
        },
        "content": "    //    @Test"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "chrischenhui"
        },
        "content": "    //    public void execute_listIsNotFiltered_showsSameList() {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "chrischenhui"
        },
        "content": "    //        assertCommandSuccess(new ListCommand(), model, ListCommand.MESSAGE_SUCCESS, expectedModel);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "chrischenhui"
        },
        "content": "    //    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "jascxx"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "dragontho"
        },
        "content": "    //    @Test"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "dragontho"
        },
        "content": "    //    public void execute_listIsFiltered_showsEverything() {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "dragontho"
        },
        "content": "    //        showCardAtIndex(model, INDEX_FIRST_PERSON);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "dragontho"
        },
        "content": "    //        assertCommandSuccess(new ListCommand(), model, ListCommand.MESSAGE_SUCCESS, expectedModel);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "dragontho"
        },
        "content": "    //    }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "dragontho": 5,
      "jascxx": 1,
      "chrischenhui": 17,
      "-": 13
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/commands/gamecommands/GuessCommandTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": "package seedu.address.logic.commands.gamecommands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": "import static org.junit.jupiter.api.Assertions.fail;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": "import static seedu.address.logic.commands.gamecommands.GuessCommand.MESSAGE_GAME_OVER;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": "import static seedu.address.logic.commands.gamecommands.GuessCommandResult.MESSAGE_CORRECT_GUESS;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": "import static seedu.address.logic.commands.gamecommands.GuessCommandResult.MESSAGE_WRONG_GUESS;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": "import static seedu.address.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": "import static seedu.address.testutil.TypicalCards.CHARIZARD;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": "import static seedu.address.testutil.TypicalCards.DITTO;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": "import java.util.function.Predicate;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": "import org.junit.jupiter.api.BeforeEach;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": "import seedu.address.commons.core.GuiSettings;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": "import seedu.address.logic.commands.CommandResult;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": "import seedu.address.model.ReadOnlyUserPrefs;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": "import seedu.address.model.appsettings.AppSettings;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": "import seedu.address.model.appsettings.DifficultyEnum;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": "import seedu.address.model.appsettings.ThemeEnum;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": "import seedu.address.model.card.Card;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": "import seedu.address.model.card.FormattedHint;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": "import seedu.address.model.game.Game;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": "import seedu.address.model.game.Guess;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": "import seedu.address.model.globalstatistics.GlobalStatistics;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": "import seedu.address.model.wordbank.ReadOnlyWordBank;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": "import seedu.address.model.wordbank.WordBank;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": "import seedu.address.model.wordbanklist.WordBankList;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": "import seedu.address.model.wordbankstatslist.WordBankStatisticsList;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": "import seedu.address.statistics.WordBankStatistics;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": "import seedu.address.testutil.WordBankBuilder;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": "class GuessCommandTest {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": "    private static final String MESSAGE_NO_ACTIVE_GAME \u003d \"There is no active game!\";"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": "    private static WordBank dittoCharizardWordBank;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": "    private static Guess charizardGuess \u003d new Guess(\"CHARIZARD\");"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": "    private static Guess dummyWrongGuess \u003d new Guess(\"dsfndshufsi293042\");"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": "    private static Guess dittoGuess \u003d new Guess(\"DITTO\");"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": "    private Model dummyModel;"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": "    @BeforeEach"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": "    void setUp() {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": "        WordBankBuilder wordBankBuilder \u003d new WordBankBuilder(\"GuessCommandTestBank\");"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": "        wordBankBuilder.withCard(DITTO);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": "        wordBankBuilder.withCard(CHARIZARD);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": "        dittoCharizardWordBank \u003d wordBankBuilder.build();"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": "        dummyModel \u003d new ModelStub();"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": "    }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": "    void execute_gameIsNull_throwsCommandException() {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": "        dummyModel.setGame(null);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": "            new GuessCommand(charizardGuess).execute(dummyModel);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": "        } catch (CommandException e) {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": "            assertEquals(e.getMessage(), MESSAGE_NO_ACTIVE_GAME);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": "            return;"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": "        }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": "        fail();"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": "    }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": "    void execute_gameIsAlreadyOver_throwsCommandException() {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": "        Game dummyGame \u003d new Game(dittoCharizardWordBank, cardsToShuffle -\u003e {}, DifficultyEnum.EASY);"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": "        dummyGame.forceStop();"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": "        dummyModel.setGame(dummyGame);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": "            new GuessCommand(charizardGuess).execute(dummyModel);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": "        } catch (CommandException e) {"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": "            assertEquals(e.getMessage(), MESSAGE_NO_ACTIVE_GAME);"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": "            return;"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": "        }"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": "        fail();"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": "    }"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": "    void execute_isLastCard_correctGuessSuccess() {"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": "        Game dummyGame \u003d new Game(dittoCharizardWordBank, cardsToShuffle -\u003e {}, DifficultyEnum.EASY);"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": "        dummyModel.setGame(dummyGame);"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": "            new GuessCommand(charizardGuess).execute(dummyModel);"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": "            CommandResult res \u003d new GuessCommand(charizardGuess).execute(dummyModel);"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": "            assertEquals(res.getFeedbackToUser(),"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": "                    MESSAGE_CORRECT_GUESS + \"\\n\""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": "                            + MESSAGE_GAME_OVER);"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": "        } catch (CommandException e) {"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": "            fail();"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": "        }"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": "    }"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": ""
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": "    void execute_isLastCard_wrongGuessSuccess() {"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": "        Game dummyGame \u003d new Game(dittoCharizardWordBank, cardsToShuffle -\u003e {}, DifficultyEnum.EASY);"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": "        dummyModel.setGame(dummyGame);"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": "            new GuessCommand(charizardGuess).execute(dummyModel);"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": "            CommandResult res \u003d new GuessCommand(dummyWrongGuess).execute(dummyModel);"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": "            assertEquals(res.getFeedbackToUser(),"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": "                    MESSAGE_WRONG_GUESS + \"\\n\""
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": "                            + MESSAGE_GAME_OVER);"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": "        } catch (CommandException e) {"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": "            fail();"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": "        }"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": "    }"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": ""
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": "    void execute_notLastCard_wrongGuessSuccess() {"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": "        Game dummyGame \u003d new Game(dittoCharizardWordBank, cardsToShuffle -\u003e {}, DifficultyEnum.EASY);"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": "        dummyModel.setGame(dummyGame);"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": "            CommandResult res \u003d new GuessCommand(dummyWrongGuess).execute(dummyModel);"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": "            assertEquals(res.getFeedbackToUser(),"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": "                    MESSAGE_WRONG_GUESS + \"\\n\""
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": "                            + dummyGame.getCurrQuestion());"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": "        } catch (CommandException e) {"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": "            fail();"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": "        }"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": "    }"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": ""
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": "    void execute_notLastCard_correctGuessSuccess() {"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": "        Game dummyGame \u003d new Game(dittoCharizardWordBank, cardsToShuffle -\u003e {}, DifficultyEnum.EASY);"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": "        dummyModel.setGame(dummyGame);"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": "            CommandResult res \u003d new GuessCommand(dittoGuess).execute(dummyModel);"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": "            assertEquals(res.getFeedbackToUser(),"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": "                    MESSAGE_CORRECT_GUESS + \"\\n\""
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": "                            + dummyGame.getCurrQuestion());"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": "        } catch (CommandException e) {"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": "            fail();"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": "        }"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": "    }"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": ""
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": "    void constructor_nullGuess_throwsNullPointerException() {"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e new GuessCommand(null));"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": "    }"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": ""
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": "    private class ModelStub implements Model {"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": ""
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": "        private Game game;"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": ""
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": "        public void setUserPrefs(ReadOnlyUserPrefs userPrefs) {"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": ""
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": "        }"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": ""
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": "        public ReadOnlyUserPrefs getUserPrefs() {"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": "            return null;"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": "        }"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": ""
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": "        public GuiSettings getGuiSettings() {"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": "            return null;"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": "        }"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": ""
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": "        public void setGuiSettings(GuiSettings guiSettings) {"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": ""
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": "        }"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": ""
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": "        public Path getWordBankFilePath() {"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": "            return null;"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": "        }"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": ""
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": "        public void setWordBankFilePath(Path addressBookFilePath) {"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": ""
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": "        }"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": ""
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "dragontho"
        },
        "content": "        public void setCurrentWordBank(ReadOnlyWordBank currenWordBank) {"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "dragontho"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": "        }"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": ""
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": "        public void updateWordBank(String name) {"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": ""
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": "        }"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": ""
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": "        public WordBankStatistics getWordBankStatistics() {"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": "            return null;"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": "        }"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": ""
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": "        public void setWordBankStatistics(WordBankStatistics wordBankStats) {"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": ""
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": "        }"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": ""
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": "        public void clearWordBankStatistics() {"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": ""
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": "        }"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": ""
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": "        public void clearWordBank() {"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": ""
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": "        }"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": ""
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "dragontho"
        },
        "content": "        public ReadOnlyWordBank getCurrentWordBank() {"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": "            return null;"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": "        }"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": ""
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": "        public boolean hasCard(Card card) {"
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": "        }"
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": ""
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": "        public void deleteCard(Card target) {"
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": ""
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": "        }"
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": ""
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": "        public void addCard(Card card) {"
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": ""
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": "        }"
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": ""
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": "        public void setCard(Card target, Card editedCard) {"
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": ""
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": "        }"
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": ""
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": "        public ObservableList\u003cCard\u003e getFilteredCardList() {"
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": "            return null;"
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": "        }"
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": ""
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": "        public ObservableList\u003cWordBank\u003e getFilteredWordBankList() {"
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": "            return null;"
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": "        }"
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": ""
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": "        public WordBankList getWordBankList() {"
      },
      {
        "lineNumber": 248,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": "            return null;"
      },
      {
        "lineNumber": 249,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": "        }"
      },
      {
        "lineNumber": 250,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": ""
      },
      {
        "lineNumber": 251,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 252,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": "        public WordBankStatisticsList getWordBankStatisticsList() {"
      },
      {
        "lineNumber": 253,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": "            return null;"
      },
      {
        "lineNumber": 254,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": "        }"
      },
      {
        "lineNumber": 255,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": ""
      },
      {
        "lineNumber": 256,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 257,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": "        public GlobalStatistics getGlobalStatistics() {"
      },
      {
        "lineNumber": 258,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": "            return null;"
      },
      {
        "lineNumber": 259,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": "        }"
      },
      {
        "lineNumber": 260,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": ""
      },
      {
        "lineNumber": 261,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 262,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": "        public void updateFilteredCardList(Predicate\u003cCard\u003e predicate) {"
      },
      {
        "lineNumber": 263,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": ""
      },
      {
        "lineNumber": 264,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": "        }"
      },
      {
        "lineNumber": 265,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": ""
      },
      {
        "lineNumber": 266,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 267,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": "        public void setGame(Game game) {"
      },
      {
        "lineNumber": 268,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": "            this.game \u003d game;"
      },
      {
        "lineNumber": 269,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": "        }"
      },
      {
        "lineNumber": 270,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": ""
      },
      {
        "lineNumber": 271,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 272,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": "        public boolean gameIsOver() {"
      },
      {
        "lineNumber": 273,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": "            return game \u003d\u003d null ? true : this.game.isOver();"
      },
      {
        "lineNumber": 274,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": "        }"
      },
      {
        "lineNumber": 275,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": ""
      },
      {
        "lineNumber": 276,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 277,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": "        public boolean getHasBank() {"
      },
      {
        "lineNumber": 278,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 279,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": "        }"
      },
      {
        "lineNumber": 280,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": ""
      },
      {
        "lineNumber": 281,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 282,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": "        public Game getGame() {"
      },
      {
        "lineNumber": 283,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": "            return this.game;"
      },
      {
        "lineNumber": 284,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": "        }"
      },
      {
        "lineNumber": 285,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": ""
      },
      {
        "lineNumber": 286,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 287,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": "        public boolean hasWordBank(String name) {"
      },
      {
        "lineNumber": 288,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 289,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": "        }"
      },
      {
        "lineNumber": 290,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": ""
      },
      {
        "lineNumber": 291,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 292,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": "        public WordBank getWordBankFromName(String name) {"
      },
      {
        "lineNumber": 293,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": "            return null;"
      },
      {
        "lineNumber": 294,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": "        }"
      },
      {
        "lineNumber": 295,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": ""
      },
      {
        "lineNumber": 296,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 297,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": "        public DifficultyEnum getCurrentGameDifficulty() {"
      },
      {
        "lineNumber": 298,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": "            return null;"
      },
      {
        "lineNumber": 299,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": "        }"
      },
      {
        "lineNumber": 300,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": ""
      },
      {
        "lineNumber": 301,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 302,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": "        public AppSettings getAppSettings() {"
      },
      {
        "lineNumber": 303,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": "            return null;"
      },
      {
        "lineNumber": 304,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": "        }"
      },
      {
        "lineNumber": 305,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": ""
      },
      {
        "lineNumber": 306,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 307,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": "        public Path getAppSettingsFilePath() {"
      },
      {
        "lineNumber": 308,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": "            return null;"
      },
      {
        "lineNumber": 309,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": "        }"
      },
      {
        "lineNumber": 310,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": ""
      },
      {
        "lineNumber": 311,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 312,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": "        public void setDefaultDifficulty(DifficultyEnum difficultyEnum) {"
      },
      {
        "lineNumber": 313,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": ""
      },
      {
        "lineNumber": 314,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": "        }"
      },
      {
        "lineNumber": 315,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": ""
      },
      {
        "lineNumber": 316,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 317,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": "        public DifficultyEnum getDefaultDifficulty() {"
      },
      {
        "lineNumber": 318,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": "            return null;"
      },
      {
        "lineNumber": 319,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": "        }"
      },
      {
        "lineNumber": 320,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": ""
      },
      {
        "lineNumber": 321,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 322,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": "        public void setDefaultTheme(ThemeEnum themeEnum) {"
      },
      {
        "lineNumber": 323,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": ""
      },
      {
        "lineNumber": 324,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": "        }"
      },
      {
        "lineNumber": 325,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": ""
      },
      {
        "lineNumber": 326,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 327,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": "        public ThemeEnum getDefaultTheme() {"
      },
      {
        "lineNumber": 328,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": "            return null;"
      },
      {
        "lineNumber": 329,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": "        }"
      },
      {
        "lineNumber": 330,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": ""
      },
      {
        "lineNumber": 331,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 332,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": "        public void setHintsEnabled(boolean enabled) {"
      },
      {
        "lineNumber": 333,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": ""
      },
      {
        "lineNumber": 334,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": "        }"
      },
      {
        "lineNumber": 335,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": ""
      },
      {
        "lineNumber": 336,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 337,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": "        public long getTimeAllowedPerQuestion() {"
      },
      {
        "lineNumber": 338,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": "            return 0;"
      },
      {
        "lineNumber": 339,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": "        }"
      },
      {
        "lineNumber": 340,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": ""
      },
      {
        "lineNumber": 341,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 342,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": "        public FormattedHint getHintFormatFromCurrentGame() {"
      },
      {
        "lineNumber": 343,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": "            return null;"
      },
      {
        "lineNumber": 344,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": "        }"
      },
      {
        "lineNumber": 345,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": ""
      },
      {
        "lineNumber": 346,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 347,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": "        public int getHintFormatSizeFromCurrentGame() {"
      },
      {
        "lineNumber": 348,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": "            return 0;"
      },
      {
        "lineNumber": 349,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": "        }"
      },
      {
        "lineNumber": 350,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": ""
      },
      {
        "lineNumber": 351,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 352,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": "        public boolean getHintsEnabled() {"
      },
      {
        "lineNumber": 353,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 354,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": "        }"
      },
      {
        "lineNumber": 355,
        "author": {
          "gitId": "dragontho"
        },
        "content": ""
      },
      {
        "lineNumber": 356,
        "author": {
          "gitId": "dragontho"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 357,
        "author": {
          "gitId": "dragontho"
        },
        "content": "        public void setAvatarId(int avatarId) {"
      },
      {
        "lineNumber": 358,
        "author": {
          "gitId": "dragontho"
        },
        "content": ""
      },
      {
        "lineNumber": 359,
        "author": {
          "gitId": "dragontho"
        },
        "content": "        }"
      },
      {
        "lineNumber": 360,
        "author": {
          "gitId": "dragontho"
        },
        "content": ""
      },
      {
        "lineNumber": 361,
        "author": {
          "gitId": "dragontho"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 362,
        "author": {
          "gitId": "dragontho"
        },
        "content": "        public int getAvatarId() {"
      },
      {
        "lineNumber": 363,
        "author": {
          "gitId": "dragontho"
        },
        "content": "            return 0;"
      },
      {
        "lineNumber": 364,
        "author": {
          "gitId": "dragontho"
        },
        "content": "        }"
      },
      {
        "lineNumber": 365,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": "    }"
      },
      {
        "lineNumber": 366,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "dragontho": 13,
      "kohyida1997": 353
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/commands/settingscommands/DifficultyCommandTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "dragontho"
        },
        "content": "package seedu.address.logic.commands.settingscommands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "dragontho"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "dragontho"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "dragontho"
        },
        "content": "import static seedu.address.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "dragontho"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "dragontho"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "dragontho"
        },
        "content": "import java.util.function.Predicate;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "dragontho"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "dragontho"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "dragontho"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "dragontho"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "dragontho"
        },
        "content": "import seedu.address.commons.core.GuiSettings;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "dragontho"
        },
        "content": "import seedu.address.logic.commands.CommandResult;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "dragontho"
        },
        "content": "import seedu.address.logic.commands.settingcommands.DifficultyCommand;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "dragontho"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "dragontho"
        },
        "content": "import seedu.address.model.ReadOnlyUserPrefs;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "dragontho"
        },
        "content": "import seedu.address.model.appsettings.AppSettings;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "dragontho"
        },
        "content": "import seedu.address.model.appsettings.DifficultyEnum;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "dragontho"
        },
        "content": "import seedu.address.model.appsettings.ThemeEnum;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "dragontho"
        },
        "content": "import seedu.address.model.card.Card;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "dragontho"
        },
        "content": "import seedu.address.model.card.FormattedHint;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "dragontho"
        },
        "content": "import seedu.address.model.game.Game;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "dragontho"
        },
        "content": "import seedu.address.model.globalstatistics.GlobalStatistics;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "dragontho"
        },
        "content": "import seedu.address.model.wordbank.ReadOnlyWordBank;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "dragontho"
        },
        "content": "import seedu.address.model.wordbank.WordBank;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "dragontho"
        },
        "content": "import seedu.address.model.wordbanklist.WordBankList;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "dragontho"
        },
        "content": "import seedu.address.model.wordbankstatslist.WordBankStatisticsList;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "dragontho"
        },
        "content": "import seedu.address.statistics.WordBankStatistics;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "dragontho"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "dragontho"
        },
        "content": "public class DifficultyCommandTest {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "dragontho"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "dragontho"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "dragontho"
        },
        "content": "    public void constructor_nullDifficulty_throwsNullPointerException() {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "dragontho"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e new DifficultyCommand(null));"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "dragontho"
        },
        "content": "    }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "dragontho"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "dragontho"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "dragontho"
        },
        "content": "    public void execute_properArgument_success() {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "dragontho"
        },
        "content": "        ModelStub stub \u003d new ModelStub();"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "dragontho"
        },
        "content": "        DifficultyCommand testCommand \u003d new DifficultyCommand(DifficultyEnum.HARD);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "dragontho"
        },
        "content": "        assertEquals(DifficultyEnum.EASY, stub.getDefaultDifficulty());"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "dragontho"
        },
        "content": "        CommandResult result \u003d testCommand.execute(stub);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "dragontho"
        },
        "content": "        assertEquals(DifficultyEnum.HARD, stub.getDefaultDifficulty());"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "dragontho"
        },
        "content": "        assertEquals(\"Difficulty is now set to: \" + DifficultyEnum.HARD, result.getFeedbackToUser());"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "dragontho"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "dragontho"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "dragontho"
        },
        "content": "    private class ModelStub implements Model {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "dragontho"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "dragontho"
        },
        "content": "        private DifficultyEnum testDifficulty \u003d DifficultyEnum.EASY;"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "dragontho"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "dragontho"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "dragontho"
        },
        "content": "        public void setGame(Game game) {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "dragontho"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "dragontho"
        },
        "content": "        }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "dragontho"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "dragontho"
        },
        "content": "        public Game getGame() {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "dragontho"
        },
        "content": "            return null;"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "dragontho"
        },
        "content": "        }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "dragontho"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "dragontho"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "dragontho"
        },
        "content": "        public boolean hasWordBank(String name) {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "dragontho"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "dragontho"
        },
        "content": "        }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "dragontho"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "dragontho"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "dragontho"
        },
        "content": "        public WordBank getWordBankFromName(String name) {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "dragontho"
        },
        "content": "            return null;"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "dragontho"
        },
        "content": "        }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "dragontho"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "dragontho"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "dragontho"
        },
        "content": "        public boolean gameIsOver() {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "dragontho"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "dragontho"
        },
        "content": "        }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "dragontho"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "dragontho"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "dragontho"
        },
        "content": "        public boolean getHasBank() {"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "dragontho"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "dragontho"
        },
        "content": "        }"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "dragontho"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "dragontho"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "dragontho"
        },
        "content": "        public AppSettings getAppSettings() {"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "dragontho"
        },
        "content": "            return null;"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "dragontho"
        },
        "content": "        }"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "dragontho"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "dragontho"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "dragontho"
        },
        "content": "        public Path getAppSettingsFilePath() {"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "dragontho"
        },
        "content": "            return null;"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "dragontho"
        },
        "content": "        }"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "dragontho"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "dragontho"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "dragontho"
        },
        "content": "        public void setDefaultDifficulty(DifficultyEnum difficultyEnum) {"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "dragontho"
        },
        "content": "            this.testDifficulty \u003d difficultyEnum;"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "dragontho"
        },
        "content": "        }"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "dragontho"
        },
        "content": ""
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "dragontho"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "dragontho"
        },
        "content": "        public DifficultyEnum getDefaultDifficulty() {"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "dragontho"
        },
        "content": "            return testDifficulty;"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "dragontho"
        },
        "content": "        }"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "dragontho"
        },
        "content": ""
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "dragontho"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "dragontho"
        },
        "content": "        public DifficultyEnum getCurrentGameDifficulty() {"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "dragontho"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "dragontho"
        },
        "content": "        }"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "dragontho"
        },
        "content": ""
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "dragontho"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "dragontho"
        },
        "content": "        public void setDefaultTheme(ThemeEnum themeEnum) {"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "dragontho"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "dragontho"
        },
        "content": "        }"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "dragontho"
        },
        "content": ""
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "dragontho"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "dragontho"
        },
        "content": "        public ThemeEnum getDefaultTheme() {"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "dragontho"
        },
        "content": "            return null;"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "dragontho"
        },
        "content": "        }"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "dragontho"
        },
        "content": ""
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "dragontho"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "dragontho"
        },
        "content": "        public void setHintsEnabled(boolean enabled) {"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "dragontho"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "dragontho"
        },
        "content": "        }"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "dragontho"
        },
        "content": ""
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "dragontho"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "dragontho"
        },
        "content": "        public long getTimeAllowedPerQuestion() {"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "dragontho"
        },
        "content": "            return 0;"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "dragontho"
        },
        "content": "        }"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "dragontho"
        },
        "content": ""
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "dragontho"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "dragontho"
        },
        "content": "        public FormattedHint getHintFormatFromCurrentGame() {"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "dragontho"
        },
        "content": "            return null;"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "dragontho"
        },
        "content": "        }"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "dragontho"
        },
        "content": ""
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "dragontho"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "dragontho"
        },
        "content": "        public int getHintFormatSizeFromCurrentGame() {"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "dragontho"
        },
        "content": "            return 0;"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "dragontho"
        },
        "content": "        }"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "dragontho"
        },
        "content": ""
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "dragontho"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "dragontho"
        },
        "content": "        public boolean getHintsEnabled() {"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "dragontho"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "dragontho"
        },
        "content": "        }"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "dragontho"
        },
        "content": ""
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "dragontho"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "dragontho"
        },
        "content": "        public void setAvatarId(int avatarId) {"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "dragontho"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "dragontho"
        },
        "content": "        }"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "dragontho"
        },
        "content": ""
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "dragontho"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "dragontho"
        },
        "content": "        public int getAvatarId() {"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "dragontho"
        },
        "content": "            return 0;"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "dragontho"
        },
        "content": "        }"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "dragontho"
        },
        "content": ""
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "dragontho"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "dragontho"
        },
        "content": "        public void setUserPrefs(ReadOnlyUserPrefs userPrefs) {"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "dragontho"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "dragontho"
        },
        "content": "        }"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "dragontho"
        },
        "content": ""
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "dragontho"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "dragontho"
        },
        "content": "        public ReadOnlyUserPrefs getUserPrefs() {"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "dragontho"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "dragontho"
        },
        "content": "        }"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "dragontho"
        },
        "content": ""
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "dragontho"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "dragontho"
        },
        "content": "        public GuiSettings getGuiSettings() {"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "dragontho"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "dragontho"
        },
        "content": "        }"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "dragontho"
        },
        "content": ""
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "dragontho"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "dragontho"
        },
        "content": "        public void setGuiSettings(GuiSettings guiSettings) {"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "dragontho"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "dragontho"
        },
        "content": "        }"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "dragontho"
        },
        "content": ""
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "dragontho"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "dragontho"
        },
        "content": "        public Path getWordBankFilePath() {"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "dragontho"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "dragontho"
        },
        "content": "        }"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "dragontho"
        },
        "content": ""
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "dragontho"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "dragontho"
        },
        "content": "        public void setWordBankFilePath(Path addressBookFilePath) {"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "dragontho"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "dragontho"
        },
        "content": "        }"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "dragontho"
        },
        "content": ""
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "dragontho"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "dragontho"
        },
        "content": "        public void setCurrentWordBank(ReadOnlyWordBank currenWordBank) {"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "dragontho"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "dragontho"
        },
        "content": "        }"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "dragontho"
        },
        "content": ""
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "dragontho"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "dragontho"
        },
        "content": "        public void addCard(Card card) {"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "dragontho"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "dragontho"
        },
        "content": "        }"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "dragontho"
        },
        "content": ""
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "dragontho"
        },
        "content": ""
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "dragontho"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "dragontho"
        },
        "content": "        public void updateWordBank(String name) {"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "dragontho"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "dragontho"
        },
        "content": "        }"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "dragontho"
        },
        "content": ""
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "dragontho"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "dragontho"
        },
        "content": "        public WordBankStatistics getWordBankStatistics() {"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "dragontho"
        },
        "content": "            return null;"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "dragontho"
        },
        "content": "        }"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "dragontho"
        },
        "content": ""
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "dragontho"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "dragontho"
        },
        "content": "        public void setWordBankStatistics(WordBankStatistics wordBankStats) {"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "dragontho"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "dragontho"
        },
        "content": "        }"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "dragontho"
        },
        "content": ""
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "dragontho"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "dragontho"
        },
        "content": "        public void clearWordBankStatistics() {"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "dragontho"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "dragontho"
        },
        "content": "        }"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "dragontho"
        },
        "content": ""
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "dragontho"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "dragontho"
        },
        "content": "        public void clearWordBank() {"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "dragontho"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "dragontho"
        },
        "content": "        }"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "dragontho"
        },
        "content": ""
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "dragontho"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "dragontho"
        },
        "content": "        public ReadOnlyWordBank getCurrentWordBank() {"
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "dragontho"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "dragontho"
        },
        "content": "        }"
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "dragontho"
        },
        "content": ""
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "dragontho"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "dragontho"
        },
        "content": "        public boolean hasCard(Card card) {"
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "dragontho"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "dragontho"
        },
        "content": "        }"
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "dragontho"
        },
        "content": ""
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "dragontho"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "dragontho"
        },
        "content": "        public void deleteCard(Card target) {"
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "dragontho"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "dragontho"
        },
        "content": "        }"
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "dragontho"
        },
        "content": ""
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "dragontho"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "dragontho"
        },
        "content": "        public void setCard(Card target, Card editedCard) {"
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "dragontho"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "dragontho"
        },
        "content": "        }"
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "dragontho"
        },
        "content": ""
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "dragontho"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "dragontho"
        },
        "content": "        public ObservableList\u003cCard\u003e getFilteredCardList() {"
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "dragontho"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "dragontho"
        },
        "content": "        }"
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "dragontho"
        },
        "content": ""
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "dragontho"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "dragontho"
        },
        "content": "        public ObservableList\u003cWordBank\u003e getFilteredWordBankList() {"
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "dragontho"
        },
        "content": "            return null;"
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "dragontho"
        },
        "content": "        }"
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "dragontho"
        },
        "content": ""
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "dragontho"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "dragontho"
        },
        "content": "        public WordBankList getWordBankList() {"
      },
      {
        "lineNumber": 248,
        "author": {
          "gitId": "dragontho"
        },
        "content": "            return null;"
      },
      {
        "lineNumber": 249,
        "author": {
          "gitId": "dragontho"
        },
        "content": "        }"
      },
      {
        "lineNumber": 250,
        "author": {
          "gitId": "dragontho"
        },
        "content": ""
      },
      {
        "lineNumber": 251,
        "author": {
          "gitId": "dragontho"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 252,
        "author": {
          "gitId": "dragontho"
        },
        "content": "        public WordBankStatisticsList getWordBankStatisticsList() {"
      },
      {
        "lineNumber": 253,
        "author": {
          "gitId": "dragontho"
        },
        "content": "            return null;"
      },
      {
        "lineNumber": 254,
        "author": {
          "gitId": "dragontho"
        },
        "content": "        }"
      },
      {
        "lineNumber": 255,
        "author": {
          "gitId": "dragontho"
        },
        "content": ""
      },
      {
        "lineNumber": 256,
        "author": {
          "gitId": "dragontho"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 257,
        "author": {
          "gitId": "dragontho"
        },
        "content": "        public void updateFilteredCardList(Predicate\u003cCard\u003e predicate) {"
      },
      {
        "lineNumber": 258,
        "author": {
          "gitId": "dragontho"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 259,
        "author": {
          "gitId": "dragontho"
        },
        "content": "        }"
      },
      {
        "lineNumber": 260,
        "author": {
          "gitId": "dragontho"
        },
        "content": ""
      },
      {
        "lineNumber": 261,
        "author": {
          "gitId": "dragontho"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 262,
        "author": {
          "gitId": "dragontho"
        },
        "content": "        public GlobalStatistics getGlobalStatistics() {"
      },
      {
        "lineNumber": 263,
        "author": {
          "gitId": "dragontho"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 264,
        "author": {
          "gitId": "dragontho"
        },
        "content": "        }"
      },
      {
        "lineNumber": 265,
        "author": {
          "gitId": "dragontho"
        },
        "content": "    }"
      },
      {
        "lineNumber": 266,
        "author": {
          "gitId": "dragontho"
        },
        "content": ""
      },
      {
        "lineNumber": 267,
        "author": {
          "gitId": "dragontho"
        },
        "content": "}"
      },
      {
        "lineNumber": 268,
        "author": {
          "gitId": "dragontho"
        },
        "content": ""
      }
    ],
    "authorContributionMap": {
      "dragontho": 268
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/commands/settingscommands/ThemeCommandTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "dragontho"
        },
        "content": "package seedu.address.logic.commands.settingscommands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "dragontho"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "dragontho"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "dragontho"
        },
        "content": "import static seedu.address.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "dragontho"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "dragontho"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "dragontho"
        },
        "content": "import java.util.function.Predicate;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "dragontho"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "dragontho"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "dragontho"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "dragontho"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "dragontho"
        },
        "content": "import seedu.address.commons.core.GuiSettings;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "dragontho"
        },
        "content": "import seedu.address.logic.commands.CommandResult;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "dragontho"
        },
        "content": "import seedu.address.logic.commands.settingcommands.ThemeCommand;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "dragontho"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "dragontho"
        },
        "content": "import seedu.address.model.ReadOnlyUserPrefs;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "dragontho"
        },
        "content": "import seedu.address.model.appsettings.AppSettings;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "dragontho"
        },
        "content": "import seedu.address.model.appsettings.DifficultyEnum;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "dragontho"
        },
        "content": "import seedu.address.model.appsettings.ThemeEnum;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "dragontho"
        },
        "content": "import seedu.address.model.card.Card;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "dragontho"
        },
        "content": "import seedu.address.model.card.FormattedHint;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "dragontho"
        },
        "content": "import seedu.address.model.game.Game;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "dragontho"
        },
        "content": "import seedu.address.model.globalstatistics.GlobalStatistics;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "dragontho"
        },
        "content": "import seedu.address.model.wordbank.ReadOnlyWordBank;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "dragontho"
        },
        "content": "import seedu.address.model.wordbank.WordBank;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "dragontho"
        },
        "content": "import seedu.address.model.wordbanklist.WordBankList;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "dragontho"
        },
        "content": "import seedu.address.model.wordbankstatslist.WordBankStatisticsList;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "dragontho"
        },
        "content": "import seedu.address.statistics.WordBankStatistics;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "dragontho"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "dragontho"
        },
        "content": "public class ThemeCommandTest {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "dragontho"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "dragontho"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "dragontho"
        },
        "content": "    public void constructor_nullTheme_throwsNullPointerException() {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "dragontho"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e new ThemeCommand(null));"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "dragontho"
        },
        "content": "    }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "dragontho"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "dragontho"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "dragontho"
        },
        "content": "    public void execute_properArgument_success() {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "dragontho"
        },
        "content": "        ModelStub stub \u003d new ModelStub();"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "dragontho"
        },
        "content": "        ThemeCommand testCommand \u003d new ThemeCommand(ThemeEnum.LIGHT);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "dragontho"
        },
        "content": "        assertEquals(ThemeEnum.DARK, stub.getDefaultTheme());"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "dragontho"
        },
        "content": "        CommandResult result \u003d testCommand.execute(stub);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "dragontho"
        },
        "content": "        assertEquals(ThemeEnum.LIGHT, stub.getDefaultTheme());"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "dragontho"
        },
        "content": "        assertEquals(\"Theme now set to: \" + ThemeEnum.LIGHT, result.getFeedbackToUser());"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "dragontho"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "dragontho"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "dragontho"
        },
        "content": "    private class ModelStub implements Model {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "dragontho"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "dragontho"
        },
        "content": "        private ThemeEnum testTheme \u003d ThemeEnum.DARK;"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "dragontho"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "dragontho"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "dragontho"
        },
        "content": "        public void setGame(Game game) {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "dragontho"
        },
        "content": "        }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "dragontho"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "dragontho"
        },
        "content": "        public Game getGame() {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "dragontho"
        },
        "content": "            return null;"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "dragontho"
        },
        "content": "        }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "dragontho"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "dragontho"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "dragontho"
        },
        "content": "        public boolean hasWordBank(String name) {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "dragontho"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "dragontho"
        },
        "content": "        }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "dragontho"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "dragontho"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "dragontho"
        },
        "content": "        public WordBank getWordBankFromName(String name) {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "dragontho"
        },
        "content": "            return null;"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "dragontho"
        },
        "content": "        }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "dragontho"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "dragontho"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "dragontho"
        },
        "content": "        public boolean gameIsOver() {"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "dragontho"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "dragontho"
        },
        "content": "        }"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "dragontho"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "dragontho"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "dragontho"
        },
        "content": "        public boolean getHasBank() {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "dragontho"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "dragontho"
        },
        "content": "        }"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "dragontho"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "dragontho"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "dragontho"
        },
        "content": "        public AppSettings getAppSettings() {"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "dragontho"
        },
        "content": "            return null;"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "dragontho"
        },
        "content": "        }"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "dragontho"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "dragontho"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "dragontho"
        },
        "content": "        public Path getAppSettingsFilePath() {"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "dragontho"
        },
        "content": "            return null;"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "dragontho"
        },
        "content": "        }"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "dragontho"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "dragontho"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "dragontho"
        },
        "content": "        public void setDefaultDifficulty(DifficultyEnum difficultyEnum) {"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "dragontho"
        },
        "content": "        }"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "dragontho"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "dragontho"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "dragontho"
        },
        "content": "        public DifficultyEnum getDefaultDifficulty() {"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "dragontho"
        },
        "content": "            return null;"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "dragontho"
        },
        "content": "        }"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "dragontho"
        },
        "content": ""
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "dragontho"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "dragontho"
        },
        "content": "        public DifficultyEnum getCurrentGameDifficulty() {"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "dragontho"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "dragontho"
        },
        "content": "        }"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "dragontho"
        },
        "content": ""
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "dragontho"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "dragontho"
        },
        "content": "        public void setDefaultTheme(ThemeEnum themeEnum) {"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "dragontho"
        },
        "content": "            this.testTheme \u003d themeEnum;"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "dragontho"
        },
        "content": "        }"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "dragontho"
        },
        "content": ""
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "dragontho"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "dragontho"
        },
        "content": "        public ThemeEnum getDefaultTheme() {"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "dragontho"
        },
        "content": "            return this.testTheme;"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "dragontho"
        },
        "content": "        }"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "dragontho"
        },
        "content": ""
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "dragontho"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "dragontho"
        },
        "content": "        public void setHintsEnabled(boolean enabled) {"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "dragontho"
        },
        "content": ""
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "dragontho"
        },
        "content": "        }"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "dragontho"
        },
        "content": ""
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "dragontho"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "dragontho"
        },
        "content": "        public long getTimeAllowedPerQuestion() {"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "dragontho"
        },
        "content": "            return 0;"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "dragontho"
        },
        "content": "        }"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "dragontho"
        },
        "content": ""
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "dragontho"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "dragontho"
        },
        "content": "        public FormattedHint getHintFormatFromCurrentGame() {"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "dragontho"
        },
        "content": "            return null;"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "dragontho"
        },
        "content": "        }"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "dragontho"
        },
        "content": ""
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "dragontho"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "dragontho"
        },
        "content": "        public int getHintFormatSizeFromCurrentGame() {"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "dragontho"
        },
        "content": "            return 0;"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "dragontho"
        },
        "content": "        }"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "dragontho"
        },
        "content": ""
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "dragontho"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "dragontho"
        },
        "content": "        public boolean getHintsEnabled() {"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "dragontho"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "dragontho"
        },
        "content": "        }"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "dragontho"
        },
        "content": ""
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "dragontho"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "dragontho"
        },
        "content": "        public void setAvatarId(int avatarId) {"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "dragontho"
        },
        "content": ""
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "dragontho"
        },
        "content": "        }"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "dragontho"
        },
        "content": ""
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "dragontho"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "dragontho"
        },
        "content": "        public int getAvatarId() {"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "dragontho"
        },
        "content": "            return 0;"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "dragontho"
        },
        "content": "        }"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "dragontho"
        },
        "content": ""
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "dragontho"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "dragontho"
        },
        "content": "        public void setUserPrefs(ReadOnlyUserPrefs userPrefs) {"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "dragontho"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "dragontho"
        },
        "content": "        }"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "dragontho"
        },
        "content": ""
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "dragontho"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "dragontho"
        },
        "content": "        public ReadOnlyUserPrefs getUserPrefs() {"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "dragontho"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "dragontho"
        },
        "content": "        }"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "dragontho"
        },
        "content": ""
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "dragontho"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "dragontho"
        },
        "content": "        public GuiSettings getGuiSettings() {"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "dragontho"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "dragontho"
        },
        "content": "        }"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "dragontho"
        },
        "content": ""
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "dragontho"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "dragontho"
        },
        "content": "        public void setGuiSettings(GuiSettings guiSettings) {"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "dragontho"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "dragontho"
        },
        "content": "        }"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "dragontho"
        },
        "content": ""
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "dragontho"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "dragontho"
        },
        "content": "        public Path getWordBankFilePath() {"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "dragontho"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "dragontho"
        },
        "content": "        }"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "dragontho"
        },
        "content": ""
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "dragontho"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "dragontho"
        },
        "content": "        public void setWordBankFilePath(Path addressBookFilePath) {"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "dragontho"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "dragontho"
        },
        "content": "        }"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "dragontho"
        },
        "content": ""
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "dragontho"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "dragontho"
        },
        "content": "        public void setCurrentWordBank(ReadOnlyWordBank currenWordBank) {"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "dragontho"
        },
        "content": ""
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "dragontho"
        },
        "content": "        }"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "dragontho"
        },
        "content": ""
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "dragontho"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "dragontho"
        },
        "content": "        public void addCard(Card card) {"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "dragontho"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "dragontho"
        },
        "content": "        }"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "dragontho"
        },
        "content": ""
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "dragontho"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "dragontho"
        },
        "content": "        public void updateWordBank(String name) {"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "dragontho"
        },
        "content": ""
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "dragontho"
        },
        "content": "        }"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "dragontho"
        },
        "content": ""
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "dragontho"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "dragontho"
        },
        "content": "        public WordBankStatistics getWordBankStatistics() {"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "dragontho"
        },
        "content": "            return null;"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "dragontho"
        },
        "content": "        }"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "dragontho"
        },
        "content": ""
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "dragontho"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "dragontho"
        },
        "content": "        public void setWordBankStatistics(WordBankStatistics wordBankStats) {"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "dragontho"
        },
        "content": ""
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "dragontho"
        },
        "content": "        }"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "dragontho"
        },
        "content": ""
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "dragontho"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "dragontho"
        },
        "content": "        public void clearWordBankStatistics() {"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "dragontho"
        },
        "content": ""
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "dragontho"
        },
        "content": "        }"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "dragontho"
        },
        "content": ""
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "dragontho"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "dragontho"
        },
        "content": "        public void clearWordBank() {"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "dragontho"
        },
        "content": ""
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "dragontho"
        },
        "content": "        }"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "dragontho"
        },
        "content": ""
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "dragontho"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "dragontho"
        },
        "content": "        public ReadOnlyWordBank getCurrentWordBank() {"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "dragontho"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "dragontho"
        },
        "content": "        }"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "dragontho"
        },
        "content": ""
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "dragontho"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "dragontho"
        },
        "content": "        public boolean hasCard(Card card) {"
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "dragontho"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "dragontho"
        },
        "content": "        }"
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "dragontho"
        },
        "content": ""
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "dragontho"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "dragontho"
        },
        "content": "        public void deleteCard(Card target) {"
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "dragontho"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "dragontho"
        },
        "content": "        }"
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "dragontho"
        },
        "content": ""
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "dragontho"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "dragontho"
        },
        "content": "        public void setCard(Card target, Card editedCard) {"
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "dragontho"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "dragontho"
        },
        "content": "        }"
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "dragontho"
        },
        "content": ""
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "dragontho"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "dragontho"
        },
        "content": "        public ObservableList\u003cCard\u003e getFilteredCardList() {"
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "dragontho"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "dragontho"
        },
        "content": "        }"
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "dragontho"
        },
        "content": ""
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "dragontho"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "dragontho"
        },
        "content": "        public ObservableList\u003cWordBank\u003e getFilteredWordBankList() {"
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "dragontho"
        },
        "content": "            return null;"
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "dragontho"
        },
        "content": "        }"
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "dragontho"
        },
        "content": ""
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "dragontho"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "dragontho"
        },
        "content": "        public WordBankList getWordBankList() {"
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "dragontho"
        },
        "content": "            return null;"
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "dragontho"
        },
        "content": "        }"
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "dragontho"
        },
        "content": ""
      },
      {
        "lineNumber": 248,
        "author": {
          "gitId": "dragontho"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 249,
        "author": {
          "gitId": "dragontho"
        },
        "content": "        public WordBankStatisticsList getWordBankStatisticsList() {"
      },
      {
        "lineNumber": 250,
        "author": {
          "gitId": "dragontho"
        },
        "content": "            return null;"
      },
      {
        "lineNumber": 251,
        "author": {
          "gitId": "dragontho"
        },
        "content": "        }"
      },
      {
        "lineNumber": 252,
        "author": {
          "gitId": "dragontho"
        },
        "content": ""
      },
      {
        "lineNumber": 253,
        "author": {
          "gitId": "dragontho"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 254,
        "author": {
          "gitId": "dragontho"
        },
        "content": "        public void updateFilteredCardList(Predicate\u003cCard\u003e predicate) {"
      },
      {
        "lineNumber": 255,
        "author": {
          "gitId": "dragontho"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 256,
        "author": {
          "gitId": "dragontho"
        },
        "content": "        }"
      },
      {
        "lineNumber": 257,
        "author": {
          "gitId": "dragontho"
        },
        "content": ""
      },
      {
        "lineNumber": 258,
        "author": {
          "gitId": "dragontho"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 259,
        "author": {
          "gitId": "dragontho"
        },
        "content": "        public GlobalStatistics getGlobalStatistics() {"
      },
      {
        "lineNumber": 260,
        "author": {
          "gitId": "dragontho"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 261,
        "author": {
          "gitId": "dragontho"
        },
        "content": "        }"
      },
      {
        "lineNumber": 262,
        "author": {
          "gitId": "dragontho"
        },
        "content": "    }"
      },
      {
        "lineNumber": 263,
        "author": {
          "gitId": "dragontho"
        },
        "content": ""
      },
      {
        "lineNumber": 264,
        "author": {
          "gitId": "dragontho"
        },
        "content": "}"
      },
      {
        "lineNumber": 265,
        "author": {
          "gitId": "dragontho"
        },
        "content": ""
      }
    ],
    "authorContributionMap": {
      "dragontho": 265
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/commands/switches/StartCommandTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": "package seedu.address.logic.commands.switches;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertThrows;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": "import static org.junit.jupiter.api.Assertions.fail;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": "import static seedu.address.logic.commands.switches.StartCommand.MESSAGE_TOO_FEW_CANNOT_START;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": "import static seedu.address.logic.commands.switches.StartCommand.MESSAGE_TOO_FEW_CARDS;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": "import static seedu.address.logic.commands.switches.StartCommand.MESSAGE_WORDBANK_NOT_LOADED;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": "import static seedu.address.testutil.TypicalCards.ABRA;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": "import static seedu.address.testutil.TypicalCards.BUTTERFREE;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": "import static seedu.address.testutil.TypicalCards.CHARIZARD;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": "import java.util.function.Predicate;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": "import org.junit.jupiter.api.BeforeEach;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": "import seedu.address.commons.core.GuiSettings;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": "import seedu.address.logic.util.ModeEnum;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": "import seedu.address.model.ReadOnlyUserPrefs;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": "import seedu.address.model.appsettings.AppSettings;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": "import seedu.address.model.appsettings.DifficultyEnum;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": "import seedu.address.model.appsettings.ThemeEnum;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": "import seedu.address.model.card.Card;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": "import seedu.address.model.card.FormattedHint;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": "import seedu.address.model.game.Game;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": "import seedu.address.model.globalstatistics.GlobalStatistics;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": "import seedu.address.model.wordbank.ReadOnlyWordBank;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": "import seedu.address.model.wordbank.WordBank;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": "import seedu.address.model.wordbanklist.WordBankList;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": "import seedu.address.model.wordbankstatslist.WordBankStatisticsList;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": "import seedu.address.statistics.WordBankStatistics;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": "import seedu.address.testutil.WordBankBuilder;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": "class StartCommandTest {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": "    private WordBank threeCardWordBank \u003d new WordBankBuilder(\"threeCardWordBank\")"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": "            .withCard(ABRA).withCard(BUTTERFREE).withCard(CHARIZARD).build();"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": "    private WordBank twoCardWordBank \u003d new WordBankBuilder(\"twoCardWordBank\")"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": "            .withCard(ABRA).withCard(BUTTERFREE).build();"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": "    private WordBank zeroCardWordbank \u003d new WordBankBuilder(\"zeroCardWordBank\").build();"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": "    private ArrayList\u003cWordBank\u003e dummyListOfWordBanks;"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": "    @BeforeEach"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": "    void setUpDummyListOfWordBanks() {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": "        dummyListOfWordBanks \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": "        dummyListOfWordBanks.add(threeCardWordBank);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": "        dummyListOfWordBanks.add(twoCardWordBank);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": "        dummyListOfWordBanks.add(zeroCardWordbank);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": "    }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": "    void getNewMode() {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": "        StartCommand dummyStartCommand1 \u003d new StartCommand(Optional.empty());"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": "        assertEquals(dummyStartCommand1.getNewMode(ModeEnum.GAME), ModeEnum.GAME);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": "    }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": "    void execute_noDifficultySpecified() {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": "        Model dummyModel \u003d new ModelStub();"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "dragontho"
        },
        "content": "        dummyModel.setCurrentWordBank(threeCardWordBank);"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": "        StartCommand dummyStartCommand1 \u003d new StartCommand(Optional.empty());"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": "            dummyStartCommand1.execute(dummyModel);"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": "        } catch (CommandException e) {"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": "            // Should not throw exception."
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": "            e.printStackTrace();"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": "            fail();"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": "        }"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": "        // No Difficulty specified, defaults to the Model\u0027s default difficulty, which is"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": "        assertEquals(DifficultyEnum.EASY, dummyModel.getCurrentGameDifficulty());"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": "    }"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": "    void execute_difficultySpecified() {"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": "        Model dummyModel \u003d new ModelStub();"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "dragontho"
        },
        "content": "        dummyModel.setCurrentWordBank(threeCardWordBank);"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": "        StartCommand dummyStartCommand1 \u003d new StartCommand(Optional.of(DifficultyEnum.HARD));"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": "            dummyStartCommand1.execute(dummyModel);"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": "        } catch (CommandException e) {"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": "            // Should not throw exception."
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": "            e.printStackTrace();"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": "            fail();"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": "        }"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": ""
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": "        // Difficulty is specified, game should be set to input difficulty."
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": "        assertEquals(DifficultyEnum.HARD, dummyModel.getCurrentGameDifficulty());"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": "    }"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": ""
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": "    void execute_lessThanThreeCards_throwsCommandException() {"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": "        Model dummyModel \u003d new ModelStub();"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "dragontho"
        },
        "content": "        dummyModel.setCurrentWordBank(twoCardWordBank);"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": "        StartCommand dummyStartCommand1 \u003d new StartCommand(Optional.of(DifficultyEnum.HARD));"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": ""
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": "        assertThrows(CommandException.class, () -\u003e dummyStartCommand1.execute(dummyModel));"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": "            dummyStartCommand1.execute(dummyModel);"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": "        } catch (CommandException ce) {"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": "            assertEquals(ce.getMessage(), MESSAGE_TOO_FEW_CARDS + 2"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": "                    + \"\\n\" + MESSAGE_TOO_FEW_CANNOT_START);"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": "            return;"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": "        }"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": "        // Test Should not reach this point as it returns in catch block."
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": "        fail();"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": "    }"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": ""
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": "    void execute_zeroCards_throwsCommandException() {"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": "        Model dummyModel \u003d new ModelStub();"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "dragontho"
        },
        "content": "        dummyModel.setCurrentWordBank(zeroCardWordbank);"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": "        StartCommand dummyStartCommand1 \u003d new StartCommand(Optional.of(DifficultyEnum.HARD));"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": ""
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": "        assertThrows(CommandException.class, () -\u003e dummyStartCommand1.execute(dummyModel));"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": "            dummyStartCommand1.execute(dummyModel);"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": "        } catch (CommandException ce) {"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": "            assertEquals(ce.getMessage(), MESSAGE_TOO_FEW_CARDS + 0"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": "                    + \"\\n\" + MESSAGE_TOO_FEW_CANNOT_START);"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": "            return;"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": "        }"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": "        // Test Should not reach this point as it returns in catch block."
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": "        fail();"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": "    }"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": ""
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": "    void execute_nullWordBank_throwsCommandException() {"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": "        Model dummyModel \u003d new ModelStub();"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": "        StartCommand dummyStartCommand1 \u003d new StartCommand(Optional.of(DifficultyEnum.HARD));"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": "        assertThrows(CommandException.class, () -\u003e dummyStartCommand1.execute(dummyModel));"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": "            dummyStartCommand1.execute(dummyModel);"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": "        } catch (CommandException ce) {"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": "            assertEquals(ce.getMessage(), MESSAGE_WORDBANK_NOT_LOADED);"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": "            return;"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": "        }"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": "        // Test Should not reach this point as it returns in catch block."
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": "        fail();"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": "    }"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": ""
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": "    private class ModelStub implements Model {"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": ""
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": "        private ReadOnlyWordBank wordBank;"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": "        private Game game;"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": ""
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": "        private WordBankList wordBanklist \u003d new WordBankList(dummyListOfWordBanks);"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": ""
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": "        public void setUserPrefs(ReadOnlyUserPrefs userPrefs) {"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": ""
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": "        }"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": ""
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": "        public ReadOnlyUserPrefs getUserPrefs() {"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": "            return null;"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": "        }"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": ""
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": "        public GuiSettings getGuiSettings() {"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": "            return null;"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": "        }"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": ""
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": "        public void setGuiSettings(GuiSettings guiSettings) {"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": ""
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": "        }"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": ""
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": "        public Path getWordBankFilePath() {"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": "            return null;"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": "        }"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": ""
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": "        public void setWordBankFilePath(Path addressBookFilePath) {"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": ""
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": "        }"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": ""
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "dragontho"
        },
        "content": "        public void setCurrentWordBank(ReadOnlyWordBank currenWordBank) {"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "chrischenhui"
        },
        "content": "            this.wordBank \u003d currenWordBank;"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": "        }"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": ""
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "chrischenhui"
        },
        "content": "        public void updateWordBank(String name) {"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": ""
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": "        }"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": ""
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": "        public WordBankStatistics getWordBankStatistics() {"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": "            return null;"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": "        }"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": ""
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": "        public void setWordBankStatistics(WordBankStatistics wordBankStats) {"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": ""
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": "        }"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": ""
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": "        public void clearWordBankStatistics() {"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": ""
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": "        }"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": ""
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": "        public void clearWordBank() {"
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": ""
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": "        }"
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": ""
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "dragontho"
        },
        "content": "        public ReadOnlyWordBank getCurrentWordBank() {"
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": "            return wordBank;"
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": "        }"
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": ""
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": "        public boolean hasCard(Card card) {"
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": "        }"
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": ""
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": "        public void deleteCard(Card target) {"
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": ""
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": "        }"
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": ""
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": "        public void addCard(Card card) {"
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": ""
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": "        }"
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": ""
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": "        public void setCard(Card target, Card editedCard) {"
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": ""
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": "        }"
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": ""
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 248,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": "        public ObservableList\u003cCard\u003e getFilteredCardList() {"
      },
      {
        "lineNumber": 249,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": "            return null;"
      },
      {
        "lineNumber": 250,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": "        }"
      },
      {
        "lineNumber": 251,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": ""
      },
      {
        "lineNumber": 252,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 253,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": "        public ObservableList\u003cWordBank\u003e getFilteredWordBankList() {"
      },
      {
        "lineNumber": 254,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": "            return null;"
      },
      {
        "lineNumber": 255,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": "        }"
      },
      {
        "lineNumber": 256,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": ""
      },
      {
        "lineNumber": 257,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 258,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": "        public WordBankList getWordBankList() {"
      },
      {
        "lineNumber": 259,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": "            return wordBanklist;"
      },
      {
        "lineNumber": 260,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": "        }"
      },
      {
        "lineNumber": 261,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": ""
      },
      {
        "lineNumber": 262,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 263,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": "        public WordBankStatisticsList getWordBankStatisticsList() {"
      },
      {
        "lineNumber": 264,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": "            return null;"
      },
      {
        "lineNumber": 265,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": "        }"
      },
      {
        "lineNumber": 266,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": ""
      },
      {
        "lineNumber": 267,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 268,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": "        public GlobalStatistics getGlobalStatistics() {"
      },
      {
        "lineNumber": 269,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": "            return null;"
      },
      {
        "lineNumber": 270,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": "        }"
      },
      {
        "lineNumber": 271,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": ""
      },
      {
        "lineNumber": 272,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 273,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": "        public void updateFilteredCardList(Predicate\u003cCard\u003e predicate) {"
      },
      {
        "lineNumber": 274,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": ""
      },
      {
        "lineNumber": 275,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": "        }"
      },
      {
        "lineNumber": 276,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": ""
      },
      {
        "lineNumber": 277,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 278,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": "        public void setGame(Game game) {"
      },
      {
        "lineNumber": 279,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": "            this.game \u003d game;"
      },
      {
        "lineNumber": 280,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": "        }"
      },
      {
        "lineNumber": 281,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": ""
      },
      {
        "lineNumber": 282,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 283,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": "        public boolean gameIsOver() {"
      },
      {
        "lineNumber": 284,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": "            return game \u003d\u003d null || game.isOver();"
      },
      {
        "lineNumber": 285,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": "        }"
      },
      {
        "lineNumber": 286,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": ""
      },
      {
        "lineNumber": 287,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 288,
        "author": {
          "gitId": "chrischenhui"
        },
        "content": "        public boolean getHasBank() {"
      },
      {
        "lineNumber": 289,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 290,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": "        }"
      },
      {
        "lineNumber": 291,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": ""
      },
      {
        "lineNumber": 292,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 293,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": "        public Game getGame() {"
      },
      {
        "lineNumber": 294,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": "            return game;"
      },
      {
        "lineNumber": 295,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": "        }"
      },
      {
        "lineNumber": 296,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": ""
      },
      {
        "lineNumber": 297,
        "author": {
          "gitId": "chrischenhui"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 298,
        "author": {
          "gitId": "chrischenhui"
        },
        "content": "        public boolean hasWordBank(String name) {"
      },
      {
        "lineNumber": 299,
        "author": {
          "gitId": "chrischenhui"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 300,
        "author": {
          "gitId": "chrischenhui"
        },
        "content": "        }"
      },
      {
        "lineNumber": 301,
        "author": {
          "gitId": "chrischenhui"
        },
        "content": ""
      },
      {
        "lineNumber": 302,
        "author": {
          "gitId": "chrischenhui"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 303,
        "author": {
          "gitId": "chrischenhui"
        },
        "content": "        public WordBank getWordBankFromName(String name) {"
      },
      {
        "lineNumber": 304,
        "author": {
          "gitId": "chrischenhui"
        },
        "content": "            return null;"
      },
      {
        "lineNumber": 305,
        "author": {
          "gitId": "chrischenhui"
        },
        "content": "        }"
      },
      {
        "lineNumber": 306,
        "author": {
          "gitId": "chrischenhui"
        },
        "content": ""
      },
      {
        "lineNumber": 307,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 308,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": "        public DifficultyEnum getCurrentGameDifficulty() {"
      },
      {
        "lineNumber": 309,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": "            return game.getCurrentGameDifficulty();"
      },
      {
        "lineNumber": 310,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": "        }"
      },
      {
        "lineNumber": 311,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": ""
      },
      {
        "lineNumber": 312,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 313,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": "        public AppSettings getAppSettings() {"
      },
      {
        "lineNumber": 314,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": "            return null;"
      },
      {
        "lineNumber": 315,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": "        }"
      },
      {
        "lineNumber": 316,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": ""
      },
      {
        "lineNumber": 317,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 318,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": "        public Path getAppSettingsFilePath() {"
      },
      {
        "lineNumber": 319,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": "            return null;"
      },
      {
        "lineNumber": 320,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": "        }"
      },
      {
        "lineNumber": 321,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": ""
      },
      {
        "lineNumber": 322,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 323,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": "        public void setDefaultDifficulty(DifficultyEnum difficultyEnum) {"
      },
      {
        "lineNumber": 324,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": ""
      },
      {
        "lineNumber": 325,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": "        }"
      },
      {
        "lineNumber": 326,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": ""
      },
      {
        "lineNumber": 327,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 328,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": "        public DifficultyEnum getDefaultDifficulty() {"
      },
      {
        "lineNumber": 329,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": "            return DifficultyEnum.EASY;"
      },
      {
        "lineNumber": 330,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": "        }"
      },
      {
        "lineNumber": 331,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": ""
      },
      {
        "lineNumber": 332,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 333,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": "        public void setDefaultTheme(ThemeEnum themeEnum) {"
      },
      {
        "lineNumber": 334,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": ""
      },
      {
        "lineNumber": 335,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": "        }"
      },
      {
        "lineNumber": 336,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": ""
      },
      {
        "lineNumber": 337,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 338,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": "        public ThemeEnum getDefaultTheme() {"
      },
      {
        "lineNumber": 339,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": "            return null;"
      },
      {
        "lineNumber": 340,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": "        }"
      },
      {
        "lineNumber": 341,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": ""
      },
      {
        "lineNumber": 342,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 343,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": "        public void setHintsEnabled(boolean enabled) {"
      },
      {
        "lineNumber": 344,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": ""
      },
      {
        "lineNumber": 345,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": "        }"
      },
      {
        "lineNumber": 346,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": ""
      },
      {
        "lineNumber": 347,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 348,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": "        public long getTimeAllowedPerQuestion() {"
      },
      {
        "lineNumber": 349,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": "            return 0;"
      },
      {
        "lineNumber": 350,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": "        }"
      },
      {
        "lineNumber": 351,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": ""
      },
      {
        "lineNumber": 352,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 353,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": "        public FormattedHint getHintFormatFromCurrentGame() {"
      },
      {
        "lineNumber": 354,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": "            return null;"
      },
      {
        "lineNumber": 355,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": "        }"
      },
      {
        "lineNumber": 356,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": ""
      },
      {
        "lineNumber": 357,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 358,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": "        public int getHintFormatSizeFromCurrentGame() {"
      },
      {
        "lineNumber": 359,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": "            return 0;"
      },
      {
        "lineNumber": 360,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": "        }"
      },
      {
        "lineNumber": 361,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": ""
      },
      {
        "lineNumber": 362,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 363,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": "        public boolean getHintsEnabled() {"
      },
      {
        "lineNumber": 364,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 365,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": "        }"
      },
      {
        "lineNumber": 366,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": ""
      },
      {
        "lineNumber": 367,
        "author": {
          "gitId": "dragontho"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 368,
        "author": {
          "gitId": "dragontho"
        },
        "content": "        public void setAvatarId(int avatarId) {}"
      },
      {
        "lineNumber": 369,
        "author": {
          "gitId": "dragontho"
        },
        "content": ""
      },
      {
        "lineNumber": 370,
        "author": {
          "gitId": "dragontho"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 371,
        "author": {
          "gitId": "dragontho"
        },
        "content": "        public int getAvatarId() {"
      },
      {
        "lineNumber": 372,
        "author": {
          "gitId": "dragontho"
        },
        "content": "            return 0;"
      },
      {
        "lineNumber": 373,
        "author": {
          "gitId": "dragontho"
        },
        "content": "        }"
      },
      {
        "lineNumber": 374,
        "author": {
          "gitId": "dragontho"
        },
        "content": ""
      },
      {
        "lineNumber": 375,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": "    }"
      },
      {
        "lineNumber": 376,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "dragontho": 14,
      "chrischenhui": 13,
      "kohyida1997": 349
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/parser/AddCommandParserTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "chrischenhui"
        },
        "content": "package seedu.address.logic.parser.open;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "jascxx"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "jascxx"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.INVALID_MEANING_DESC;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.INVALID_TAG_DESC;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "jascxx"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.INVALID_WORD_DESC;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "jascxx"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.MEANING_DESC_ABRA;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "jascxx"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.MEANING_DESC_BUTTERFREE;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.PREAMBLE_NON_EMPTY;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.PREAMBLE_WHITESPACE;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "jascxx"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.TAG_DESC_BUG;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "jascxx"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.TAG_DESC_FLYING;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "jascxx"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.TAG_DESC_PSYCHIC;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "jascxx"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_TAG_BUG;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "jascxx"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_TAG_FLYING;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "jascxx"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_TAG_PSYCHIC;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "jascxx"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.WORD_DESC_ABRA;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "jascxx"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.WORD_DESC_BUTTERFREE;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CommandParserTestUtil.assertParseFailure;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CommandParserTestUtil.assertParseSuccess;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "jascxx"
        },
        "content": "import static seedu.address.testutil.TypicalCards.ABRA;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "jascxx"
        },
        "content": "import static seedu.address.testutil.TypicalCards.BUTTERFREE;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "chrischenhui"
        },
        "content": "import seedu.address.logic.commands.cardcommands.AddCommand;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "jascxx"
        },
        "content": "import seedu.address.model.card.Card;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "jascxx"
        },
        "content": "import seedu.address.model.card.Meaning;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "jascxx"
        },
        "content": "import seedu.address.model.card.Word;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.tag.Tag;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "jascxx"
        },
        "content": "import seedu.address.testutil.CardBuilder;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "public class AddCommandParserTest {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    private AddCommandParser parser \u003d new AddCommandParser();"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parse_allFieldsPresent_success() {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "jascxx"
        },
        "content": "        Card expectedPerson \u003d new CardBuilder(BUTTERFREE).withTags(VALID_TAG_PSYCHIC).build();"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "        // whitespace only preamble"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "jascxx"
        },
        "content": "        assertParseSuccess(parser, PREAMBLE_WHITESPACE + WORD_DESC_BUTTERFREE + MEANING_DESC_BUTTERFREE"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "jascxx"
        },
        "content": "                + TAG_DESC_PSYCHIC, new AddCommand(expectedPerson));"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "jascxx"
        },
        "content": "        // multiple words - last word accepted"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "jascxx"
        },
        "content": "        assertParseSuccess(parser, WORD_DESC_ABRA + WORD_DESC_BUTTERFREE + MEANING_DESC_BUTTERFREE"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "jascxx"
        },
        "content": "                + TAG_DESC_PSYCHIC, new AddCommand(expectedPerson));"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "jascxx"
        },
        "content": "        // multiple meanings - last meaning accepted"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "jascxx"
        },
        "content": "        assertParseSuccess(parser, WORD_DESC_BUTTERFREE + MEANING_DESC_ABRA + MEANING_DESC_BUTTERFREE"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "jascxx"
        },
        "content": "                + TAG_DESC_PSYCHIC, new AddCommand(expectedPerson));"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "        // multiple tags - all accepted"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "jascxx"
        },
        "content": "        Card expectedPersonMultipleTags \u003d new CardBuilder(BUTTERFREE).withTags(VALID_TAG_BUG, VALID_TAG_FLYING)"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "                .build();"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "jascxx"
        },
        "content": "        assertParseSuccess(parser, WORD_DESC_BUTTERFREE + MEANING_DESC_BUTTERFREE"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "jascxx"
        },
        "content": "                + TAG_DESC_BUG + TAG_DESC_FLYING, new AddCommand(expectedPersonMultipleTags));"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parse_optionalFieldsMissing_success() {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "        // zero tags"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "jascxx"
        },
        "content": "        Card expectedPerson \u003d new CardBuilder(ABRA).withTags().build();"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "jascxx"
        },
        "content": "        assertParseSuccess(parser, WORD_DESC_ABRA + MEANING_DESC_ABRA, new AddCommand(expectedPerson));"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parse_compulsoryFieldMissing_failure() {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "        String expectedMessage \u003d String.format(MESSAGE_INVALID_COMMAND_FORMAT, AddCommand.MESSAGE_USAGE);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "jascxx"
        },
        "content": "        // missing word prefix"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "jascxx"
        },
        "content": "        assertParseFailure(parser, MEANING_DESC_ABRA + TAG_DESC_PSYCHIC, expectedMessage);"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "jascxx"
        },
        "content": "        // missing meaning prefix"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "jascxx"
        },
        "content": "        assertParseFailure(parser, WORD_DESC_ABRA + TAG_DESC_PSYCHIC, expectedMessage);"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "        // all prefixes missing"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "jascxx"
        },
        "content": "        assertParseFailure(parser, VALID_TAG_BUG, expectedMessage);"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parse_invalidValue_failure() {"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "jascxx"
        },
        "content": "        // invalid word"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "jascxx"
        },
        "content": "        assertParseFailure(parser, INVALID_WORD_DESC + MEANING_DESC_BUTTERFREE"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "jascxx"
        },
        "content": "                + TAG_DESC_BUG + TAG_DESC_FLYING, Word.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "        // invalid phone"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "jascxx"
        },
        "content": "        assertParseFailure(parser, WORD_DESC_BUTTERFREE + INVALID_MEANING_DESC"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "jascxx"
        },
        "content": "                + TAG_DESC_BUG + TAG_DESC_FLYING, Meaning.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "        // invalid tag"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "jascxx"
        },
        "content": "        assertParseFailure(parser, WORD_DESC_ABRA + MEANING_DESC_ABRA"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "jascxx"
        },
        "content": "                + INVALID_TAG_DESC + VALID_TAG_PSYCHIC, Tag.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "        // two invalid values, only first invalid value reported"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "jascxx"
        },
        "content": "        assertParseFailure(parser, INVALID_WORD_DESC + INVALID_MEANING_DESC, Word.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "        // non-empty preamble"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "jascxx"
        },
        "content": "        assertParseFailure(parser, PREAMBLE_NON_EMPTY + WORD_DESC_BUTTERFREE + MEANING_DESC_BUTTERFREE"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "jascxx"
        },
        "content": "                + TAG_DESC_BUG + TAG_DESC_FLYING,"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "                String.format(MESSAGE_INVALID_COMMAND_FORMAT, AddCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "jascxx": 48,
      "chrischenhui": 2,
      "-": 53
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/parser/ClassPairTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "sreesubbash"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "sreesubbash"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "sreesubbash"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "sreesubbash"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "sreesubbash"
        },
        "content": "import org.junit.jupiter.api.BeforeEach;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "sreesubbash"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "sreesubbash"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "sreesubbash"
        },
        "content": "import seedu.address.logic.commands.switches.OpenCommand;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "sreesubbash"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "sreesubbash"
        },
        "content": "class ClassPairTest {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "sreesubbash"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "sreesubbash"
        },
        "content": "    private ClassPair classPair;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "sreesubbash"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "sreesubbash"
        },
        "content": "    @BeforeEach"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "sreesubbash"
        },
        "content": "    void setUp() {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "sreesubbash"
        },
        "content": "        classPair \u003d new ClassPair(OpenCommand.class, null);"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "sreesubbash"
        },
        "content": "    }"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "sreesubbash"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "sreesubbash"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "sreesubbash"
        },
        "content": "    void getCommand() {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "sreesubbash"
        },
        "content": "        assertTrue(classPair.getCommand() \u003d\u003d OpenCommand.class);"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "sreesubbash"
        },
        "content": "    }"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "sreesubbash"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "sreesubbash"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "sreesubbash"
        },
        "content": "    void getParser() {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "sreesubbash"
        },
        "content": "        assertTrue(classPair.getParser() \u003d\u003d null);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "sreesubbash"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "sreesubbash"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "sreesubbash": 28
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/parser/ClassUtilTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "sreesubbash"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "sreesubbash"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "sreesubbash"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "sreesubbash"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "sreesubbash"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "sreesubbash"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "sreesubbash"
        },
        "content": "import org.junit.jupiter.api.BeforeEach;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "sreesubbash"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "sreesubbash"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "sreesubbash"
        },
        "content": "import seedu.address.logic.commands.switches.HomeCommand;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "sreesubbash"
        },
        "content": "import seedu.address.logic.commands.switches.OpenCommand;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "sreesubbash"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "sreesubbash"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "sreesubbash"
        },
        "content": "class ClassUtilTest {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "sreesubbash"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "sreesubbash"
        },
        "content": "    private ClassUtil classUtil;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "sreesubbash"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "sreesubbash"
        },
        "content": "    @BeforeEach"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "sreesubbash"
        },
        "content": "    void setUp() {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "sreesubbash"
        },
        "content": "        classUtil \u003d new ClassUtil();"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "sreesubbash"
        },
        "content": "        classUtil.add(new ClassPair(HomeCommand.class, null));"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "sreesubbash"
        },
        "content": "        classUtil.add(new ClassPair(OpenCommand.class, null));"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "sreesubbash"
        },
        "content": "    }"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "sreesubbash"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "sreesubbash"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "sreesubbash"
        },
        "content": "    void add() {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "sreesubbash"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "sreesubbash"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "sreesubbash"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "sreesubbash"
        },
        "content": "    void getAttributeHome() {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "sreesubbash"
        },
        "content": "        List\u003cString\u003e out \u003d classUtil.getAttribute(\"COMMAND_WORD\");"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "sreesubbash"
        },
        "content": "        boolean found \u003d false;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "sreesubbash"
        },
        "content": "        for (String s : out) {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "sreesubbash"
        },
        "content": "            if (s.equals(\"home\")) {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "sreesubbash"
        },
        "content": "                found \u003d true;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "sreesubbash"
        },
        "content": "            }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "sreesubbash"
        },
        "content": "        }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "sreesubbash"
        },
        "content": "        assertTrue(found);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "sreesubbash"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "sreesubbash"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "sreesubbash"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "sreesubbash"
        },
        "content": "    void getAttributeOpen() {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "sreesubbash"
        },
        "content": "        List\u003cString\u003e out \u003d classUtil.getAttribute(\"COMMAND_WORD\");"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "sreesubbash"
        },
        "content": "        boolean found \u003d false;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "sreesubbash"
        },
        "content": "        for (String s : out) {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "sreesubbash"
        },
        "content": "            if (s.equals(\"open\")) {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "sreesubbash"
        },
        "content": "                found \u003d true;"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "sreesubbash"
        },
        "content": "            }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "sreesubbash"
        },
        "content": "        }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "sreesubbash"
        },
        "content": "        assertTrue(found);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "sreesubbash"
        },
        "content": "    }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "sreesubbash"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "sreesubbash"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "sreesubbash"
        },
        "content": "    void getCommandInstance() {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "sreesubbash"
        },
        "content": "    }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "sreesubbash"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "sreesubbash": 56
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/parser/DeleteCommandParserTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "chrischenhui"
        },
        "content": "package seedu.address.logic.parser.open;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CommandParserTestUtil.assertParseFailure;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CommandParserTestUtil.assertParseSuccess;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.TypicalIndexes.INDEX_FIRST_PERSON;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "chrischenhui"
        },
        "content": "import seedu.address.logic.commands.cardcommands.DeleteCommand;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": " * As we are only doing white-box testing, our test cases do not cover path variations"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": " * outside of the DeleteCommand code. For example, inputs \"1\" and \"1 abc\" take the"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": " * same path through the DeleteCommand, and therefore we test only one of them."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": " * The path variation for those two cases occur inside the ParserUtil, and"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": " * therefore should be covered by the ParserUtilTest."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "public class DeleteCommandParserTest {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    private DeleteCommandParser parser \u003d new DeleteCommandParser();"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parse_validArgs_returnsDeleteCommand() {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseSuccess(parser, \"1\", new DeleteCommand(INDEX_FIRST_PERSON));"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parse_invalidArgs_throwsParseException() {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseFailure(parser, \"a\", String.format(MESSAGE_INVALID_COMMAND_FORMAT, DeleteCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "chrischenhui": 2,
      "-": 30
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/parser/EditCommandParserTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "chrischenhui"
        },
        "content": "package seedu.address.logic.parser.open;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "jascxx"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.INVALID_MEANING_DESC;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.INVALID_TAG_DESC;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "jascxx"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.INVALID_WORD_DESC;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "jascxx"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.MEANING_DESC_ABRA;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "jascxx"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.MEANING_DESC_BUTTERFREE;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "jascxx"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.TAG_DESC_BUG;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "jascxx"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.TAG_DESC_PSYCHIC;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "jascxx"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_MEANING_ABRA;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "jascxx"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_MEANING_BUTTERFREE;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "jascxx"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_TAG_BUG;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "jascxx"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_TAG_PSYCHIC;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "jascxx"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_WORD_ABRA;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "jascxx"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_WORD_BUTTERFREE;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "jascxx"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.WORD_DESC_ABRA;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "jascxx"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.WORD_DESC_BUTTERFREE;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_TAG;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CommandParserTestUtil.assertParseFailure;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CommandParserTestUtil.assertParseSuccess;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.TypicalIndexes.INDEX_FIRST_PERSON;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.TypicalIndexes.INDEX_SECOND_PERSON;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.TypicalIndexes.INDEX_THIRD_PERSON;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "chrischenhui"
        },
        "content": "import seedu.address.logic.commands.cardcommands.EditCommand;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "sreesubbash"
        },
        "content": "import seedu.address.model.card.Meaning;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "sreesubbash"
        },
        "content": "import seedu.address.model.card.Word;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.tag.Tag;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "sreesubbash"
        },
        "content": "import seedu.address.testutil.EditCardDescriptorBuilder;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "public class EditCommandParserTest {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String TAG_EMPTY \u003d \" \" + PREFIX_TAG;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String MESSAGE_INVALID_FORMAT \u003d"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "            String.format(MESSAGE_INVALID_COMMAND_FORMAT, EditCommand.MESSAGE_USAGE);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    private EditCommandParser parser \u003d new EditCommandParser();"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parse_missingParts_failure() {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        // no index specified"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "sreesubbash"
        },
        "content": "        assertParseFailure(parser, VALID_WORD_ABRA, MESSAGE_INVALID_FORMAT);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        // no field specified"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseFailure(parser, \"1\", EditCommand.MESSAGE_NOT_EDITED);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        // no index and no field specified"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseFailure(parser, \"\", MESSAGE_INVALID_FORMAT);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parse_invalidPreamble_failure() {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "        // negative index"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "sreesubbash"
        },
        "content": "        assertParseFailure(parser, \"-5\" + WORD_DESC_ABRA, MESSAGE_INVALID_FORMAT);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "        // zero index"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "sreesubbash"
        },
        "content": "        assertParseFailure(parser, \"0\" + WORD_DESC_ABRA, MESSAGE_INVALID_FORMAT);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "        // invalid arguments being parsed as preamble"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseFailure(parser, \"1 some random string\", MESSAGE_INVALID_FORMAT);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "        // invalid prefix being parsed as preamble"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseFailure(parser, \"1 i/ string\", MESSAGE_INVALID_FORMAT);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parse_invalidValue_failure() {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "sreesubbash"
        },
        "content": "        assertParseFailure(parser, \"1\" + INVALID_WORD_DESC, Word.MESSAGE_CONSTRAINTS); // invalid word"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "sreesubbash"
        },
        "content": "        assertParseFailure(parser, \"1\" + INVALID_MEANING_DESC, Meaning.MESSAGE_CONSTRAINTS); // invalid meaning"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseFailure(parser, \"1\" + INVALID_TAG_DESC, Tag.MESSAGE_CONSTRAINTS); // invalid tag"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "sreesubbash"
        },
        "content": "        // invalid word followed by valid meaning"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "sreesubbash"
        },
        "content": "        assertParseFailure(parser, \"1\" + INVALID_WORD_DESC + MEANING_DESC_ABRA, Word.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "sreesubbash"
        },
        "content": "        // valid word followed by invalid meaning."
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "sreesubbash"
        },
        "content": "        assertParseFailure(parser, \"1\" + WORD_DESC_ABRA + INVALID_MEANING_DESC, Meaning.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "        // while parsing {@code PREFIX_TAG} alone will reset the tags of the {@code Person} being edited,"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "        // parsing it together with a valid tag results in error"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "sreesubbash"
        },
        "content": "        assertParseFailure(parser, \"1\" + TAG_DESC_PSYCHIC + TAG_DESC_BUG + TAG_EMPTY, Tag.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "sreesubbash"
        },
        "content": "        assertParseFailure(parser, \"1\" + TAG_DESC_PSYCHIC + TAG_EMPTY + TAG_DESC_BUG, Tag.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "sreesubbash"
        },
        "content": "        assertParseFailure(parser, \"1\" + TAG_EMPTY + TAG_DESC_PSYCHIC + TAG_DESC_BUG, Tag.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "        // multiple invalid values, but only the first invalid value is captured"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "sreesubbash"
        },
        "content": "        assertParseFailure(parser, \"1\" + INVALID_WORD_DESC + INVALID_MEANING_DESC,"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "sreesubbash"
        },
        "content": "                Word.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parse_allFieldsSpecified_success() {"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "        Index targetIndex \u003d INDEX_SECOND_PERSON;"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "sreesubbash"
        },
        "content": "        String userInput \u003d targetIndex.getOneBased() + MEANING_DESC_ABRA"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "sreesubbash"
        },
        "content": "                + WORD_DESC_ABRA + TAG_DESC_PSYCHIC;"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "sreesubbash"
        },
        "content": "        EditCommand.EditCardDescriptor descriptor \u003d new EditCardDescriptorBuilder().withWord(VALID_WORD_ABRA)"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "jascxx"
        },
        "content": "                .withMeaning(VALID_MEANING_ABRA).withTags(VALID_TAG_PSYCHIC).build();"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "        EditCommand expectedCommand \u003d new EditCommand(targetIndex, descriptor);"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseSuccess(parser, userInput, expectedCommand);"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parse_oneFieldSpecified_success() {"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "sreesubbash"
        },
        "content": "        // word"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "        Index targetIndex \u003d INDEX_THIRD_PERSON;"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "sreesubbash"
        },
        "content": "        String userInput \u003d targetIndex.getOneBased() + WORD_DESC_ABRA;"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "sreesubbash"
        },
        "content": "        EditCommand.EditCardDescriptor descriptor \u003d new EditCardDescriptorBuilder().withWord(VALID_WORD_ABRA).build();"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "        EditCommand expectedCommand \u003d new EditCommand(targetIndex, descriptor);"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseSuccess(parser, userInput, expectedCommand);"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "sreesubbash"
        },
        "content": "        // meaning"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "sreesubbash"
        },
        "content": "        userInput \u003d targetIndex.getOneBased() + MEANING_DESC_ABRA;"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "sreesubbash"
        },
        "content": "        descriptor \u003d new EditCardDescriptorBuilder().withMeaning(VALID_MEANING_ABRA).build();"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "        expectedCommand \u003d new EditCommand(targetIndex, descriptor);"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseSuccess(parser, userInput, expectedCommand);"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "        // tags"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "sreesubbash"
        },
        "content": "        userInput \u003d targetIndex.getOneBased() + TAG_DESC_BUG;"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "sreesubbash"
        },
        "content": "        descriptor \u003d new EditCardDescriptorBuilder().withTags(VALID_TAG_BUG).build();"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "        expectedCommand \u003d new EditCommand(targetIndex, descriptor);"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseSuccess(parser, userInput, expectedCommand);"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parse_multipleRepeatedFields_acceptsLast() {"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "        Index targetIndex \u003d INDEX_FIRST_PERSON;"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "sreesubbash"
        },
        "content": "        String userInput \u003d targetIndex.getOneBased() + MEANING_DESC_ABRA"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "sreesubbash"
        },
        "content": "                + TAG_DESC_BUG + MEANING_DESC_ABRA + TAG_DESC_BUG"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "sreesubbash"
        },
        "content": "                + MEANING_DESC_BUTTERFREE + TAG_DESC_PSYCHIC;"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "jascxx"
        },
        "content": "        EditCommand.EditCardDescriptor descriptor \u003d new EditCardDescriptorBuilder()"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "jascxx"
        },
        "content": "                .withMeaning(VALID_MEANING_BUTTERFREE)"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "sreesubbash"
        },
        "content": "                .withTags(VALID_TAG_BUG, VALID_TAG_PSYCHIC)"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": "                .build();"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": "        EditCommand expectedCommand \u003d new EditCommand(targetIndex, descriptor);"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseSuccess(parser, userInput, expectedCommand);"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parse_invalidValueFollowedByValidValue_success() {"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": "        // no other valid values specified"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": "        Index targetIndex \u003d INDEX_FIRST_PERSON;"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "sreesubbash"
        },
        "content": "        String userInput \u003d targetIndex.getOneBased() + INVALID_MEANING_DESC + MEANING_DESC_BUTTERFREE;"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "jascxx"
        },
        "content": "        EditCommand.EditCardDescriptor descriptor \u003d new EditCardDescriptorBuilder()"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "jascxx"
        },
        "content": "                .withMeaning(VALID_MEANING_BUTTERFREE).build();"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": "        EditCommand expectedCommand \u003d new EditCommand(targetIndex, descriptor);"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseSuccess(parser, userInput, expectedCommand);"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "-"
        },
        "content": "        // other valid values specified"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "sreesubbash"
        },
        "content": "        userInput \u003d targetIndex.getOneBased() + INVALID_MEANING_DESC + WORD_DESC_BUTTERFREE"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "sreesubbash"
        },
        "content": "                + MEANING_DESC_BUTTERFREE;"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "sreesubbash"
        },
        "content": "        descriptor \u003d new EditCardDescriptorBuilder().withMeaning(VALID_MEANING_BUTTERFREE)"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "sreesubbash"
        },
        "content": "                .withWord(VALID_WORD_BUTTERFREE).build();"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "-"
        },
        "content": "        expectedCommand \u003d new EditCommand(targetIndex, descriptor);"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseSuccess(parser, userInput, expectedCommand);"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parse_resetTags_success() {"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "-"
        },
        "content": "        Index targetIndex \u003d INDEX_THIRD_PERSON;"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "-"
        },
        "content": "        String userInput \u003d targetIndex.getOneBased() + TAG_EMPTY;"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "sreesubbash"
        },
        "content": "        EditCommand.EditCardDescriptor descriptor \u003d new EditCardDescriptorBuilder().withTags().build();"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "-"
        },
        "content": "        EditCommand expectedCommand \u003d new EditCommand(targetIndex, descriptor);"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseSuccess(parser, userInput, expectedCommand);"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "sreesubbash": 38,
      "jascxx": 19,
      "chrischenhui": 2,
      "-": 115
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/parser/FindCommandParserTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "chrischenhui"
        },
        "content": "package seedu.address.logic.parser.open;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CommandParserTestUtil.assertParseFailure;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CommandParserTestUtil.assertParseSuccess;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "chrischenhui"
        },
        "content": "import seedu.address.logic.commands.cardcommands.FindCommand;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "jascxx"
        },
        "content": "import seedu.address.model.card.WordContainsKeywordsPredicate;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "public class FindCommandParserTest {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    private FindCommandParser parser \u003d new FindCommandParser();"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parse_emptyArg_throwsParseException() {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseFailure(parser, \"     \", String.format(MESSAGE_INVALID_COMMAND_FORMAT, FindCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parse_validArgs_returnsFindCommand() {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "        // no leading and trailing whitespaces"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "        FindCommand expectedFindCommand \u003d"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "jascxx"
        },
        "content": "                new FindCommand(new WordContainsKeywordsPredicate(Arrays.asList(\"Alice\", \"Bob\")));"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseSuccess(parser, \"Alice Bob\", expectedFindCommand);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "        // multiple whitespaces between keywords"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseSuccess(parser, \" \\n Alice \\n \\t Bob  \\t\", expectedFindCommand);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "jascxx": 2,
      "chrischenhui": 2,
      "-": 30
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/parser/ParserManagerTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "sreesubbash"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "sreesubbash"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "sreesubbash"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "sreesubbash"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "sreesubbash"
        },
        "content": "import org.junit.jupiter.api.AfterEach;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "sreesubbash"
        },
        "content": "import org.junit.jupiter.api.BeforeEach;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "sreesubbash"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "sreesubbash"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "sreesubbash"
        },
        "content": "import seedu.address.logic.commands.exceptions.ModeSwitchException;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "sreesubbash"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "sreesubbash"
        },
        "content": "import seedu.address.logic.util.ModeEnum;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "sreesubbash"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "sreesubbash"
        },
        "content": "class ParserManagerTest {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "sreesubbash"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "sreesubbash"
        },
        "content": "    private ParserManager parserManager;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "sreesubbash"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "sreesubbash"
        },
        "content": "    @BeforeEach"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "sreesubbash"
        },
        "content": "    void setUp() {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "sreesubbash"
        },
        "content": "        parserManager \u003d new ParserManager();"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "sreesubbash"
        },
        "content": "    }"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "sreesubbash"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "sreesubbash"
        },
        "content": "    @AfterEach"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "sreesubbash"
        },
        "content": "    void tearDown() {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "sreesubbash"
        },
        "content": "    }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "sreesubbash"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "sreesubbash"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "sreesubbash"
        },
        "content": "    void getHomeMode() {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "sreesubbash"
        },
        "content": "        assertTrue(parserManager.getMode() \u003d\u003d ModeEnum.HOME);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "sreesubbash"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "sreesubbash"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "sreesubbash"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "sreesubbash"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "sreesubbash"
        },
        "content": "    void getOpenMode() {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "sreesubbash"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "sreesubbash"
        },
        "content": "            parserManager.updateState(true, true);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "sreesubbash"
        },
        "content": "            parserManager.parseCommand(\"open\");"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "sreesubbash"
        },
        "content": "        } catch (ParseException e) {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "sreesubbash"
        },
        "content": "            e.printStackTrace();"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "sreesubbash"
        },
        "content": "        } catch (ModeSwitchException e) {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "sreesubbash"
        },
        "content": "            e.printStackTrace();"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "sreesubbash"
        },
        "content": "        }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "sreesubbash"
        },
        "content": "        System.err.println(parserManager.getMode());"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "sreesubbash"
        },
        "content": "        assertTrue(parserManager.getMode() \u003d\u003d ModeEnum.OPEN);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "sreesubbash"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "sreesubbash"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "sreesubbash"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "sreesubbash"
        },
        "content": "    void getGameMode() {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "sreesubbash"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "sreesubbash"
        },
        "content": "            parserManager.parseCommand(\"bank sample\");"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "sreesubbash"
        },
        "content": "            parserManager.updateState(true, true);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "sreesubbash"
        },
        "content": "            parserManager.parseCommand(\"open\");"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "sreesubbash"
        },
        "content": "            parserManager.parseCommand(\"start\");"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "sreesubbash"
        },
        "content": "        } catch (ParseException e) {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "sreesubbash"
        },
        "content": "            e.printStackTrace();"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "sreesubbash"
        },
        "content": "        } catch (ModeSwitchException e) {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "sreesubbash"
        },
        "content": "            e.printStackTrace();"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "sreesubbash"
        },
        "content": "        }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "sreesubbash"
        },
        "content": "        System.err.println(parserManager.getMode());"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "sreesubbash"
        },
        "content": "        assertTrue(parserManager.getMode() \u003d\u003d ModeEnum.GAME);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "sreesubbash"
        },
        "content": "    }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "sreesubbash"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "sreesubbash"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "sreesubbash"
        },
        "content": "    void getSettingsMode() {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "sreesubbash"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "sreesubbash"
        },
        "content": "            parserManager.updateState(true, true);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "sreesubbash"
        },
        "content": "            parserManager.parseCommand(\"settings\");"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "sreesubbash"
        },
        "content": "        } catch (ParseException e) {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "sreesubbash"
        },
        "content": "            e.printStackTrace();"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "sreesubbash"
        },
        "content": "        } catch (ModeSwitchException e) {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "sreesubbash"
        },
        "content": "            e.printStackTrace();"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "sreesubbash"
        },
        "content": "        }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "sreesubbash"
        },
        "content": "        System.err.println(parserManager.getMode());"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "sreesubbash"
        },
        "content": "        assertTrue(parserManager.getMode() \u003d\u003d ModeEnum.SETTINGS);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "sreesubbash"
        },
        "content": "    }"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "sreesubbash"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "sreesubbash"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "sreesubbash": 76
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/parser/ParserUtilTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.ParserUtil.MESSAGE_INVALID_INDEX;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.TypicalIndexes.INDEX_FIRST_PERSON;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Collections;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.HashSet;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "jascxx"
        },
        "content": "import seedu.address.model.card.Meaning;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "jascxx"
        },
        "content": "import seedu.address.model.card.Word;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.tag.Tag;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "public class ParserUtilTest {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "jascxx"
        },
        "content": "    private static final String INVALID_WORD \u003d \" \\n \\t \";"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "jascxx"
        },
        "content": "    private static final String INVALID_MEANING \u003d \"    \\n\\n\\n\";"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String INVALID_TAG \u003d \"#friend\";"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "jascxx"
        },
        "content": "    private static final String VALID_WORD \u003d \"Bulbasaur\";"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "jascxx"
        },
        "content": "    private static final String VALID_MEANING \u003d \"There is a plant seed on its back right from the day this Pokémon \""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "jascxx"
        },
        "content": "            + \"is born. The seed slowly grows larger.\";"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "jascxx"
        },
        "content": "    private static final String VALID_TAG_1 \u003d \"grass\";"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "jascxx"
        },
        "content": "    private static final String VALID_TAG_2 \u003d \"water\";"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String WHITESPACE \u003d \" \\t\\r\\n\";"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseIndex_invalidInput_throwsParseException() {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(ParseException.class, () -\u003e ParserUtil.parseIndex(\"10 a\"));"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseIndex_outOfRangeInput_throwsParseException() {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(ParseException.class, MESSAGE_INVALID_INDEX, ()"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "            -\u003e ParserUtil.parseIndex(Long.toString(Integer.MAX_VALUE + 1)));"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseIndex_validInput_success() throws Exception {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        // No whitespaces"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(INDEX_FIRST_PERSON, ParserUtil.parseIndex(\"1\"));"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "        // Leading and trailing whitespaces"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(INDEX_FIRST_PERSON, ParserUtil.parseIndex(\"  1  \"));"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "jascxx"
        },
        "content": "    public void parseWord_null_throwsNullPointerException() {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "jascxx"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e ParserUtil.parseWord((String) null));"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "jascxx"
        },
        "content": "    public void parseWord_invalidValue_throwsParseException() {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "jascxx"
        },
        "content": "        assertThrows(ParseException.class, () -\u003e ParserUtil.parseWord(INVALID_WORD));"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "jascxx"
        },
        "content": "    public void parseWord_validValueWithoutWhitespace_returnsName() throws Exception {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "jascxx"
        },
        "content": "        Word expectedWord \u003d new Word(VALID_WORD);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "jascxx"
        },
        "content": "        assertEquals(expectedWord, ParserUtil.parseWord(VALID_WORD));"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseName_validValueWithWhitespace_returnsTrimmedName() throws Exception {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "jascxx"
        },
        "content": "        String nameWithWhitespace \u003d WHITESPACE + VALID_WORD + WHITESPACE;"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "jascxx"
        },
        "content": "        Word expectedWord \u003d new Word(VALID_WORD);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "jascxx"
        },
        "content": "        assertEquals(expectedWord, ParserUtil.parseWord(nameWithWhitespace));"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "jascxx"
        },
        "content": "    public void parseMeaning_null_throwsNullPointerException() {"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "jascxx"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e ParserUtil.parseMeaning((String) null));"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "jascxx"
        },
        "content": "    public void parseMeaning_invalidValue_throwsParseException() {"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "jascxx"
        },
        "content": "        assertThrows(ParseException.class, () -\u003e ParserUtil.parseMeaning(INVALID_MEANING));"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "jascxx"
        },
        "content": "    public void parseMeaning_validValueWithoutWhitespace_returnsPhone() throws Exception {"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "jascxx"
        },
        "content": "        Meaning expectedMeaning \u003d new Meaning(VALID_MEANING);"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "jascxx"
        },
        "content": "        assertEquals(expectedMeaning, ParserUtil.parseMeaning(VALID_MEANING));"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "jascxx"
        },
        "content": "    public void parseMeaning_validValueWithWhitespace_returnsTrimmedPhone() throws Exception {"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "jascxx"
        },
        "content": "        String phoneWithWhitespace \u003d WHITESPACE + VALID_MEANING + WHITESPACE;"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "jascxx"
        },
        "content": "        Meaning expectedMeaning \u003d new Meaning(VALID_MEANING);"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "jascxx"
        },
        "content": "        assertEquals(expectedMeaning, ParserUtil.parseMeaning(phoneWithWhitespace));"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseTag_null_throwsNullPointerException() {"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e ParserUtil.parseTag(null));"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseTag_invalidValue_throwsParseException() {"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(ParseException.class, () -\u003e ParserUtil.parseTag(INVALID_TAG));"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseTag_validValueWithoutWhitespace_returnsTag() throws Exception {"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "        Tag expectedTag \u003d new Tag(VALID_TAG_1);"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expectedTag, ParserUtil.parseTag(VALID_TAG_1));"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseTag_validValueWithWhitespace_returnsTrimmedTag() throws Exception {"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "        String tagWithWhitespace \u003d WHITESPACE + VALID_TAG_1 + WHITESPACE;"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "        Tag expectedTag \u003d new Tag(VALID_TAG_1);"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expectedTag, ParserUtil.parseTag(tagWithWhitespace));"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseTags_null_throwsNullPointerException() {"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e ParserUtil.parseTags(null));"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseTags_collectionWithInvalidTags_throwsParseException() {"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(ParseException.class, () -\u003e ParserUtil.parseTags(Arrays.asList(VALID_TAG_1, INVALID_TAG)));"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseTags_emptyCollection_returnsEmptySet() throws Exception {"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(ParserUtil.parseTags(Collections.emptyList()).isEmpty());"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseTags_collectionWithValidTags_returnsTagSet() throws Exception {"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": "        Set\u003cTag\u003e actualTagSet \u003d ParserUtil.parseTags(Arrays.asList(VALID_TAG_1, VALID_TAG_2));"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": "        Set\u003cTag\u003e expectedTagSet \u003d new HashSet\u003cTag\u003e(Arrays.asList(new Tag(VALID_TAG_1), new Tag(VALID_TAG_2)));"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expectedTagSet, actualTagSet);"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "jascxx": 30,
      "-": 115
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/parser/SpecificModeParserTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "sreesubbash"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "sreesubbash"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "sreesubbash"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "sreesubbash"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "sreesubbash"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "sreesubbash"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "sreesubbash"
        },
        "content": "import org.junit.jupiter.api.BeforeEach;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "sreesubbash"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "sreesubbash"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "sreesubbash"
        },
        "content": "import seedu.address.logic.commands.Command;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "sreesubbash"
        },
        "content": "import seedu.address.logic.commands.switches.OpenCommand;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "sreesubbash"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "sreesubbash"
        },
        "content": "import seedu.address.logic.util.AutoFillAction;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "sreesubbash"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "sreesubbash"
        },
        "content": "class SpecificModeParserTest {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "sreesubbash"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "sreesubbash"
        },
        "content": "    private SpecificModeParser specificModeParser;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "sreesubbash"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "sreesubbash"
        },
        "content": "    @BeforeEach"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "sreesubbash"
        },
        "content": "    void setUp() {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "sreesubbash"
        },
        "content": "        specificModeParser \u003d new SpecificModeParser();"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "sreesubbash"
        },
        "content": "        specificModeParser.add(OpenCommand.class, null);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "sreesubbash"
        },
        "content": "    }"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "sreesubbash"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "sreesubbash"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "sreesubbash"
        },
        "content": "    void add() {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "sreesubbash"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "sreesubbash"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "sreesubbash"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "sreesubbash"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "sreesubbash"
        },
        "content": "    void parseCommand() {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "sreesubbash"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "sreesubbash"
        },
        "content": "            Command out \u003d specificModeParser.parseCommand(\"open\");"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "sreesubbash"
        },
        "content": "            assertTrue(out instanceof OpenCommand);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "sreesubbash"
        },
        "content": "        } catch (ParseException e) {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "sreesubbash"
        },
        "content": "            System.err.println(e);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "sreesubbash"
        },
        "content": "        }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "sreesubbash"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "sreesubbash"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "sreesubbash"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "sreesubbash"
        },
        "content": "    void getAutoFill() {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "sreesubbash"
        },
        "content": "        List\u003cAutoFillAction\u003e out \u003d specificModeParser.getAutoFill(\"open\");"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "sreesubbash"
        },
        "content": "        boolean foundMatch \u003d false;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "sreesubbash"
        },
        "content": "        for (AutoFillAction a : out) {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "sreesubbash"
        },
        "content": "            if (a.toString().equals(\"open\")) {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "sreesubbash"
        },
        "content": "                foundMatch \u003d true;"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "sreesubbash"
        },
        "content": "            }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "sreesubbash"
        },
        "content": "        }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "sreesubbash"
        },
        "content": "        assertTrue(foundMatch);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "sreesubbash"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "sreesubbash"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "sreesubbash": 51
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/parser/WordBankParserTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "sreesubbash"
        },
        "content": "//import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "sreesubbash"
        },
        "content": "//import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "sreesubbash"
        },
        "content": "//import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "sreesubbash"
        },
        "content": "//import static seedu.address.commons.core.Messages.MESSAGE_UNKNOWN_COMMAND;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "sreesubbash"
        },
        "content": "//import static seedu.address.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "sreesubbash"
        },
        "content": "//import static seedu.address.testutil.TypicalIndexes.INDEX_FIRST_PERSON;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "sreesubbash"
        },
        "content": "//"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "sreesubbash"
        },
        "content": "//import java.util.Arrays;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "sreesubbash"
        },
        "content": "//import java.util.List;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "sreesubbash"
        },
        "content": "//import java.util.stream.Collectors;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "sreesubbash"
        },
        "content": "//"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "sreesubbash"
        },
        "content": "//import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "sreesubbash"
        },
        "content": "//"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "sreesubbash"
        },
        "content": "//import seedu.address.logic.commands.appcommands.AddCommand;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "sreesubbash"
        },
        "content": "//import seedu.address.logic.commands.appcommands.ClearCommand;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "sreesubbash"
        },
        "content": "//import seedu.address.logic.commands.appcommands.DeleteCommand;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "sreesubbash"
        },
        "content": "//import seedu.address.logic.commands.appcommands.EditCommand;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "sreesubbash"
        },
        "content": "//import seedu.address.logic.commands.loadcommands.ExitCommand;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "sreesubbash"
        },
        "content": "//import seedu.address.logic.commands.appcommands.FindCommand;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "sreesubbash"
        },
        "content": "//import seedu.address.logic.commands.appcommands.HelpCommand;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "sreesubbash"
        },
        "content": "//import seedu.address.logic.commands.appcommands.ListCommand;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "sreesubbash"
        },
        "content": "//import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "sreesubbash"
        },
        "content": "//import seedu.address.model.card.Card;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "sreesubbash"
        },
        "content": "//import seedu.address.model.card.WordContainsKeywordsPredicate;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "sreesubbash"
        },
        "content": "//import seedu.address.testutil.CardBuilder;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "sreesubbash"
        },
        "content": "//import seedu.address.testutil.CardUtil;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "sreesubbash"
        },
        "content": "//import seedu.address.testutil.EditCardDescriptorBuilder;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "jascxx"
        },
        "content": "public class WordBankParserTest {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "sreesubbash"
        },
        "content": "//    private final DukemonParser parser \u003d new DukemonParser();"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "sreesubbash"
        },
        "content": "//"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "sreesubbash"
        },
        "content": "//    @Test"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "sreesubbash"
        },
        "content": "//    public void parseCommand_add() throws Exception {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "sreesubbash"
        },
        "content": "//        Card person \u003d new CardBuilder().build();"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "sreesubbash"
        },
        "content": "//        AddCommand command \u003d (AddCommand) parser.parseCommand(CardUtil.getAddCommand(person));"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "sreesubbash"
        },
        "content": "//        assertEquals(new AddCommand(person), command);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "sreesubbash"
        },
        "content": "//    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "sreesubbash"
        },
        "content": "//"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "sreesubbash"
        },
        "content": "//    @Test"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "sreesubbash"
        },
        "content": "//    public void parseCommand_clear() throws Exception {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "sreesubbash"
        },
        "content": "//        assertTrue(parser.parseCommand(ClearCommand.COMMAND_WORD) instanceof ClearCommand);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "sreesubbash"
        },
        "content": "//        assertTrue(parser.parseCommand(ClearCommand.COMMAND_WORD + \" 3\") instanceof ClearCommand);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "sreesubbash"
        },
        "content": "//    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "sreesubbash"
        },
        "content": "//"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "sreesubbash"
        },
        "content": "//    @Test"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "sreesubbash"
        },
        "content": "//    public void parseCommand_delete() throws Exception {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "sreesubbash"
        },
        "content": "//        DeleteCommand command \u003d (DeleteCommand) parser.parseCommand("
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "sreesubbash"
        },
        "content": "//                DeleteCommand.COMMAND_WORD + \" \" + INDEX_FIRST_PERSON.getOneBased());"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "sreesubbash"
        },
        "content": "//        assertEquals(new DeleteCommand(INDEX_FIRST_PERSON), command);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "sreesubbash"
        },
        "content": "//    }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "sreesubbash"
        },
        "content": "//"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "sreesubbash"
        },
        "content": "//    @Test"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "sreesubbash"
        },
        "content": "//    public void parseCommand_edit() throws Exception {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "sreesubbash"
        },
        "content": "//        Card person \u003d new CardBuilder().build();"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "sreesubbash"
        },
        "content": "//        EditCommand.EditCardDescriptor descriptor \u003d new EditCardDescriptorBuilder(person).build();"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "sreesubbash"
        },
        "content": "//        EditCommand command \u003d (EditCommand) parser.parseCommand(EditCommand.COMMAND_WORD + \" \""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "sreesubbash"
        },
        "content": "//                + INDEX_FIRST_PERSON.getOneBased() + \" \" + CardUtil.getEditPersonDescriptorDetails(descriptor));"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "sreesubbash"
        },
        "content": "//        assertEquals(new EditCommand(INDEX_FIRST_PERSON, descriptor), command);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "sreesubbash"
        },
        "content": "//    }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "sreesubbash"
        },
        "content": "//"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "sreesubbash"
        },
        "content": "//    @Test"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "sreesubbash"
        },
        "content": "//    public void parseCommand_exit() throws Exception {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "sreesubbash"
        },
        "content": "//        assertTrue(parser.parseCommand(ExitCommand.COMMAND_WORD) instanceof ExitCommand);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "sreesubbash"
        },
        "content": "//        assertTrue(parser.parseCommand(ExitCommand.COMMAND_WORD + \" 3\") instanceof ExitCommand);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "sreesubbash"
        },
        "content": "//    }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "sreesubbash"
        },
        "content": "//"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "sreesubbash"
        },
        "content": "//    @Test"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "sreesubbash"
        },
        "content": "//    public void parseCommand_find() throws Exception {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "sreesubbash"
        },
        "content": "//        List\u003cString\u003e keywords \u003d Arrays.asList(\"foo\", \"bar\", \"baz\");"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "sreesubbash"
        },
        "content": "//        FindCommand command \u003d (FindCommand) parser.parseCommand("
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "sreesubbash"
        },
        "content": "//                FindCommand.COMMAND_WORD + \" \" + keywords.stream().collect(Collectors.joining(\" \")));"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "sreesubbash"
        },
        "content": "//        assertEquals(new FindCommand(new WordContainsKeywordsPredicate(keywords)), command);"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "sreesubbash"
        },
        "content": "//    }"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "sreesubbash"
        },
        "content": "//"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "sreesubbash"
        },
        "content": "//    @Test"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "sreesubbash"
        },
        "content": "//    public void parseCommand_help() throws Exception {"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "sreesubbash"
        },
        "content": "//        assertTrue(parser.parseCommand(HelpCommand.COMMAND_WORD) instanceof HelpCommand);"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "sreesubbash"
        },
        "content": "//        assertTrue(parser.parseCommand(HelpCommand.COMMAND_WORD + \" 3\") instanceof HelpCommand);"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "sreesubbash"
        },
        "content": "//    }"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "sreesubbash"
        },
        "content": "//"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "sreesubbash"
        },
        "content": "//    @Test"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "sreesubbash"
        },
        "content": "//    public void parseCommand_list() throws Exception {"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "sreesubbash"
        },
        "content": "//        assertTrue(parser.parseCommand(ListCommand.COMMAND_WORD) instanceof ListCommand);"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "sreesubbash"
        },
        "content": "//        assertTrue(parser.parseCommand(ListCommand.COMMAND_WORD + \" 3\") instanceof ListCommand);"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "sreesubbash"
        },
        "content": "//    }"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "sreesubbash"
        },
        "content": "//"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "sreesubbash"
        },
        "content": "//    @Test"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "sreesubbash"
        },
        "content": "//    public void parseCommand_unrecognisedInput_throwsParseException() {"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "sreesubbash"
        },
        "content": "//        assertThrows(ParseException.class, String.format(MESSAGE_INVALID_COMMAND_FORMAT,"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "sreesubbash"
        },
        "content": "//            HelpCommand.MESSAGE_USAGE), () -\u003e parser.parseCommand(\"\"));"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "sreesubbash"
        },
        "content": "//    }"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "sreesubbash"
        },
        "content": "//"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "sreesubbash"
        },
        "content": "//    @Test"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "sreesubbash"
        },
        "content": "//    public void parseCommand_unknownCommand_throwsParseException() {"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "sreesubbash"
        },
        "content": "//        assertThrows(ParseException.class, MESSAGE_UNKNOWN_COMMAND, () -\u003e parser.parseCommand(\"unknownCommand\"));"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "sreesubbash"
        },
        "content": "//    }"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "sreesubbash": 94,
      "jascxx": 1,
      "-": 5
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/parser/load/RemoveCommandParserTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "sreesubbash"
        },
        "content": "package seedu.address.logic.parser.load;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "sreesubbash"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "sreesubbash"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "sreesubbash"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "sreesubbash"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "sreesubbash"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "sreesubbash"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "sreesubbash"
        },
        "content": "public class RemoveCommandParserTest {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "sreesubbash"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "sreesubbash"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "sreesubbash"
        },
        "content": "    public void parse_successful_delete() {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "sreesubbash"
        },
        "content": "        assertTrue(true);"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "sreesubbash"
        },
        "content": "    }"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "sreesubbash"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "sreesubbash"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "sreesubbash"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "sreesubbash": 16
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/parser/settings/DifficultyCommandParserTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "dragontho"
        },
        "content": "package seedu.address.logic.parser.settings;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "dragontho"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "dragontho"
        },
        "content": "public class DifficultyCommandParserTest {"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "dragontho"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "dragontho"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "dragontho": 5
    }
  },
  {
    "path": "src/test/java/seedu/address/model/AppSettingsTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.model;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "dragontho"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "dragontho"
        },
        "content": "import seedu.address.model.appsettings.AppSettings;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "dragontho"
        },
        "content": "public class AppSettingsTest {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setGuiSettings_nullGuiSettings_throwsNullPointerException() {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs userPref \u003d new UserPrefs();"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e userPref.setGuiSettings(null));"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setAddressBookFilePath_nullPath_throwsNullPointerException() {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs userPrefs \u003d new UserPrefs();"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "chrischenhui"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e userPrefs.setDataFilePath(null));"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "dragontho"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "dragontho"
        },
        "content": "    public void setDefaultDifficulty_nullDifficulty_throwsNullPointerException() {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "dragontho"
        },
        "content": "        AppSettings appSettings \u003d new AppSettings();"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "dragontho"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e appSettings.setDefaultDifficulty(null));"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "dragontho"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "dragontho"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "dragontho"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "dragontho"
        },
        "content": "    public void setDefaultTheme_nullTheme_throwsNullPointerException() {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "dragontho"
        },
        "content": "        AppSettings appSettings \u003d new AppSettings();"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "dragontho"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e appSettings.setDefaultTheme(null));"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "dragontho"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "dragontho"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "dragontho": 15,
      "chrischenhui": 1,
      "-": 19
    }
  },
  {
    "path": "src/test/java/seedu/address/model/ModelManagerTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.model;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "chrischenhui"
        },
        "content": "//import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "chrischenhui"
        },
        "content": "//import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "dragontho"
        },
        "content": "//import static seedu.address.model.Model.PREDICATE_SHOW_ALL_CARDS;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "dragontho"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "chrischenhui"
        },
        "content": "//import static seedu.address.testutil.TypicalCards.ABRA;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "dragontho"
        },
        "content": "//import static seedu.address.testutil.TypicalCards.BUTTERFREE;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Paths;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "dragontho"
        },
        "content": "//import java.util.Arrays;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.GuiSettings;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "dragontho"
        },
        "content": "//import seedu.address.model.card.WordContainsKeywordsPredicate;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "dragontho"
        },
        "content": "//import seedu.address.model.wordbank.WordBank;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "dragontho"
        },
        "content": "//import seedu.address.testutil.WordBankBuilder;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "public class ModelManagerTest {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "dragontho"
        },
        "content": "    //    @Test"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "dragontho"
        },
        "content": "    //    public void constructor() {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "dragontho"
        },
        "content": "    //        assertEquals(new UserPrefs(), modelManager.getUserPrefs());"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "dragontho"
        },
        "content": "    //        assertEquals(new GuiSettings(), modelManager.getGuiSettings());"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "chrischenhui"
        },
        "content": "    //        assertEquals(new WordBank(modelManager.toModelType().getId()), new WordBank(modelManager.toModelType()));"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "dragontho"
        },
        "content": "    //    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setUserPrefs_nullUserPrefs_throwsNullPointerException() {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": "        ModelManager modelManager \u003d new ModelManager();"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e modelManager.setUserPrefs(null));"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setUserPrefs_validUserPrefs_copiesUserPrefs() {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": "        ModelManager modelManager \u003d new ModelManager();"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs userPrefs \u003d new UserPrefs();"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "chrischenhui"
        },
        "content": "        userPrefs.setDataFilePath(Paths.get(\"address/book/file/path\"));"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        userPrefs.setGuiSettings(new GuiSettings(1, 2, 3, 4));"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        modelManager.setUserPrefs(userPrefs);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(userPrefs, modelManager.getUserPrefs());"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        // Modifying userPrefs should not modify modelManager\u0027s userPrefs"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs oldUserPrefs \u003d new UserPrefs(userPrefs);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "chrischenhui"
        },
        "content": "        userPrefs.setDataFilePath(Paths.get(\"new/address/book/file/path\"));"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(oldUserPrefs, modelManager.getUserPrefs());"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setGuiSettings_nullGuiSettings_throwsNullPointerException() {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": "        ModelManager modelManager \u003d new ModelManager();"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e modelManager.setGuiSettings(null));"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setGuiSettings_validGuiSettings_setsGuiSettings() {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": "        ModelManager modelManager \u003d new ModelManager();"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "        GuiSettings guiSettings \u003d new GuiSettings(1, 2, 3, 4);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "        modelManager.setGuiSettings(guiSettings);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(guiSettings, modelManager.getGuiSettings());"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setAddressBookFilePath_nullPath_throwsNullPointerException() {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": "        ModelManager modelManager \u003d new ModelManager();"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "jascxx"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e modelManager.setWordBankFilePath(null));"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setAddressBookFilePath_validPath_setsAddressBookFilePath() {"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": "        ModelManager modelManager \u003d new ModelManager();"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "        Path path \u003d Paths.get(\"address/book/file/path\");"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "jascxx"
        },
        "content": "        modelManager.setWordBankFilePath(path);"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "jascxx"
        },
        "content": "        assertEquals(path, modelManager.getWordBankFilePath());"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "    public void hasPerson_nullPerson_throwsNullPointerException() {"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": "        ModelManager modelManager \u003d new ModelManager();"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "jascxx"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e modelManager.hasCard(null));"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "chrischenhui"
        },
        "content": "    //    @Test"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "chrischenhui"
        },
        "content": "    //    public void hasPerson_personNotInAddressBook_returnsFalse() {"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "chrischenhui"
        },
        "content": "    //        ModelManager modelManager \u003d new ModelManager();"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "chrischenhui"
        },
        "content": "    //        assertFalse(modelManager.hasCard(ABRA));"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "chrischenhui"
        },
        "content": "    //    }"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": ""
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "chrischenhui"
        },
        "content": "    //    @Test"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "chrischenhui"
        },
        "content": "    //    public void hasPerson_personInAddressBook_returnsTrue() {"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "chrischenhui"
        },
        "content": "    //        modelManager.addCard(ABRA);"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "chrischenhui"
        },
        "content": "    //        assertTrue(modelManager.hasCard(ABRA));"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "chrischenhui"
        },
        "content": "    //    }"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "    public void getFilteredPersonList_modifyList_throwsUnsupportedOperationException() {"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": "        ModelManager modelManager \u003d new ModelManager();"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "jascxx"
        },
        "content": "        assertThrows(UnsupportedOperationException.class, () -\u003e modelManager.getFilteredCardList().remove(0));"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "dragontho"
        },
        "content": "    //    @Test"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "dragontho"
        },
        "content": "    //    public void equals() {"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "dragontho"
        },
        "content": "    //        WordBank wordBank \u003d new WordBankBuilder().withCard(ABRA).withCard(BUTTERFREE).build();"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "dragontho"
        },
        "content": "    //        WordBank differentWordBank \u003d new WordBank(\"abc\");"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "dragontho"
        },
        "content": "    //        UserPrefs userPrefs \u003d new UserPrefs();"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "dragontho"
        },
        "content": "    //"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "dragontho"
        },
        "content": "    //        // same values -\u003e returns true"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "dragontho"
        },
        "content": "    //        modelManager \u003d new ModelManager(wordBank, userPrefs);"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "dragontho"
        },
        "content": "    //        ModelManager modelManagerCopy \u003d new ModelManager(wordBank, userPrefs);"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "dragontho"
        },
        "content": "    //        assertTrue(modelManager.equals(modelManagerCopy));"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "dragontho"
        },
        "content": "    //"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "dragontho"
        },
        "content": "    //        // same object -\u003e returns true"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "dragontho"
        },
        "content": "    //        assertTrue(modelManager.equals(modelManager));"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "dragontho"
        },
        "content": "    //"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "dragontho"
        },
        "content": "    //        // null -\u003e returns false"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "dragontho"
        },
        "content": "    //        assertFalse(modelManager.equals(null));"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "dragontho"
        },
        "content": "    //"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "dragontho"
        },
        "content": "    //        // different types -\u003e returns false"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "dragontho"
        },
        "content": "    //        assertFalse(modelManager.equals(5));"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "dragontho"
        },
        "content": "    //"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "dragontho"
        },
        "content": "    //        // different addressBook -\u003e returns false"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "dragontho"
        },
        "content": "    //        assertFalse(modelManager.equals(new ModelManager(differentWordBank, userPrefs)));"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "dragontho"
        },
        "content": "    //"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "dragontho"
        },
        "content": "    //        // different filteredList -\u003e returns false"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "dragontho"
        },
        "content": "    //        String[] keywords \u003d ABRA.getWord().value.split(\"\\\\s+\");"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "dragontho"
        },
        "content": "    //        modelManager.updateFilteredCardList(new WordContainsKeywordsPredicate(Arrays.asList(keywords)));"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "dragontho"
        },
        "content": "    //        assertFalse(modelManager.equals(new ModelManager(wordBank, userPrefs)));"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "dragontho"
        },
        "content": "    //"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "dragontho"
        },
        "content": "    //        // resets modelManager to initial state for upcoming tests"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "dragontho"
        },
        "content": "    //        modelManager.updateFilteredCardList(PREDICATE_SHOW_ALL_CARDS);"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "dragontho"
        },
        "content": "    //"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "dragontho"
        },
        "content": "    //        // different userPrefs -\u003e returns false"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "dragontho"
        },
        "content": "    //        UserPrefs differentUserPrefs \u003d new UserPrefs();"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "dragontho"
        },
        "content": "    //        differentUserPrefs.setAddressBookFilePath(Paths.get(\"differentFilePath\"));"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "dragontho"
        },
        "content": "    //        assertFalse(modelManager.equals(new ModelManager(wordBank, differentUserPrefs)));"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "dragontho"
        },
        "content": "    //    }"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "dragontho": 48,
      "jascxx": 5,
      "chrischenhui": 16,
      "kohyida1997": 9,
      "-": 64
    }
  },
  {
    "path": "src/test/java/seedu/address/model/WordBankTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.model;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "jascxx"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_TAG_BUG;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "jascxx"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_WORD_BUTTERFREE;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "jascxx"
        },
        "content": "import static seedu.address.testutil.TypicalCards.ABRA;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "jascxx"
        },
        "content": "import static seedu.address.testutil.TypicalCards.getTypicalWordBank;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Collection;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Collections;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.collections.FXCollections;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "jascxx"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "jascxx"
        },
        "content": "import seedu.address.model.card.Card;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "jascxx"
        },
        "content": "import seedu.address.model.card.exceptions.DuplicateCardException;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "jascxx"
        },
        "content": "import seedu.address.model.wordbank.ReadOnlyWordBank;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "jascxx"
        },
        "content": "import seedu.address.model.wordbank.WordBank;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "jascxx"
        },
        "content": "import seedu.address.testutil.CardBuilder;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "jascxx"
        },
        "content": "public class WordBankTest {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "chrischenhui"
        },
        "content": "    private final WordBank wordBank \u003d new WordBank(\"sample\");"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    public void constructor() {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "jascxx"
        },
        "content": "        assertEquals(Collections.emptyList(), wordBank.getCardList());"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    public void resetData_null_throwsNullPointerException() {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "jascxx"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e wordBank.resetData(null));"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "jascxx"
        },
        "content": "    public void resetData_withValidReadOnlyWordBank_replacesData() {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "jascxx"
        },
        "content": "        WordBank newData \u003d getTypicalWordBank();"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "jascxx"
        },
        "content": "        wordBank.resetData(newData);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "jascxx"
        },
        "content": "        assertEquals(newData, wordBank);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "jascxx"
        },
        "content": "    public void resetData_withDuplicateCards_throwsDuplicateCardException() {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "jascxx"
        },
        "content": "        // Two Cards with the same identity fields"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "jascxx"
        },
        "content": "        Card editedAbra \u003d new CardBuilder(ABRA).withWord(VALID_WORD_BUTTERFREE).withTags(VALID_TAG_BUG)"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "                .build();"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "jascxx"
        },
        "content": "        List\u003cCard\u003e newCards \u003d Arrays.asList(ABRA, editedAbra);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "jascxx"
        },
        "content": "        WordBankStub newData \u003d new WordBankStub(newCards);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "jascxx"
        },
        "content": "        assertThrows(DuplicateCardException.class, () -\u003e wordBank.resetData(newData));"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "jascxx"
        },
        "content": "    public void hasCard_nullCard_throwsNullPointerException() {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "jascxx"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e wordBank.hasCard(null));"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "jascxx"
        },
        "content": "    public void hasCard_cardNotInWordBank_returnsFalse() {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "jascxx"
        },
        "content": "        assertFalse(wordBank.hasCard(ABRA));"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "jascxx"
        },
        "content": "    public void hasCard_cardInWordBank_returnsTrue() {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "jascxx"
        },
        "content": "        wordBank.addCard(ABRA);"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "jascxx"
        },
        "content": "        assertTrue(wordBank.hasCard(ABRA));"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "jascxx"
        },
        "content": "    public void hasCard_cardWithSameIdentityFieldsInWordBank_returnsTrue() {"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "jascxx"
        },
        "content": "        wordBank.addCard(ABRA);"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "jascxx"
        },
        "content": "        Card editedAbra \u003d new CardBuilder(ABRA).withWord(VALID_WORD_BUTTERFREE).withTags(VALID_TAG_BUG)"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "                .build();"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "jascxx"
        },
        "content": "        assertTrue(wordBank.hasCard(editedAbra));"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "jascxx"
        },
        "content": "    public void getCardList_modifyList_throwsUnsupportedOperationException() {"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "jascxx"
        },
        "content": "        assertThrows(UnsupportedOperationException.class, () -\u003e wordBank.getCardList().remove(0));"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "chrischenhui"
        },
        "content": "     * A stub ReadOnlyWordBankList whose cards list can violate interface constraints."
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "jascxx"
        },
        "content": "    private static class WordBankStub implements ReadOnlyWordBank {"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "jascxx"
        },
        "content": "        private final ObservableList\u003cCard\u003e cards \u003d FXCollections.observableArrayList();"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "jascxx"
        },
        "content": "        WordBankStub(Collection\u003cCard\u003e cards) {"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "jascxx"
        },
        "content": "            this.cards.setAll(cards);"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "jascxx"
        },
        "content": "        public ObservableList\u003cCard\u003e getCardList() {"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "jascxx"
        },
        "content": "            return cards;"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "jascxx"
        },
        "content": ""
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "jascxx"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "jascxx"
        },
        "content": "        public Card getCard(Index index) {"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "jascxx"
        },
        "content": "            return cards.get(index.getZeroBased());"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "jascxx"
        },
        "content": "        }"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "jascxx"
        },
        "content": ""
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "jascxx"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "jascxx"
        },
        "content": "        public int size() {"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "jascxx"
        },
        "content": "            return cards.size();"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "jascxx"
        },
        "content": "        }"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "jascxx"
        },
        "content": ""
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "jascxx"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "dragontho"
        },
        "content": "        public String getName() {"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "dragontho"
        },
        "content": "            return null;"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "jascxx"
        },
        "content": "        }"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "dragontho"
        },
        "content": ""
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "dragontho"
        },
        "content": "        //        @Override"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "dragontho"
        },
        "content": "        //        public String getId() {"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "dragontho"
        },
        "content": "        //            return \"sample-id\";"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "dragontho"
        },
        "content": "        //        }"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "dragontho": 7,
      "jascxx": 55,
      "chrischenhui": 2,
      "-": 61
    }
  },
  {
    "path": "src/test/java/seedu/address/model/card/CardTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jascxx"
        },
        "content": "package seedu.address.model.card;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "jascxx"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "jascxx"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "jascxx"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "jascxx"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_MEANING_BUTTERFREE;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "jascxx"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_TAG_BUG;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "jascxx"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_WORD_BUTTERFREE;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "jascxx"
        },
        "content": "import static seedu.address.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "jascxx"
        },
        "content": "import static seedu.address.testutil.TypicalCards.ABRA;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "jascxx"
        },
        "content": "import static seedu.address.testutil.TypicalCards.BUTTERFREE;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "jascxx"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "dragontho"
        },
        "content": "//import java.util.HashSet;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "jascxx"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "jascxx"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "jascxx"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "jascxx"
        },
        "content": "import seedu.address.testutil.CardBuilder;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "jascxx"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "jascxx"
        },
        "content": "public class CardTest {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "jascxx"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "jascxx"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "jascxx"
        },
        "content": "    public void asObservableList_modifyList_throwsUnsupportedOperationException() {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "jascxx"
        },
        "content": "        Card card \u003d new CardBuilder().build();"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "jascxx"
        },
        "content": "        assertThrows(UnsupportedOperationException.class, () -\u003e card.getTags().remove(0));"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "jascxx"
        },
        "content": "    }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "jascxx"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "jascxx"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "jascxx"
        },
        "content": "    public void isSameMeaning() {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "jascxx"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "jascxx"
        },
        "content": "        assertTrue(ABRA.isSameMeaning(ABRA));"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "jascxx"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "jascxx"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "jascxx"
        },
        "content": "        assertFalse(ABRA.isSameMeaning(null));"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "jascxx"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "jascxx"
        },
        "content": "        // different word -\u003e returns true"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "jascxx"
        },
        "content": "        Card editedAbra \u003d new CardBuilder(ABRA).withWord(VALID_WORD_BUTTERFREE).build();"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "jascxx"
        },
        "content": "        assertTrue(ABRA.isSameMeaning(editedAbra));"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "jascxx"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "jascxx"
        },
        "content": "        // same word, different meanings -\u003e returns false"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "jascxx"
        },
        "content": "        editedAbra \u003d new CardBuilder(ABRA).withMeaning(VALID_MEANING_BUTTERFREE)"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "jascxx"
        },
        "content": "                .withTags(VALID_TAG_BUG).build();"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "jascxx"
        },
        "content": "        assertFalse(ABRA.isSameMeaning(editedAbra));"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "jascxx"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "jascxx"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "dragontho"
        },
        "content": "    //    @Test"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "dragontho"
        },
        "content": "    //    public void getHint() {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "dragontho"
        },
        "content": "    //        String wordStr \u003d \"Pikachu\";"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "dragontho"
        },
        "content": "    //        String meaningStr \u003d \"PIKA PIKA\";"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "dragontho"
        },
        "content": "    //        Card card \u003d new Card(new Word(wordStr), new Meaning(meaningStr), new HashSet\u003c\u003e());"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "dragontho"
        },
        "content": "    //        for (int i \u003d 0; i \u003c wordStr.length(); ++i) {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "dragontho"
        },
        "content": "    //            Hint hint \u003d card.getHint();"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "dragontho"
        },
        "content": "    //            assertTrue(wordStr.charAt(hint.index.getZeroBased()) \u003d\u003d hint.letter);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "dragontho"
        },
        "content": "    //        }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "dragontho"
        },
        "content": "    //        assertTrue(card.getHint() \u003d\u003d null); // hints exhausted"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "dragontho"
        },
        "content": "    //    }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "jascxx"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "jascxx"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "jascxx"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "jascxx"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "jascxx"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "jascxx"
        },
        "content": "        // same values -\u003e returns true"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "jascxx"
        },
        "content": "        Card abraCopy \u003d new CardBuilder(ABRA).build();"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "jascxx"
        },
        "content": "        assertTrue(ABRA.equals(abraCopy));"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "jascxx"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "jascxx"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "jascxx"
        },
        "content": "        assertTrue(ABRA.equals(ABRA));"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "jascxx"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "jascxx"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "jascxx"
        },
        "content": "        assertFalse(ABRA.equals(null));"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "jascxx"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "jascxx"
        },
        "content": "        // different type -\u003e returns false"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "jascxx"
        },
        "content": "        assertFalse(ABRA.equals(5));"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "jascxx"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "jascxx"
        },
        "content": "        // different Card -\u003e returns false"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "jascxx"
        },
        "content": "        assertFalse(ABRA.equals(BUTTERFREE));"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "jascxx"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "jascxx"
        },
        "content": "        // different name -\u003e returns false"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "jascxx"
        },
        "content": "        Card editedAbra \u003d new CardBuilder(ABRA).withWord(VALID_WORD_BUTTERFREE).build();"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "jascxx"
        },
        "content": "        assertFalse(ABRA.equals(editedAbra));"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "jascxx"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "jascxx"
        },
        "content": "        // different description -\u003e returns false"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "jascxx"
        },
        "content": "        editedAbra \u003d new CardBuilder(ABRA).withMeaning(VALID_MEANING_BUTTERFREE).build();"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "jascxx"
        },
        "content": "        assertFalse(ABRA.equals(editedAbra));"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "jascxx"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "jascxx"
        },
        "content": "        // different tags -\u003e returns false"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "jascxx"
        },
        "content": "        editedAbra \u003d new CardBuilder(ABRA).withTags(VALID_TAG_BUG).build();"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "jascxx"
        },
        "content": "        assertFalse(ABRA.equals(editedAbra));"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "jascxx"
        },
        "content": "    }"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "jascxx"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "dragontho": 12,
      "jascxx": 76
    }
  },
  {
    "path": "src/test/java/seedu/address/model/card/HintSupplierTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jascxx"
        },
        "content": "package seedu.address.model.card;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "jascxx"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "jascxx"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "jascxx"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "jascxx"
        },
        "content": "import static seedu.address.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "jascxx"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "jascxx"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "jascxx"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "jascxx"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "jascxx"
        },
        "content": "public class HintSupplierTest {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "jascxx"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "jascxx"
        },
        "content": "    public void constructor_null_throwsNullPointerException() {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "jascxx"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e new HintSupplier(null));"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "jascxx"
        },
        "content": "    }"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "jascxx"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "jascxx"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "jascxx"
        },
        "content": "    public void getRemainingHints() {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "jascxx"
        },
        "content": "        String name \u003d \"Sudowoodo\";"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "jascxx"
        },
        "content": "        HintSupplier hintSupplier \u003d new HintSupplier(name);"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "jascxx"
        },
        "content": "        assertEquals(hintSupplier.getRemainingHints(), name.length());"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "jascxx"
        },
        "content": "    }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "jascxx"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "jascxx"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "jascxx"
        },
        "content": "    public void get() {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": "        String word \u003d \"Sudowoodo\";"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": "        HintSupplier hintSupplier \u003d new HintSupplier(word);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": "        FormattedHint formattedHint \u003d hintSupplier.get();"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": "        for (int i \u003d 0; i \u003c word.length() - 1; i++) {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": "            formattedHint \u003d hintSupplier.get();"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "jascxx"
        },
        "content": "        }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": "        // After all hint characters are supplied, the formatted hint should be same as original word."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": "        assertEquals(word, formattedHint.toString());"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "jascxx"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "jascxx"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "jascxx": 27,
      "kohyida1997": 7
    }
  },
  {
    "path": "src/test/java/seedu/address/model/card/HintTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jascxx"
        },
        "content": "package seedu.address.model.card;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "jascxx"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "jascxx"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "jascxx"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertNotEquals;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "jascxx"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "jascxx"
        },
        "content": "import static seedu.address.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "jascxx"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "jascxx"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "jascxx"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "jascxx"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "jascxx"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "jascxx"
        },
        "content": "public class HintTest {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "jascxx"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "jascxx"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "jascxx"
        },
        "content": "    public void constructor_null_throwsNullPointerException() {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "jascxx"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e new Hint(null, null));"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "jascxx"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e new Hint(\u0027d\u0027, null));"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "jascxx"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e new Hint(null, Index.fromZeroBased(1)));"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "jascxx"
        },
        "content": "    }"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "jascxx"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "jascxx"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "jascxx"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "jascxx"
        },
        "content": "        Character validChar \u003d \u0027C\u0027;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "jascxx"
        },
        "content": "        Character validChar2 \u003d \u0027D\u0027;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "jascxx"
        },
        "content": "        Index validIndex \u003d Index.fromZeroBased(0);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "jascxx"
        },
        "content": "        Index validIndex2 \u003d Index.fromZeroBased(1);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "jascxx"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "jascxx"
        },
        "content": "        Hint hint \u003d new Hint(validChar, validIndex);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "jascxx"
        },
        "content": "        assertEquals(hint, hint);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "jascxx"
        },
        "content": "        Hint hint2 \u003d new Hint(validChar, validIndex);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "jascxx"
        },
        "content": "        assertEquals(hint, hint2);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "jascxx"
        },
        "content": "        Hint hint3 \u003d new Hint(validChar2, validIndex);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "jascxx"
        },
        "content": "        assertNotEquals(hint, hint3);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "jascxx"
        },
        "content": "        Hint hint4 \u003d new Hint(validChar, validIndex2);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "jascxx"
        },
        "content": "        assertNotEquals(hint, hint4);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "jascxx"
        },
        "content": "    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "jascxx"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "jascxx": 37
    }
  },
  {
    "path": "src/test/java/seedu/address/model/card/MeaningTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jascxx"
        },
        "content": "package seedu.address.model.card;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "jascxx"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "jascxx"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "jascxx"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "jascxx"
        },
        "content": "import static seedu.address.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "jascxx"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "jascxx"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "jascxx"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "jascxx"
        },
        "content": "public class MeaningTest {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "jascxx"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "jascxx"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "jascxx"
        },
        "content": "    public void constructor_null_throwsNullPointerException() {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "jascxx"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e new Meaning(null));"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "jascxx"
        },
        "content": "    }"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "jascxx"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "jascxx"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "jascxx"
        },
        "content": "    public void constructor_invalidMeaning_throwsIllegalArgumentException() {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "jascxx"
        },
        "content": "        String emptyMeaning \u003d \"\";"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "jascxx"
        },
        "content": "        assertThrows(IllegalArgumentException.class, () -\u003e new Meaning(emptyMeaning));"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "jascxx"
        },
        "content": "        String whiteSpace \u003d \"   \\t \\n \\r  \";"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "jascxx"
        },
        "content": "        assertThrows(IllegalArgumentException.class, () -\u003e new Meaning(whiteSpace));"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "jascxx"
        },
        "content": "        StringBuilder tooLongDescription \u003d new StringBuilder();"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "jascxx"
        },
        "content": "        for (int i \u003d 0; i \u003c Meaning.MAX_LEN + 1; ++i) {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "jascxx"
        },
        "content": "            tooLongDescription.append(\"a\");"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "jascxx"
        },
        "content": "        }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "jascxx"
        },
        "content": "        assertThrows(IllegalArgumentException.class, () -\u003e new Meaning(tooLongDescription.toString()));"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "jascxx"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "jascxx"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "jascxx"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "jascxx"
        },
        "content": "    public void isValidMeaning() {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "jascxx"
        },
        "content": "        // null description"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "jascxx"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e Meaning.isValidMeaning(null));"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "jascxx"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "jascxx"
        },
        "content": "        // invalid descriptions"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "jascxx"
        },
        "content": "        assertFalse(Meaning.isValidMeaning(\"\")); // empty string"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "jascxx"
        },
        "content": "        assertFalse(Meaning.isValidMeaning(\" \")); // spaces only"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "jascxx"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "jascxx"
        },
        "content": "        // valid descriptions"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "jascxx"
        },
        "content": "        assertTrue(Meaning.isValidMeaning(\"I need help.\"));"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "jascxx"
        },
        "content": "        assertTrue(Meaning.isValidMeaning(\"Ineedhelp.\"));"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "jascxx"
        },
        "content": "        assertTrue(Meaning.isValidMeaning(\"-\")); // one character"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "jascxx"
        },
        "content": "        StringBuilder maxLenDescription \u003d new StringBuilder();"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "jascxx"
        },
        "content": "        for (int i \u003d 0; i \u003c Meaning.MAX_LEN; ++i) {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "jascxx"
        },
        "content": "            maxLenDescription.append(\"a\");"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "jascxx"
        },
        "content": "        }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "jascxx"
        },
        "content": "        assertTrue(Meaning.isValidMeaning(maxLenDescription.toString())); // maximum length"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "jascxx"
        },
        "content": "    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "jascxx"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "jascxx": 48
    }
  },
  {
    "path": "src/test/java/seedu/address/model/card/UniqueCardListTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jascxx"
        },
        "content": "package seedu.address.model.card;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "jascxx"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "jascxx"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "jascxx"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "jascxx"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "jascxx"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_MEANING_BUTTERFREE;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "jascxx"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_TAG_BUG;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "jascxx"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_TAG_PSYCHIC;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "jascxx"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_WORD_BUTTERFREE;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "jascxx"
        },
        "content": "import static seedu.address.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "jascxx"
        },
        "content": "import static seedu.address.testutil.TypicalCards.ABRA;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "jascxx"
        },
        "content": "import static seedu.address.testutil.TypicalCards.BUTTERFREE;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "jascxx"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "jascxx"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "jascxx"
        },
        "content": "import java.util.Collections;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "jascxx"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "jascxx"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "jascxx"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "jascxx"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "jascxx"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "jascxx"
        },
        "content": "import seedu.address.model.card.exceptions.CardNotFoundException;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "jascxx"
        },
        "content": "import seedu.address.model.card.exceptions.DuplicateCardException;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "jascxx"
        },
        "content": "import seedu.address.model.wordbank.UniqueCardList;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "jascxx"
        },
        "content": "import seedu.address.testutil.CardBuilder;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "jascxx"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "jascxx"
        },
        "content": "public class UniqueCardListTest {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "jascxx"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "jascxx"
        },
        "content": "    private final UniqueCardList uniqueCardList \u003d new UniqueCardList();"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "jascxx"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "jascxx"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "jascxx"
        },
        "content": "    public void contains_nullCard_throwsNullPointerException() {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "jascxx"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e uniqueCardList.contains(null));"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "jascxx"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "jascxx"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "jascxx"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "jascxx"
        },
        "content": "    public void contains_cardNotInList_returnsFalse() {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "jascxx"
        },
        "content": "        assertFalse(uniqueCardList.contains(ABRA));"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "jascxx"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "jascxx"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "jascxx"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "jascxx"
        },
        "content": "    public void contains_cardInList_returnsTrue() {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "jascxx"
        },
        "content": "        uniqueCardList.add(ABRA);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "jascxx"
        },
        "content": "        assertTrue(uniqueCardList.contains(ABRA));"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "jascxx"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "jascxx"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "jascxx"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "jascxx"
        },
        "content": "    public void contains_cardWithSameMeaningInList_returnsTrue() {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "jascxx"
        },
        "content": "        uniqueCardList.add(ABRA);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "jascxx"
        },
        "content": "        Card editedAbra \u003d new CardBuilder(ABRA).withWord(VALID_WORD_BUTTERFREE)"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "jascxx"
        },
        "content": "                .withTags(VALID_TAG_PSYCHIC)"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "jascxx"
        },
        "content": "                .build();"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "jascxx"
        },
        "content": "        assertTrue(uniqueCardList.contains(editedAbra));"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "jascxx"
        },
        "content": "    }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "jascxx"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "jascxx"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "jascxx"
        },
        "content": "    public void add_nullCard_throwsNullPointerException() {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "jascxx"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e uniqueCardList.add(null));"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "jascxx"
        },
        "content": "    }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "jascxx"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "jascxx"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "jascxx"
        },
        "content": "    public void add_duplicateCard_throwsDuplicateCardException() {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "jascxx"
        },
        "content": "        uniqueCardList.add(ABRA);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "jascxx"
        },
        "content": "        assertThrows(DuplicateCardException.class, () -\u003e uniqueCardList.add(ABRA));"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "jascxx"
        },
        "content": "    }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "jascxx"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "jascxx"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "jascxx"
        },
        "content": "    public void setCard_nullTargetCard_throwsNullPointerException() {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "jascxx"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e uniqueCardList.setCard(null, ABRA));"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "jascxx"
        },
        "content": "    }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "jascxx"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "jascxx"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "jascxx"
        },
        "content": "    public void setCard_nullEditedCard_throwsNullPointerException() {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "jascxx"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e uniqueCardList.setCard(ABRA, null));"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "jascxx"
        },
        "content": "    }"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "jascxx"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "jascxx"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "jascxx"
        },
        "content": "    public void setCard_targetCardNotInList_throwsCardNotFoundException() {"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "jascxx"
        },
        "content": "        assertThrows(CardNotFoundException.class, () -\u003e uniqueCardList.setCard(ABRA, ABRA));"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "jascxx"
        },
        "content": "    }"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "jascxx"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "jascxx"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "jascxx"
        },
        "content": "    public void setCard_editedCardIsSameName_success() {"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "jascxx"
        },
        "content": "        uniqueCardList.add(ABRA);"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "jascxx"
        },
        "content": "        uniqueCardList.setCard(ABRA, ABRA);"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "jascxx"
        },
        "content": "        UniqueCardList expectedUniqueCardList \u003d new UniqueCardList();"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "jascxx"
        },
        "content": "        expectedUniqueCardList.add(ABRA);"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "jascxx"
        },
        "content": "        assertEquals(expectedUniqueCardList, uniqueCardList);"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "jascxx"
        },
        "content": "    }"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "jascxx"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "jascxx"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "jascxx"
        },
        "content": "    public void setCard_editedCardHasSameName_success() {"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "jascxx"
        },
        "content": "        uniqueCardList.add(ABRA);"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "jascxx"
        },
        "content": "        Card editedAbra \u003d new CardBuilder(ABRA).withMeaning(VALID_MEANING_BUTTERFREE).withTags(VALID_TAG_BUG)"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "jascxx"
        },
        "content": "                .build();"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "jascxx"
        },
        "content": "        uniqueCardList.setCard(ABRA, editedAbra);"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "jascxx"
        },
        "content": "        UniqueCardList expectedUniqueCardList \u003d new UniqueCardList();"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "jascxx"
        },
        "content": "        expectedUniqueCardList.add(editedAbra);"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "jascxx"
        },
        "content": "        assertEquals(expectedUniqueCardList, uniqueCardList);"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "jascxx"
        },
        "content": "    }"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "jascxx"
        },
        "content": ""
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "jascxx"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "jascxx"
        },
        "content": "    public void setCard_editedCardHasDifferentName_success() {"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "jascxx"
        },
        "content": "        uniqueCardList.add(ABRA);"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "jascxx"
        },
        "content": "        uniqueCardList.setCard(ABRA, BUTTERFREE);"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "jascxx"
        },
        "content": "        UniqueCardList expectedUniqueCardList \u003d new UniqueCardList();"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "jascxx"
        },
        "content": "        expectedUniqueCardList.add(BUTTERFREE);"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "jascxx"
        },
        "content": "        assertEquals(expectedUniqueCardList, uniqueCardList);"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "jascxx"
        },
        "content": "    }"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "jascxx"
        },
        "content": ""
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "jascxx"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "jascxx"
        },
        "content": "    public void setCard_editedCardHasNonUniqueName_throwsDuplicateCardException() {"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "jascxx"
        },
        "content": "        uniqueCardList.add(ABRA);"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "jascxx"
        },
        "content": "        uniqueCardList.add(BUTTERFREE);"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "jascxx"
        },
        "content": "        assertThrows(DuplicateCardException.class, () -\u003e uniqueCardList.setCard(ABRA, BUTTERFREE));"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "jascxx"
        },
        "content": "    }"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "jascxx"
        },
        "content": ""
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "jascxx"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "jascxx"
        },
        "content": "    public void remove_nullCard_throwsNullPointerException() {"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "jascxx"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e uniqueCardList.remove(null));"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "jascxx"
        },
        "content": "    }"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "jascxx"
        },
        "content": ""
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "jascxx"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "jascxx"
        },
        "content": "    public void remove_cardDoesNotExist_throwsCardNotFoundException() {"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "jascxx"
        },
        "content": "        assertThrows(CardNotFoundException.class, () -\u003e uniqueCardList.remove(ABRA));"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "jascxx"
        },
        "content": "    }"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "jascxx"
        },
        "content": ""
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "jascxx"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "jascxx"
        },
        "content": "    public void remove_existingCard_removesCard() {"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "jascxx"
        },
        "content": "        uniqueCardList.add(ABRA);"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "jascxx"
        },
        "content": "        uniqueCardList.remove(ABRA);"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "jascxx"
        },
        "content": "        UniqueCardList expectedUniqueCardList \u003d new UniqueCardList();"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "jascxx"
        },
        "content": "        assertEquals(expectedUniqueCardList, uniqueCardList);"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "jascxx"
        },
        "content": "    }"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "jascxx"
        },
        "content": ""
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "jascxx"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "jascxx"
        },
        "content": "    public void setCards_nullUniqueCardList_throwsNullPointerException() {"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "jascxx"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e uniqueCardList.setCards((UniqueCardList) null));"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "jascxx"
        },
        "content": "    }"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "jascxx"
        },
        "content": ""
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "jascxx"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "jascxx"
        },
        "content": "    public void setCards_uniqueCardList_replacesOwnListWithProvidedUniqueCardList() {"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "jascxx"
        },
        "content": "        uniqueCardList.add(ABRA);"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "jascxx"
        },
        "content": "        UniqueCardList expectedUniqueCardList \u003d new UniqueCardList();"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "jascxx"
        },
        "content": "        expectedUniqueCardList.add(BUTTERFREE);"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "jascxx"
        },
        "content": "        uniqueCardList.setCards(expectedUniqueCardList);"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "jascxx"
        },
        "content": "        assertEquals(expectedUniqueCardList, uniqueCardList);"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "jascxx"
        },
        "content": "    }"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "jascxx"
        },
        "content": ""
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "jascxx"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "jascxx"
        },
        "content": "    public void setCards_nullList_throwsNullPointerException() {"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "jascxx"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e uniqueCardList.setCards((List\u003cCard\u003e) null));"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "jascxx"
        },
        "content": "    }"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "jascxx"
        },
        "content": ""
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "jascxx"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "jascxx"
        },
        "content": "    public void setCards_list_replacesOwnListWithProvidedList() {"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "jascxx"
        },
        "content": "        uniqueCardList.add(ABRA);"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "jascxx"
        },
        "content": "        List\u003cCard\u003e cardList \u003d Collections.singletonList(BUTTERFREE);"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "jascxx"
        },
        "content": "        uniqueCardList.setCards(cardList);"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "jascxx"
        },
        "content": "        UniqueCardList expectedUniqueCardList \u003d new UniqueCardList();"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "jascxx"
        },
        "content": "        expectedUniqueCardList.add(BUTTERFREE);"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "jascxx"
        },
        "content": "        assertEquals(expectedUniqueCardList, uniqueCardList);"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "jascxx"
        },
        "content": "    }"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "jascxx"
        },
        "content": ""
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "jascxx"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "jascxx"
        },
        "content": "    public void setCards_listWithDuplicateCards_throwsDuplicateCardException() {"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "jascxx"
        },
        "content": "        List\u003cCard\u003e listWithDuplicateCards \u003d Arrays.asList(ABRA, ABRA);"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "jascxx"
        },
        "content": "        assertThrows(DuplicateCardException.class, () -\u003e uniqueCardList.setCards(listWithDuplicateCards));"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "jascxx"
        },
        "content": "    }"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "jascxx"
        },
        "content": ""
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "jascxx"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "jascxx"
        },
        "content": "    public void asUnmodifiableObservableList_modifyList_throwsUnsupportedOperationException() {"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "jascxx"
        },
        "content": "        assertThrows(UnsupportedOperationException.class, ()"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "jascxx"
        },
        "content": "            -\u003e uniqueCardList.asUnmodifiableObservableList().remove(0));"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "jascxx"
        },
        "content": "    }"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "jascxx"
        },
        "content": ""
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "jascxx"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "jascxx"
        },
        "content": "    public void getCard_indexOutOfBound_throwsIndexOutOfBoundException() {"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "jascxx"
        },
        "content": "        assertThrows(IndexOutOfBoundsException.class, () -\u003e uniqueCardList.get(Index.fromZeroBased(0)));"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "jascxx"
        },
        "content": "        uniqueCardList.add(ABRA);"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "jascxx"
        },
        "content": "        assertThrows(IndexOutOfBoundsException.class, () -\u003e uniqueCardList.get(Index.fromZeroBased(1)));"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "jascxx"
        },
        "content": "    }"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "jascxx"
        },
        "content": ""
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "jascxx"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "jascxx"
        },
        "content": "    public void getCard_indexInBound_success() {"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "jascxx"
        },
        "content": "        uniqueCardList.add(ABRA);"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "jascxx"
        },
        "content": "        uniqueCardList.add(BUTTERFREE);"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "jascxx"
        },
        "content": "        assertTrue(uniqueCardList.get(Index.fromZeroBased(0)).equals(ABRA));"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "jascxx"
        },
        "content": "        assertTrue(uniqueCardList.get(Index.fromZeroBased(1)).equals(BUTTERFREE));"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "jascxx"
        },
        "content": "    }"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "jascxx"
        },
        "content": ""
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "jascxx"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "jascxx"
        },
        "content": "    public void size() {"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "jascxx"
        },
        "content": "        assertTrue(uniqueCardList.size() \u003d\u003d 0);"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "jascxx"
        },
        "content": "        uniqueCardList.add(ABRA);"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "jascxx"
        },
        "content": "        assertTrue(uniqueCardList.size() \u003d\u003d 1);"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "jascxx"
        },
        "content": "        uniqueCardList.add(BUTTERFREE);"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "jascxx"
        },
        "content": "        assertTrue(uniqueCardList.size() \u003d\u003d 2);"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "jascxx"
        },
        "content": "    }"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "jascxx"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "jascxx": 199
    }
  },
  {
    "path": "src/test/java/seedu/address/model/card/WordContainsKeywordsPredicateTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jascxx"
        },
        "content": "package seedu.address.model.card;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Collections;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "jascxx"
        },
        "content": "import seedu.address.testutil.CardBuilder;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "jascxx"
        },
        "content": "public class WordContainsKeywordsPredicateTest {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "        List\u003cString\u003e firstPredicateKeywordList \u003d Collections.singletonList(\"first\");"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "        List\u003cString\u003e secondPredicateKeywordList \u003d Arrays.asList(\"first\", \"second\");"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "jascxx"
        },
        "content": "        WordContainsKeywordsPredicate firstPredicate \u003d new WordContainsKeywordsPredicate(firstPredicateKeywordList);"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "jascxx"
        },
        "content": "        WordContainsKeywordsPredicate secondPredicate \u003d new WordContainsKeywordsPredicate(secondPredicateKeywordList);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(firstPredicate.equals(firstPredicate));"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        // same values -\u003e returns true"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "jascxx"
        },
        "content": "        WordContainsKeywordsPredicate firstPredicateCopy \u003d new WordContainsKeywordsPredicate(firstPredicateKeywordList);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(firstPredicate.equals(firstPredicateCopy));"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        // different types -\u003e returns false"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(firstPredicate.equals(1));"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(firstPredicate.equals(null));"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        // different person -\u003e returns false"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(firstPredicate.equals(secondPredicate));"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    public void test_nameContainsKeywords_returnsTrue() {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        // One keyword"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "jascxx"
        },
        "content": "        WordContainsKeywordsPredicate predicate \u003d new WordContainsKeywordsPredicate(Collections.singletonList(\"Alice\"));"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "jascxx"
        },
        "content": "        assertTrue(predicate.test(new CardBuilder().withWord(\"Alice Bob\").build()));"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        // Multiple keywords"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "jascxx"
        },
        "content": "        predicate \u003d new WordContainsKeywordsPredicate(Arrays.asList(\"Alice\", \"Bob\"));"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "jascxx"
        },
        "content": "        assertTrue(predicate.test(new CardBuilder().withWord(\"Alice Bobby\").build()));"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        // Only one matching keyword"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "jascxx"
        },
        "content": "        predicate \u003d new WordContainsKeywordsPredicate(Arrays.asList(\"Bob\", \"Carol\"));"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "jascxx"
        },
        "content": "        assertTrue(predicate.test(new CardBuilder().withWord(\"Alice Caroline\").build()));"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "        // Mixed-case keywords"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "jascxx"
        },
        "content": "        predicate \u003d new WordContainsKeywordsPredicate(Arrays.asList(\"aLIce\", \"bOB\"));"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "jascxx"
        },
        "content": "        assertTrue(predicate.test(new CardBuilder().withWord(\"Alice Bob\").build()));"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    public void test_nameDoesNotContainKeywords_returnsFalse() {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "        // Zero keywords"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "jascxx"
        },
        "content": "        WordContainsKeywordsPredicate predicate \u003d new WordContainsKeywordsPredicate(Collections.emptyList());"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "jascxx"
        },
        "content": "        assertFalse(predicate.test(new CardBuilder().withWord(\"Alice\").build()));"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "        // Non-matching keyword"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "jascxx"
        },
        "content": "        predicate \u003d new WordContainsKeywordsPredicate(Arrays.asList(\"Carol\"));"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "jascxx"
        },
        "content": "        assertFalse(predicate.test(new CardBuilder().withWord(\"Alice Bob\").build()));"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "jascxx"
        },
        "content": "        // Keywords match meaning, but does not match word"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "jascxx"
        },
        "content": "        predicate \u003d new WordContainsKeywordsPredicate(Arrays.asList(\"12345\", \"alice@email.com\", \"Main\", \"Street\"));"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "jascxx"
        },
        "content": "        assertFalse(predicate.test(new CardBuilder().withWord(\"Alice\").withMeaning(\"Main Street\").build()));"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "jascxx": 21,
      "-": 53
    }
  },
  {
    "path": "src/test/java/seedu/address/model/card/WordTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jascxx"
        },
        "content": "package seedu.address.model.card;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "jascxx"
        },
        "content": "public class WordTest {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    public void constructor_null_throwsNullPointerException() {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "jascxx"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e new Word(null));"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    public void constructor_invalidName_throwsIllegalArgumentException() {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "        String invalidName \u003d \"\";"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "jascxx"
        },
        "content": "        assertThrows(IllegalArgumentException.class, () -\u003e new Word(invalidName));"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    public void isValidName() {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "        // null name"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "jascxx"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e Word.isValidWord(null));"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        // invalid name"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "jascxx"
        },
        "content": "        assertFalse(Word.isValidWord(\"\")); // empty string"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "jascxx"
        },
        "content": "        assertFalse(Word.isValidWord(\" \\n \\t   \")); // spaces only"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "jascxx"
        },
        "content": "        // todo dont know if this should be allowed"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "jascxx"
        },
        "content": "        //assertFalse(Name.isValidName(\"^\")); // only non-alphanumeric characters"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "jascxx"
        },
        "content": "        //assertFalse(Name.isValidName(\"peter*\")); // contains non-alphanumeric characters"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        // valid name"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "jascxx"
        },
        "content": "        assertTrue(Word.isValidWord(\"peter jack\")); // alphabets only"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "jascxx"
        },
        "content": "        assertTrue(Word.isValidWord(\"12345\")); // numbers only"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "jascxx"
        },
        "content": "        assertTrue(Word.isValidWord(\"peter the 2nd\")); // alphanumeric characters"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "jascxx"
        },
        "content": "        assertTrue(Word.isValidWord(\"Capital Tan\")); // with capital letters"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "jascxx"
        },
        "content": "        assertTrue(Word.isValidWord(\"David Roger Jackson Ray Jr 2nd\")); // long names"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "jascxx": 15,
      "-": 26
    }
  },
  {
    "path": "src/test/java/seedu/address/model/game/GameTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": "package seedu.address.model.game;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "jascxx"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "jascxx"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": "import static seedu.address.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": "import static seedu.address.testutil.TypicalCards.ABRA;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": "import static seedu.address.testutil.TypicalCards.BUTTERFREE;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": "import static seedu.address.testutil.TypicalCards.CHARIZARD;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": "import static seedu.address.testutil.TypicalCards.DITTO;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": "import static seedu.address.testutil.TypicalCards.EEVEE;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": "import java.util.Collections;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": "import java.util.HashMap;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": "import seedu.address.model.appsettings.DifficultyEnum;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": "import seedu.address.model.card.Card;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": "import seedu.address.model.wordbank.WordBank;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": "import seedu.address.testutil.WordBankBuilder;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": "public class GameTest {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": "    public void checkGuess() {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": "        WordBankBuilder wordBankBuilder \u003d new WordBankBuilder();"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": "        wordBankBuilder.withCard(ABRA);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": "        WordBank wb \u003d wordBankBuilder.build();"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": "        Game game \u003d new Game(wb, x -\u003e Collections.shuffle(x), DifficultyEnum.EASY);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": "        // Makes correct guess; guess Abra as Abra"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "jascxx"
        },
        "content": "        assertTrue(game.checkGuess(new Guess(ABRA.getWord().toString())));"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": "        // Makes wrong guess; guess Abra as Butterfree"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "jascxx"
        },
        "content": "        assertFalse(game.checkGuess(new Guess(BUTTERFREE.getWord().toString())));"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": "        // When a guess is made after game has already ended"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": "        assertThrows(UnsupportedOperationException.class, () -\u003e {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": "            game.moveToNextCard();"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "jascxx"
        },
        "content": "            game.checkGuess(new Guess(BUTTERFREE.getWord().toString()));"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": "        });"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": "    public void nullWordBankPassedIntoConstructor_throwsNullPointerException() {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": "        WordBank wb \u003d null;"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e new Game(wb, x -\u003e Collections.shuffle(x), DifficultyEnum.EASY));"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": "    }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": "    public void nullDifficultyEnumPassedIntoConstructor_throwsNullPointerException() {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": "        WordBank wb \u003d new WordBank(\"empty\");"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": "        DifficultyEnum difficultyEnum \u003d null;"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": "            new Game(wb, x -\u003e Collections.shuffle(x), difficultyEnum);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": "        });"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": "    }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": "    public void moveToNextCard() {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": "        // HashMap that maps each card to the number of times it has been seen by the user."
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": "        HashMap\u003cCard, Integer\u003e cardVisitedCountMap \u003d new HashMap\u003c\u003e();"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": "        WordBankBuilder wordBankBuilder \u003d new WordBankBuilder();"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": "        wordBankBuilder.withCard(ABRA);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": "        wordBankBuilder.withCard(BUTTERFREE);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": "        wordBankBuilder.withCard(CHARIZARD);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": "        wordBankBuilder.withCard(DITTO);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": "        WordBank wb \u003d wordBankBuilder.build();"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": "        // Populate HashMap with all the cards in this test wordBank"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": "        for (int i \u003d 0; i \u003c wb.size(); i++) {"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": "            cardVisitedCountMap.put(wb.getCard(Index.fromZeroBased(i)), 0);"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": "        }"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": "        Game game \u003d new Game(wb, x -\u003e Collections.shuffle(x), DifficultyEnum.EASY);"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": "        // Mark the first card as being seen once."
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": "        Card firstCardOfBank \u003d game.getCurrCard();"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": "        cardVisitedCountMap.put(firstCardOfBank,"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": "                cardVisitedCountMap.get(firstCardOfBank) + 1);"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": "        // Mark the rest of the card as being seen once."
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": "        for (int j \u003d 0; j \u003c wb.size() - 1; j++) {"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": "            game.moveToNextCard();"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": "            Card currentCard \u003d game.getCurrCard();"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": "            cardVisitedCountMap.put(currentCard,"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": "                    cardVisitedCountMap.get(currentCard) + 1);"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": "        }"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": "        // Check that all cards were visited exactly once."
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": "        for (Card key : cardVisitedCountMap.keySet()) {"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": "            assertEquals(1, cardVisitedCountMap.get(key));"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": "        }"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": ""
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": "        // Game should be over now."
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": "        assertThrows(UnsupportedOperationException.class, () -\u003e {"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": "            game.moveToNextCard();"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": "            game.getCurrQuestion();"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": "        });"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": "    }"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": ""
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": "    public void isOver() {"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": "        WordBankBuilder wordBankBuilder \u003d new WordBankBuilder();"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": "        wordBankBuilder.withCard(ABRA);"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": "        wordBankBuilder.withCard(BUTTERFREE);"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": "        WordBank wb \u003d wordBankBuilder.build();"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": "        Game game \u003d new Game(wb, x -\u003e Collections.shuffle(x), DifficultyEnum.EASY);"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": ""
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": "        // Game has not ended, 2 cards left."
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": "        assertFalse(game.isOver());"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": ""
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": "        game.moveToNextCard();"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": ""
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": "        // Game has not ended, 1 card left."
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": "        assertFalse(game.isOver());"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": ""
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": "        game.moveToNextCard();"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": ""
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": "        // Game has ended, 0 card left."
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": "        assertTrue(game.isOver());"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": "    }"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": ""
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": "    public void getCurrQuestion() {"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": "        WordBankBuilder wordBankBuilder \u003d new WordBankBuilder();"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": "        wordBankBuilder.withCard(ABRA);"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": "        WordBank wb \u003d wordBankBuilder.build();"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": "        Game game \u003d new Game(wb, x -\u003e Collections.shuffle(x), DifficultyEnum.EASY);"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": ""
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": "        // ABRA card shows correctly."
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "jascxx"
        },
        "content": "        assertEquals(ABRA.getMeaning().toString(), game.getCurrQuestion());"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": ""
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": "        // Attempting to show current card\u0027s meaning when game already ended"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": "        assertThrows(UnsupportedOperationException.class, () -\u003e {"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": "            game.moveToNextCard();"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": "            game.getCurrQuestion();"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": "        });"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": "    }"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": ""
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": "    public void forceStop() {"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": "        WordBankBuilder wordBankBuilder \u003d new WordBankBuilder();"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": "        wordBankBuilder.withCard(ABRA);"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": "        wordBankBuilder.withCard(BUTTERFREE);"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": "        WordBank wb \u003d wordBankBuilder.build();"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": "        Game game \u003d new Game(wb, x -\u003e Collections.shuffle(x), DifficultyEnum.EASY);"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": ""
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": "        // Game has not ended yet."
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": "        assertFalse(game.isOver());"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": ""
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": "        // Game is forcibly stopped."
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": "        game.forceStop();"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": "        assertTrue(game.isOver());"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": "    }"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": ""
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": "    public void setShuffledDeckOfCards() {"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": "        HashMap\u003cCard, Integer\u003e cardVisitedCountMap \u003d new HashMap\u003c\u003e();"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": "        WordBankBuilder wordBankBuilder \u003d new WordBankBuilder();"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": "        wordBankBuilder.withCard(ABRA);"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": "        wordBankBuilder.withCard(BUTTERFREE);"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": "        wordBankBuilder.withCard(CHARIZARD);"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": "        wordBankBuilder.withCard(DITTO);"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": "        wordBankBuilder.withCard(EEVEE);"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": "        WordBank wb \u003d wordBankBuilder.build();"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": "        // Populate HashMap with all the cards in this test wordBank"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": "        for (int i \u003d 0; i \u003c wb.size(); i++) {"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": "            cardVisitedCountMap.put(wb.getCard(Index.fromZeroBased(i)), 0);"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": "        }"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": ""
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": "        Game game \u003d new Game(wb, x -\u003e Collections.shuffle(x), DifficultyEnum.EASY);"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": ""
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": ""
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": "        // Shuffling method should not change the set of possible cards or introduce duplicates."
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": "        for (int i \u003d 0; i \u003c wb.size(); i++) {"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": "            Card currCard \u003d game.getCurrCard();"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": "            assertTrue(cardVisitedCountMap.containsKey(currCard));"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": "            cardVisitedCountMap.put(currCard, cardVisitedCountMap.get(currCard) + 1);"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": "            game.moveToNextCard();"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": "        }"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": ""
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": "        // Check that all cards were visited exactly once."
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": "        for (Card key : cardVisitedCountMap.keySet()) {"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": "            assertEquals(1, cardVisitedCountMap.get(key));"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": "        }"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": ""
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": "        // Shuffling method should not change number of cards."
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": "        assertEquals(wb.size(), cardVisitedCountMap.size());"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": ""
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": "        assertTrue(game.isOver());"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": "        assertThrows(UnsupportedOperationException.class, () -\u003e {"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": "            game.moveToNextCard();"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": "            game.getCurrQuestion();"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": "        });"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": ""
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": "    }"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": ""
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": "    void getCurrentGameDifficulty() {"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": "        WordBankBuilder wordBankBuilder \u003d new WordBankBuilder();"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": "        wordBankBuilder.withCard(ABRA);"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": "        wordBankBuilder.withCard(BUTTERFREE);"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": "        wordBankBuilder.withCard(CHARIZARD);"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": "        wordBankBuilder.withCard(DITTO);"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": "        wordBankBuilder.withCard(EEVEE);"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": "        WordBank wb \u003d wordBankBuilder.build();"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": "        Game testGame \u003d new Game(wb, x -\u003e Collections.shuffle(x),"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": "                DifficultyEnum.EASY);"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": "        assertEquals(DifficultyEnum.EASY, testGame.getCurrentGameDifficulty());"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": "    }"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": ""
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": "    void getCurrCard() {"
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": "        WordBankBuilder wordBankBuilder \u003d new WordBankBuilder();"
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": "        wordBankBuilder.withCard(EEVEE);"
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": "        WordBank wb \u003d wordBankBuilder.build();"
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": "        Game.CardShuffler dummyShuffler \u003d cardsToShuffle -\u003e {};"
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": "        Game testGame \u003d new Game(wb, dummyShuffler,"
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": "                DifficultyEnum.EASY);"
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": "        assertEquals(EEVEE, testGame.getCurrCard());"
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": "    }"
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": ""
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": "    void getHintFormatForCurrCard() {"
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": "        WordBankBuilder wordBankBuilder \u003d new WordBankBuilder();"
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": "        wordBankBuilder.withCard(EEVEE);"
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": "        WordBank wb \u003d wordBankBuilder.build();"
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": "        Game.CardShuffler dummyShuffler \u003d cardsToShuffle -\u003e {};"
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": "        Game testGame \u003d new Game(wb, dummyShuffler,"
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": "                DifficultyEnum.EASY);"
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": ""
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": "        int underscoreCount \u003d 0;"
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": "        String formattedHintString \u003d testGame.getHintFormatForCurrCard().toString();"
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": "        for (int i \u003d 0; i \u003c 5; i++) {"
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": "            if (formattedHintString.charAt(i) \u003d\u003d \u0027_\u0027) {"
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": "                underscoreCount++;"
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": "            }"
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": "        }"
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": "        assertEquals(4, underscoreCount);"
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": "    }"
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": ""
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": "    void getHintFormatSizeOfCurrCard() {"
      },
      {
        "lineNumber": 248,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": "        WordBankBuilder wordBankBuilder \u003d new WordBankBuilder();"
      },
      {
        "lineNumber": 249,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": "        wordBankBuilder.withCard(EEVEE);"
      },
      {
        "lineNumber": 250,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": "        wordBankBuilder.withCard(ABRA);"
      },
      {
        "lineNumber": 251,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": "        WordBank wb \u003d wordBankBuilder.build();"
      },
      {
        "lineNumber": 252,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": "        Game.CardShuffler dummyShuffler \u003d cardsToShuffle -\u003e {};"
      },
      {
        "lineNumber": 253,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": "        Game testGame \u003d new Game(wb, dummyShuffler,"
      },
      {
        "lineNumber": 254,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": "                DifficultyEnum.EASY);"
      },
      {
        "lineNumber": 255,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": "        assertEquals(5, testGame.getHintFormatSizeOfCurrCard());"
      },
      {
        "lineNumber": 256,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": "        testGame.moveToNextCard();"
      },
      {
        "lineNumber": 257,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": "        assertEquals(4, testGame.getHintFormatSizeOfCurrCard());"
      },
      {
        "lineNumber": 258,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": "    }"
      },
      {
        "lineNumber": 259,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": ""
      },
      {
        "lineNumber": 260,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "jascxx": 6,
      "kohyida1997": 254
    }
  },
  {
    "path": "src/test/java/seedu/address/model/game/GuessTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": "package seedu.address.model.game;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": "import static seedu.address.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": "import seedu.address.model.card.Word;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": "public class GuessTest {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": "    public void nullStringPassedIntoConstructor_throwsNullPointerException() {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": "        String userString \u003d null;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e new Guess(userString));"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": "    }"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": "    public void matches() {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": "        Word lowercaseWord \u003d new Word(\"abra\");"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": "        Guess lowercaseGuess \u003d new Guess(\"abra\");"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": "        assertTrue(lowercaseGuess.matches(lowercaseWord));"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": "        Word uppercaseWord \u003d new Word(\"ABRA\");"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": "        Guess uppercaseGuess \u003d new Guess(\"ABRA\");"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": "        assertTrue(uppercaseGuess.matches(uppercaseWord));"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": "        Word someWord \u003d new Word(\"Ditto\");"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": "        Guess wrongGuess \u003d new Guess(\"Charizard\");"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": "        assertFalse(wrongGuess.matches(someWord));"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": "        Word mixedCaseWord \u003d new Word(\"chariZARD\");"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": "        Guess mixedCaseGuess \u003d new Guess(\"CHARIzard\");"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": "        assertTrue(mixedCaseGuess.matches(mixedCaseWord));"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": "    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "kohyida1997": 38
    }
  },
  {
    "path": "src/test/java/seedu/address/statistics/CardStatisticsTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jascxx"
        },
        "content": "package seedu.address.statistics;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "jascxx"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "jascxx"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "jascxx"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertNotEquals;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "jascxx"
        },
        "content": "import static seedu.address.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "jascxx"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "jascxx"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "jascxx"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "jascxx"
        },
        "content": "public class CardStatisticsTest {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "jascxx"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "jascxx"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "jascxx"
        },
        "content": "    public void constructor() {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "jascxx"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e new CardStatistics(null, 1, 1));"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "jascxx"
        },
        "content": "        assertThrows(IllegalArgumentException.class, ()"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "jascxx"
        },
        "content": "            -\u003e new CardStatistics(\"a\", 1, 2)); // numShown \u003c numCorrect"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "jascxx"
        },
        "content": "        assertThrows(IllegalArgumentException.class, ()"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "jascxx"
        },
        "content": "            -\u003e new CardStatistics(\"a\", -1, 1));"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "jascxx"
        },
        "content": "        assertThrows(IllegalArgumentException.class, ()"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "jascxx"
        },
        "content": "            -\u003e new CardStatistics(\"a\", 1, -1));"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "jascxx"
        },
        "content": "    }"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "jascxx"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "jascxx"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "jascxx"
        },
        "content": "    public void addWrongCorrect() {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "jascxx"
        },
        "content": "        CardStatistics cardStatistics \u003d new CardStatistics(\"abc\", 3, 2);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "jascxx"
        },
        "content": "        CardStatistics cardStatisticsWrong \u003d new CardStatistics(\"abc\", 4, 2);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "jascxx"
        },
        "content": "        cardStatistics.addWrong();"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "jascxx"
        },
        "content": "        assertEquals(cardStatistics, cardStatisticsWrong);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "jascxx"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "jascxx"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "jascxx"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "jascxx"
        },
        "content": "    public void addCorrect() {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "jascxx"
        },
        "content": "        CardStatistics cardStatistics \u003d new CardStatistics(\"abc\", 3, 2);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "jascxx"
        },
        "content": "        CardStatistics cardStatisticsCorrect \u003d new CardStatistics(\"abc\", 4, 3);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "jascxx"
        },
        "content": "        cardStatistics.addCorrect();"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "jascxx"
        },
        "content": "        assertEquals(cardStatistics, cardStatisticsCorrect);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "jascxx"
        },
        "content": "    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "jascxx"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "jascxx"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "jascxx"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "jascxx"
        },
        "content": "        CardStatistics cardStatistics \u003d new CardStatistics(\"abc\", 3, 2);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "jascxx"
        },
        "content": "        assertEquals(cardStatistics, cardStatistics);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "jascxx"
        },
        "content": "        Integer i \u003d 1;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "jascxx"
        },
        "content": "        assertNotEquals(cardStatistics, i);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "jascxx"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "jascxx"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "jascxx": 45
    }
  },
  {
    "path": "src/test/java/seedu/address/statistics/GameDataPointTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jascxx"
        },
        "content": "package seedu.address.statistics;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "jascxx"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "jascxx"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "jascxx"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertNotEquals;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "jascxx"
        },
        "content": "import static seedu.address.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "jascxx"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "jascxx"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "jascxx"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "jascxx"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "jascxx"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "jascxx"
        },
        "content": "import seedu.address.model.game.Guess;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "jascxx"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "jascxx"
        },
        "content": "public class GameDataPointTest {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "jascxx"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "jascxx"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "jascxx"
        },
        "content": "    public void createSkipData() {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "jascxx"
        },
        "content": "        assertThrows(IllegalArgumentException.class, () -\u003e GameDataPoint.createSkipData(-1)); // invalid millis"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "jascxx"
        },
        "content": "    }"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "jascxx"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "jascxx"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "jascxx"
        },
        "content": "    public void createGuessData() {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "jascxx"
        },
        "content": "        assertThrows(NullPointerException.class, ()"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "jascxx"
        },
        "content": "            -\u003e GameDataPoint.createGuessData(null, 1)); // null guess"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "jascxx"
        },
        "content": "        assertThrows(IllegalArgumentException.class, ()"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "jascxx"
        },
        "content": "            -\u003e GameDataPoint.createGuessData(new Guess(\"abc\"), -1)); // invalid millis"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "jascxx"
        },
        "content": "    }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "jascxx"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "jascxx"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "jascxx"
        },
        "content": "    public void getMillisTaken() {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "jascxx"
        },
        "content": "        assertEquals(GameDataPoint.createSkipData(1).getMillisTaken(), 1);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "jascxx"
        },
        "content": "        assertEquals(GameDataPoint.createGuessData(new Guess(\"abc\"), 1).getMillisTaken(),"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "jascxx"
        },
        "content": "                1);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "jascxx"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "jascxx"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "jascxx"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "jascxx"
        },
        "content": "    public void getGuess() {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "jascxx"
        },
        "content": "        assertEquals(GameDataPoint.createSkipData(1).getGuess(), Optional.empty()); // skip data does not have a guess."
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "jascxx"
        },
        "content": "        Guess g1 \u003d new Guess(\"abc\");"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "jascxx"
        },
        "content": "        Guess g2 \u003d new Guess(\"abc\");"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "jascxx"
        },
        "content": "        assertEquals(GameDataPoint.createGuessData(g1, 1).getGuess().get(), g1);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "jascxx"
        },
        "content": "        assertEquals(GameDataPoint.createGuessData(g1, 1).getGuess().get(), g2);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "jascxx"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "jascxx"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "jascxx"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "jascxx"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "jascxx"
        },
        "content": "        GameDataPoint g1 \u003d GameDataPoint.createGuessData(new Guess(\"abc\"), 1);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "jascxx"
        },
        "content": "        GameDataPoint g2 \u003d GameDataPoint.createGuessData(new Guess(\"abc\"), 1);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "jascxx"
        },
        "content": "        GameDataPoint g3 \u003d GameDataPoint.createGuessData(new Guess(\"abcd\"), 1);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "jascxx"
        },
        "content": "        GameDataPoint g4 \u003d GameDataPoint.createGuessData(new Guess(\"abc\"), 2);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "jascxx"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "jascxx"
        },
        "content": "        GameDataPoint g5 \u003d GameDataPoint.createSkipData(1);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "jascxx"
        },
        "content": "        GameDataPoint g6 \u003d GameDataPoint.createSkipData(1);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "jascxx"
        },
        "content": "        GameDataPoint g7 \u003d GameDataPoint.createSkipData(2);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "jascxx"
        },
        "content": "        Integer i \u003d 1;"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "jascxx"
        },
        "content": "        assertNotEquals(g1, i);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "jascxx"
        },
        "content": "        assertEquals(g1, g1);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "jascxx"
        },
        "content": "        assertEquals(g1, g2);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "jascxx"
        },
        "content": "        assertNotEquals(g1, g3);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "jascxx"
        },
        "content": "        assertNotEquals(g1, g4);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "jascxx"
        },
        "content": "        assertEquals(g5, g6);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "jascxx"
        },
        "content": "        assertNotEquals(g5, g7);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "jascxx"
        },
        "content": "        assertNotEquals(g1, g5);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "jascxx"
        },
        "content": "    }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "jascxx"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "jascxx": 64
    }
  },
  {
    "path": "src/test/java/seedu/address/statistics/GameStatisticsBuilderTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jascxx"
        },
        "content": "package seedu.address.statistics;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "jascxx"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "jascxx"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "jascxx"
        },
        "content": "import static seedu.address.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "jascxx"
        },
        "content": "import static seedu.address.testutil.TypicalCards.ABRA;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "jascxx"
        },
        "content": "import static seedu.address.testutil.TypicalCards.BUTTERFREE;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "jascxx"
        },
        "content": "import static seedu.address.testutil.TypicalCards.CHARIZARD;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "jascxx"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "jascxx"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "jascxx"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "jascxx"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "jascxx"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "jascxx"
        },
        "content": "import seedu.address.model.game.Guess;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "jascxx"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "jascxx"
        },
        "content": "public class GameStatisticsBuilderTest {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "jascxx"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "jascxx"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "jascxx"
        },
        "content": "    public void constructor() {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "jascxx"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e new GameStatisticsBuilder(null));"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "jascxx"
        },
        "content": "    }"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "jascxx"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "jascxx"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "jascxx"
        },
        "content": "    public void addDataPoint() {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "jascxx"
        },
        "content": "        GameStatisticsBuilder gameStats \u003d new GameStatisticsBuilder(\"pokemon\");"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "jascxx"
        },
        "content": "        gameStats.addDataPoint(GameDataPoint.createSkipData(100), ABRA);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "jascxx"
        },
        "content": "        gameStats.addDataPoint(GameDataPoint.createGuessData(new Guess(\"abra\"), 101), ABRA);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "jascxx"
        },
        "content": "        assertEquals(1, gameStats.size()); // 2 data points in 1 card."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "jascxx"
        },
        "content": "        gameStats.addDataPoint(GameDataPoint.createGuessData(new Guess(\"guess\"),"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "jascxx"
        },
        "content": "                100), BUTTERFREE);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "jascxx"
        },
        "content": "        assertEquals(2, gameStats.size()); // 2 different cards"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "jascxx"
        },
        "content": "        assertThrows(IllegalArgumentException.class, () -\u003e gameStats.addDataPoint(GameDataPoint.createSkipData(90),"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "jascxx"
        },
        "content": "                BUTTERFREE));"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "jascxx"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "jascxx"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "jascxx"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "jascxx"
        },
        "content": "    public void build() {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "jascxx"
        },
        "content": "        GameStatisticsBuilder gameStats \u003d new GameStatisticsBuilder(\"pokemon\");"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "jascxx"
        },
        "content": "        gameStats.addDataPoint(GameDataPoint.createSkipData(100), ABRA);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "jascxx"
        },
        "content": "        gameStats.addDataPoint(GameDataPoint.createGuessData(new Guess(\"abra\"), 101), ABRA);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "jascxx"
        },
        "content": "        gameStats.addDataPoint(GameDataPoint.createSkipData(100), BUTTERFREE);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "jascxx"
        },
        "content": "        gameStats.addDataPoint(GameDataPoint.createGuessData(new Guess(\"ccc\"), 10), CHARIZARD);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "jascxx"
        },
        "content": "        assertEquals(3, gameStats.size());"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "jascxx"
        },
        "content": "        assertEquals(gameStats.build().getScore(), 33);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "jascxx"
        },
        "content": "        assertEquals(gameStats.build().getCorrectCards(), List.of(ABRA));"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "jascxx"
        },
        "content": "        assertEquals(gameStats.build().getWrongCards(), List.of(BUTTERFREE, CHARIZARD));"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "jascxx"
        },
        "content": "        assertEquals(gameStats.build().getSecTaken(), 0.211);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "jascxx"
        },
        "content": "        assertEquals(gameStats.build().getTitle(), \"pokemon\");"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "jascxx"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "jascxx"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "jascxx": 49
    }
  },
  {
    "path": "src/test/java/seedu/address/statistics/GameStatisticsTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jascxx"
        },
        "content": "package seedu.address.statistics;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "jascxx"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "jascxx"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "jascxx"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "jascxx"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertNotEquals;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "jascxx"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertThrows;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "jascxx"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "jascxx"
        },
        "content": "import static seedu.address.testutil.TypicalCards.ABRA;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "jascxx"
        },
        "content": "import static seedu.address.testutil.TypicalCards.BUTTERFREE;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "jascxx"
        },
        "content": "import static seedu.address.testutil.TypicalCards.CHARIZARD;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "jascxx"
        },
        "content": "import static seedu.address.testutil.TypicalCards.DITTO;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "jascxx"
        },
        "content": "import static seedu.address.testutil.TypicalCards.EEVEE;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "jascxx"
        },
        "content": "import static seedu.address.testutil.TypicalCards.FLAREON;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "jascxx"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "dragontho"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "dragontho"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "dragontho"
        },
        "content": "import seedu.address.model.game.Guess;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "dragontho"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "jascxx"
        },
        "content": "public class GameStatisticsTest {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "jascxx"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "jascxx"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "jascxx"
        },
        "content": "    public void constructor() {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "jascxx"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e new GameStatisticsBuilder(null));"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "jascxx"
        },
        "content": "    }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "jascxx"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "jascxx"
        },
        "content": "    public void getScore() {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "jascxx"
        },
        "content": "        GameStatisticsBuilder gameStats \u003d new GameStatisticsBuilder(\"pokemon\");"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "jascxx"
        },
        "content": "        gameStats.addDataPoint(GameDataPoint.createGuessData(new Guess(\"abra\"), 101), ABRA);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "jascxx"
        },
        "content": "        gameStats.addDataPoint(GameDataPoint.createGuessData(new Guess(\"butterfree\"), 101),"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "jascxx"
        },
        "content": "                BUTTERFREE);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "jascxx"
        },
        "content": "        assertEquals(100, gameStats.build().getScore());"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "jascxx"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "jascxx"
        },
        "content": "        GameStatisticsBuilder gameStats1 \u003d new GameStatisticsBuilder(\"pokemon\");"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "jascxx"
        },
        "content": "        gameStats1.addDataPoint(GameDataPoint.createSkipData(10), ABRA);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "jascxx"
        },
        "content": "        gameStats1.addDataPoint(GameDataPoint.createSkipData(10), BUTTERFREE);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "jascxx"
        },
        "content": "        assertEquals(0, gameStats1.build().getScore());"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "jascxx"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "jascxx"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "jascxx"
        },
        "content": "        GameStatisticsBuilder gameStats2 \u003d new GameStatisticsBuilder(\"pokemon\");"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "jascxx"
        },
        "content": "        gameStats2.addDataPoint(GameDataPoint.createGuessData(new Guess(\"butterfree\"), 10), ABRA);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "jascxx"
        },
        "content": "        gameStats2.addDataPoint(GameDataPoint.createGuessData(new Guess(\"butterfree\"), 10),"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "jascxx"
        },
        "content": "                BUTTERFREE);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "jascxx"
        },
        "content": "        assertEquals(50, gameStats2.build().getScore());"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "jascxx"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "jascxx"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "jascxx"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "jascxx"
        },
        "content": "    public void getTimeTakenSec() {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "jascxx"
        },
        "content": "        GameStatisticsBuilder gameStats \u003d new GameStatisticsBuilder(\"pokemon\");"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "jascxx"
        },
        "content": "        gameStats.addDataPoint(GameDataPoint.createGuessData(new Guess(\"abra\"), 10), ABRA);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "jascxx"
        },
        "content": "        gameStats.addDataPoint(GameDataPoint.createGuessData(new Guess(\"butterfree\"), 10),"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "jascxx"
        },
        "content": "                BUTTERFREE);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "jascxx"
        },
        "content": "        assertEquals(0.02, gameStats.build().getSecTaken(), 1e-9);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "jascxx"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "jascxx"
        },
        "content": "        gameStats.addDataPoint(GameDataPoint.createSkipData(11), CHARIZARD);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "jascxx"
        },
        "content": "        gameStats.addDataPoint(GameDataPoint.createSkipData(12), DITTO);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "jascxx"
        },
        "content": "        assertEquals(0.043, gameStats.build().getSecTaken(), 1e-9);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "jascxx"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "jascxx"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "jascxx"
        },
        "content": "        gameStats.addDataPoint(GameDataPoint.createGuessData(new Guess(\"butterfree\"), 21),"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "jascxx"
        },
        "content": "                EEVEE);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "jascxx"
        },
        "content": "        gameStats.addDataPoint(GameDataPoint.createGuessData(new Guess(\"butterfree\"), 31),"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "jascxx"
        },
        "content": "                FLAREON);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "jascxx"
        },
        "content": "        assertEquals(0.095, gameStats.build().getSecTaken(), 1e-9);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "jascxx"
        },
        "content": "    }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "jascxx"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "jascxx"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "jascxx"
        },
        "content": "    public void isAllCorrect() {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "jascxx"
        },
        "content": "        GameStatisticsBuilder gameStats \u003d new GameStatisticsBuilder(\"pokemon\");"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "jascxx"
        },
        "content": "        gameStats.addDataPoint(GameDataPoint.createGuessData(new Guess(\"abra\"), 10), ABRA);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "jascxx"
        },
        "content": "        gameStats.addDataPoint(GameDataPoint.createGuessData(new Guess(\"butterfree\"), 10),"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "jascxx"
        },
        "content": "                BUTTERFREE);"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "jascxx"
        },
        "content": "        assertTrue(gameStats.build().isAllCorrect());"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "jascxx"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "jascxx"
        },
        "content": "        gameStats.addDataPoint(GameDataPoint.createGuessData(new Guess(\"abra\"), 10), BUTTERFREE);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "jascxx"
        },
        "content": "        assertFalse(gameStats.build().isAllCorrect());"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "jascxx"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "jascxx"
        },
        "content": "        GameStatisticsBuilder gameStats1 \u003d new GameStatisticsBuilder(\"pokemon\");"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "jascxx"
        },
        "content": "        gameStats1.addDataPoint(GameDataPoint.createGuessData(new Guess(\"abra\"), 10), ABRA);"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "jascxx"
        },
        "content": "        gameStats1.addDataPoint(GameDataPoint.createGuessData(new Guess(\"butterfree\"), 10),"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "jascxx"
        },
        "content": "                BUTTERFREE);"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "jascxx"
        },
        "content": "        gameStats1.addDataPoint(GameDataPoint.createSkipData(10), ABRA);"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "jascxx"
        },
        "content": "        assertFalse(gameStats1.build().isAllCorrect());"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "jascxx"
        },
        "content": "    }"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "jascxx"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "jascxx"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "jascxx"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "jascxx"
        },
        "content": "        GameStatisticsBuilder gameStats \u003d new GameStatisticsBuilder(\"pokemon\");"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "jascxx"
        },
        "content": "        gameStats.addDataPoint(GameDataPoint.createGuessData(new Guess(\"abra\"), 10), ABRA);"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "jascxx"
        },
        "content": "        gameStats.addDataPoint(GameDataPoint.createGuessData(new Guess(\"butterfree\"), 10),"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "jascxx"
        },
        "content": "                BUTTERFREE);"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "jascxx"
        },
        "content": "        assertEquals(gameStats, gameStats);"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "jascxx"
        },
        "content": "        assertNotEquals(gameStats, 1);"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "jascxx"
        },
        "content": "    }"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "jascxx"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "dragontho": 4,
      "jascxx": 90
    }
  },
  {
    "path": "src/test/java/seedu/address/statistics/ScoreDataTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jascxx"
        },
        "content": "package seedu.address.statistics;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "jascxx"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "jascxx"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "jascxx"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertNotEquals;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "jascxx"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "jascxx"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "jascxx"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "jascxx"
        },
        "content": "public class ScoreDataTest {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "jascxx"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "jascxx"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "jascxx"
        },
        "content": "    public void constructor() {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "jascxx"
        },
        "content": "        assertEquals(new ScoreData(ScoreData.MAX_SCORE + 100), new ScoreData(ScoreData.MAX_SCORE));"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "jascxx"
        },
        "content": "        assertEquals(new ScoreData(ScoreData.MIN_SCORE - 100), new ScoreData(ScoreData.MIN_SCORE));"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "jascxx"
        },
        "content": "    }"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "jascxx"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "jascxx"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "jascxx"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "jascxx"
        },
        "content": "        ScoreData sd1 \u003d new ScoreData(10);"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "jascxx"
        },
        "content": "        ScoreData sd2 \u003d new ScoreData(10);"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "jascxx"
        },
        "content": "        ScoreData sd3 \u003d new ScoreData(20);"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "jascxx"
        },
        "content": "        assertEquals(sd1, sd2);"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "jascxx"
        },
        "content": "        assertNotEquals(sd1, sd3);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "jascxx"
        },
        "content": "        assertNotEquals(sd1, 10);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "jascxx"
        },
        "content": "    }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "jascxx"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "jascxx"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "jascxx"
        },
        "content": "    public void max() {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "jascxx"
        },
        "content": "        ScoreData sd1 \u003d new ScoreData(10);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "jascxx"
        },
        "content": "        ScoreData sd2 \u003d new ScoreData(20);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "jascxx"
        },
        "content": "        assertEquals(ScoreData.max(sd1, sd2), sd2);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "jascxx"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "jascxx"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "jascxx": 32
    }
  },
  {
    "path": "src/test/java/seedu/address/statistics/ScoreGradeTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jascxx"
        },
        "content": "package seedu.address.statistics;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "jascxx"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "jascxx"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "jascxx"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "jascxx"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "jascxx"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "jascxx"
        },
        "content": "public class ScoreGradeTest {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "jascxx"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "jascxx"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "jascxx"
        },
        "content": "    public void getGrade() {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "jascxx"
        },
        "content": "        assertEquals(ScoreGrade.getGrade(ScoreData.MAX_SCORE), ScoreGrade.HIGH);"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "jascxx"
        },
        "content": "        assertEquals(ScoreGrade.getGrade(ScoreData.MIN_SCORE), ScoreGrade.LOW);"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "jascxx"
        },
        "content": "        assertEquals(ScoreGrade.getGrade(ScoreGrade.MEDIUM.getMinScore()), ScoreGrade.MEDIUM);"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "jascxx"
        },
        "content": "    }"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "jascxx"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "jascxx": 15
    }
  },
  {
    "path": "src/test/java/seedu/address/statistics/WordBankStatisticsTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jascxx"
        },
        "content": "package seedu.address.statistics;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "jascxx"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "jascxx"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "jascxx"
        },
        "content": "import static seedu.address.testutil.TypicalCards.ABRA;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "jascxx"
        },
        "content": "import static seedu.address.testutil.TypicalCards.BUTTERFREE;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "jascxx"
        },
        "content": "import static seedu.address.testutil.TypicalCards.CHARIZARD;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "jascxx"
        },
        "content": "import static seedu.address.testutil.TypicalCards.DITTO;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "jascxx"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "jascxx"
        },
        "content": "import java.util.Collections;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "jascxx"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "jascxx"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "jascxx"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "jascxx"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "jascxx"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "jascxx"
        },
        "content": "import seedu.address.model.appsettings.DifficultyEnum;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "jascxx"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "jascxx"
        },
        "content": "public class WordBankStatisticsTest {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "jascxx"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "jascxx"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "jascxx"
        },
        "content": "    public void getEmpty() {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "jascxx"
        },
        "content": "        WordBankStatistics emptyWbStats \u003d WordBankStatistics.getEmpty(\"empty\");"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "jascxx"
        },
        "content": "        WordBankStatistics emptyWbStats1 \u003d new WordBankStatistics(\"empty\","
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "jascxx"
        },
        "content": "                0,"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "jascxx"
        },
        "content": "                Optional.empty(),"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "jascxx"
        },
        "content": "                Collections.emptyList(),"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "jascxx"
        },
        "content": "                Collections.emptyList(),"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "jascxx"
        },
        "content": "                false, false, false);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "jascxx"
        },
        "content": "        assertEquals(emptyWbStats, emptyWbStats1);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "jascxx"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "jascxx"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "jascxx"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "jascxx"
        },
        "content": "    public void update() {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "jascxx"
        },
        "content": "        WordBankStatistics wbStats \u003d WordBankStatistics.getEmpty(\"title\");"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "jascxx"
        },
        "content": "        wbStats.update(new GameStatistics(\"title\", ScoreData.MAX_SCORE,"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "jascxx"
        },
        "content": "                10.0,"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "jascxx"
        },
        "content": "                List.of(ABRA, BUTTERFREE), // list of correct cards"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "jascxx"
        },
        "content": "                Collections.emptyList()), // list of wrong cards"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "jascxx"
        },
        "content": "                DifficultyEnum.HARD);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "jascxx"
        },
        "content": "        WordBankStatistics wbStats1 \u003d new WordBankStatistics(\"title\", 1,"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "jascxx"
        },
        "content": "                Optional.of(10.0),"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "jascxx"
        },
        "content": "                List.of(new CardStatistics(ABRA.getId(), 1, 1),"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "jascxx"
        },
        "content": "                        new CardStatistics(BUTTERFREE.getId(), 1, 1)),"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "jascxx"
        },
        "content": "                List.of(new ScoreData(ScoreData.MAX_SCORE)),"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "jascxx"
        },
        "content": "                false, false, true);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "jascxx"
        },
        "content": "        assertEquals(wbStats, wbStats1);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "jascxx"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "jascxx"
        },
        "content": "        wbStats.update(new GameStatistics(\"title\", ScoreData.MAX_SCORE - 1,"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "jascxx"
        },
        "content": "                        10.0,"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "jascxx"
        },
        "content": "                        List.of(ABRA, CHARIZARD), // list of correct cards"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "jascxx"
        },
        "content": "                        List.of(DITTO)), // list of wrong cards"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "jascxx"
        },
        "content": "                DifficultyEnum.MEDIUM);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "jascxx"
        },
        "content": "        WordBankStatistics wbStats2 \u003d new WordBankStatistics(\"title\", 2,"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "jascxx"
        },
        "content": "                Optional.of(10.0),"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "jascxx"
        },
        "content": "                List.of(new CardStatistics(ABRA.getId(), 2, 2),"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "jascxx"
        },
        "content": "                        new CardStatistics(BUTTERFREE.getId(), 1, 1),"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "jascxx"
        },
        "content": "                        new CardStatistics(DITTO.getId(), 1, 0),"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "jascxx"
        },
        "content": "                        new CardStatistics(CHARIZARD.getId(), 1, 1)),"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "jascxx"
        },
        "content": "                List.of(new ScoreData(ScoreData.MAX_SCORE),"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "jascxx"
        },
        "content": "                        new ScoreData(ScoreData.MAX_SCORE - 1)),"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "jascxx"
        },
        "content": "                false, false, true);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "jascxx"
        },
        "content": "        assertEquals(wbStats, wbStats2);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "jascxx"
        },
        "content": "    }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "jascxx"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "jascxx": 63
    }
  },
  {
    "path": "src/test/java/seedu/address/storage/JsonAppSettingsStorageTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Paths;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.io.TempDir;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.GuiSettings;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.exceptions.DataConversionException;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.UserPrefs;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "chrischenhui"
        },
        "content": "import seedu.address.storage.userprefs.JsonUserPrefsStorage;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "dragontho"
        },
        "content": "public class JsonAppSettingsStorageTest {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final Path TEST_DATA_FOLDER \u003d Paths.get(\"src\", \"test\", \"data\", \"JsonUserPrefsStorageTest\");"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    @TempDir"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    public Path testFolder;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    public void readUserPrefs_nullFilePath_throwsNullPointerException() {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e readUserPrefs(null));"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    public void readUserPrefs_missingFile_emptyResult() throws DataConversionException {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(readUserPrefs(\"NonExistentFile.json\").isPresent());"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    public void readUserPrefs_notJsonFormat_exceptionThrown() {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(DataConversionException.class, () -\u003e readUserPrefs(\"NotJsonFormatUserPrefs.json\"));"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    public void readUserPrefs_valuesMissingFromFile_defaultValuesUsed() throws DataConversionException {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs actual \u003d readUserPrefs(\"EmptyUserPrefs.json\").get();"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(new UserPrefs(), actual);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    public void savePrefs_nullPrefs_throwsNullPointerException() {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e saveUserPrefs(null, \"SomeFile.json\"));"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    public void saveUserPrefs_nullFilePath_throwsNullPointerException() {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e saveUserPrefs(new UserPrefs(), null));"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    public void saveUserPrefs_allInOrder_success() throws DataConversionException, IOException {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs original \u003d new UserPrefs();"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "        original.setGuiSettings(new GuiSettings(1200, 200, 0, 2));"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "        Path pefsFilePath \u003d testFolder.resolve(\"TempPrefs.json\");"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "        JsonUserPrefsStorage jsonUserPrefsStorage \u003d new JsonUserPrefsStorage(pefsFilePath);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "        //Try writing when the file doesn\u0027t exist"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "        jsonUserPrefsStorage.saveUserPrefs(original);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs readBack \u003d jsonUserPrefsStorage.readUserPrefs().get();"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(original, readBack);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "        //Try saving when the file exists"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "        original.setGuiSettings(new GuiSettings(5, 5, 5, 5));"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "        jsonUserPrefsStorage.saveUserPrefs(original);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "        readBack \u003d jsonUserPrefsStorage.readUserPrefs().get();"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(original, readBack);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "chrischenhui"
        },
        "content": "    //    @Test"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "chrischenhui"
        },
        "content": "    //    public void readUserPrefs_extraValuesInFile_extraValuesIgnored() throws DataConversionException {"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "chrischenhui"
        },
        "content": "    //        UserPrefs expected \u003d getTypicalUserPrefs();"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "chrischenhui"
        },
        "content": "    //        UserPrefs actual \u003d readUserPrefs(\"ExtraValuesUserPref.json\").get();"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "chrischenhui"
        },
        "content": "    //"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "chrischenhui"
        },
        "content": "    //        assertEquals(expected, actual);"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "chrischenhui"
        },
        "content": "    //    }"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "chrischenhui"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "chrischenhui"
        },
        "content": "    //    @Test"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "chrischenhui"
        },
        "content": "    //    public void readUserPrefs_fileInOrder_successfullyRead() throws DataConversionException {"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "chrischenhui"
        },
        "content": "    //        UserPrefs expected \u003d getTypicalUserPrefs();"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "chrischenhui"
        },
        "content": "    //        UserPrefs actual \u003d readUserPrefs(\"TypicalUserPref.json\").get();"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "chrischenhui"
        },
        "content": "    //        assertEquals(expected, actual);"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "chrischenhui"
        },
        "content": "    //    }"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "chrischenhui"
        },
        "content": ""
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "chrischenhui"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "chrischenhui"
        },
        "content": "     * Saves {@code userPrefs} at the specified {@code prefsFileInTestDataFolder} filepath."
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "chrischenhui"
        },
        "content": "     */"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "chrischenhui"
        },
        "content": "    private void saveUserPrefs(UserPrefs userPrefs, String prefsFileInTestDataFolder) {"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "chrischenhui"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "chrischenhui"
        },
        "content": "            new JsonUserPrefsStorage(addToTestDataPathIfNotNull(prefsFileInTestDataFolder))"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "chrischenhui"
        },
        "content": "                    .saveUserPrefs(userPrefs);"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "chrischenhui"
        },
        "content": "        } catch (IOException ioe) {"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "chrischenhui"
        },
        "content": "            throw new AssertionError(\"There should not be an error writing to the file\", ioe);"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "chrischenhui"
        },
        "content": "        }"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "chrischenhui"
        },
        "content": "    }"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "chrischenhui"
        },
        "content": ""
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "chrischenhui"
        },
        "content": "    private UserPrefs getTypicalUserPrefs() {"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "chrischenhui"
        },
        "content": "        UserPrefs userPrefs \u003d new UserPrefs();"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "chrischenhui"
        },
        "content": "        userPrefs.setGuiSettings(new GuiSettings(1000, 500, 300, 100));"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "chrischenhui"
        },
        "content": "        userPrefs.setDataFilePath(Paths.get(\"addressbook.json\"));"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "chrischenhui"
        },
        "content": "        return userPrefs;"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "chrischenhui"
        },
        "content": "    }"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "chrischenhui"
        },
        "content": ""
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "chrischenhui"
        },
        "content": ""
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "chrischenhui"
        },
        "content": "    private Optional\u003cUserPrefs\u003e readUserPrefs(String userPrefsFileInTestDataFolder) throws DataConversionException {"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "chrischenhui"
        },
        "content": "        Path prefsFilePath \u003d addToTestDataPathIfNotNull(userPrefsFileInTestDataFolder);"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "chrischenhui"
        },
        "content": "        return new JsonUserPrefsStorage(prefsFilePath).readUserPrefs(prefsFilePath);"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "chrischenhui"
        },
        "content": "    }"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "chrischenhui"
        },
        "content": ""
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "chrischenhui"
        },
        "content": ""
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "chrischenhui"
        },
        "content": "    private Path addToTestDataPathIfNotNull(String userPrefsFileInTestDataFolder) {"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "chrischenhui"
        },
        "content": "        return userPrefsFileInTestDataFolder !\u003d null"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "chrischenhui"
        },
        "content": "                ? TEST_DATA_FOLDER.resolve(userPrefsFileInTestDataFolder)"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "chrischenhui"
        },
        "content": "                : null;"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "chrischenhui"
        },
        "content": "    }"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "dragontho": 1,
      "chrischenhui": 47,
      "-": 77
    }
  },
  {
    "path": "src/test/java/seedu/address/storage/StorageManagerTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "jascxx"
        },
        "content": "//import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "jascxx"
        },
        "content": "//import static org.junit.jupiter.api.Assertions.assertNotNull;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "jascxx"
        },
        "content": "//import static seedu.address.testutil.TypicalCards.getTypicalWordBank;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "dragontho"
        },
        "content": "//import org.junit.jupiter.api.BeforeEach;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "jascxx"
        },
        "content": "//import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "dragontho"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.io.TempDir;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "jascxx"
        },
        "content": "//import seedu.address.commons.core.GuiSettings;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "chrischenhui"
        },
        "content": "//import seedu.address.model.wordbank.ReadOnlyWordBankList;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "jascxx"
        },
        "content": "//import seedu.address.model.UserPrefs;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "jascxx"
        },
        "content": "//import seedu.address.model.wordbank.WordBank;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "public class StorageManagerTest {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    @TempDir"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    public Path testFolder;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    private StorageManager storageManager;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "dragontho"
        },
        "content": "    //    @BeforeEach"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "dragontho"
        },
        "content": "    //    public void setUp() {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "chrischenhui"
        },
        "content": "    //        JsonWordBankListStorage addressBookStorage \u003d new JsonWordBankListStorage(getTempFilePath(\"ab\"));"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "dragontho"
        },
        "content": "    //        JsonUserPrefsStorage userPrefsStorage \u003d new JsonUserPrefsStorage(getTempFilePath(\"prefs\"));"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "dragontho"
        },
        "content": "    //        storageManager \u003d new StorageManager(addressBookStorage, userPrefsStorage);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "dragontho"
        },
        "content": "    //    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    private Path getTempFilePath(String fileName) {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        return testFolder.resolve(fileName);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "jascxx"
        },
        "content": "    //    @Test"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "jascxx"
        },
        "content": "    //    public void prefsReadSave() throws Exception {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "jascxx"
        },
        "content": "    //        /*"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "jascxx"
        },
        "content": "    //         * Note: This is an integration test that verifies the StorageManager is properly wired to the"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "jascxx"
        },
        "content": "    //         * {@link JsonUserPrefsStorage} class."
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "jascxx"
        },
        "content": "    //         * More extensive testing of UserPref saving/reading is done in {@link JsonUserPrefsStorageTest} class."
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "jascxx"
        },
        "content": "    //         */"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "jascxx"
        },
        "content": "    //        UserPrefs original \u003d new UserPrefs();"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "jascxx"
        },
        "content": "    //        original.setGuiSettings(new GuiSettings(300, 600, 4, 6));"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "jascxx"
        },
        "content": "    //        storageManager.saveUserPrefs(original);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "jascxx"
        },
        "content": "    //        UserPrefs retrieved \u003d storageManager.readUserPrefs().get();"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "jascxx"
        },
        "content": "    //        assertEquals(original, retrieved);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "jascxx"
        },
        "content": "    //    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "jascxx"
        },
        "content": "    //    @Test"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "jascxx"
        },
        "content": "    //    public void addressBookReadSave() throws Exception {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "jascxx"
        },
        "content": "    //        /*"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "jascxx"
        },
        "content": "    //         * Note: This is an integration test that verifies the StorageManager is properly wired to the"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "chrischenhui"
        },
        "content": "    //         * {@link JsonWordBankListStorage} class."
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "jascxx"
        },
        "content": "    //         * More extensive testing of UserPref saving/reading is done in {@link JsonAddressBookStorageTest} class."
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "jascxx"
        },
        "content": "    //         */"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "jascxx"
        },
        "content": "    //        WordBank original \u003d getTypicalWordBank();"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "chrischenhui"
        },
        "content": "    //        storageManager.saveWordBanks(original);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "chrischenhui"
        },
        "content": "    //        ReadOnlyWordBankList retrieved \u003d storageManager.toModelType().get();"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "jascxx"
        },
        "content": "    //        assertEquals(original, new WordBank(retrieved));"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "jascxx"
        },
        "content": "    //    }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "jascxx"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "jascxx"
        },
        "content": "    //    @Test"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "chrischenhui"
        },
        "content": "    //    public void getWordBanksFilePath() {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "chrischenhui"
        },
        "content": "    //        assertNotNull(storageManager.getWordBanksFilePath());"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "jascxx"
        },
        "content": "    //    }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "dragontho": 7,
      "jascxx": 32,
      "chrischenhui": 7,
      "-": 24
    }
  },
  {
    "path": "src/test/java/seedu/address/storage/wordbanks/JsonAdaptedCardTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "chrischenhui"
        },
        "content": "package seedu.address.storage.wordbanks;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "chrischenhui"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "chrischenhui"
        },
        "content": "import static seedu.address.storage.wordbanks.JsonAdaptedCard.MISSING_FIELD_MESSAGE_FORMAT;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "chrischenhui"
        },
        "content": "import static seedu.address.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "chrischenhui"
        },
        "content": "import static seedu.address.testutil.TypicalCards.ABRA;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "chrischenhui"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "chrischenhui"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "chrischenhui"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "chrischenhui"
        },
        "content": "import java.util.stream.Collectors;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "chrischenhui"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "chrischenhui"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "chrischenhui"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "chrischenhui"
        },
        "content": "import seedu.address.commons.exceptions.IllegalValueException;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "chrischenhui"
        },
        "content": "import seedu.address.model.card.Meaning;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "chrischenhui"
        },
        "content": "import seedu.address.model.card.Word;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "jascxx"
        },
        "content": "public class JsonAdaptedCardTest {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "chrischenhui"
        },
        "content": "    private static final String INVALID_WORD \u003d \"  \"; // Empty spaces"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "chrischenhui"
        },
        "content": "    private static final String INVALID_MEANING \u003d \"   \"; // Empty spaces"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "chrischenhui"
        },
        "content": "    private static final String INVALID_TAG \u003d \"#teg\";"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "chrischenhui"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "chrischenhui"
        },
        "content": "    private static final String VALID_ID \u003d ABRA.getId();"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "chrischenhui"
        },
        "content": "    private static final String VALID_WORD \u003d ABRA.getWord().toString();"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "chrischenhui"
        },
        "content": "    private static final String VALID_MEANING \u003d ABRA.getMeaning().toString();"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "chrischenhui"
        },
        "content": "    private static final List\u003cJsonAdaptedTag\u003e VALID_TAGS \u003d ABRA.getTags().stream()"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "chrischenhui"
        },
        "content": "            .map(JsonAdaptedTag::new)"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "chrischenhui"
        },
        "content": "            .collect(Collectors.toList());"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "chrischenhui"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "chrischenhui"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "chrischenhui"
        },
        "content": "    public void toModelType_validCardDetails_returnsPerson() throws Exception {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "chrischenhui"
        },
        "content": "        JsonAdaptedCard card \u003d new JsonAdaptedCard(ABRA);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "chrischenhui"
        },
        "content": "        assertEquals(ABRA, card.toModelType());"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "chrischenhui"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "chrischenhui"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "chrischenhui"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "chrischenhui"
        },
        "content": "    public void toModelType_nullId_throwsIllegalValueException() {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "chrischenhui"
        },
        "content": "        JsonAdaptedCard card \u003d"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "chrischenhui"
        },
        "content": "                new JsonAdaptedCard(null, VALID_WORD, VALID_MEANING, VALID_TAGS);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "chrischenhui"
        },
        "content": "        String expectedMessage \u003d String.format(MISSING_FIELD_MESSAGE_FORMAT, String.class.getSimpleName());"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "chrischenhui"
        },
        "content": "        assertThrows(IllegalValueException.class, expectedMessage, card::toModelType);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "chrischenhui"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "chrischenhui"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "chrischenhui"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "chrischenhui"
        },
        "content": "    public void toModelType_invalidWord_throwsIllegalValueException() {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "chrischenhui"
        },
        "content": "        JsonAdaptedCard card \u003d"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "chrischenhui"
        },
        "content": "                new JsonAdaptedCard(VALID_ID, INVALID_WORD, VALID_MEANING, VALID_TAGS);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "chrischenhui"
        },
        "content": "        String expectedMessage \u003d Word.MESSAGE_CONSTRAINTS;"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "chrischenhui"
        },
        "content": "        assertThrows(IllegalValueException.class, expectedMessage, card::toModelType);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "chrischenhui"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "chrischenhui"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "chrischenhui"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "chrischenhui"
        },
        "content": "    public void toModelType_nullName_throwsIllegalValueException() {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "chrischenhui"
        },
        "content": "        JsonAdaptedCard card \u003d"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "chrischenhui"
        },
        "content": "                new JsonAdaptedCard(VALID_ID, null, VALID_MEANING, VALID_TAGS);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "chrischenhui"
        },
        "content": "        String expectedMessage \u003d String.format(MISSING_FIELD_MESSAGE_FORMAT, Word.class.getSimpleName());"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "chrischenhui"
        },
        "content": "        assertThrows(IllegalValueException.class, expectedMessage, card::toModelType);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "chrischenhui"
        },
        "content": "    }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "chrischenhui"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "chrischenhui"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "chrischenhui"
        },
        "content": "    public void toModelType_invalidMeaning_throwsIllegalValueException() {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "chrischenhui"
        },
        "content": "        JsonAdaptedCard person \u003d"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "chrischenhui"
        },
        "content": "                new JsonAdaptedCard(VALID_ID, VALID_WORD, INVALID_MEANING, VALID_TAGS);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "chrischenhui"
        },
        "content": "        String expectedMessage \u003d Meaning.MESSAGE_CONSTRAINTS;"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "chrischenhui"
        },
        "content": "        assertThrows(IllegalValueException.class, expectedMessage, person::toModelType);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "chrischenhui"
        },
        "content": "    }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "chrischenhui"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "chrischenhui"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "chrischenhui"
        },
        "content": "    public void toModelType_nullMeaning_throwsIllegalValueException() {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "chrischenhui"
        },
        "content": "        JsonAdaptedCard person \u003d"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "chrischenhui"
        },
        "content": "                new JsonAdaptedCard(VALID_ID, VALID_WORD, null, VALID_TAGS);"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "chrischenhui"
        },
        "content": "        String expectedMessage \u003d String.format(MISSING_FIELD_MESSAGE_FORMAT, Meaning.class.getSimpleName());"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "chrischenhui"
        },
        "content": "        assertThrows(IllegalValueException.class, expectedMessage, person::toModelType);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "chrischenhui"
        },
        "content": "    }"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "chrischenhui"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "chrischenhui"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "chrischenhui"
        },
        "content": "    public void toModelType_invalidTags_throwsIllegalValueException() {"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "chrischenhui"
        },
        "content": "        List\u003cJsonAdaptedTag\u003e invalidTags \u003d new ArrayList\u003c\u003e(VALID_TAGS);"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "chrischenhui"
        },
        "content": "        invalidTags.add(new JsonAdaptedTag(INVALID_TAG));"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "chrischenhui"
        },
        "content": "        JsonAdaptedCard person \u003d"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "chrischenhui"
        },
        "content": "                new JsonAdaptedCard(VALID_ID, VALID_WORD, VALID_MEANING, invalidTags);"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "chrischenhui"
        },
        "content": "        assertThrows(IllegalValueException.class, person::toModelType);"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "chrischenhui"
        },
        "content": "    }"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "jascxx": 1,
      "chrischenhui": 80,
      "-": 4
    }
  },
  {
    "path": "src/test/java/seedu/address/storage/wordbanks/JsonSerializableWordBankTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "chrischenhui"
        },
        "content": "package seedu.address.storage.wordbanks;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "chrischenhui"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "chrischenhui"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "chrischenhui"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertThrows;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "chrischenhui"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "chrischenhui"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "chrischenhui"
        },
        "content": "import java.nio.file.Paths;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "chrischenhui"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "chrischenhui"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "chrischenhui"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "chrischenhui"
        },
        "content": "import seedu.address.commons.exceptions.IllegalValueException;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "chrischenhui"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "chrischenhui"
        },
        "content": "import seedu.address.commons.util.JsonUtil;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "chrischenhui"
        },
        "content": "import seedu.address.model.wordbank.WordBank;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "chrischenhui"
        },
        "content": "import seedu.address.testutil.TypicalCards;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "chrischenhui"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "chrischenhui"
        },
        "content": "public class JsonSerializableWordBankTest {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "chrischenhui"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "chrischenhui"
        },
        "content": "    private static final Path TEST_DATA_FOLDER \u003d Paths.get(\"src\", \"test\","
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "chrischenhui"
        },
        "content": "            \"data\", \"JsonSerializableWordBankTest\");"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "chrischenhui"
        },
        "content": "    private static final Path TYPICAL_WORD_BANK_FILE \u003d TEST_DATA_FOLDER.resolve(\"sample.json\");"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "chrischenhui"
        },
        "content": "    private static final Path INVALID_WORD_BANK_FILE \u003d TEST_DATA_FOLDER.resolve(\"invalidWordBank.json\");"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "chrischenhui"
        },
        "content": "    private static final Path DUPLICATE_CARDS_IN_WORD_BANK_FILE \u003d"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "chrischenhui"
        },
        "content": "            TEST_DATA_FOLDER.resolve(\"duplicateCardsInWordBank.json\");"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "chrischenhui"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "chrischenhui"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "chrischenhui"
        },
        "content": "    public void toModelType_typicalWordBankFile_success() throws Exception {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "chrischenhui"
        },
        "content": "        JsonSerializableWordBank dataFromFile \u003d JsonUtil.readJsonFile(TYPICAL_WORD_BANK_FILE,"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "chrischenhui"
        },
        "content": "                JsonSerializableWordBank.class).get();"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "chrischenhui"
        },
        "content": "        WordBank wordBankFromFile \u003d dataFromFile.toModelTypeWithName(\"sample\");"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "chrischenhui"
        },
        "content": "        WordBank typicalWordBank \u003d TypicalCards.getTypicalWordBank();"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "chrischenhui"
        },
        "content": "        assertEquals(wordBankFromFile, typicalWordBank);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "chrischenhui"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "chrischenhui"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "chrischenhui"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "chrischenhui"
        },
        "content": "    public void toModelType_invalidWordBankFile_throwsIllegalValueException() throws Exception {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "chrischenhui"
        },
        "content": "        JsonSerializableWordBank dataFromFile \u003d JsonUtil.readJsonFile(INVALID_WORD_BANK_FILE,"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "chrischenhui"
        },
        "content": "                JsonSerializableWordBank.class).get();"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "chrischenhui"
        },
        "content": "        assertThrows(IllegalValueException.class, dataFromFile::toModelType);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "chrischenhui"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "chrischenhui"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "chrischenhui"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "chrischenhui"
        },
        "content": "    public void toModelType_duplicateCardsInWordBank_throwsIllegalValueException() throws Exception {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "chrischenhui"
        },
        "content": "        JsonSerializableWordBank dataFromFile \u003d JsonUtil.readJsonFile(DUPLICATE_CARDS_IN_WORD_BANK_FILE,"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "chrischenhui"
        },
        "content": "                JsonSerializableWordBank.class).get();"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "chrischenhui"
        },
        "content": "        assertThrows(IllegalValueException.class, dataFromFile::toModelType);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "chrischenhui"
        },
        "content": "    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "chrischenhui"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "chrischenhui": 48
    }
  },
  {
    "path": "src/test/java/seedu/address/storage/wordbanks/JsonWordBankStorageTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "chrischenhui"
        },
        "content": "package seedu.address.storage.wordbanks;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "chrischenhui"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "chrischenhui"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "chrischenhui"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "chrischenhui"
        },
        "content": "import static seedu.address.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "chrischenhui"
        },
        "content": "import static seedu.address.testutil.TypicalCards.CHARIZARD;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "chrischenhui"
        },
        "content": "import static seedu.address.testutil.TypicalCards.getTypicalWordBank;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "chrischenhui"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "chrischenhui"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "chrischenhui"
        },
        "content": "import java.nio.file.Files;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "chrischenhui"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "chrischenhui"
        },
        "content": "import java.nio.file.Paths;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "chrischenhui"
        },
        "content": "import java.nio.file.StandardOpenOption;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "chrischenhui"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "chrischenhui"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "chrischenhui"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "chrischenhui"
        },
        "content": "import seedu.address.commons.exceptions.DataConversionException;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "chrischenhui"
        },
        "content": "import seedu.address.commons.exceptions.IllegalValueException;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "chrischenhui"
        },
        "content": "import seedu.address.model.wordbank.ReadOnlyWordBank;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "chrischenhui"
        },
        "content": "import seedu.address.model.wordbank.WordBank;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "jascxx"
        },
        "content": "public class JsonWordBankStorageTest {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "chrischenhui"
        },
        "content": "    private Path testDataFolder \u003d"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "chrischenhui"
        },
        "content": "            Paths.get(\"src\", \"test\", \"data\", \"JsonWordBankListStorageTest\");"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "chrischenhui"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "chrischenhui"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "chrischenhui"
        },
        "content": "    public void readWordBank_nullFilePath_throwsNullPointerException() {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "chrischenhui"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e readWordBank(null, \"firstTest\"));"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "chrischenhui"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "chrischenhui"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "chrischenhui"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "chrischenhui"
        },
        "content": "    public void read_nonExistentFile_emptyResult() throws Exception {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "chrischenhui"
        },
        "content": "        assertFalse(readWordBank(\"NonExistentFile.json\", \"secondTest\").isPresent());"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "chrischenhui"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "chrischenhui"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "chrischenhui"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "chrischenhui"
        },
        "content": "    public void read_notJsonWordBankFormat_exceptionThrown() {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "chrischenhui"
        },
        "content": "        assertThrows(DataConversionException.class, () -\u003e readWordBank(\"notJsonFormatWordBank.json\", \"thirdTest\"));"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "chrischenhui"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "chrischenhui"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "chrischenhui"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "chrischenhui"
        },
        "content": "    public void readWordBank_invalidWordBank_throwIllegalValueException() {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "chrischenhui"
        },
        "content": "        assertThrows(IllegalValueException.class, () -\u003e readWordBank(\"invalidWordBank.json\", \"fourthTest\"));"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "chrischenhui"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "chrischenhui"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "chrischenhui"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "chrischenhui"
        },
        "content": "    public void readWordBank_invalidAndValidCardsWordBank_throwIllegalValueException() {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "chrischenhui"
        },
        "content": "        assertThrows(IllegalValueException.class, () -\u003e readWordBank(\"invalidAndValidCardsWordBank.json\", \"fifthTest\"));"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "chrischenhui"
        },
        "content": "    }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "chrischenhui"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "chrischenhui"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "chrischenhui"
        },
        "content": "    public void saveWordBank_nullWordBank_throwsNullPointerException() {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "chrischenhui"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e saveWordBank(null, \"SomeFile.json\", \"sixthTest\"));"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "chrischenhui"
        },
        "content": "    }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "chrischenhui"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "chrischenhui"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "chrischenhui"
        },
        "content": "    public void saveWordBank_nullFilePath_throwsNullPointerException() {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "chrischenhui"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e saveWordBank(new WordBank(\"test\"), null, \"seventhTest\"));"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "chrischenhui"
        },
        "content": "    }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "chrischenhui"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "chrischenhui"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "chrischenhui"
        },
        "content": "    public void readAndSaveWordBank_allInOrder_success() throws Exception {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "chrischenhui"
        },
        "content": "        Path filePath \u003d testDataFolder;"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "chrischenhui"
        },
        "content": "        JsonWordBankListStorage jsonWordBankListStorage \u003d new JsonWordBankListStorage(filePath);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "chrischenhui"
        },
        "content": "        WordBank original \u003d getTypicalWordBank();"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "chrischenhui"
        },
        "content": "        Path originalPath \u003d Paths.get(testDataFolder.toString(), \"wordBanks\", getTypicalWordBank() + \".json\");"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "chrischenhui"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "chrischenhui"
        },
        "content": "        // Save in new file and read back"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "chrischenhui"
        },
        "content": "        jsonWordBankListStorage.saveWordBank(original);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "chrischenhui"
        },
        "content": "        ReadOnlyWordBank readBack \u003d jsonWordBankListStorage.jsonToWordBank(originalPath).get();"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "chrischenhui"
        },
        "content": "        assertEquals(original, readBack);"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "chrischenhui"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "chrischenhui"
        },
        "content": "        // Modify data, overwrite exiting file, and read back"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "chrischenhui"
        },
        "content": "        original.removeCard(CHARIZARD);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "chrischenhui"
        },
        "content": "        jsonWordBankListStorage.saveWordBank(original);"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "chrischenhui"
        },
        "content": "        readBack \u003d jsonWordBankListStorage.jsonToWordBank(originalPath).get();"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "chrischenhui"
        },
        "content": "        assertEquals(original, readBack);"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "chrischenhui"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "chrischenhui"
        },
        "content": "        Path p \u003d Paths.get(testDataFolder.toString(), \"wordBanks\", \"sample.json\");"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "chrischenhui"
        },
        "content": "        appendNewLine(p);"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "chrischenhui"
        },
        "content": "    }"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "chrischenhui"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "chrischenhui"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "chrischenhui"
        },
        "content": "     * Append new line to pass check style."
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "chrischenhui"
        },
        "content": "     *"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "chrischenhui"
        },
        "content": "     * @param p the file to append new line with."
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "chrischenhui"
        },
        "content": "     */"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "chrischenhui"
        },
        "content": "    private void appendNewLine(Path p) {"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "chrischenhui"
        },
        "content": "        String s \u003d System.lineSeparator();"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "chrischenhui"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "chrischenhui"
        },
        "content": "            Files.write(p, s.getBytes(), StandardOpenOption.APPEND);"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "chrischenhui"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "chrischenhui"
        },
        "content": "            System.err.println(e);"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "chrischenhui"
        },
        "content": "        }"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "chrischenhui"
        },
        "content": "    }"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "chrischenhui"
        },
        "content": ""
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "chrischenhui"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "chrischenhui"
        },
        "content": "     * Saves {@code WordBank} at the specified {@code filePath}."
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "chrischenhui"
        },
        "content": "     */"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "chrischenhui"
        },
        "content": "    private void saveWordBank(ReadOnlyWordBank wordBank, String filePath, String testFolder)"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "chrischenhui"
        },
        "content": "            throws DataConversionException, IllegalValueException {"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "chrischenhui"
        },
        "content": "        new JsonWordBankListStorage(testDataFolder, testFolder)"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "chrischenhui"
        },
        "content": "                .saveWordBank(wordBank, addToTestDataPathIfNotNull(testFolder, filePath));"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "chrischenhui"
        },
        "content": "    }"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "chrischenhui"
        },
        "content": ""
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "chrischenhui"
        },
        "content": "    private java.util.Optional\u003cReadOnlyWordBank\u003e readWordBank(String filePath, String testFolder) throws Exception {"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "chrischenhui"
        },
        "content": "        return new JsonWordBankListStorage(testDataFolder, testFolder)"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "chrischenhui"
        },
        "content": "                .jsonToWordBank(addToTestDataPathIfNotNull(testFolder, filePath));"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "chrischenhui"
        },
        "content": "    }"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "chrischenhui"
        },
        "content": ""
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "chrischenhui"
        },
        "content": "    private Path addToTestDataPathIfNotNull(String testFolder, String prefsFileInTestDataFolder) {"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "chrischenhui"
        },
        "content": "        return prefsFileInTestDataFolder !\u003d null"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "chrischenhui"
        },
        "content": "                ? testDataFolder.resolve(testFolder).resolve(prefsFileInTestDataFolder)"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "chrischenhui"
        },
        "content": "                : null;"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "chrischenhui"
        },
        "content": "    }"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "chrischenhui"
        },
        "content": ""
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "jascxx": 1,
      "chrischenhui": 114,
      "-": 2
    }
  },
  {
    "path": "src/test/java/seedu/address/testutil/CardBuilder.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jascxx"
        },
        "content": "package seedu.address.testutil;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "jascxx"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "jascxx"
        },
        "content": "import java.util.HashSet;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "jascxx"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "jascxx"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "jascxx"
        },
        "content": "import seedu.address.model.card.Card;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "jascxx"
        },
        "content": "import seedu.address.model.card.Meaning;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "jascxx"
        },
        "content": "import seedu.address.model.card.Word;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "jascxx"
        },
        "content": "import seedu.address.model.tag.Tag;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "jascxx"
        },
        "content": "import seedu.address.model.util.SampleDataUtil;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "jascxx"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "jascxx"
        },
        "content": "/**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "jascxx"
        },
        "content": " * A utility class to help with building Card objects."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "jascxx"
        },
        "content": " */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "jascxx"
        },
        "content": "public class CardBuilder {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "jascxx"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "jascxx"
        },
        "content": "    public static final String DEFAULT_WORD \u003d \"Pikachu\";"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "jascxx"
        },
        "content": "    public static final String DEFAULT_MEANING \u003d \"This forest-dwelling Pokémon stores electricity in its cheeks, \""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "jascxx"
        },
        "content": "            + \"so you\u0027ll feel a tingly shock if you touch it.\";"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "jascxx"
        },
        "content": "    public static final String DEFAULT_ID \u003d \"pikachubdeans\";"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "jascxx"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "jascxx"
        },
        "content": "    private Word word;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "jascxx"
        },
        "content": "    private Meaning meaning;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "jascxx"
        },
        "content": "    private Set\u003cTag\u003e tags;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "jascxx"
        },
        "content": "    private String id;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "jascxx"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "jascxx"
        },
        "content": "    public CardBuilder() {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "jascxx"
        },
        "content": "        word \u003d new Word(DEFAULT_WORD);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "jascxx"
        },
        "content": "        meaning \u003d new Meaning(DEFAULT_MEANING);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "jascxx"
        },
        "content": "        tags \u003d new HashSet\u003c\u003e();"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "jascxx"
        },
        "content": "        id \u003d DEFAULT_ID;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "jascxx"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "jascxx"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "jascxx"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "jascxx"
        },
        "content": "     * Initializes the CardBuilder with the data of {@code cardToCopy}."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "jascxx"
        },
        "content": "     */"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "jascxx"
        },
        "content": "    public CardBuilder(Card cardToCopy) {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "jascxx"
        },
        "content": "        word \u003d cardToCopy.getWord();"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "jascxx"
        },
        "content": "        meaning \u003d cardToCopy.getMeaning();"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "jascxx"
        },
        "content": "        tags \u003d new HashSet\u003c\u003e(cardToCopy.getTags());"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "jascxx"
        },
        "content": "        id \u003d cardToCopy.getId();"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "jascxx"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "jascxx"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "jascxx"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "jascxx"
        },
        "content": "     * Sets the {@code Word} of the {@code Card} that we are building."
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "jascxx"
        },
        "content": "     */"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "jascxx"
        },
        "content": "    public CardBuilder withWord(String word) {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "jascxx"
        },
        "content": "        this.word \u003d new Word(word);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "jascxx"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "jascxx"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "jascxx"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "jascxx"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "jascxx"
        },
        "content": "     * Parses the {@code tags} into a {@code Set\u003cTag\u003e} and set it to the {@code Card} that we are building."
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "jascxx"
        },
        "content": "     */"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "jascxx"
        },
        "content": "    public CardBuilder withTags(String ... tags) {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "jascxx"
        },
        "content": "        this.tags \u003d SampleDataUtil.getTagSet(tags);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "jascxx"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "jascxx"
        },
        "content": "    }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "jascxx"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "jascxx"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "jascxx"
        },
        "content": "     * Sets the {@code Meaning} of the {@code Card} that we are building."
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "jascxx"
        },
        "content": "     */"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "jascxx"
        },
        "content": "    public CardBuilder withMeaning(String meaning) {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "jascxx"
        },
        "content": "        this.meaning \u003d new Meaning(meaning);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "jascxx"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "jascxx"
        },
        "content": "    }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "jascxx"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "jascxx"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "jascxx"
        },
        "content": "     * Sets the {@code id} of the {@code Card} that we are building."
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "jascxx"
        },
        "content": "     */"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "jascxx"
        },
        "content": "    public CardBuilder withId(String id) {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "jascxx"
        },
        "content": "        this.id \u003d id;"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "jascxx"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "jascxx"
        },
        "content": "    }"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "jascxx"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "jascxx"
        },
        "content": "    public Card build() {"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "jascxx"
        },
        "content": "        return new Card(id, word, meaning, tags);"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "jascxx"
        },
        "content": "    }"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "jascxx"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "jascxx"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "jascxx": 80
    }
  },
  {
    "path": "src/test/java/seedu/address/testutil/CardUtil.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jascxx"
        },
        "content": "package seedu.address.testutil;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "jascxx"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "jascxx"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_MEANING;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "jascxx"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_TAG;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "jascxx"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_WORD;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "jascxx"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "jascxx"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "jascxx"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "chrischenhui"
        },
        "content": "import seedu.address.logic.commands.cardcommands.AddCommand;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "chrischenhui"
        },
        "content": "import seedu.address.logic.commands.cardcommands.EditCommand;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "jascxx"
        },
        "content": "import seedu.address.model.card.Card;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "jascxx"
        },
        "content": "import seedu.address.model.tag.Tag;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "jascxx"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "jascxx"
        },
        "content": "/**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "jascxx"
        },
        "content": " * A utility class for Card."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "jascxx"
        },
        "content": " */"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "jascxx"
        },
        "content": "public class CardUtil {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "jascxx"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "jascxx"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "jascxx"
        },
        "content": "     * Returns an add command string for adding the {@code card}."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "jascxx"
        },
        "content": "     */"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "jascxx"
        },
        "content": "    public static String getAddCommand(Card card) {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "jascxx"
        },
        "content": "        return AddCommand.COMMAND_WORD + \" \" + getCardDetails(card);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "jascxx"
        },
        "content": "    }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "jascxx"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "jascxx"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "jascxx"
        },
        "content": "     * Returns the part of command string for the given {@code card}\u0027s details."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "jascxx"
        },
        "content": "     */"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "jascxx"
        },
        "content": "    public static String getCardDetails(Card card) {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "jascxx"
        },
        "content": "        StringBuilder sb \u003d new StringBuilder();"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "chrischenhui"
        },
        "content": "        sb.append(PREFIX_WORD + card.getWord().getValue() + \" \");"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "chrischenhui"
        },
        "content": "        sb.append(PREFIX_MEANING + card.getMeaning().getValue() + \" \");"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "jascxx"
        },
        "content": "        card.getTags().stream().forEach("
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "jascxx"
        },
        "content": "            s -\u003e sb.append(PREFIX_TAG + s.tagName + \" \")"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "jascxx"
        },
        "content": "        );"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "jascxx"
        },
        "content": "        return sb.toString();"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "jascxx"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "jascxx"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "jascxx"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "jascxx"
        },
        "content": "     * Returns the part of command string for the given {@code EditCardDescriptor}\u0027s details."
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "jascxx"
        },
        "content": "     */"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "jascxx"
        },
        "content": "    public static String getEditPersonDescriptorDetails(EditCommand.EditCardDescriptor descriptor) {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "jascxx"
        },
        "content": "        StringBuilder sb \u003d new StringBuilder();"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "chrischenhui"
        },
        "content": "        descriptor.getWord().ifPresent(name -\u003e sb.append(PREFIX_WORD).append(name.getValue()).append(\" \"));"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "chrischenhui"
        },
        "content": "        descriptor.getMeaning().ifPresent(phone -\u003e sb.append(PREFIX_MEANING).append(phone.getValue()).append(\" \"));"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "jascxx"
        },
        "content": "        if (descriptor.getTags().isPresent()) {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "jascxx"
        },
        "content": "            Set\u003cTag\u003e tags \u003d descriptor.getTags().get();"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "jascxx"
        },
        "content": "            if (tags.isEmpty()) {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "jascxx"
        },
        "content": "                sb.append(PREFIX_TAG);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "jascxx"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "jascxx"
        },
        "content": "                tags.forEach(s -\u003e sb.append(PREFIX_TAG).append(s.tagName).append(\" \"));"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "jascxx"
        },
        "content": "            }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "jascxx"
        },
        "content": "        }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "jascxx"
        },
        "content": "        return sb.toString();"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "jascxx"
        },
        "content": "    }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "jascxx"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "jascxx": 50,
      "chrischenhui": 6
    }
  },
  {
    "path": "src/test/java/seedu/address/testutil/EditCardDescriptorBuilder.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "sreesubbash"
        },
        "content": "package seedu.address.testutil;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "sreesubbash"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "jascxx"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "jascxx"
        },
        "content": "import java.util.stream.Collectors;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "jascxx"
        },
        "content": "import java.util.stream.Stream;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "jascxx"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "chrischenhui"
        },
        "content": "import seedu.address.logic.commands.cardcommands.EditCommand;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "sreesubbash"
        },
        "content": "import seedu.address.model.card.Card;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "sreesubbash"
        },
        "content": "import seedu.address.model.card.Meaning;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "sreesubbash"
        },
        "content": "import seedu.address.model.card.Word;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "sreesubbash"
        },
        "content": "import seedu.address.model.tag.Tag;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "sreesubbash"
        },
        "content": "/**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "sreesubbash"
        },
        "content": " * A utility class to help with building EditCardDescriptor objects."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "sreesubbash"
        },
        "content": " */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "sreesubbash"
        },
        "content": "public class EditCardDescriptorBuilder {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "sreesubbash"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "sreesubbash"
        },
        "content": "    private EditCommand.EditCardDescriptor descriptor;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "sreesubbash"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "sreesubbash"
        },
        "content": "    public EditCardDescriptorBuilder() {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "sreesubbash"
        },
        "content": "        descriptor \u003d new EditCommand.EditCardDescriptor();"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "sreesubbash"
        },
        "content": "    }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "sreesubbash"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "sreesubbash"
        },
        "content": "    public EditCardDescriptorBuilder(EditCommand.EditCardDescriptor descriptor) {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "sreesubbash"
        },
        "content": "        this.descriptor \u003d new EditCommand.EditCardDescriptor(descriptor);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "sreesubbash"
        },
        "content": "    }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "sreesubbash"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "sreesubbash"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "sreesubbash"
        },
        "content": "     * Returns an {@code EditCommand.EditCardDescriptor} with fields containing {@code card}\u0027s details"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "sreesubbash"
        },
        "content": "     */"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "sreesubbash"
        },
        "content": "    public EditCardDescriptorBuilder(Card card) {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "sreesubbash"
        },
        "content": "        descriptor \u003d new EditCommand.EditCardDescriptor();"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "sreesubbash"
        },
        "content": "        descriptor.setWord(card.getWord());"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "sreesubbash"
        },
        "content": "        descriptor.setMeaning(card.getMeaning());"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "sreesubbash"
        },
        "content": "        descriptor.setTags(card.getTags());"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "sreesubbash"
        },
        "content": "    }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "sreesubbash"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "sreesubbash"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "sreesubbash"
        },
        "content": "     * Sets the {@code Word} of the {@code EditCommand.EditCardDescriptor} that we are building."
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "sreesubbash"
        },
        "content": "     */"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "sreesubbash"
        },
        "content": "    public EditCardDescriptorBuilder withWord(String word) {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "sreesubbash"
        },
        "content": "        descriptor.setWord(new Word(word));"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "sreesubbash"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "sreesubbash"
        },
        "content": "    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "sreesubbash"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "sreesubbash"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "sreesubbash"
        },
        "content": "     * Sets the {@code Meaning} of the {@code EditCommand.EditCardDescriptor} that we are building."
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "sreesubbash"
        },
        "content": "     */"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "sreesubbash"
        },
        "content": "    public EditCardDescriptorBuilder withMeaning(String meaning) {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "sreesubbash"
        },
        "content": "        descriptor.setMeaning(new Meaning(meaning));"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "sreesubbash"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "sreesubbash"
        },
        "content": "    }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "sreesubbash"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "sreesubbash"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "sreesubbash"
        },
        "content": "     * Parses the {@code tags} into a {@code Set\u003cTag\u003e} and set it to the {@code EditCommand.EditCardDescriptor}"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "sreesubbash"
        },
        "content": "     * that we are building."
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "sreesubbash"
        },
        "content": "     */"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "sreesubbash"
        },
        "content": "    public EditCardDescriptorBuilder withTags(String... tags) {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "sreesubbash"
        },
        "content": "        Set\u003cTag\u003e tagSet \u003d Stream.of(tags).map(Tag::new).collect(Collectors.toSet());"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "sreesubbash"
        },
        "content": "        descriptor.setTags(tagSet);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "sreesubbash"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "sreesubbash"
        },
        "content": "    }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "sreesubbash"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "sreesubbash"
        },
        "content": "    public EditCommand.EditCardDescriptor build() {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "sreesubbash"
        },
        "content": "        return descriptor;"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "sreesubbash"
        },
        "content": "    }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "sreesubbash"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "sreesubbash": 61,
      "jascxx": 4,
      "chrischenhui": 1
    }
  },
  {
    "path": "src/test/java/seedu/address/testutil/TestUtil.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.testutil;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Files;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Paths;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "jascxx"
        },
        "content": "import seedu.address.model.card.Card;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": " * A utility class for test cases."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "public class TestUtil {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "     * Folder used for temp files created during testing. Ignored by Git."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final Path SANDBOX_FOLDER \u003d Paths.get(\"src\", \"test\", \"data\", \"sandbox\");"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "     * Appends {@code fileName} to the sandbox folder path and returns the resulting path."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "     * Creates the sandbox folder if it doesn\u0027t exist."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    public static Path getFilePathInSandboxFolder(String fileName) {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "            Files.createDirectories(SANDBOX_FOLDER);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new RuntimeException(e);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        return SANDBOX_FOLDER.resolve(fileName);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns the middle index of the person in the {@code model}\u0027s person list."
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    public static Index getMidIndex(Model model) {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "jascxx"
        },
        "content": "        return Index.fromOneBased(model.getFilteredCardList().size() / 2);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns the last index of the person in the {@code model}\u0027s person list."
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    public static Index getLastIndex(Model model) {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "jascxx"
        },
        "content": "        return Index.fromOneBased(model.getFilteredCardList().size());"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns the person in the {@code model}\u0027s person list at {@code index}."
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "jascxx"
        },
        "content": "    public static Card getPerson(Model model, Index index) {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "jascxx"
        },
        "content": "        return model.getFilteredCardList().get(index.getZeroBased());"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "jascxx": 5,
      "-": 50
    }
  },
  {
    "path": "src/test/java/seedu/address/testutil/TypicalCards.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jascxx"
        },
        "content": "package seedu.address.testutil;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "jascxx"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "jascxx"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "jascxx"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "jascxx"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "jascxx"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "jascxx"
        },
        "content": "import seedu.address.model.card.Card;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "jascxx"
        },
        "content": "import seedu.address.model.wordbank.WordBank;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "jascxx"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "jascxx"
        },
        "content": "/**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "jascxx"
        },
        "content": " * A utility class containing a list of {@code Card} objects to be used in tests."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "jascxx"
        },
        "content": " */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "jascxx"
        },
        "content": "public class TypicalCards {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "jascxx"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "jascxx"
        },
        "content": "    public static final String SAMPLE_ID \u003d \"sample-id\";"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "jascxx"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "jascxx"
        },
        "content": "    public static final Card ABRA \u003d new CardBuilder().withWord(\"Abra\")"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "jascxx"
        },
        "content": "            .withMeaning(\"It sleeps eighteen hours a day, but employs telekinesis even while sleeping.\")"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "jascxx"
        },
        "content": "            .withTags(\"psychic\").withId(\"abrajfbeoudnjcp\").build();"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "jascxx"
        },
        "content": "    public static final Card BUTTERFREE \u003d new CardBuilder().withWord(\"Butterfree\")"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "jascxx"
        },
        "content": "            .withMeaning(\"Its wings are covered with poisonous dust. If you see one flapping its wings, \""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "jascxx"
        },
        "content": "                    + \"be careful not to inhale any of the dust.\")"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "jascxx"
        },
        "content": "            .withTags(\"bug\", \"flying\").withId(\"butterfreejdfbo\").build();"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "jascxx"
        },
        "content": "    public static final Card CHARIZARD \u003d new CardBuilder().withWord(\"Charizard\")"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "jascxx"
        },
        "content": "            .withMeaning(\"It flies around the sky in search of powerful opponents. It breathes fire of such \""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "jascxx"
        },
        "content": "                    + \"great heat that it melts anything. However, it never turns its fiery breath on any opponent \""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "jascxx"
        },
        "content": "                    + \"weaker than itself.\")"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "jascxx"
        },
        "content": "            .withTags(\"fire\", \"flying\").withId(\"charizardaiudan\")"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "jascxx"
        },
        "content": "            .build();"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "jascxx"
        },
        "content": "    public static final Card DITTO \u003d new CardBuilder().withWord(\"Ditto\")"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "jascxx"
        },
        "content": "            .withMeaning(\"Its transformation ability is perfect. However, if it is made to laugh, it can\u0027t \""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "jascxx"
        },
        "content": "                    + \"maintain its disguise.\")"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "jascxx"
        },
        "content": "            .withTags(\"normal\").withId(\"dittonfjsdodc\").build();"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "jascxx"
        },
        "content": "    public static final Card EEVEE \u003d new CardBuilder().withWord(\"Eevee\")"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "jascxx"
        },
        "content": "            .withMeaning(\"Possessing an unbalanced and unstable genetic makeup, it conceals many possible \""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "jascxx"
        },
        "content": "                    + \"evolutions\")"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "jascxx"
        },
        "content": "            .withTags(\"normal\").withId(\"eeveeouhvdsn\")"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "jascxx"
        },
        "content": "            .build();"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "jascxx"
        },
        "content": "    public static final Card FLAREON \u003d new CardBuilder().withWord(\"Flareon\")"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "jascxx"
        },
        "content": "            .withMeaning(\"It fluffs out its fur collar to cool down its body temperature, which can reach \""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "jascxx"
        },
        "content": "                    + \"1,650 degrees.\")"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "jascxx"
        },
        "content": "            .withTags(\"fire\").withId(\"flareonaedjlcs\")"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "jascxx"
        },
        "content": "            .build();"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "jascxx"
        },
        "content": "    public static final Card GEODUDE \u003d new CardBuilder().withWord(\"Geodude\")"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "jascxx"
        },
        "content": "            .withMeaning(\"At rest, it looks just like a rock. Carelessly stepping on it will make it swing \""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "jascxx"
        },
        "content": "                    + \"its fists angrily.\")"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "jascxx"
        },
        "content": "            .withTags(\"ground\", \"rock\").withId(\"geodudejnfslohl\")"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "jascxx"
        },
        "content": "            .build();"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "jascxx"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": "    public static final Card SINGLE_LETTER_CARD \u003d new CardBuilder().withWord(\"T\")"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": "            .withMeaning(\"This word only has a single letter T\")"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": "            .withTags(\"test\")"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": "            .build();"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "jascxx"
        },
        "content": "    private TypicalCards() {} // prevents instantiation"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "jascxx"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "jascxx"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "jascxx"
        },
        "content": "     * Returns a {@code WordBank} with all the typical cards."
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "jascxx"
        },
        "content": "     */"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "jascxx"
        },
        "content": "    public static WordBank getTypicalWordBank() {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "chrischenhui"
        },
        "content": "        WordBank wb \u003d new WordBank(\"sample\");"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "jascxx"
        },
        "content": "        for (Card card : getTypicalCards()) {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "jascxx"
        },
        "content": "            wb.addCard(card);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "jascxx"
        },
        "content": "        }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "jascxx"
        },
        "content": "        return wb;"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "jascxx"
        },
        "content": "    }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "jascxx"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "jascxx"
        },
        "content": "    public static List\u003cCard\u003e getTypicalCards() {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "jascxx"
        },
        "content": "        return new ArrayList\u003c\u003e(Arrays.asList(ABRA, BUTTERFREE, CHARIZARD, DITTO, EEVEE, FLAREON, GEODUDE));"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "jascxx"
        },
        "content": "    }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "jascxx"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "jascxx": 65,
      "chrischenhui": 1,
      "kohyida1997": 5
    }
  },
  {
    "path": "src/test/java/seedu/address/testutil/WordBankBuilder.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jascxx"
        },
        "content": "package seedu.address.testutil;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "jascxx"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "jascxx"
        },
        "content": "import seedu.address.model.card.Card;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "jascxx"
        },
        "content": "import seedu.address.model.wordbank.WordBank;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "jascxx"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "jascxx"
        },
        "content": "/**"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "jascxx"
        },
        "content": " * A utility class to help with building WordBank objects."
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "jascxx"
        },
        "content": " * Example usage: \u003cbr\u003e"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "jascxx"
        },
        "content": " *     {@code WordBank wb \u003d new WordBankBuilder().withCard(CARD).build();}"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "jascxx"
        },
        "content": " */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "jascxx"
        },
        "content": "public class WordBankBuilder {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "jascxx"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "jascxx"
        },
        "content": "    public static final String SAMPLE_ID \u003d \"sample-id\";"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "jascxx"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "jascxx"
        },
        "content": "    private WordBank wordBank;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "jascxx"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "jascxx"
        },
        "content": "    public WordBankBuilder() {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "jascxx"
        },
        "content": "        wordBank \u003d new WordBank(SAMPLE_ID);"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "jascxx"
        },
        "content": "    }"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "jascxx"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "jascxx"
        },
        "content": "    public WordBankBuilder(WordBank wordBank) {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "jascxx"
        },
        "content": "        this.wordBank \u003d wordBank;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "jascxx"
        },
        "content": "    }"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "jascxx"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": "    public WordBankBuilder(String id) {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": "        wordBank \u003d new WordBank(id);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "jascxx"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "jascxx"
        },
        "content": "     * Adds a new {@code Card} to the {@code WordBank} that we are building."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "jascxx"
        },
        "content": "     */"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "jascxx"
        },
        "content": "    public WordBankBuilder withCard(Card person) {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "jascxx"
        },
        "content": "        wordBank.addCard(person);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "jascxx"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "jascxx"
        },
        "content": "    }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "jascxx"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "jascxx"
        },
        "content": "    public WordBank build() {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "jascxx"
        },
        "content": "        return wordBank;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "jascxx"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "jascxx"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "jascxx": 36,
      "kohyida1997": 5
    }
  },
  {
    "path": "src/test/resources/view/DarkTheme.css",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": ".background {"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": "    -fx-background-color: derive(#1d1d1d, 20%);"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": "    background-color: #383838; /* Used in the default.html file */"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": "}"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": ".label {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": "    -fx-font-size: 11pt;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": "    -fx-font-family: \"Segoe UI Semibold\";"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": "    -fx-text-fill: #555555;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": "    -fx-opacity: 0.9;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": "}"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": ".label-bright {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": "    -fx-font-size: 11pt;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": "    -fx-font-family: \"Segoe UI Semibold\";"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": "    -fx-text-fill: white;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": "    -fx-opacity: 1;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": "}"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": ".label-header {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": "    -fx-font-size: 32pt;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": "    -fx-font-family: \"Segoe UI Light\";"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": "    -fx-text-fill: white;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": "    -fx-opacity: 1;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": "}"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": ".label-header2 {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": "    -fx-font-size: 14pt;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": "    -fx-font-family: \"Segoe UI Light\";"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": "    -fx-text-fill: white;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": "    -fx-opacity: 1;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": "}"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": ".label-unhighlighted {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": "    -fx-font-size: 11pt;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": "    -fx-font-family: \"Segoe UI SemiBold\";"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": "    -fx-opacity: 0.5;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": "    -fx-padding: 20 20 20 0;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": "    -fx-text-fill: rgba(255, 255, 255, 100);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": "}"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": ".label-highlighted {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": "     -fx-font-size: 11pt;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": "     -fx-font-family: \"Segoe UI SemiBold\";"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": "     -fx-opacity: 0.9;"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": "     -fx-padding: 20 20 20 0;"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": "     -fx-text-fill: rgba(85, 255, 68, 100);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": " }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": ".text-field {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": "    -fx-font-size: 12pt;"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": "    -fx-font-family: \"Segoe UI Semibold\";"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": "}"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": ".small-text-field {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": "    -fx-font-size: 10pt;"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": "    -fx-font-family: \"Segoe UI Semibold\";"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": "    -fx-text-fill: white;"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": "}"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": ".tab-pane {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": "    -fx-padding: 0 0 0 1;"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": "}"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": ".tab-pane .tab-header-area {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": "    -fx-padding: 0 0 0 0;"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": "    -fx-min-height: 0;"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": "    -fx-max-height: 0;"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": "}"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": ".table-view {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": "    -fx-base: #1d1d1d;"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": "    -fx-control-inner-background: #1d1d1d;"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": "    -fx-background-color: #1d1d1d;"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": "    -fx-table-cell-border-color: transparent;"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": "    -fx-table-header-border-color: transparent;"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": "    -fx-padding: 5;"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": "}"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": ".table-view .column-header-background {"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": "    -fx-background-color: transparent;"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": "}"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": ".table-view .column-header, .table-view .filler {"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": "    -fx-size: 35;"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": "    -fx-border-width: 0 0 1 0;"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": "    -fx-background-color: transparent;"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": "    -fx-border-color:"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": "        transparent"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": "        transparent"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": "        derive(-fx-base, 80%)"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": "        transparent;"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": "    -fx-border-insets: 0 10 1 0;"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": "}"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": ""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": ".table-view .column-header .label {"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": "    -fx-font-size: 20pt;"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": "    -fx-font-family: \"Segoe UI Light\";"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": "    -fx-text-fill: white;"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": "    -fx-alignment: center-left;"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": "    -fx-opacity: 1;"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": "}"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": ""
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": ".table-view:focused .table-row-cell:filled:focused:selected {"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": "    -fx-background-color: -fx-focus-color;"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": "}"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": ""
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": ".split-pane:horizontal .split-pane-divider {"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": "    -fx-background-color: derive(#1d1d1d, 20%);"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": "    -fx-border-color: transparent transparent transparent #4d4d4d;"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": "}"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": ""
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": ".split-pane {"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": "    -fx-border-radius: 1;"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": "    -fx-border-width: 1;"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": "    -fx-background-color: derive(#1d1d1d, 20%);"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": "}"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": ""
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": ".list-view {"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": "    -fx-background-insets: 0;"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": "    -fx-padding: 0;"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": "    -fx-background-color: derive(#1d1d1d, 20%);"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": "}"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": ""
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": ".list-cell {"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": "    -fx-label-padding: 0 0 0 0;"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": "    -fx-graphic-text-gap : 0;"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": "    -fx-padding: 0 0 0 0;"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": "}"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": ""
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": ".list-cell:filled:even, #cardPaneEven {"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": "    -fx-background-color: #3c3e3f;"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": "}"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": ""
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": ".list-cell:filled:odd, #cardPaneOddd {"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": "    -fx-background-color: #515658;"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": "}"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": ""
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": ".list-cell:filled:selected {"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": "    -fx-background-color: #424d5f;"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": "}"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": ""
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": ".list-cell:filled:selected #cardPane {"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": "    -fx-border-color: #3e7b91;"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": "    -fx-border-width: 1;"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": "}"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": ""
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": ".list-cell .label {"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": "    -fx-text-fill: white;"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": "}"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": ""
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": ".cell_big_label {"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": "    -fx-font-family: \"Segoe UI Semibold\";"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": "    -fx-font-size: 16px;"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": "    -fx-text-fill: white;"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": "}"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": ""
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": ".cell_small_label {"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": "    -fx-font-family: \"Segoe UI\";"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": "    -fx-font-size: 14px;"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": "    -fx-text-fill: white;"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": "}"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": ""
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": ".stack-pane {"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": "     -fx-background-color: derive(#1d1d1d, 20%);"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": "}"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": ""
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": ".scroll-pane {"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": "    -fx-background: derive(#1d1d1d, 20%);"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": "    -fx-border-color: derive(#1d1d1d, 10%);"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": "}"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": ""
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": ".pane-with-border {"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": "     -fx-background-color: derive(#1d1d1d, 20%);"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": "     -fx-border-color: derive(#1d1d1d, 10%);"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": "     -fx-border-top-width: 1px;"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": "}"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": ""
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": ".status-bar {"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": "    -fx-background-color: derive(#1d1d1d, 30%);"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": "}"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": ""
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": ".result-display {"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": "    -fx-background-color: transparent;"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": "    -fx-font-family: \"Segoe UI Light\";"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": "    -fx-font-size: 12.5pt;"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": "    -fx-text-fill: white;"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": "    -fx-underline: true;"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": "}"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": ""
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": ".timer-display {"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": "    -fx-background-color: transparent;"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": "    -fx-font-family: \"monospace\";"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": "    -fx-font-size: 11.7pt;"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": "    -fx-text-fill: pink;"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": "}"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": ""
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": ".hint-display {"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": "    -fx-background-color: transparent;"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": "    -fx-font-family: \"monospace\";"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": "    -fx-font-size: 11.7pt;"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": "    -fx-text-fill: pink;"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": "}"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": ""
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": ""
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": ".result-display .label {"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": "    -fx-text-fill: black !important;"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": "}"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": ""
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": ""
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": ".status-bar .label {"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": "    -fx-font-family: \"Segoe UI Light\";"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": "    -fx-text-fill: white;"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": "    -fx-padding: 4px;"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": "    -fx-pref-height: 30px;"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": "}"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": ""
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": ".status-bar-with-border {"
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": "    -fx-background-color: derive(#1d1d1d, 30%);"
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": "    -fx-border-color: derive(#1d1d1d, 25%);"
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": "    -fx-border-width: 1px;"
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": "}"
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": ""
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": ".status-bar-with-border .label {"
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": "    -fx-text-fill: white;"
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": "}"
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": ""
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": ".grid-pane {"
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": "    -fx-background-color: derive(#1d1d1d, 30%);"
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": "    -fx-border-color: derive(#1d1d1d, 30%);"
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": "    -fx-border-width: 1px;"
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": "}"
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": ""
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": ".grid-pane .stack-pane {"
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": "    -fx-background-color: derive(#1d1d1d, 30%);"
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": "}"
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": ""
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": ".context-menu {"
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": "    -fx-background-color: derive(#1d1d1d, 50%);"
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": "}"
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": ""
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": ".context-menu .label {"
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": "    -fx-text-fill: white;"
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": "}"
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": ""
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": ".menu-bar {"
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": "    -fx-background-color: derive(#1d1d1d, 20%);"
      },
      {
        "lineNumber": 248,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": "}"
      },
      {
        "lineNumber": 249,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": ""
      },
      {
        "lineNumber": 250,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": ".menu-bar .label {"
      },
      {
        "lineNumber": 251,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": "    -fx-font-size: 14pt;"
      },
      {
        "lineNumber": 252,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": "    -fx-font-family: \"Segoe UI Light\";"
      },
      {
        "lineNumber": 253,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": "    -fx-text-fill: white;"
      },
      {
        "lineNumber": 254,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": "    -fx-opacity: 0.9;"
      },
      {
        "lineNumber": 255,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": "}"
      },
      {
        "lineNumber": 256,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": ""
      },
      {
        "lineNumber": 257,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": ".menu .left-container {"
      },
      {
        "lineNumber": 258,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": "    -fx-background-color: black;"
      },
      {
        "lineNumber": 259,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": "}"
      },
      {
        "lineNumber": 260,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": ""
      },
      {
        "lineNumber": 261,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": "/*"
      },
      {
        "lineNumber": 262,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": " * Metro style Push Button"
      },
      {
        "lineNumber": 263,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": " * Author: Pedro Duque Vieira"
      },
      {
        "lineNumber": 264,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": " * http://pixelduke.wordpress.com/2012/10/23/jmetro-windows-8-controls-on-java/"
      },
      {
        "lineNumber": 265,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": " */"
      },
      {
        "lineNumber": 266,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": ".button {"
      },
      {
        "lineNumber": 267,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": "    -fx-padding: 5 22 5 22;"
      },
      {
        "lineNumber": 268,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": "    -fx-border-color: #e2e2e2;"
      },
      {
        "lineNumber": 269,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": "    -fx-border-width: 2;"
      },
      {
        "lineNumber": 270,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": "    -fx-background-radius: 0;"
      },
      {
        "lineNumber": 271,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": "    -fx-background-color: #1d1d1d;"
      },
      {
        "lineNumber": 272,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": "    -fx-font-family: \"Segoe UI\", Helvetica, Arial, sans-serif;"
      },
      {
        "lineNumber": 273,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": "    -fx-font-size: 11pt;"
      },
      {
        "lineNumber": 274,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": "    -fx-text-fill: #d8d8d8;"
      },
      {
        "lineNumber": 275,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": "    -fx-background-insets: 0 0 0 0, 0, 1, 2;"
      },
      {
        "lineNumber": 276,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": "}"
      },
      {
        "lineNumber": 277,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": ""
      },
      {
        "lineNumber": 278,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": ".button:hover {"
      },
      {
        "lineNumber": 279,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": "    -fx-background-color: #3a3a3a;"
      },
      {
        "lineNumber": 280,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": "}"
      },
      {
        "lineNumber": 281,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": ""
      },
      {
        "lineNumber": 282,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": ".button:pressed, .button:default:hover:pressed {"
      },
      {
        "lineNumber": 283,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": "  -fx-background-color: white;"
      },
      {
        "lineNumber": 284,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": "  -fx-text-fill: #1d1d1d;"
      },
      {
        "lineNumber": 285,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": "}"
      },
      {
        "lineNumber": 286,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": ""
      },
      {
        "lineNumber": 287,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": ".button:focused {"
      },
      {
        "lineNumber": 288,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": "    -fx-border-color: white, white;"
      },
      {
        "lineNumber": 289,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": "    -fx-border-width: 1, 1;"
      },
      {
        "lineNumber": 290,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": "    -fx-border-style: solid, segments(1, 1);"
      },
      {
        "lineNumber": 291,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": "    -fx-border-radius: 0, 0;"
      },
      {
        "lineNumber": 292,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": "    -fx-border-insets: 1 1 1 1, 0;"
      },
      {
        "lineNumber": 293,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": "}"
      },
      {
        "lineNumber": 294,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": ""
      },
      {
        "lineNumber": 295,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": ".button:disabled, .button:default:disabled {"
      },
      {
        "lineNumber": 296,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": "    -fx-opacity: 0.4;"
      },
      {
        "lineNumber": 297,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": "    -fx-background-color: #1d1d1d;"
      },
      {
        "lineNumber": 298,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": "    -fx-text-fill: white;"
      },
      {
        "lineNumber": 299,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": "}"
      },
      {
        "lineNumber": 300,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": ""
      },
      {
        "lineNumber": 301,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": ".button:default {"
      },
      {
        "lineNumber": 302,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": "    -fx-background-color: -fx-focus-color;"
      },
      {
        "lineNumber": 303,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": "    -fx-text-fill: #ffffff;"
      },
      {
        "lineNumber": 304,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": "}"
      },
      {
        "lineNumber": 305,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": ""
      },
      {
        "lineNumber": 306,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": ".button:default:hover {"
      },
      {
        "lineNumber": 307,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": "    -fx-background-color: derive(-fx-focus-color, 30%);"
      },
      {
        "lineNumber": 308,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": "}"
      },
      {
        "lineNumber": 309,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": ""
      },
      {
        "lineNumber": 310,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": ".dialog-pane {"
      },
      {
        "lineNumber": 311,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": "    -fx-background-color: #1d1d1d;"
      },
      {
        "lineNumber": 312,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": "}"
      },
      {
        "lineNumber": 313,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": ""
      },
      {
        "lineNumber": 314,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": ".dialog-pane \u003e *.button-bar \u003e *.container {"
      },
      {
        "lineNumber": 315,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": "    -fx-background-color: #1d1d1d;"
      },
      {
        "lineNumber": 316,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": "}"
      },
      {
        "lineNumber": 317,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": ""
      },
      {
        "lineNumber": 318,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": ".dialog-pane \u003e *.label.content {"
      },
      {
        "lineNumber": 319,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": "    -fx-font-size: 14px;"
      },
      {
        "lineNumber": 320,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": "    -fx-font-weight: bold;"
      },
      {
        "lineNumber": 321,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": "    -fx-text-fill: white;"
      },
      {
        "lineNumber": 322,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": "}"
      },
      {
        "lineNumber": 323,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": ""
      },
      {
        "lineNumber": 324,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": ".dialog-pane:header *.header-panel {"
      },
      {
        "lineNumber": 325,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": "    -fx-background-color: derive(#1d1d1d, 25%);"
      },
      {
        "lineNumber": 326,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": "}"
      },
      {
        "lineNumber": 327,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": ""
      },
      {
        "lineNumber": 328,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": ".dialog-pane:header *.header-panel *.label {"
      },
      {
        "lineNumber": 329,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": "    -fx-font-size: 18px;"
      },
      {
        "lineNumber": 330,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": "    -fx-font-style: italic;"
      },
      {
        "lineNumber": 331,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": "    -fx-fill: white;"
      },
      {
        "lineNumber": 332,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": "    -fx-text-fill: white;"
      },
      {
        "lineNumber": 333,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": "}"
      },
      {
        "lineNumber": 334,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": ""
      },
      {
        "lineNumber": 335,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": ".scroll-bar {"
      },
      {
        "lineNumber": 336,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": "    -fx-background-color: derive(#1d1d1d, 20%);"
      },
      {
        "lineNumber": 337,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": "}"
      },
      {
        "lineNumber": 338,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": ""
      },
      {
        "lineNumber": 339,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": ".scroll-bar .thumb {"
      },
      {
        "lineNumber": 340,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": "    -fx-background-color: derive(#1d1d1d, 50%);"
      },
      {
        "lineNumber": 341,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": "    -fx-background-insets: 3;"
      },
      {
        "lineNumber": 342,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": "}"
      },
      {
        "lineNumber": 343,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": ""
      },
      {
        "lineNumber": 344,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": ".scroll-bar .increment-button, .scroll-bar .decrement-button {"
      },
      {
        "lineNumber": 345,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": "    -fx-background-color: transparent;"
      },
      {
        "lineNumber": 346,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": "    -fx-padding: 0 0 0 0;"
      },
      {
        "lineNumber": 347,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": "}"
      },
      {
        "lineNumber": 348,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": ""
      },
      {
        "lineNumber": 349,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": ".scroll-bar .increment-arrow, .scroll-bar .decrement-arrow {"
      },
      {
        "lineNumber": 350,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": "    -fx-shape: \" \";"
      },
      {
        "lineNumber": 351,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": "}"
      },
      {
        "lineNumber": 352,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": ""
      },
      {
        "lineNumber": 353,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": ".scroll-bar:vertical .increment-arrow, .scroll-bar:vertical .decrement-arrow {"
      },
      {
        "lineNumber": 354,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": "    -fx-padding: 1 8 1 8;"
      },
      {
        "lineNumber": 355,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": "}"
      },
      {
        "lineNumber": 356,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": ""
      },
      {
        "lineNumber": 357,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": ".scroll-bar:horizontal .increment-arrow, .scroll-bar:horizontal .decrement-arrow {"
      },
      {
        "lineNumber": 358,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": "    -fx-padding: 8 1 8 1;"
      },
      {
        "lineNumber": 359,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": "}"
      },
      {
        "lineNumber": 360,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": ""
      },
      {
        "lineNumber": 361,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": "#cardPane {"
      },
      {
        "lineNumber": 362,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": "    -fx-background-color: transparent;"
      },
      {
        "lineNumber": 363,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": "    -fx-border-width: 0;"
      },
      {
        "lineNumber": 364,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": "}"
      },
      {
        "lineNumber": 365,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": ""
      },
      {
        "lineNumber": 366,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": "#commandTypeLabel {"
      },
      {
        "lineNumber": 367,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": "    -fx-font-size: 11px;"
      },
      {
        "lineNumber": 368,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": "    -fx-text-fill: #F70D1A;"
      },
      {
        "lineNumber": 369,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": "}"
      },
      {
        "lineNumber": 370,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": ""
      },
      {
        "lineNumber": 371,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": "#commandTextField {"
      },
      {
        "lineNumber": 372,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": "    -fx-background-color: transparent #383838 transparent #383838;"
      },
      {
        "lineNumber": 373,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": "    -fx-background-insets: 0;"
      },
      {
        "lineNumber": 374,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": "    -fx-border-color: #383838 #383838 #ffffff #383838;"
      },
      {
        "lineNumber": 375,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": "    -fx-border-insets: 0;"
      },
      {
        "lineNumber": 376,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": "    -fx-border-width: 1;"
      },
      {
        "lineNumber": 377,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": "    -fx-font-family: \"Segoe UI Light\";"
      },
      {
        "lineNumber": 378,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": "    -fx-font-size: 13pt;"
      },
      {
        "lineNumber": 379,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": "    -fx-text-fill: white;"
      },
      {
        "lineNumber": 380,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": "}"
      },
      {
        "lineNumber": 381,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": ""
      },
      {
        "lineNumber": 382,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": "#filterField, #personListPanel, #personWebpage {"
      },
      {
        "lineNumber": 383,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": "    -fx-effect: innershadow(gaussian, black, 10, 0, 0, 0);"
      },
      {
        "lineNumber": 384,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": "}"
      },
      {
        "lineNumber": 385,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": ""
      },
      {
        "lineNumber": 386,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": "#resultDisplay .content {"
      },
      {
        "lineNumber": 387,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": "    -fx-background-color: transparent, #383838, transparent, #383838;"
      },
      {
        "lineNumber": 388,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": "    -fx-background-radius: 0;"
      },
      {
        "lineNumber": 389,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": "}"
      },
      {
        "lineNumber": 390,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": ""
      },
      {
        "lineNumber": 391,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": "#timerText .content {"
      },
      {
        "lineNumber": 392,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": "    -fx-background-color: transparent, #383838, transparent, #383838;"
      },
      {
        "lineNumber": 393,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": "    -fx-background-radius: 0;"
      },
      {
        "lineNumber": 394,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": "}"
      },
      {
        "lineNumber": 395,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": ""
      },
      {
        "lineNumber": 396,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": ".hint-label {"
      },
      {
        "lineNumber": 397,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": "    -fx-font-family: \"monospace\";"
      },
      {
        "lineNumber": 398,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": "    -fx-font-size: 20pt;"
      },
      {
        "lineNumber": 399,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": "    -fx-text-fill: pink;"
      },
      {
        "lineNumber": 400,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": "}"
      },
      {
        "lineNumber": 401,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": ""
      },
      {
        "lineNumber": 402,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": ".question-label {"
      },
      {
        "lineNumber": 403,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": "    -fx-font-family: \"Times New Roman\";"
      },
      {
        "lineNumber": 404,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": "    -fx-underline: true;"
      },
      {
        "lineNumber": 405,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": "    -fx-font-size: 24pt;"
      },
      {
        "lineNumber": 406,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": "    -fx-text-fill: lightgreen;"
      },
      {
        "lineNumber": 407,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": "}"
      },
      {
        "lineNumber": 408,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": ""
      },
      {
        "lineNumber": 409,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": "#progress-bar-alert \u003e .track {"
      },
      {
        "lineNumber": 410,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": "    -fx-box-border: red;"
      },
      {
        "lineNumber": 411,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": "    -fx-control-inner-background: #383838;"
      },
      {
        "lineNumber": 412,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": "}"
      },
      {
        "lineNumber": 413,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": ""
      },
      {
        "lineNumber": 414,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": "#progress-bar-alert {"
      },
      {
        "lineNumber": 415,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": "    -fx-accent: red;"
      },
      {
        "lineNumber": 416,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": "}"
      },
      {
        "lineNumber": 417,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": ""
      },
      {
        "lineNumber": 418,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": "#progress-bar-normal \u003e .track {"
      },
      {
        "lineNumber": 419,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": "    -fx-box-border: red;"
      },
      {
        "lineNumber": 420,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": "    -fx-control-inner-background: #383838;"
      },
      {
        "lineNumber": 421,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": "}"
      },
      {
        "lineNumber": 422,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": ""
      },
      {
        "lineNumber": 423,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": "#progress-bar-normal {"
      },
      {
        "lineNumber": 424,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": "    -fx-accent: lightgreen;"
      },
      {
        "lineNumber": 425,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": "}"
      },
      {
        "lineNumber": 426,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": ""
      },
      {
        "lineNumber": 427,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": ""
      },
      {
        "lineNumber": 428,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": "/*combo box*/"
      },
      {
        "lineNumber": 429,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": ".combo-box .list-cell {"
      },
      {
        "lineNumber": 430,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": "    -fx-background: grey;"
      },
      {
        "lineNumber": 431,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": "    -fx-background-color: transparent;"
      },
      {
        "lineNumber": 432,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": "    -fx-text-fill: white;"
      },
      {
        "lineNumber": 433,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": "    -fx-padding: 3 0 2 7;"
      },
      {
        "lineNumber": 434,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": "    -fx-cell-size: 1.66667em;"
      },
      {
        "lineNumber": 435,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": "}"
      },
      {
        "lineNumber": 436,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": ""
      },
      {
        "lineNumber": 437,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": ""
      },
      {
        "lineNumber": 438,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": ".combo-box-popup .list-view .list-cell:filled:selected, .combo-box-popup .list-view .list-cell:filled:selected:hover {"
      },
      {
        "lineNumber": 439,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": "    -fx-background: -fx-accent;"
      },
      {
        "lineNumber": 440,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": "    -fx-background-color: -fx-selection-bar;"
      },
      {
        "lineNumber": 441,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": "    -fx-text-fill: white;"
      },
      {
        "lineNumber": 442,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": "}"
      },
      {
        "lineNumber": 443,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": ""
      },
      {
        "lineNumber": 444,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": ".combo-box-base {"
      },
      {
        "lineNumber": 445,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": "    -fx-background-color: grey, grey, grey, grey;"
      },
      {
        "lineNumber": 446,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": "    -fx-background-radius: 5, 5, 4, 3;"
      },
      {
        "lineNumber": 447,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": "    -fx-background-insets: 0 0 -1 0, 0, 1, 2;"
      },
      {
        "lineNumber": 448,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": "    -fx-padding: 0;"
      },
      {
        "lineNumber": 449,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": "}"
      },
      {
        "lineNumber": 450,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": ""
      },
      {
        "lineNumber": 451,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": ".tooltip {"
      },
      {
        "lineNumber": 452,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": "    -fx-font-size: 10pt;"
      },
      {
        "lineNumber": 453,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": "}"
      },
      {
        "lineNumber": 454,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": ""
      },
      {
        "lineNumber": 455,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": "#highlighted {"
      },
      {
        "lineNumber": 456,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": "    -fx-text-fill: #8cb0f5;"
      },
      {
        "lineNumber": 457,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": "}"
      },
      {
        "lineNumber": 458,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": ""
      },
      {
        "lineNumber": 459,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": "#slogan {"
      },
      {
        "lineNumber": 460,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": "    -fx-text-fill: #ec4c4c;"
      },
      {
        "lineNumber": 461,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": "}"
      },
      {
        "lineNumber": 462,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": ""
      },
      {
        "lineNumber": 463,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": "#avatar-shadow {"
      },
      {
        "lineNumber": 464,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": "    -fx-fill: #353535;"
      },
      {
        "lineNumber": 465,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": "}"
      },
      {
        "lineNumber": 466,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": ""
      },
      {
        "lineNumber": 467,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": "#tags {"
      },
      {
        "lineNumber": 468,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": "    -fx-hgap: 7;"
      },
      {
        "lineNumber": 469,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": "    -fx-vgap: 3;"
      },
      {
        "lineNumber": 470,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": "}"
      },
      {
        "lineNumber": 471,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": ""
      },
      {
        "lineNumber": 472,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": "#tags .label {"
      },
      {
        "lineNumber": 473,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": "    -fx-text-fill: white;"
      },
      {
        "lineNumber": 474,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": "    -fx-background-color: #3e4061;"
      },
      {
        "lineNumber": 475,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": "    -fx-padding: 1 3 1 3;"
      },
      {
        "lineNumber": 476,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": "    -fx-border-radius: 2;"
      },
      {
        "lineNumber": 477,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": "    -fx-background-radius: 2;"
      },
      {
        "lineNumber": 478,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": "    -fx-font-size: 11;"
      },
      {
        "lineNumber": 479,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": "}"
      },
      {
        "lineNumber": 480,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": ""
      },
      {
        "lineNumber": 481,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": "#timer-alert-style .content {"
      },
      {
        "lineNumber": 482,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": "    -fx-background-color: transparent, #383838, transparent, #383838;"
      },
      {
        "lineNumber": 483,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": "    -fx-background-radius: 0;"
      },
      {
        "lineNumber": 484,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": "}"
      },
      {
        "lineNumber": 485,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": ""
      },
      {
        "lineNumber": 486,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": "#timer-alert-style {"
      },
      {
        "lineNumber": 487,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": "    -fx-text-fill: #FF69B4;"
      },
      {
        "lineNumber": 488,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": "}"
      },
      {
        "lineNumber": 489,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": ""
      },
      {
        "lineNumber": 490,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": "#timer-normal-style .content {"
      },
      {
        "lineNumber": 491,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": "    -fx-background-color: transparent, #383838, transparent, #383838;"
      },
      {
        "lineNumber": 492,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": "    -fx-background-radius: 0;"
      },
      {
        "lineNumber": 493,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": "}"
      },
      {
        "lineNumber": 494,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": ""
      },
      {
        "lineNumber": 495,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": "#timer-normal-style {"
      },
      {
        "lineNumber": 496,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": "    -fx-text-fill: #ADFF2F;"
      },
      {
        "lineNumber": 497,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "kohyida1997": 497
    }
  },
  {
    "path": "src/test/resources/view/TimerDisplay.fxml",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": "\u003c?import javafx.geometry.Insets?\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": "\u003c?import javafx.scene.control.ProgressBar?\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": "\u003c?import javafx.scene.control.TextArea?\u003e"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": "\u003c?import javafx.scene.layout.AnchorPane?\u003e"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": "\u003c?import javafx.scene.layout.HBox?\u003e"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": "\u003cAnchorPane fx:id\u003d\"placeHolder\" styleClass\u003d\"pane-with-border\" maxWidth\u003d\"Infinity\" HBox.hgrow\u003d\"ALWAYS\""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": "            xmlns\u003d\"http://javafx.com/javafx/11\" xmlns:fx\u003d\"http://javafx.com/fxml/1\"\u003e"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": "    \u003cHBox HBox.hgrow\u003d\"ALWAYS\"\u003e"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": "        \u003cchildren\u003e"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": "            \u003cTextArea fx:id\u003d\"timerText\" editable\u003d\"false\" styleClass\u003d\"timer-display\" prefWidth\u003d\"200.0\"\u003e"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": "            \u003c/TextArea\u003e"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": "            \u003cProgressBar fx:id\u003d\"progressBar\" styleClass\u003d\"progress-bar\" HBox.hgrow\u003d\"ALWAYS\""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": "                         prefWidth\u003d\"570\" maxWidth\u003d\"Infinity\"\u003e"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": "                \u003cpadding\u003e"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": "                    \u003cInsets left\u003d\"5.0\" right\u003d\"5.0\" top\u003d\"7.0\" /\u003e"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": "                \u003c/padding\u003e"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": "            \u003c/ProgressBar\u003e"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": "        \u003c/children\u003e"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": "    \u003c/HBox\u003e"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": "\u003c/AnchorPane\u003e"
      }
    ],
    "authorContributionMap": {
      "kohyida1997": 23
    }
  }
]
