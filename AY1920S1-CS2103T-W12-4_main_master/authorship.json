[
  {
    "path": "README.adoc",
    "fileType": "docs",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "nexolute"
        },
        "content": "\u003d IchiFund"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": "ifdef::env-github,env-browser[:relfileprefix: docs/]"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "nexolute"
        },
        "content": "https://travis-ci.org/AY1920S1-CS2103T-W12-4/main[image:https://travis-ci.org/AY1920S1-CS2103T-W12-4/main.svg?branch\u003dmaster[Build Status]]"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "nexolute"
        },
        "content": "https://coveralls.io/github/AY1920S1-CS2103T-W12-4/main?branch\u003dmaster[image:https://coveralls.io/repos/github/AY1920S1-CS2103T-W12-4/main/badge.svg?branch\u003dmaster[Coverage Status]]"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "ifdef::env-github[]"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "image::docs/images/Ui.png[width\u003d\"600\"]"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "endif::[]"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "ifndef::env-github[]"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "image::images/Ui.png[width\u003d\"600\"]"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "endif::[]"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "nexolute"
        },
        "content": "Are you a student? Are you feeling money is hard to come by? Are you feeling the pressure of having to take responsibility of your own future? We have the right product for you."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "nexolute"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "nexolute"
        },
        "content": "Introducing IchiFund, the next-generation financial tracking app for students like you and me."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "nexolute"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "nexolute"
        },
        "content": "With IchiFund, you can handle your daily transactions, keep track of your loans, set your budget, and analyse your spending!"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Site Map"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "* \u003c\u003cUserGuide#, User Guide\u003e\u003e"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "* \u003c\u003cDeveloperGuide#, Developer Guide\u003e\u003e"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "* \u003c\u003cLearningOutcomes#, Learning Outcomes\u003e\u003e"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "* \u003c\u003cAboutUs#, About Us\u003e\u003e"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "* \u003c\u003cContactUs#, Contact Us\u003e\u003e"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Acknowledgements"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "* The original source code for this application is the AddressBook-Level3 project at https://se-education.org created by SE-EDU."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "* Libraries used: https://openjfx.io/[JavaFX], https://github.com/FasterXML/jackson[Jackson], https://github.com/junit-team/junit5[JUnit5]"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Licence : link:LICENSE[MIT]"
      }
    ],
    "authorContributionMap": {
      "nexolute": 8,
      "weiyang13": 1,
      "-": 25
    }
  },
  {
    "path": "build.gradle",
    "fileType": "other",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "// Gradle Configuration File"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": "// For more details take a look at the Java Quickstart chapter in the Gradle"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "// user guide available at http://gradle.org/docs/5.2.1/userguide/tutorial_java_projects.html"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import org.gradle.api.tasks.testing.logging.TestLogEvent"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "plugins {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "    id \u0027java\u0027"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "    id \u0027jacoco\u0027"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "    id \u0027checkstyle\u0027"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "    id \u0027com.github.kt3k.coveralls\u0027 version \u00272.4.0\u0027"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    id \u0027com.github.johnrengelman.shadow\u0027 version \u00274.0.4\u0027"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "    id \u0027org.asciidoctor.convert\u0027 version \u00271.5.6\u0027"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    id \u0027application\u0027"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "// Specifies the entry point of the application"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "nexolute"
        },
        "content": "mainClassName \u003d \u0027seedu.ichifund.Main\u0027"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "sourceCompatibility \u003d JavaVersion.VERSION_11"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "targetCompatibility \u003d JavaVersion.VERSION_11"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "repositories {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    mavenCentral()"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    maven { url \u0027https://oss.sonatype.org/content/repositories/snapshots/\u0027 }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "checkstyle {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    toolVersion \u003d \u00278.1\u0027"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "jacocoTestReport {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    reports {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        xml.enabled false"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "        csv.enabled false"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        html.destination file(\"${buildDir}/jacocoHtml\")"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "test {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    useJUnitPlatform()"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "dependencies {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    String jUnitVersion \u003d \u00275.4.0\u0027"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    String javaFxVersion \u003d \u002711\u0027"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-base\u0027, version: javaFxVersion, classifier: \u0027win\u0027"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-base\u0027, version: javaFxVersion, classifier: \u0027mac\u0027"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-base\u0027, version: javaFxVersion, classifier: \u0027linux\u0027"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-controls\u0027, version: javaFxVersion, classifier: \u0027win\u0027"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-controls\u0027, version: javaFxVersion, classifier: \u0027mac\u0027"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-controls\u0027, version: javaFxVersion, classifier: \u0027linux\u0027"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-fxml\u0027, version: javaFxVersion, classifier: \u0027win\u0027"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-fxml\u0027, version: javaFxVersion, classifier: \u0027mac\u0027"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-fxml\u0027, version: javaFxVersion, classifier: \u0027linux\u0027"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-graphics\u0027, version: javaFxVersion, classifier: \u0027win\u0027"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-graphics\u0027, version: javaFxVersion, classifier: \u0027mac\u0027"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-graphics\u0027, version: javaFxVersion, classifier: \u0027linux\u0027"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    implementation group: \u0027com.fasterxml.jackson.core\u0027, name: \u0027jackson-databind\u0027, version: \u00272.7.0\u0027"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "    implementation group: \u0027com.fasterxml.jackson.datatype\u0027, name: \u0027jackson-datatype-jsr310\u0027, version: \u00272.7.4\u0027"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "    testImplementation group: \u0027org.junit.jupiter\u0027, name: \u0027junit-jupiter-api\u0027, version: jUnitVersion"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "    testRuntimeOnly group: \u0027org.junit.jupiter\u0027, name: \u0027junit-jupiter-engine\u0027, version: jUnitVersion"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "shadowJar {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "    archiveName \u003d \u0027ichifund.jar\u0027"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "    destinationDir \u003d file(\"${buildDir}/jar/\")"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "task coverage(type: JacocoReport) {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "    sourceDirectories.from files(sourceSets.main.allSource.srcDirs)"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "    classDirectories.from files(sourceSets.main.output)"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "    executionData.from files(jacocoTestReport.executionData)"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "    afterEvaluate {"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "        classDirectories.from files(classDirectories.files.collect {"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "            fileTree(dir: it, exclude: [\u0027**/*.jar\u0027])"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "        })"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "    reports {"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "        html.enabled \u003d true"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "        xml.enabled \u003d true"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "coveralls {"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "    sourceDirs \u003d sourceSets.main.allSource.srcDirs.absolutePath"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "    jacocoReportPath \u003d \"${buildDir}/reports/jacoco/coverage/coverage.xml\""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "tasks.coveralls {"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "    dependsOn coverage"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "    onlyIf { System.env.\u0027CI\u0027 }"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "test {"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "    testLogging {"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "        events TestLogEvent.FAILED, TestLogEvent.SKIPPED"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "        // Prints the currently running test\u0027s name in the CI\u0027s build log,"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "        // so that we can check if tests are being silently skipped or"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "        // stalling the build."
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "        if (System.env.\u0027CI\u0027) {"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "            events \u003c\u003c TestLogEvent.STARTED"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "    jacoco {"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "        destinationFile \u003d new File(\"${buildDir}/jacoco/test.exec\")"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "asciidoctor {"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "    backends \u0027html5\u0027"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "    sourceDir \u0027docs\u0027"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "    outputDir \"${buildDir}/docs\""
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "    options \u003d ["
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "        template_dirs: [file(\"${sourceDir}/templates\")],"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "    ]"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "    attributes \u003d ["
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "        linkcss: true,"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "        stylesheet: \u0027gh-pages.css\u0027,"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "        \u0027source-highlighter\u0027: \u0027coderay\u0027,"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "        icons: \u0027font\u0027,"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "        experimental: true,"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "        sectlinks: true,"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "        idprefix: \u0027\u0027,  // for compatibility with GitHub preview"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "        idseparator: \u0027-\u0027,"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": "        \u0027site-root\u0027: \"${sourceDir}\",  // must be the same as sourceDir, do not modify"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "        \u0027site-name\u0027: \u0027IchiFund\u0027,"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "        \u0027site-githuburl\u0027: \u0027https://github.com/AY1920S1-CS2103T-W12-4/main\u0027"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": "    ]"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": "    options[\u0027template_dirs\u0027].each {"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": "        inputs.files fileTree(it)"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": "// Copies stylesheets into the directory containing generated HTML files as"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": "// Asciidoctor does not copy linked CSS files to the output directory when rendering."
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": "// This is needed for linked stylesheets and embedded stylesheets which import other files."
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": "task copyStylesheets(type: Copy) {"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": "    from \"${asciidoctor.sourceDir}/stylesheets\""
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": "    into \"${asciidoctor.outputDir}/html5/stylesheets\""
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": "asciidoctor.dependsOn copyStylesheets"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "-"
        },
        "content": "defaultTasks \u0027clean\u0027, \u0027test\u0027, \u0027coverage\u0027, \u0027asciidoctor\u0027"
      }
    ],
    "authorContributionMap": {
      "nexolute": 1,
      "weiyang13": 3,
      "-": 150
    }
  },
  {
    "path": "docs/AboutUs.adoc",
    "fileType": "docs",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d About Us"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ":site-section: AboutUs"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": ":relfileprefix: team/"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ":imagesDir: images"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ":stylesDir: stylesheets"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "nexolute"
        },
        "content": "IchiFund was developed by the https://github.com/AY1920S1-CS2103T-W12-4[CS2103T-W12-4] team. +"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "nexolute"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "We are a team based in the http://www.comp.nus.edu.sg[School of Computing, National University of Singapore]."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Project Team"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "nexolute"
        },
        "content": "\u003d\u003d\u003d Andrew Sim"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "nexolute"
        },
        "content": "image::andrewscw.png[width\u003d\"150\" align\u003d\"left\"]"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "nexolute"
        },
        "content": "{empty}[https://github.com/andrewscw[github]] [\u003c\u003candrewscw#, portfolio\u003e\u003e]"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "Role: Project Advisor"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "\u0027\u0027\u0027"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "nexolute"
        },
        "content": "\u003d\u003d\u003d Eugene Lim"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "nexolute"
        },
        "content": "image::nexolute.png[width\u003d\"150\", align\u003d\"left\"]"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "nexolute"
        },
        "content": "{empty}[http://github.com/nexolute[github]] [\u003c\u003cnexolute#, portfolio\u003e\u003e]"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "nexolute"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "nexolute"
        },
        "content": "Role: Team Lead and Git Expert"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "nexolute"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "nexolute"
        },
        "content": "\u0027\u0027\u0027"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "nexolute"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "nexolute"
        },
        "content": "\u003d\u003d\u003d Lee Yiyuan"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "nexolute"
        },
        "content": "image::leeyiyuan.png[width\u003d\"150\", align\u003d\"left\"]"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "nexolute"
        },
        "content": "{empty}[http://github.com/LeeYiyuan[github]] [\u003c\u003cleeyiyuan#, portfolio\u003e\u003e]"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "nexolute"
        },
        "content": "Role: Code Quality and Integration"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "\u0027\u0027\u0027"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "nexolute"
        },
        "content": "\u003d\u003d\u003d Tan Wei Yang"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "nexolute"
        },
        "content": "image::weiyang13.png[width\u003d\"150\", align\u003d\"left\"]"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "nexolute"
        },
        "content": "{empty}[http://github.com/weiyang13[github]] [\u003c\u003cweiyang13#, portfolio\u003e\u003e]"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "nexolute"
        },
        "content": "Role: Documentation"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "\u0027\u0027\u0027"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "nexolute"
        },
        "content": "\u003d\u003d\u003d Olivia Yu"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "nexolute"
        },
        "content": "image::alaete.png[width\u003d\"150\", align\u003d\"left\"]"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "nexolute"
        },
        "content": "{empty}[http://github.com/Alaete[github]] [\u003c\u003calaete#, portfolio\u003e\u003e]"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "nexolute"
        },
        "content": "Role: Testing"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "\u0027\u0027\u0027"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "nexolute"
        },
        "content": "\u003d\u003d\u003d Kartike Khandelwal"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "nexolute"
        },
        "content": "image::troomtroom.png[width\u003d\"150\", align\u003d\"left\"]"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "nexolute"
        },
        "content": "{empty}[http://github.com/troomtroom[github]] [\u003c\u003ctroomtroom#, portfolio\u003e\u003e]"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "nexolute"
        },
        "content": "Role: In Charge of UI"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "\u0027\u0027\u0027"
      }
    ],
    "authorContributionMap": {
      "nexolute": 29,
      "-": 30
    }
  },
  {
    "path": "docs/ContactUs.adoc",
    "fileType": "docs",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d Contact Us"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ":site-section: ContactUs"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": ":stylesDir: stylesheets"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "nexolute"
        },
        "content": "* *Bug reports, Suggestions* : Post in our https://github.com/AY1920S1-CS2103T-W12-4/main/issues[issue tracker] if you noticed bugs or have suggestions on how to improve."
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "* *Contributing* : We welcome pull requests. Follow the process described https://github.com/oss-generic/process[here]"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "nexolute"
        },
        "content": "* *Email us* : You can also reach us at `elimwj [at] comp.nus.edu.sg`"
      }
    ],
    "authorContributionMap": {
      "nexolute": 2,
      "-": 5
    }
  },
  {
    "path": "docs/DevOps.adoc",
    "fileType": "docs",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "nexolute"
        },
        "content": "\u003d IchiFund - Dev Ops"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ":site-section: DeveloperGuide"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": ":toc:"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ":toc-title:"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ":toc-placement: preamble"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ":sectnums:"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ":imagesDir: images"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ":stylesDir: stylesheets"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ":xrefstyle: full"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "ifdef::env-github[]"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ":tip-caption: :bulb:"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ":note-caption: :information_source:"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ":warning-caption: :warning:"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "endif::[]"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ":repoURL: https://github.com/se-edu/addressbook-level3/tree/master"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Build Automation"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "See \u003c\u003cUsingGradle#, UsingGradle.adoc\u003e\u003e to learn how to use Gradle for build automation."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Continuous Integration"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "We use https://travis-ci.org/[Travis CI] and https://www.appveyor.com/[AppVeyor] to perform _Continuous Integration_ on our projects. See \u003c\u003cUsingTravis#, UsingTravis.adoc\u003e\u003e and \u003c\u003cUsingAppVeyor#, UsingAppVeyor.adoc\u003e\u003e for more details."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Coverage Reporting"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "We use https://coveralls.io/[Coveralls] to track the code coverage of our projects. See \u003c\u003cUsingCoveralls#, UsingCoveralls.adoc\u003e\u003e for more details."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Documentation Previews"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "When a pull request has changes to asciidoc files, you can use https://www.netlify.com/[Netlify] to see a preview of how the HTML version of those asciidoc files will look like when the pull request is merged. See \u003c\u003cUsingNetlify#, UsingNetlify.adoc\u003e\u003e for more details."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Making a Release"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "Here are the steps to create a new release."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": ".  Update the version number in link:{repoURL}/src/main/java/seedu/address/MainApp.java[`MainApp.java`]."
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": ".  Generate a JAR file \u003c\u003cUsingGradle#creating-the-jar-file, using Gradle\u003e\u003e."
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ".  Tag the repo with the version number. e.g. `v0.1`"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ".  https://help.github.com/articles/creating-releases/[Create a new release using GitHub] and upload the JAR file you created."
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Managing Dependencies"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "A project often depends on third-party libraries. For example, Address Book depends on the https://github.com/FasterXML/jackson[Jackson library] for JSON parsing. Managing these _dependencies_ can be automated using Gradle. For example, Gradle can download the dependencies automatically, which is better than these alternatives:"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "[loweralpha]"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ". Include those libraries in the repo (this bloats the repo size)"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": ". Require developers to download those libraries manually (this creates extra work for developers)"
      }
    ],
    "authorContributionMap": {
      "nexolute": 1,
      "-": 47
    }
  },
  {
    "path": "docs/DeveloperGuide.adoc",
    "fileType": "docs",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "nexolute"
        },
        "content": "\u003d IchiFund - Developer Guide"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ":site-section: DeveloperGuide"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": ":toc:"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ":toc-title:"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ":toc-placement: preamble"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ":sectnums:"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ":imagesDir: images"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ":stylesDir: stylesheets"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ":xrefstyle: full"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "ifdef::env-github[]"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ":tip-caption: :bulb:"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ":note-caption: :information_source:"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ":warning-caption: :warning:"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "endif::[]"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "nexolute"
        },
        "content": ":repoURL: https://github.com/AY1920S1-CS2103T-W12-4/main"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "weiyang13"
        },
        "content": ":drawioURL:"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "nexolute"
        },
        "content": "By: `Team AY1920S1-CS2103T-W12-4`      Since: `Sep 2019`      Licence: `MIT`"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "\u003d\u003d Introduction"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "weiyang13"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "IchiFund is a financial tracking application that manages transactions, loans, as well as budgets."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "weiyang13"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "Shown below is the GUI of IchiFund:"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "weiyang13"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "image::Ui.png[]"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "weiyang13"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "This document serves to give an introduction to the architecture of IchiFund for developers who wish to"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "modify the software, or simply to understand how it works. We describe the high-level architecture, and also delve into"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "important details of the implementation of each feature."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Setting up"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "Refer to the guide \u003c\u003cSettingUp#, here\u003e\u003e."
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Design"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "[[Design-Architecture]]"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Architecture"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ".Architecture Diagram"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "image::ArchitectureDiagram.png[]"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "The *_Architecture Diagram_* given above explains the high-level design of the App. Given below is a quick overview of each component."
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "[TIP]"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "The `.drawio` files used to create diagrams in this document can be found in the link:{repoURL}/docs/diagrams/[diagrams] folder."
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "To edit, go to {drawioURL} and import the `.drawio` files in the repository."
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "`Main` has two classes called link:{repoURL}/src/main/java/seedu/address/Main.java[`Main`] and link:{repoURL}/src/main/java/seedu/address/MainApp.java[`MainApp`]. It is responsible for,"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "* At app launch: Initializes the components in the correct sequence, and connects them up with each other."
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "* At shut down: Shuts down the components and invokes cleanup method where necessary."
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c\u003cDesign-Commons,*`Commons`*\u003e\u003e represents a collection of classes used by multiple other components."
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "The following class plays an important role at the architecture level:"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "* `LogsCenter` : Used by many classes to write log messages to the App\u0027s log file."
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "The rest of the App consists of four components."
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "* \u003c\u003cDesign-Ui,*`UI`*\u003e\u003e: The UI of the App."
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "* \u003c\u003cDesign-Logic,*`Logic`*\u003e\u003e: The command executor."
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "* \u003c\u003cDesign-Model,*`Model`*\u003e\u003e: Holds the data of the App in-memory."
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "* \u003c\u003cDesign-Storage,*`Storage`*\u003e\u003e: Reads data from, and writes data to, the hard disk."
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "Each of the four components"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "* Defines its _API_ in an `interface` with the same name as the Component."
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "* Exposes its functionality using a `{Component Name}Manager` class."
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "For example, the `Logic` component (see the class diagram given below) defines it\u0027s API in the `Logic.java` interface and exposes its functionality using the `LogicManager.java` class."
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": ".Class Diagram of the Logic Component"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "image::LogicClassDiagram.png[]"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "[discrete]"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d\u003d How the architecture components interact with each other"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "The _Sequence Diagram_ below shows how the components interact with each other for the scenario where the user issues the command `delete 1`."
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": ".Component interactions for `delete 1` command"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "image::ArchitectureSequenceDiagram.png[]"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "The sections below give more details of each component."
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "[[Design-Ui]]"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d UI component"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": ".Structure of the UI Component"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "image::UiClassDiagram.png[]"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "*API* : link:{repoURL}/src/main/java/seedu/address/ui/Ui.java[`Ui.java`]"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "The UI consists of a `MainWindow` that is made up of parts e.g.`CommandBox`, `ResultDisplay`, `TransactionListPanel`, `StatusBarFooter` etc. All these, including the `MainWindow`, inherit from the abstract `UiPart` class."
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "The `UI` component uses JavaFx UI framework. The layout of these UI parts are defined in matching `.fxml` files that are in the `src/main/resources/view` folder. For example, the layout of the link:{repoURL}/src/main/java/seedu/address/ui/MainWindow.java[`MainWindow`] is specified in link:{repoURL}/src/main/resources/view/MainWindow.fxml[`MainWindow.fxml`]"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "The `UI` component,"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "* Executes user commands using the `Logic` component."
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "* Listens for changes to `Model` data so that the UI can be updated with the modified data."
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "* Listens for changes to the index of the `FeatureParser` used by the `Logic` component to change tabs."
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "* Sets the `FeatureParser` used by the `Logic` component when the user manually changes tabs."
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "[[Design-Logic]]"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Logic component"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "[[fig-LogicClassDiagram]]"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": ".Structure of the Logic Component"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "image::LogicClassDiagram.png[]"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "*API* :"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "link:{repoURL}/src/main/java/seedu/address/logic/Logic.java[`Logic.java`]"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "weiyang13"
        },
        "content": ".  `Logic` uses the `IchiFundParser` class to parse the user command."
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": ".  This results in a `Command` object which is executed by the `LogicManager`."
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": ".  The command execution can affect the `Model` (e.g. adding a person)."
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": ".  The result of the command execution is encapsulated as a `CommandResult` object which is passed back to the `Ui`."
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": ".  In addition, the `CommandResult` object can also instruct the `Ui` to perform certain actions, such as displaying help to the user."
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "Given below is the Sequence Diagram for interactions within the `Logic` component for the `execute(\"delete 1\")` API call."
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": ".Interactions Inside the Logic Component for the `delete 1` Command"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "image::DeleteSequenceDiagram.png[]"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "[[Design-Model]]"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Model component"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": ".Structure of the Model Component"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "image::ModelClassDiagram.png[]"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "*API* : link:{repoURL}/src/main/java/seedu/address/model/Model.java[`Model.java`]"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": "The `Model`,"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": "* stores a `UserPref` object that represents the user\u0027s preferences."
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": "* stores the Address Book data."
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": "* exposes an unmodifiable `ObservableList\u003cPerson\u003e` that can be \u0027observed\u0027 e.g. the UI can be bound to this list so that the UI automatically updates when the data in the list change."
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": "* does not depend on any of the other three components."
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": "[NOTE]"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": "As a more OOP model, we can store a `Tag` list in `Address Book`, which `Person` can reference. This would allow `Address Book` to only require one `Tag` object per unique `Tag`, instead of each `Person` needing their own `Tag` object. An example of how such a model may look like is given below. +"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": " +"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "nexolute"
        },
        "content": "image:ModelClassDiagram.png[]"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": "[[Design-Storage]]"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Storage component"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": ".Structure of the Storage Component"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": "image::StorageClassDiagram.png[]"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": "*API* : link:{repoURL}/src/main/java/seedu/address/storage/Storage.java[`Storage.java`]"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "-"
        },
        "content": "The `Storage` component,"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "-"
        },
        "content": "* can save `UserPref` objects in json format and read it back."
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "-"
        },
        "content": "* can save the Address Book data in json format and read it back."
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "-"
        },
        "content": "[[Design-Commons]]"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Common classes"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "-"
        },
        "content": "Classes used by multiple components are in the `seedu.addressbook.commons` package."
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Implementation"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "-"
        },
        "content": "This section describes some noteworthy details on how certain features are implemented."
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "nexolute"
        },
        "content": "\u003d\u003d\u003d Global Features"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "nexolute"
        },
        "content": ""
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "nexolute"
        },
        "content": "// tag::tabswitching[]"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "nexolute"
        },
        "content": "\u003d\u003d\u003d\u003d Separate Parsing and Tab Switching"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "In IchiFund, we separate the features by tabs. This is illustrated in the image below, which displays the five"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "tabs of IchiFund, with the \"Transaction\" tab selected:"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "weiyang13"
        },
        "content": ""
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "[[fig-FeatureTabs]]"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "weiyang13"
        },
        "content": ".Feature Tabs in IchiFund"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "image::FeatureTabs.png[]"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "weiyang13"
        },
        "content": ""
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "The parsing of commands for each feature is done separately, tied to their respective tabs."
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "In other words, the commands specific to each feature can only be recognised when the feature is selected as the"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "current tab."
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "This allows for the overloading of commands across different features, reducing the complexity of commands for users."
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "weiyang13"
        },
        "content": ""
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "\u003d\u003d\u003d\u003d\u003d Implementation"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "There are two aspects to consider in implementing separate parsing:"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "weiyang13"
        },
        "content": ""
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "* Detecting when the user switches tabs and communicating this to the `Logic` component"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "* Determining how to parse commands on the end of `Logic` given which tab is selected."
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "weiyang13"
        },
        "content": ""
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "In our implementation, we first separate the parsing of commands for different features by delegating them to their"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "respective `FeatureParser` parsers. The main parser, `IchiFundParser`, keeps track of all `FeatureParser` objects, as"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "well as the `FeatureParser` that is currently in use."
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "weiyang13"
        },
        "content": ""
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "This is illustrated in the object diagram below:"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "weiyang13"
        },
        "content": ""
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "image::ParserObjectDiagram.png[]"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "weiyang13"
        },
        "content": ""
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "When `IchiFundParser` parses a command, it first checks whether it is a global command (e.g. `help`, `exit`)."
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "Otherwise, it passes the command to `currentParserManager`, which checks if it is a valid command, and passes the"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "arguments to the appropriate `Parser`."
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "weiyang13"
        },
        "content": ""
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "What remains is determining when to change `currentParserManager`. Here, we support 3 modes of tab switching:"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "weiyang13"
        },
        "content": ""
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "1. Specific commands (CLI)"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "weiyang13"
        },
        "content": ""
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "Users can switch between tabs using specific commands (`tx`, `rep`, `budget`, `loan`, `analytics`)."
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "weiyang13"
        },
        "content": ""
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "These commands are global commands that are directly recognised by `IchiFundParser`, which changes"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "`currentFeatureParser` and the index stored."
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "weiyang13"
        },
        "content": ""
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "Much like the `Model` data, `MainWindow` listens to changes to the index through `FeatureParserIndexListener`."
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "Whenever the value of the index changes, the listener triggers an event to change the tab throw the `invalidated()`"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "method shown in the code snippet below:"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "weiyang13"
        },
        "content": ""
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "image::ListenerCodeSnippet.png[]"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "weiyang13"
        },
        "content": ""
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "The `InvalidationListener` constructed from the above code is added to an `ObservableValue` in `MainWindow`"
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "that tracks the index of the current `FeatureParser` used, and changes to the appropriate tab using"
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "the value of the index stored."
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "weiyang13"
        },
        "content": ""
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "[start \u003d 2]"
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "1. Shortcut keys (GUI)"
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "weiyang13"
        },
        "content": ""
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "Users can also switch tabs using the shortcut keys `Ctrl + 1` to `Ctrl + 5`. Upon using the shortcut keys,"
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "the following handler is triggered:"
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "weiyang13"
        },
        "content": ""
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "image::MainWindowShortcutKeyCodeSnippet.png[]"
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "weiyang13"
        },
        "content": ""
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "When `handleShowTransaction()` is called, `currentFeatureParser` in `IchiFundParser`, is set to"
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "`TransactionFeatureParser`, which has a `tabIndex` of zero. Other handler methods are similar to"
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "`handleShowTransaction`, with the only difference being the index passed to `Logic`."
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "weiyang13"
        },
        "content": ""
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "The control flow of `handleShowTransaction()` is illustrated with more details in the sequence diagram below:"
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "weiyang13"
        },
        "content": ""
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "image::SetFeatureParserSequenceDiagram.png[]"
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "weiyang13"
        },
        "content": ""
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "As the different `FeatureParser` objects have different values for `tabIndex`, a different"
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "index is passed, and a different `FeatureParser` is set as `currentFeatureParser`."
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "weiyang13"
        },
        "content": ""
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "[NOTE]"
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "After the handler method is run, the change in `IchiFundParser` is also detected by"
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "`InvalidationListener`, which results in a tab switch similar to how the specific commands would."
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "weiyang13"
        },
        "content": ""
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "[WARNING]"
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "For developers who wish to add more features to IchiFund, care has to be taken in ensuring that the indices of the"
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "`FeatureParser` objects matches that of the tabs, as well as its index in `featureParsers`."
      },
      {
        "lineNumber": 248,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "In our current implementation, we do not use enum for the indices due to the small scale of usage."
      },
      {
        "lineNumber": 249,
        "author": {
          "gitId": "weiyang13"
        },
        "content": ""
      },
      {
        "lineNumber": 250,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "[start \u003d 3]"
      },
      {
        "lineNumber": 251,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "1. Clicking of tabs (GUI)"
      },
      {
        "lineNumber": 252,
        "author": {
          "gitId": "weiyang13"
        },
        "content": ""
      },
      {
        "lineNumber": 253,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "Users can switch tabs by clicking on the tabs shown in \u003c\u003cfig-FeatureTabs\u003e\u003e."
      },
      {
        "lineNumber": 254,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "This triggers a handler, shown in the following code snippet:"
      },
      {
        "lineNumber": 255,
        "author": {
          "gitId": "weiyang13"
        },
        "content": ""
      },
      {
        "lineNumber": 256,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "image::MainWindowMouseCodeSnippet.png[]"
      },
      {
        "lineNumber": 257,
        "author": {
          "gitId": "weiyang13"
        },
        "content": ""
      },
      {
        "lineNumber": 258,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "The control flow for this handler is similar to that of the shortcut keys."
      },
      {
        "lineNumber": 259,
        "author": {
          "gitId": "weiyang13"
        },
        "content": ""
      },
      {
        "lineNumber": 260,
        "author": {
          "gitId": "nexolute"
        },
        "content": "\u003d\u003d\u003d\u003d\u003d Design Considerations"
      },
      {
        "lineNumber": 261,
        "author": {
          "gitId": "weiyang13"
        },
        "content": ""
      },
      {
        "lineNumber": 262,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "In designing the specific commands for tab switching, we considered an alternative implementation for"
      },
      {
        "lineNumber": 263,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "passing information about tab switching to `Ui`."
      },
      {
        "lineNumber": 264,
        "author": {
          "gitId": "weiyang13"
        },
        "content": ""
      },
      {
        "lineNumber": 265,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "* **Alternative 1 (current choice):** `Ui` detects change through an `InvalidationListener`."
      },
      {
        "lineNumber": 266,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "** Pros: `Logic` does not need to be aware of `Ui`."
      },
      {
        "lineNumber": 267,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "** Cons: Requires greater understanding of JavaFX API to implement."
      },
      {
        "lineNumber": 268,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "* **Alternative 2:** `Logic` directly calls `Ui` whenever the specific command is made."
      },
      {
        "lineNumber": 269,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "** Pros: Easy to implement."
      },
      {
        "lineNumber": 270,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "** Cons: Creates a dependency from `Logic` to `Ui`."
      },
      {
        "lineNumber": 271,
        "author": {
          "gitId": "weiyang13"
        },
        "content": ""
      },
      {
        "lineNumber": 272,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "While Alternative 2 is much simpler to implement, we chose Alternative 1"
      },
      {
        "lineNumber": 273,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "as we prioritised preserving the independence of `Logic` from `Ui`."
      },
      {
        "lineNumber": 274,
        "author": {
          "gitId": "weiyang13"
        },
        "content": ""
      },
      {
        "lineNumber": 275,
        "author": {
          "gitId": "nexolute"
        },
        "content": "// end::tabswitching[]"
      },
      {
        "lineNumber": 276,
        "author": {
          "gitId": "nexolute"
        },
        "content": ""
      },
      {
        "lineNumber": 277,
        "author": {
          "gitId": "nexolute"
        },
        "content": "// tag::tasks[]"
      },
      {
        "lineNumber": 278,
        "author": {
          "gitId": "nexolute"
        },
        "content": "\u003d\u003d\u003d\u003d Tasks"
      },
      {
        "lineNumber": 279,
        "author": {
          "gitId": "nexolute"
        },
        "content": "Some models in IchiFund must be refreshed after a command is executed."
      },
      {
        "lineNumber": 280,
        "author": {
          "gitId": "nexolute"
        },
        "content": "For instance, when a new `Transaction` is added, all `Budget` must be recomputed."
      },
      {
        "lineNumber": 281,
        "author": {
          "gitId": "nexolute"
        },
        "content": "`Task` can be used to facilitate such updates."
      },
      {
        "lineNumber": 282,
        "author": {
          "gitId": "nexolute"
        },
        "content": ""
      },
      {
        "lineNumber": 283,
        "author": {
          "gitId": "nexolute"
        },
        "content": "\u003d\u003d\u003d\u003d\u003d Implementation"
      },
      {
        "lineNumber": 284,
        "author": {
          "gitId": "nexolute"
        },
        "content": "This feature is managed by `TaskManager`."
      },
      {
        "lineNumber": 285,
        "author": {
          "gitId": "nexolute"
        },
        "content": "The role of `TaskManager` is to maintain a list of all active `Task`."
      },
      {
        "lineNumber": 286,
        "author": {
          "gitId": "nexolute"
        },
        "content": ""
      },
      {
        "lineNumber": 287,
        "author": {
          "gitId": "nexolute"
        },
        "content": "The `LogicManager` holds an instance of the `TaskManager`."
      },
      {
        "lineNumber": 288,
        "author": {
          "gitId": "nexolute"
        },
        "content": "When the `LogicManager#execute()` is called, the following chain of operations occurs:"
      },
      {
        "lineNumber": 289,
        "author": {
          "gitId": "nexolute"
        },
        "content": ""
      },
      {
        "lineNumber": 290,
        "author": {
          "gitId": "nexolute"
        },
        "content": "1. After `Command#execute()` is completed, `TaskManager#executeAll()` is called."
      },
      {
        "lineNumber": 291,
        "author": {
          "gitId": "nexolute"
        },
        "content": ""
      },
      {
        "lineNumber": 292,
        "author": {
          "gitId": "nexolute"
        },
        "content": "image::TaskCode.png[]"
      },
      {
        "lineNumber": 293,
        "author": {
          "gitId": "nexolute"
        },
        "content": ""
      },
      {
        "lineNumber": 294,
        "author": {
          "gitId": "nexolute"
        },
        "content": "[start\u003d2]"
      },
      {
        "lineNumber": 295,
        "author": {
          "gitId": "nexolute"
        },
        "content": "2. `TaskManager#executeAll()` will iterate through all active `Task` and call the respective `Task#execute()` method."
      },
      {
        "lineNumber": 296,
        "author": {
          "gitId": "nexolute"
        },
        "content": "// end::tasks[]"
      },
      {
        "lineNumber": 297,
        "author": {
          "gitId": "nexolute"
        },
        "content": ""
      },
      {
        "lineNumber": 298,
        "author": {
          "gitId": "nexolute"
        },
        "content": "\u003d\u003d\u003d Transaction"
      },
      {
        "lineNumber": 299,
        "author": {
          "gitId": "nexolute"
        },
        "content": ""
      },
      {
        "lineNumber": 300,
        "author": {
          "gitId": "nexolute"
        },
        "content": "// tag::transfilter[]"
      },
      {
        "lineNumber": 301,
        "author": {
          "gitId": "nexolute"
        },
        "content": "\u003d\u003d\u003d\u003d Filtering Transactions"
      },
      {
        "lineNumber": 302,
        "author": {
          "gitId": "weiyang13"
        },
        "content": ""
      },
      {
        "lineNumber": 303,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "The filter transactions feature allows the user to change the filter for the list of transactions."
      },
      {
        "lineNumber": 304,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "This feature is facilitated by `TransactionFeatureParser`, `FilterTransactionCommandParser`, and `TransactionCommand`."
      },
      {
        "lineNumber": 305,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "The arguments supported by this feature includes:"
      },
      {
        "lineNumber": 306,
        "author": {
          "gitId": "weiyang13"
        },
        "content": ""
      },
      {
        "lineNumber": 307,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "- `Month` (optional)"
      },
      {
        "lineNumber": 308,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "- `Year` (optional)"
      },
      {
        "lineNumber": 309,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "- `Category` (optional)"
      },
      {
        "lineNumber": 310,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "- `TransactionType` (optional)"
      },
      {
        "lineNumber": 311,
        "author": {
          "gitId": "weiyang13"
        },
        "content": ""
      },
      {
        "lineNumber": 312,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "Although all arguments are optional, the user has to input at least one argument for the command"
      },
      {
        "lineNumber": 313,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "to be valid."
      },
      {
        "lineNumber": 314,
        "author": {
          "gitId": "weiyang13"
        },
        "content": ""
      },
      {
        "lineNumber": 315,
        "author": {
          "gitId": "nexolute"
        },
        "content": "\u003d\u003d\u003d\u003d\u003d Implementation"
      },
      {
        "lineNumber": 316,
        "author": {
          "gitId": "nexolute"
        },
        "content": "\u003d\u003d\u003d\u003d\u003d Design Considerations"
      },
      {
        "lineNumber": 317,
        "author": {
          "gitId": "nexolute"
        },
        "content": "// end::transfilter[]"
      },
      {
        "lineNumber": 318,
        "author": {
          "gitId": "nexolute"
        },
        "content": ""
      },
      {
        "lineNumber": 319,
        "author": {
          "gitId": "nexolute"
        },
        "content": "// tag::transadd[]"
      },
      {
        "lineNumber": 320,
        "author": {
          "gitId": "nexolute"
        },
        "content": "\u003d\u003d\u003d\u003d Adding Transactions"
      },
      {
        "lineNumber": 321,
        "author": {
          "gitId": "weiyang13"
        },
        "content": ""
      },
      {
        "lineNumber": 322,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "The add transaction feature allows the user to add a transaction into IchiFund."
      },
      {
        "lineNumber": 323,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "This feature is facilitated by `BudgetFeatureParser`, `AddBudgetCommandParser`, and `AddBudgetCommand`."
      },
      {
        "lineNumber": 324,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "The arguments supported by this feature includes:"
      },
      {
        "lineNumber": 325,
        "author": {
          "gitId": "weiyang13"
        },
        "content": ""
      },
      {
        "lineNumber": 326,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "- `Description`"
      },
      {
        "lineNumber": 327,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "- `Amount`"
      },
      {
        "lineNumber": 328,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "- `Category` (optional)"
      },
      {
        "lineNumber": 329,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "- `Day` (optional)"
      },
      {
        "lineNumber": 330,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "- `Month` (optional)"
      },
      {
        "lineNumber": 331,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "- `Year` (optional)"
      },
      {
        "lineNumber": 332,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "- `TransactionType` (optional)"
      },
      {
        "lineNumber": 333,
        "author": {
          "gitId": "weiyang13"
        },
        "content": ""
      },
      {
        "lineNumber": 334,
        "author": {
          "gitId": "nexolute"
        },
        "content": "\u003d\u003d\u003d\u003d\u003d Implementation"
      },
      {
        "lineNumber": 335,
        "author": {
          "gitId": "nexolute"
        },
        "content": "\u003d\u003d\u003d\u003d\u003d Design Considerations"
      },
      {
        "lineNumber": 336,
        "author": {
          "gitId": "nexolute"
        },
        "content": "// end::transadd[]"
      },
      {
        "lineNumber": 337,
        "author": {
          "gitId": "nexolute"
        },
        "content": ""
      },
      {
        "lineNumber": 338,
        "author": {
          "gitId": "LeeYiyuan"
        },
        "content": "\u003d\u003d\u003d Repeaters"
      },
      {
        "lineNumber": 339,
        "author": {
          "gitId": "LeeYiyuan"
        },
        "content": ""
      },
      {
        "lineNumber": 340,
        "author": {
          "gitId": "LeeYiyuan"
        },
        "content": "// tag::repeateradd[]"
      },
      {
        "lineNumber": 341,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "\u003d\u003d\u003d Adding Repeater : `add`"
      },
      {
        "lineNumber": 342,
        "author": {
          "gitId": "LeeYiyuan"
        },
        "content": ""
      },
      {
        "lineNumber": 343,
        "author": {
          "gitId": "LeeYiyuan"
        },
        "content": "\u003d\u003d\u003d\u003d Overview"
      },
      {
        "lineNumber": 344,
        "author": {
          "gitId": "LeeYiyuan"
        },
        "content": "This feature allows the user to add a repeater in IchiFund. Adding a repeater also creates the transactions associated with the added repeater."
      },
      {
        "lineNumber": 345,
        "author": {
          "gitId": "LeeYiyuan"
        },
        "content": ""
      },
      {
        "lineNumber": 346,
        "author": {
          "gitId": "LeeYiyuan"
        },
        "content": "\u003d\u003d\u003d\u003d Implementation"
      },
      {
        "lineNumber": 347,
        "author": {
          "gitId": "LeeYiyuan"
        },
        "content": "The `addrep` command is facilitated by the Logic and Model components of the application. Given below is an example usage scenario of how `addrep` behaves at each step."
      },
      {
        "lineNumber": 348,
        "author": {
          "gitId": "LeeYiyuan"
        },
        "content": ""
      },
      {
        "lineNumber": 349,
        "author": {
          "gitId": "LeeYiyuan"
        },
        "content": "*Step 1*: The user executes `addrep de/Phone bills a/42.15 c/Utilities ty/exp so/3 eo/2 sd/1 sm/1 sy/2019 ed/31 em/12 ey/2019` to add a repeater for phone bills with an amount of $42.15 on the third and second last day of every month between 1st January 2019 and 31st December 2019."
      },
      {
        "lineNumber": 350,
        "author": {
          "gitId": "LeeYiyuan"
        },
        "content": ""
      },
      {
        "lineNumber": 351,
        "author": {
          "gitId": "LeeYiyuan"
        },
        "content": "*Step 2*: `LogicManager` uses `IchiFundParser#parserCommand()` to parse the input from the user."
      },
      {
        "lineNumber": 352,
        "author": {
          "gitId": "LeeYiyuan"
        },
        "content": ""
      },
      {
        "lineNumber": 353,
        "author": {
          "gitId": "LeeYiyuan"
        },
        "content": "*Step 3*: `IchiFundParser` determines which command is being used and creates the respective `AddRepeaterCommandParser` parser with the user\u0027s input as an argument."
      },
      {
        "lineNumber": 354,
        "author": {
          "gitId": "LeeYiyuan"
        },
        "content": ""
      },
      {
        "lineNumber": 355,
        "author": {
          "gitId": "LeeYiyuan"
        },
        "content": "*Step 4*: `AddRepeaterCommandParser` does a validation check on the user\u0027s input before creating and returning an `AddRepeaterCommand` with desired `Repeater` as an argument."
      },
      {
        "lineNumber": 356,
        "author": {
          "gitId": "LeeYiyuan"
        },
        "content": ""
      },
      {
        "lineNumber": 357,
        "author": {
          "gitId": "LeeYiyuan"
        },
        "content": "*Step 5*: `LogicManager` uses `AddRepeaterCommand#execute()` to add the `Repeater` and the associated ``Transaction``s into the `Model` which is handled by `ModelManager`. In doing so, it also fetches the `RepeaterUniqueId` counter tracked by the `Model`, sets it as the created ``Repeater``\u0027s unique id, and increments the counter in the `Model` by 1."
      },
      {
        "lineNumber": 358,
        "author": {
          "gitId": "LeeYiyuan"
        },
        "content": ""
      },
      {
        "lineNumber": 359,
        "author": {
          "gitId": "LeeYiyuan"
        },
        "content": "*Step 6*: `AddRepeaterCommand` returns a `CommandResult` to the `LogicManager` which is returned back to the user."
      },
      {
        "lineNumber": 360,
        "author": {
          "gitId": "LeeYiyuan"
        },
        "content": "// end::repeateradd[]"
      },
      {
        "lineNumber": 361,
        "author": {
          "gitId": "LeeYiyuan"
        },
        "content": ""
      },
      {
        "lineNumber": 362,
        "author": {
          "gitId": "LeeYiyuan"
        },
        "content": "// tag::repeaterdelete[]"
      },
      {
        "lineNumber": 363,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "\u003d\u003d\u003d Deleting Repeater : `delete`"
      },
      {
        "lineNumber": 364,
        "author": {
          "gitId": "LeeYiyuan"
        },
        "content": ""
      },
      {
        "lineNumber": 365,
        "author": {
          "gitId": "LeeYiyuan"
        },
        "content": "\u003d\u003d\u003d\u003d Overview"
      },
      {
        "lineNumber": 366,
        "author": {
          "gitId": "LeeYiyuan"
        },
        "content": "This feature allows the user to delete repeater in IchiFund. Delete a repeater also deletes the transactions associated with the deleted repeater."
      },
      {
        "lineNumber": 367,
        "author": {
          "gitId": "LeeYiyuan"
        },
        "content": ""
      },
      {
        "lineNumber": 368,
        "author": {
          "gitId": "LeeYiyuan"
        },
        "content": "\u003d\u003d\u003d\u003d Implementation"
      },
      {
        "lineNumber": 369,
        "author": {
          "gitId": "LeeYiyuan"
        },
        "content": "The `delrep` command is facilitated by the Logic and Model components of the application. Given below is an example usage scenario of how `delrep` behaves at each step."
      },
      {
        "lineNumber": 370,
        "author": {
          "gitId": "LeeYiyuan"
        },
        "content": ""
      },
      {
        "lineNumber": 371,
        "author": {
          "gitId": "LeeYiyuan"
        },
        "content": "*Step 1*: The user executes `delrep 2` to delete the repeater in the 2nd index."
      },
      {
        "lineNumber": 372,
        "author": {
          "gitId": "LeeYiyuan"
        },
        "content": ""
      },
      {
        "lineNumber": 373,
        "author": {
          "gitId": "LeeYiyuan"
        },
        "content": "*Step 2*: `LogicManager` uses `IchiFundParser#parserCommand()` to parse the input from the user."
      },
      {
        "lineNumber": 374,
        "author": {
          "gitId": "LeeYiyuan"
        },
        "content": ""
      },
      {
        "lineNumber": 375,
        "author": {
          "gitId": "LeeYiyuan"
        },
        "content": "*Step 3*: `IchiFundParser` determines which command is being used and creates the respective `DeleteRepeaterCommandParser` parser with the user\u0027s input as an argument."
      },
      {
        "lineNumber": 376,
        "author": {
          "gitId": "LeeYiyuan"
        },
        "content": ""
      },
      {
        "lineNumber": 377,
        "author": {
          "gitId": "LeeYiyuan"
        },
        "content": "*Step 4*: `DeleteRepeaterCommandParser` does a validation check on the user\u0027s input before creating and returning an `DeleteRepeaterCommand` with desired `Index` as an argument."
      },
      {
        "lineNumber": 378,
        "author": {
          "gitId": "LeeYiyuan"
        },
        "content": ""
      },
      {
        "lineNumber": 379,
        "author": {
          "gitId": "LeeYiyuan"
        },
        "content": "*Step 5*: `LogicManager` uses `DeleteRepeaterCommand#execute()` to delete the `Repeater` and the associated ``Transaction``s from the `Model` which is handled by `ModelManager`."
      },
      {
        "lineNumber": 380,
        "author": {
          "gitId": "LeeYiyuan"
        },
        "content": ""
      },
      {
        "lineNumber": 381,
        "author": {
          "gitId": "LeeYiyuan"
        },
        "content": "*Step 6*: `DeleteRepeaterCommand` returns a `CommandResult` to the `LogicManager` which is returned back to the user."
      },
      {
        "lineNumber": 382,
        "author": {
          "gitId": "LeeYiyuan"
        },
        "content": "// end::repeaterdelete[]"
      },
      {
        "lineNumber": 383,
        "author": {
          "gitId": "LeeYiyuan"
        },
        "content": ""
      },
      {
        "lineNumber": 384,
        "author": {
          "gitId": "nexolute"
        },
        "content": "\u003d\u003d\u003d Budget"
      },
      {
        "lineNumber": 385,
        "author": {
          "gitId": "nexolute"
        },
        "content": ""
      },
      {
        "lineNumber": 386,
        "author": {
          "gitId": "nexolute"
        },
        "content": "// tag::budgetadd[]"
      },
      {
        "lineNumber": 387,
        "author": {
          "gitId": "nexolute"
        },
        "content": "\u003d\u003d\u003d\u003d Adding Budget"
      },
      {
        "lineNumber": 388,
        "author": {
          "gitId": "nexolute"
        },
        "content": ""
      },
      {
        "lineNumber": 389,
        "author": {
          "gitId": "nexolute"
        },
        "content": "The add budget feature allows the user to add a budget into IchiFund."
      },
      {
        "lineNumber": 390,
        "author": {
          "gitId": "nexolute"
        },
        "content": "This feature is facilitated by `BudgetFeatureParser`, `AddBudgetCommandParser`, and `AddBudgetCommand`."
      },
      {
        "lineNumber": 391,
        "author": {
          "gitId": "nexolute"
        },
        "content": "The arguments supported by this feature includes:"
      },
      {
        "lineNumber": 392,
        "author": {
          "gitId": "nexolute"
        },
        "content": ""
      },
      {
        "lineNumber": 393,
        "author": {
          "gitId": "nexolute"
        },
        "content": "- `Description`"
      },
      {
        "lineNumber": 394,
        "author": {
          "gitId": "nexolute"
        },
        "content": "- `Amount`"
      },
      {
        "lineNumber": 395,
        "author": {
          "gitId": "nexolute"
        },
        "content": "- `Category` (optional)"
      },
      {
        "lineNumber": 396,
        "author": {
          "gitId": "nexolute"
        },
        "content": "- `Month` (optional)"
      },
      {
        "lineNumber": 397,
        "author": {
          "gitId": "nexolute"
        },
        "content": "- `Year` (optional)"
      },
      {
        "lineNumber": 398,
        "author": {
          "gitId": "nexolute"
        },
        "content": ""
      },
      {
        "lineNumber": 399,
        "author": {
          "gitId": "nexolute"
        },
        "content": "\u003d\u003d\u003d\u003d\u003d Implementation"
      },
      {
        "lineNumber": 400,
        "author": {
          "gitId": "nexolute"
        },
        "content": ""
      },
      {
        "lineNumber": 401,
        "author": {
          "gitId": "nexolute"
        },
        "content": "When the user input the `add` command in the Budget tab, the following chain of operations occurs:"
      },
      {
        "lineNumber": 402,
        "author": {
          "gitId": "nexolute"
        },
        "content": ""
      },
      {
        "lineNumber": 403,
        "author": {
          "gitId": "nexolute"
        },
        "content": "1. The `IchiFundParser` will delegate the parsing of the command to `BudgetFeatureParser` if the current active tab is Budget."
      },
      {
        "lineNumber": 404,
        "author": {
          "gitId": "nexolute"
        },
        "content": ""
      },
      {
        "lineNumber": 405,
        "author": {
          "gitId": "nexolute"
        },
        "content": "2. The `BudgetFeatureParser` will delegate the parsing of the arguments to `AddBudgetCommandParser`."
      },
      {
        "lineNumber": 406,
        "author": {
          "gitId": "nexolute"
        },
        "content": ""
      },
      {
        "lineNumber": 407,
        "author": {
          "gitId": "nexolute"
        },
        "content": "3. `AddBudgetCommandParser#parse()` will take in a `String` input consisting of the arguments."
      },
      {
        "lineNumber": 408,
        "author": {
          "gitId": "nexolute"
        },
        "content": ""
      },
      {
        "lineNumber": 409,
        "author": {
          "gitId": "nexolute"
        },
        "content": "4. This arguments will be tokenized and the respective models for each argument are created."
      },
      {
        "lineNumber": 410,
        "author": {
          "gitId": "nexolute"
        },
        "content": ""
      },
      {
        "lineNumber": 411,
        "author": {
          "gitId": "nexolute"
        },
        "content": "5. If the parsing of all arguments are successful, a new `Budget` object is created using the arguments, and a new `AddBudgetCommand` is returned back to `LogicManager`."
      },
      {
        "lineNumber": 412,
        "author": {
          "gitId": "nexolute"
        },
        "content": ""
      },
      {
        "lineNumber": 413,
        "author": {
          "gitId": "nexolute"
        },
        "content": "6. The `LogicManager` executes `AddBudgetCommand#execute()`."
      },
      {
        "lineNumber": 414,
        "author": {
          "gitId": "nexolute"
        },
        "content": ""
      },
      {
        "lineNumber": 415,
        "author": {
          "gitId": "nexolute"
        },
        "content": "7. The newly created `Budget` is added to the model."
      },
      {
        "lineNumber": 416,
        "author": {
          "gitId": "nexolute"
        },
        "content": ""
      },
      {
        "lineNumber": 417,
        "author": {
          "gitId": "nexolute"
        },
        "content": "This process is further illustrated in the following sequence diagram:"
      },
      {
        "lineNumber": 418,
        "author": {
          "gitId": "nexolute"
        },
        "content": ""
      },
      {
        "lineNumber": 419,
        "author": {
          "gitId": "nexolute"
        },
        "content": ".Sequence Diagram for `add` Command under Budget Tab"
      },
      {
        "lineNumber": 420,
        "author": {
          "gitId": "nexolute"
        },
        "content": "image::AddBudgetSequenceDiagram.png[]"
      },
      {
        "lineNumber": 421,
        "author": {
          "gitId": "nexolute"
        },
        "content": "// end::budgetadd[]"
      },
      {
        "lineNumber": 422,
        "author": {
          "gitId": "nexolute"
        },
        "content": ""
      },
      {
        "lineNumber": 423,
        "author": {
          "gitId": "Alaete"
        },
        "content": "\u003d\u003d\u003d Analytics"
      },
      {
        "lineNumber": 424,
        "author": {
          "gitId": "Alaete"
        },
        "content": ""
      },
      {
        "lineNumber": 425,
        "author": {
          "gitId": "Alaete"
        },
        "content": "// tag::analyticsexpenditure[]"
      },
      {
        "lineNumber": 426,
        "author": {
          "gitId": "Alaete"
        },
        "content": "\u003d\u003d\u003d\u003d View expenditure trend"
      },
      {
        "lineNumber": 427,
        "author": {
          "gitId": "Alaete"
        },
        "content": ""
      },
      {
        "lineNumber": 428,
        "author": {
          "gitId": "Alaete"
        },
        "content": "The view expenditure trend feature allows the user to view monthly expenditure trend for a year."
      },
      {
        "lineNumber": 429,
        "author": {
          "gitId": "Alaete"
        },
        "content": "This feature is facilitated by `AnalyticsFeatureParser`, `ExpenditureTrendCommandParser`, and `ExpenditureTrendCommand`."
      },
      {
        "lineNumber": 430,
        "author": {
          "gitId": "Alaete"
        },
        "content": "The argument supported by this feature is:"
      },
      {
        "lineNumber": 431,
        "author": {
          "gitId": "Alaete"
        },
        "content": ""
      },
      {
        "lineNumber": 432,
        "author": {
          "gitId": "Alaete"
        },
        "content": "- `Year` (optional)"
      },
      {
        "lineNumber": 433,
        "author": {
          "gitId": "Alaete"
        },
        "content": ""
      },
      {
        "lineNumber": 434,
        "author": {
          "gitId": "Alaete"
        },
        "content": "\u003d\u003d\u003d\u003d\u003d Implementation"
      },
      {
        "lineNumber": 435,
        "author": {
          "gitId": "Alaete"
        },
        "content": ""
      },
      {
        "lineNumber": 436,
        "author": {
          "gitId": "Alaete"
        },
        "content": "When the user input the `expenditure` command in the Analytics tab, the following chain of operations occurs:"
      },
      {
        "lineNumber": 437,
        "author": {
          "gitId": "Alaete"
        },
        "content": ""
      },
      {
        "lineNumber": 438,
        "author": {
          "gitId": "Alaete"
        },
        "content": "1. The `IchiFundParser` will delegate the parsing of the command to `AnalyticsFeatureParser` if the current active tab is Analytics."
      },
      {
        "lineNumber": 439,
        "author": {
          "gitId": "Alaete"
        },
        "content": ""
      },
      {
        "lineNumber": 440,
        "author": {
          "gitId": "Alaete"
        },
        "content": "2. The `AnalyticsFeatureParser` will delegate the parsing of the arguments to `ExpenditureTrendCommandParser`."
      },
      {
        "lineNumber": 441,
        "author": {
          "gitId": "Alaete"
        },
        "content": ""
      },
      {
        "lineNumber": 442,
        "author": {
          "gitId": "Alaete"
        },
        "content": "3. `ExpenditureTrendCommandParser#parse()` will take in a `String` input consisting of the arguments."
      },
      {
        "lineNumber": 443,
        "author": {
          "gitId": "Alaete"
        },
        "content": ""
      },
      {
        "lineNumber": 444,
        "author": {
          "gitId": "Alaete"
        },
        "content": "4. This arguments will be tokenized and the respective models for each argument are created."
      },
      {
        "lineNumber": 445,
        "author": {
          "gitId": "Alaete"
        },
        "content": ""
      },
      {
        "lineNumber": 446,
        "author": {
          "gitId": "Alaete"
        },
        "content": "5. If the parsing of all arguments are successful, a new `ExpenditureTrendCommand` is returned back to `LogicManager`."
      },
      {
        "lineNumber": 447,
        "author": {
          "gitId": "Alaete"
        },
        "content": ""
      },
      {
        "lineNumber": 448,
        "author": {
          "gitId": "Alaete"
        },
        "content": "6. The `LogicManager` executes `ExpenditureTrendCommand#execute()`."
      },
      {
        "lineNumber": 449,
        "author": {
          "gitId": "Alaete"
        },
        "content": ""
      },
      {
        "lineNumber": 450,
        "author": {
          "gitId": "Alaete"
        },
        "content": "7. The model is updated with the `List` of `Data` from the newly created `TrendReport`."
      },
      {
        "lineNumber": 451,
        "author": {
          "gitId": "Alaete"
        },
        "content": "// end::analyticsexpenditure[]"
      },
      {
        "lineNumber": 452,
        "author": {
          "gitId": "Alaete"
        },
        "content": ""
      },
      {
        "lineNumber": 453,
        "author": {
          "gitId": "Alaete"
        },
        "content": "// tag::analyticsincome[]"
      },
      {
        "lineNumber": 454,
        "author": {
          "gitId": "Alaete"
        },
        "content": "\u003d\u003d\u003d\u003d View income trend"
      },
      {
        "lineNumber": 455,
        "author": {
          "gitId": "Alaete"
        },
        "content": ""
      },
      {
        "lineNumber": 456,
        "author": {
          "gitId": "Alaete"
        },
        "content": "The view income trend feature allows the user to view monthly income trend for a year."
      },
      {
        "lineNumber": 457,
        "author": {
          "gitId": "Alaete"
        },
        "content": "This feature is facilitated by `AnalyticsFeatureParser`, `IncomeTrendCommandParser`, and `IncomeTrendCommand`."
      },
      {
        "lineNumber": 458,
        "author": {
          "gitId": "Alaete"
        },
        "content": "The argument supported by this feature is:"
      },
      {
        "lineNumber": 459,
        "author": {
          "gitId": "Alaete"
        },
        "content": ""
      },
      {
        "lineNumber": 460,
        "author": {
          "gitId": "Alaete"
        },
        "content": "- `Year` (optional)"
      },
      {
        "lineNumber": 461,
        "author": {
          "gitId": "Alaete"
        },
        "content": ""
      },
      {
        "lineNumber": 462,
        "author": {
          "gitId": "Alaete"
        },
        "content": "\u003d\u003d\u003d\u003d\u003d Implementation"
      },
      {
        "lineNumber": 463,
        "author": {
          "gitId": "Alaete"
        },
        "content": ""
      },
      {
        "lineNumber": 464,
        "author": {
          "gitId": "Alaete"
        },
        "content": "When the user input the `income` command in the Analytics tab, the following chain of operations occurs:"
      },
      {
        "lineNumber": 465,
        "author": {
          "gitId": "Alaete"
        },
        "content": ""
      },
      {
        "lineNumber": 466,
        "author": {
          "gitId": "Alaete"
        },
        "content": "1. The `IchiFundParser` will delegate the parsing of the command to `AnalyticsFeatureParser` if the current active tab is Analytics."
      },
      {
        "lineNumber": 467,
        "author": {
          "gitId": "Alaete"
        },
        "content": ""
      },
      {
        "lineNumber": 468,
        "author": {
          "gitId": "Alaete"
        },
        "content": "2. The `AnalyticsFeatureParser` will delegate the parsing of the arguments to `IncomeTrendCommandParser`."
      },
      {
        "lineNumber": 469,
        "author": {
          "gitId": "Alaete"
        },
        "content": ""
      },
      {
        "lineNumber": 470,
        "author": {
          "gitId": "Alaete"
        },
        "content": "3. `IncomeTrendCommandParser#parse()` will take in a `String` input consisting of the arguments."
      },
      {
        "lineNumber": 471,
        "author": {
          "gitId": "Alaete"
        },
        "content": ""
      },
      {
        "lineNumber": 472,
        "author": {
          "gitId": "Alaete"
        },
        "content": "4. This arguments will be tokenized and the respective models for each argument are created."
      },
      {
        "lineNumber": 473,
        "author": {
          "gitId": "Alaete"
        },
        "content": ""
      },
      {
        "lineNumber": 474,
        "author": {
          "gitId": "Alaete"
        },
        "content": "5. If the parsing of all arguments are successful, a new `IncomeTrendCommand` is returned back to `LogicManager`."
      },
      {
        "lineNumber": 475,
        "author": {
          "gitId": "Alaete"
        },
        "content": ""
      },
      {
        "lineNumber": 476,
        "author": {
          "gitId": "Alaete"
        },
        "content": "6. The `LogicManager` executes `IncomeTrendCommand#execute()`."
      },
      {
        "lineNumber": 477,
        "author": {
          "gitId": "Alaete"
        },
        "content": ""
      },
      {
        "lineNumber": 478,
        "author": {
          "gitId": "Alaete"
        },
        "content": "7. The model is updated with the `List` of `Data` from the newly created `TrendReport`."
      },
      {
        "lineNumber": 479,
        "author": {
          "gitId": "Alaete"
        },
        "content": "// end::analyticsincome[]"
      },
      {
        "lineNumber": 480,
        "author": {
          "gitId": "Alaete"
        },
        "content": ""
      },
      {
        "lineNumber": 481,
        "author": {
          "gitId": "Alaete"
        },
        "content": "// tag::analyticsbalance[]"
      },
      {
        "lineNumber": 482,
        "author": {
          "gitId": "Alaete"
        },
        "content": "\u003d\u003d\u003d\u003d View balance trend"
      },
      {
        "lineNumber": 483,
        "author": {
          "gitId": "Alaete"
        },
        "content": ""
      },
      {
        "lineNumber": 484,
        "author": {
          "gitId": "Alaete"
        },
        "content": "The view balance trend feature allows the user to view monthly balance trend for a year."
      },
      {
        "lineNumber": 485,
        "author": {
          "gitId": "Alaete"
        },
        "content": "This feature is facilitated by `AnalyticsFeatureParser`, `BalanceTrendCommandParser`, and `BalanceTrendCommand`."
      },
      {
        "lineNumber": 486,
        "author": {
          "gitId": "Alaete"
        },
        "content": "The argument supported by this feature is:"
      },
      {
        "lineNumber": 487,
        "author": {
          "gitId": "Alaete"
        },
        "content": ""
      },
      {
        "lineNumber": 488,
        "author": {
          "gitId": "Alaete"
        },
        "content": "- `Year` (optional)"
      },
      {
        "lineNumber": 489,
        "author": {
          "gitId": "Alaete"
        },
        "content": ""
      },
      {
        "lineNumber": 490,
        "author": {
          "gitId": "Alaete"
        },
        "content": "\u003d\u003d\u003d\u003d\u003d Implementation"
      },
      {
        "lineNumber": 491,
        "author": {
          "gitId": "Alaete"
        },
        "content": ""
      },
      {
        "lineNumber": 492,
        "author": {
          "gitId": "Alaete"
        },
        "content": "When the user input the `balance` command in the Analytics tab, the following chain of operations occurs:"
      },
      {
        "lineNumber": 493,
        "author": {
          "gitId": "Alaete"
        },
        "content": ""
      },
      {
        "lineNumber": 494,
        "author": {
          "gitId": "Alaete"
        },
        "content": "1. The `IchiFundParser` will delegate the parsing of the command to `AnalyticsFeatureParser` if the current active tab is Analytics."
      },
      {
        "lineNumber": 495,
        "author": {
          "gitId": "Alaete"
        },
        "content": ""
      },
      {
        "lineNumber": 496,
        "author": {
          "gitId": "Alaete"
        },
        "content": "2. The `AnalyticsFeatureParser` will delegate the parsing of the arguments to `BalanceTrendCommandParser`."
      },
      {
        "lineNumber": 497,
        "author": {
          "gitId": "Alaete"
        },
        "content": ""
      },
      {
        "lineNumber": 498,
        "author": {
          "gitId": "Alaete"
        },
        "content": "3. `BalanceTrendCommandParser#parse()` will take in a `String` input consisting of the arguments."
      },
      {
        "lineNumber": 499,
        "author": {
          "gitId": "Alaete"
        },
        "content": ""
      },
      {
        "lineNumber": 500,
        "author": {
          "gitId": "Alaete"
        },
        "content": "4. This arguments will be tokenized and the respective models for each argument are created."
      },
      {
        "lineNumber": 501,
        "author": {
          "gitId": "Alaete"
        },
        "content": ""
      },
      {
        "lineNumber": 502,
        "author": {
          "gitId": "Alaete"
        },
        "content": "5. If the parsing of all arguments are successful, a new `BalanceTrendCommand` is returned back to `LogicManager`."
      },
      {
        "lineNumber": 503,
        "author": {
          "gitId": "Alaete"
        },
        "content": ""
      },
      {
        "lineNumber": 504,
        "author": {
          "gitId": "Alaete"
        },
        "content": "6. The `LogicManager` executes `BalanceTrendCommand#execute()`."
      },
      {
        "lineNumber": 505,
        "author": {
          "gitId": "Alaete"
        },
        "content": ""
      },
      {
        "lineNumber": 506,
        "author": {
          "gitId": "Alaete"
        },
        "content": "7. The model is updated with the `List` of `Data` from the newly created `TrendReport`."
      },
      {
        "lineNumber": 507,
        "author": {
          "gitId": "Alaete"
        },
        "content": "// end::analyticsbalance[]"
      },
      {
        "lineNumber": 508,
        "author": {
          "gitId": "Alaete"
        },
        "content": ""
      },
      {
        "lineNumber": 509,
        "author": {
          "gitId": "nexolute"
        },
        "content": "\u003d\u003d\u003d [Demo] Use this as template for your section"
      },
      {
        "lineNumber": 510,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d\u003d Proposed Implementation"
      },
      {
        "lineNumber": 511,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "\u003d\u003d\u003d\u003d\u003d Test"
      },
      {
        "lineNumber": 512,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 513,
        "author": {
          "gitId": "-"
        },
        "content": "The undo/redo mechanism is facilitated by `VersionedAddressBook`."
      },
      {
        "lineNumber": 514,
        "author": {
          "gitId": "-"
        },
        "content": "It extends `AddressBook` with an undo/redo history, stored internally as an `addressBookStateList` and `currentStatePointer`."
      },
      {
        "lineNumber": 515,
        "author": {
          "gitId": "-"
        },
        "content": "Additionally, it implements the following operations:"
      },
      {
        "lineNumber": 516,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 517,
        "author": {
          "gitId": "-"
        },
        "content": "* `VersionedAddressBook#commit()` -- Saves the current address book state in its history."
      },
      {
        "lineNumber": 518,
        "author": {
          "gitId": "-"
        },
        "content": "* `VersionedAddressBook#undo()` -- Restores the previous address book state from its history."
      },
      {
        "lineNumber": 519,
        "author": {
          "gitId": "-"
        },
        "content": "* `VersionedAddressBook#redo()` -- Restores a previously undone address book state from its history."
      },
      {
        "lineNumber": 520,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 521,
        "author": {
          "gitId": "-"
        },
        "content": "These operations are exposed in the `Model` interface as `Model#commitAddressBook()`, `Model#undoAddressBook()` and `Model#redoAddressBook()` respectively."
      },
      {
        "lineNumber": 522,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 523,
        "author": {
          "gitId": "-"
        },
        "content": "Given below is an example usage scenario and how the undo/redo mechanism behaves at each step."
      },
      {
        "lineNumber": 524,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 525,
        "author": {
          "gitId": "-"
        },
        "content": "Step 1. The user launches the application for the first time. The `VersionedAddressBook` will be initialized with the initial address book state, and the `currentStatePointer` pointing to that single address book state."
      },
      {
        "lineNumber": 526,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 527,
        "author": {
          "gitId": "-"
        },
        "content": "image::UndoRedoState0.png[]"
      },
      {
        "lineNumber": 528,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 529,
        "author": {
          "gitId": "-"
        },
        "content": "Step 2. The user executes `delete 5` command to delete the 5th person in the address book. The `delete` command calls `Model#commitAddressBook()`, causing the modified state of the address book after the `delete 5` command executes to be saved in the `addressBookStateList`, and the `currentStatePointer` is shifted to the newly inserted address book state."
      },
      {
        "lineNumber": 530,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 531,
        "author": {
          "gitId": "-"
        },
        "content": "image::UndoRedoState1.png[]"
      },
      {
        "lineNumber": 532,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 533,
        "author": {
          "gitId": "-"
        },
        "content": "Step 3. The user executes `add n/David ...` to add a new person. The `add` command also calls `Model#commitAddressBook()`, causing another modified address book state to be saved into the `addressBookStateList`."
      },
      {
        "lineNumber": 534,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 535,
        "author": {
          "gitId": "-"
        },
        "content": "image::UndoRedoState2.png[]"
      },
      {
        "lineNumber": 536,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 537,
        "author": {
          "gitId": "-"
        },
        "content": "[NOTE]"
      },
      {
        "lineNumber": 538,
        "author": {
          "gitId": "-"
        },
        "content": "If a command fails its execution, it will not call `Model#commitAddressBook()`, so the address book state will not be saved into the `addressBookStateList`."
      },
      {
        "lineNumber": 539,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 540,
        "author": {
          "gitId": "-"
        },
        "content": "Step 4. The user now decides that adding the person was a mistake, and decides to undo that action by executing the `undo` command. The `undo` command will call `Model#undoAddressBook()`, which will shift the `currentStatePointer` once to the left, pointing it to the previous address book state, and restores the address book to that state."
      },
      {
        "lineNumber": 541,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 542,
        "author": {
          "gitId": "-"
        },
        "content": "image::UndoRedoState3.png[]"
      },
      {
        "lineNumber": 543,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 544,
        "author": {
          "gitId": "-"
        },
        "content": "[NOTE]"
      },
      {
        "lineNumber": 545,
        "author": {
          "gitId": "-"
        },
        "content": "If the `currentStatePointer` is at index 0, pointing to the initial address book state, then there are no previous address book states to restore. The `undo` command uses `Model#canUndoAddressBook()` to check if this is the case. If so, it will return an error to the user rather than attempting to perform the undo."
      },
      {
        "lineNumber": 546,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 547,
        "author": {
          "gitId": "-"
        },
        "content": "The following sequence diagram shows how the undo operation works:"
      },
      {
        "lineNumber": 548,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 549,
        "author": {
          "gitId": "-"
        },
        "content": "image::UndoSequenceDiagram.png[]"
      },
      {
        "lineNumber": 550,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 551,
        "author": {
          "gitId": "-"
        },
        "content": "NOTE: The lifeline for `UndoCommand` should end at the destroy marker (X) but due to a limitation of PlantUML, the lifeline reaches the end of diagram."
      },
      {
        "lineNumber": 552,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 553,
        "author": {
          "gitId": "-"
        },
        "content": "The `redo` command does the opposite -- it calls `Model#redoAddressBook()`, which shifts the `currentStatePointer` once to the right, pointing to the previously undone state, and restores the address book to that state."
      },
      {
        "lineNumber": 554,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 555,
        "author": {
          "gitId": "-"
        },
        "content": "[NOTE]"
      },
      {
        "lineNumber": 556,
        "author": {
          "gitId": "-"
        },
        "content": "If the `currentStatePointer` is at index `addressBookStateList.size() - 1`, pointing to the latest address book state, then there are no undone address book states to restore. The `redo` command uses `Model#canRedoAddressBook()` to check if this is the case. If so, it will return an error to the user rather than attempting to perform the redo."
      },
      {
        "lineNumber": 557,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 558,
        "author": {
          "gitId": "-"
        },
        "content": "Step 5. The user then decides to execute the command `list`. Commands that do not modify the address book, such as `list`, will usually not call `Model#commitAddressBook()`, `Model#undoAddressBook()` or `Model#redoAddressBook()`. Thus, the `addressBookStateList` remains unchanged."
      },
      {
        "lineNumber": 559,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 560,
        "author": {
          "gitId": "-"
        },
        "content": "image::UndoRedoState4.png[]"
      },
      {
        "lineNumber": 561,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 562,
        "author": {
          "gitId": "-"
        },
        "content": "Step 6. The user executes `clear`, which calls `Model#commitAddressBook()`. Since the `currentStatePointer` is not pointing at the end of the `addressBookStateList`, all address book states after the `currentStatePointer` will be purged. We designed it this way because it no longer makes sense to redo the `add n/David ...` command. This is the behavior that most modern desktop applications follow."
      },
      {
        "lineNumber": 563,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 564,
        "author": {
          "gitId": "-"
        },
        "content": "image::UndoRedoState5.png[]"
      },
      {
        "lineNumber": 565,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 566,
        "author": {
          "gitId": "-"
        },
        "content": "The following activity diagram summarizes what happens when a user executes a new command:"
      },
      {
        "lineNumber": 567,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 568,
        "author": {
          "gitId": "-"
        },
        "content": "image::CommitActivityDiagram.png[]"
      },
      {
        "lineNumber": 569,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 570,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d\u003d Design Considerations"
      },
      {
        "lineNumber": 571,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 572,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d\u003d\u003d Aspect: How undo \u0026 redo executes"
      },
      {
        "lineNumber": 573,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 574,
        "author": {
          "gitId": "-"
        },
        "content": "* **Alternative 1 (current choice):** Saves the entire address book."
      },
      {
        "lineNumber": 575,
        "author": {
          "gitId": "-"
        },
        "content": "** Pros: Easy to implement."
      },
      {
        "lineNumber": 576,
        "author": {
          "gitId": "-"
        },
        "content": "** Cons: May have performance issues in terms of memory usage."
      },
      {
        "lineNumber": 577,
        "author": {
          "gitId": "-"
        },
        "content": "* **Alternative 2:** Individual command knows how to undo/redo by itself."
      },
      {
        "lineNumber": 578,
        "author": {
          "gitId": "-"
        },
        "content": "** Pros: Will use less memory (e.g. for `delete`, just save the person being deleted)."
      },
      {
        "lineNumber": 579,
        "author": {
          "gitId": "-"
        },
        "content": "** Cons: We must ensure that the implementation of each individual command are correct."
      },
      {
        "lineNumber": 580,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 581,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d\u003d\u003d Aspect: Data structure to support the undo/redo commands"
      },
      {
        "lineNumber": 582,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 583,
        "author": {
          "gitId": "-"
        },
        "content": "* **Alternative 1 (current choice):** Use a list to store the history of address book states."
      },
      {
        "lineNumber": 584,
        "author": {
          "gitId": "-"
        },
        "content": "** Pros: Easy for new Computer Science student undergraduates to understand, who are likely to be the new incoming developers of our project."
      },
      {
        "lineNumber": 585,
        "author": {
          "gitId": "-"
        },
        "content": "** Cons: Logic is duplicated twice. For example, when a new command is executed, we must remember to update both `HistoryManager` and `VersionedAddressBook`."
      },
      {
        "lineNumber": 586,
        "author": {
          "gitId": "-"
        },
        "content": "* **Alternative 2:** Use `HistoryManager` for undo/redo"
      },
      {
        "lineNumber": 587,
        "author": {
          "gitId": "-"
        },
        "content": "** Pros: We do not need to maintain a separate list, and just reuse what is already in the codebase."
      },
      {
        "lineNumber": 588,
        "author": {
          "gitId": "-"
        },
        "content": "** Cons: Requires dealing with commands that have already been undone: We must remember to skip these commands. Violates Single Responsibility Principle and Separation of Concerns as `HistoryManager` now needs to do two different things."
      },
      {
        "lineNumber": 589,
        "author": {
          "gitId": "-"
        },
        "content": "// end::undoredo[]"
      },
      {
        "lineNumber": 590,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 591,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Logging"
      },
      {
        "lineNumber": 592,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 593,
        "author": {
          "gitId": "-"
        },
        "content": "We are using `java.util.logging` package for logging. The `LogsCenter` class is used to manage the logging levels and logging destinations."
      },
      {
        "lineNumber": 594,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 595,
        "author": {
          "gitId": "-"
        },
        "content": "* The logging level can be controlled using the `logLevel` setting in the configuration file (See \u003c\u003cImplementation-Configuration\u003e\u003e)"
      },
      {
        "lineNumber": 596,
        "author": {
          "gitId": "-"
        },
        "content": "* The `Logger` for a class can be obtained using `LogsCenter.getLogger(Class)` which will log messages according to the specified logging level"
      },
      {
        "lineNumber": 597,
        "author": {
          "gitId": "-"
        },
        "content": "* Currently log messages are output through: `Console` and to a `.log` file."
      },
      {
        "lineNumber": 598,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 599,
        "author": {
          "gitId": "-"
        },
        "content": "*Logging Levels*"
      },
      {
        "lineNumber": 600,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 601,
        "author": {
          "gitId": "-"
        },
        "content": "* `SEVERE` : Critical problem detected which may possibly cause the termination of the application"
      },
      {
        "lineNumber": 602,
        "author": {
          "gitId": "-"
        },
        "content": "* `WARNING` : Can continue, but with caution"
      },
      {
        "lineNumber": 603,
        "author": {
          "gitId": "-"
        },
        "content": "* `INFO` : Information showing the noteworthy actions by the App"
      },
      {
        "lineNumber": 604,
        "author": {
          "gitId": "-"
        },
        "content": "* `FINE` : Details that is not usually noteworthy but may be useful in debugging e.g. print the actual list instead of just its size"
      },
      {
        "lineNumber": 605,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 606,
        "author": {
          "gitId": "-"
        },
        "content": "[[Implementation-Configuration]]"
      },
      {
        "lineNumber": 607,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Configuration"
      },
      {
        "lineNumber": 608,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 609,
        "author": {
          "gitId": "-"
        },
        "content": "Certain properties of the application can be controlled (e.g user prefs file location, logging level) through the configuration file (default: `config.json`)."
      },
      {
        "lineNumber": 610,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 611,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Documentation"
      },
      {
        "lineNumber": 612,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 613,
        "author": {
          "gitId": "-"
        },
        "content": "Refer to the guide \u003c\u003cDocumentation#, here\u003e\u003e."
      },
      {
        "lineNumber": 614,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 615,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Testing"
      },
      {
        "lineNumber": 616,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 617,
        "author": {
          "gitId": "-"
        },
        "content": "Refer to the guide \u003c\u003cTesting#, here\u003e\u003e."
      },
      {
        "lineNumber": 618,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 619,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Dev Ops"
      },
      {
        "lineNumber": 620,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 621,
        "author": {
          "gitId": "-"
        },
        "content": "Refer to the guide \u003c\u003cDevOps#, here\u003e\u003e."
      },
      {
        "lineNumber": 622,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 623,
        "author": {
          "gitId": "-"
        },
        "content": "[appendix]"
      },
      {
        "lineNumber": 624,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Product Scope"
      },
      {
        "lineNumber": 625,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 626,
        "author": {
          "gitId": "-"
        },
        "content": "*Target user profile*:"
      },
      {
        "lineNumber": 627,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 628,
        "author": {
          "gitId": "Alaete"
        },
        "content": "* a financially conscious CS undergraduate"
      },
      {
        "lineNumber": 629,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "** has a need to track expenditure and income items"
      },
      {
        "lineNumber": 630,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "** has a need to limit expenditure to a budget"
      },
      {
        "lineNumber": 631,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "** has a need to quickly analyse how to reduce expenditure"
      },
      {
        "lineNumber": 632,
        "author": {
          "gitId": "Alaete"
        },
        "content": "** has a need to track net worth"
      },
      {
        "lineNumber": 633,
        "author": {
          "gitId": "troomtroom"
        },
        "content": "** has a need to track loans and money owed"
      },
      {
        "lineNumber": 634,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "** prefers desktop apps over other types"
      },
      {
        "lineNumber": 635,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "** can type fast"
      },
      {
        "lineNumber": 636,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "** prefers typing over mouse input"
      },
      {
        "lineNumber": 637,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "** is reasonably comfortable using CLI apps"
      },
      {
        "lineNumber": 638,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 639,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "*Value proposition*:"
      },
      {
        "lineNumber": 640,
        "author": {
          "gitId": "weiyang13"
        },
        "content": ""
      },
      {
        "lineNumber": 641,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "* manage financial transactions faster than a typical mouse/GUI driven app"
      },
      {
        "lineNumber": 642,
        "author": {
          "gitId": "Alaete"
        },
        "content": "* analyse past expenditure, income and balance trends"
      },
      {
        "lineNumber": 643,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 644,
        "author": {
          "gitId": "-"
        },
        "content": "[appendix]"
      },
      {
        "lineNumber": 645,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d User Stories"
      },
      {
        "lineNumber": 646,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 647,
        "author": {
          "gitId": "-"
        },
        "content": "Priorities: High (must have) - `* * \\*`, Medium (nice to have) - `* \\*`, Low (unlikely to have) - `*`"
      },
      {
        "lineNumber": 648,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 649,
        "author": {
          "gitId": "-"
        },
        "content": "[width\u003d\"59%\",cols\u003d\"22%,\u003c23%,\u003c25%,\u003c30%\",options\u003d\"header\",]"
      },
      {
        "lineNumber": 650,
        "author": {
          "gitId": "-"
        },
        "content": "|\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 651,
        "author": {
          "gitId": "-"
        },
        "content": "|Priority |As a ... |I want to ... |So that I can..."
      },
      {
        "lineNumber": 652,
        "author": {
          "gitId": "-"
        },
        "content": "|`* * *` |new user |see usage instructions |refer to instructions when I forget how to use the App"
      },
      {
        "lineNumber": 653,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 654,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "|`* * *` |user who is keeping track of transactions |record transactions |"
      },
      {
        "lineNumber": 655,
        "author": {
          "gitId": "weiyang13"
        },
        "content": ""
      },
      {
        "lineNumber": 656,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "|`* * *` |user who is keeping track of transactions |edit transactions |update any errors made when adding transactions"
      },
      {
        "lineNumber": 657,
        "author": {
          "gitId": "weiyang13"
        },
        "content": ""
      },
      {
        "lineNumber": 658,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "|`* * *` |user who is keeping track of transactions |view transactions |"
      },
      {
        "lineNumber": 659,
        "author": {
          "gitId": "weiyang13"
        },
        "content": ""
      },
      {
        "lineNumber": 660,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "|`* * *` |user who is keeping track of transactions |organize transactions by category |"
      },
      {
        "lineNumber": 661,
        "author": {
          "gitId": "weiyang13"
        },
        "content": ""
      },
      {
        "lineNumber": 662,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "|`* * *` |user who is keeping track of transactions |delete transactions |delete wrongly added or refunded transactions"
      },
      {
        "lineNumber": 663,
        "author": {
          "gitId": "weiyang13"
        },
        "content": ""
      },
      {
        "lineNumber": 664,
        "author": {
          "gitId": "LeeYiyuan"
        },
        "content": "|`* * *` |user who is keeping track of transaction recurrence |create transaction repeaters |insert new transaction repeater."
      },
      {
        "lineNumber": 665,
        "author": {
          "gitId": "LeeYiyuan"
        },
        "content": ""
      },
      {
        "lineNumber": 666,
        "author": {
          "gitId": "LeeYiyuan"
        },
        "content": "|`* * *` |user who is keeping track of transaction recurrence |edit transaction repeaters |update any changes or errors in existing transaction repeaters."
      },
      {
        "lineNumber": 667,
        "author": {
          "gitId": "LeeYiyuan"
        },
        "content": ""
      },
      {
        "lineNumber": 668,
        "author": {
          "gitId": "LeeYiyuan"
        },
        "content": "|`* * *` |user who is keeping track of transaction recurrence |delete transaction repeaters |delete no longer relevant transaction repeaters."
      },
      {
        "lineNumber": 669,
        "author": {
          "gitId": "LeeYiyuan"
        },
        "content": ""
      },
      {
        "lineNumber": 670,
        "author": {
          "gitId": "LeeYiyuan"
        },
        "content": "|`* * *` |user who is keeping track of transaction recurrence |filter transaction repeaters |quickly find transaction repeaters relevant to a search query."
      },
      {
        "lineNumber": 671,
        "author": {
          "gitId": "LeeYiyuan"
        },
        "content": ""
      },
      {
        "lineNumber": 672,
        "author": {
          "gitId": "LeeYiyuan"
        },
        "content": "|`* * *` |user who is keeping track of net worth |set my current wealth |keep track of how much money I have"
      },
      {
        "lineNumber": 673,
        "author": {
          "gitId": "LeeYiyuan"
        },
        "content": ""
      },
      {
        "lineNumber": 674,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "|`* * *` |user who is keeping track of budget |set my monthly expenditure budget |keep track of how much I can spend for the month"
      },
      {
        "lineNumber": 675,
        "author": {
          "gitId": "weiyang13"
        },
        "content": ""
      },
      {
        "lineNumber": 676,
        "author": {
          "gitId": "nexolute"
        },
        "content": "|`* * *` |user who is keeping track of budget |exclude transaction from budget |"
      },
      {
        "lineNumber": 677,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 678,
        "author": {
          "gitId": "nexolute"
        },
        "content": "|`* * *` |user who is keeping track of budget |include transaction to budget |"
      },
      {
        "lineNumber": 679,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 680,
        "author": {
          "gitId": "nexolute"
        },
        "content": "|`* * *` |user who is keeping track of budget |see an overview of my budget |"
      },
      {
        "lineNumber": 681,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 682,
        "author": {
          "gitId": "Alaete"
        },
        "content": "|`* * *` |user who is trying to reduce expenditure |view my monthly expenditure trends |keep track of how much I spend per month"
      },
      {
        "lineNumber": 683,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 684,
        "author": {
          "gitId": "Alaete"
        },
        "content": "|`* * *` |user who is trying to reduce expenditure |view my expenditure breakdown by category |keep track of how much I spend by category"
      },
      {
        "lineNumber": 685,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 686,
        "author": {
          "gitId": "Alaete"
        },
        "content": "|`* *` |user who is trying to reduce expenditure |view my expenditure category ranking chart |keep track of my top expenditure categories"
      },
      {
        "lineNumber": 687,
        "author": {
          "gitId": "Alaete"
        },
        "content": ""
      },
      {
        "lineNumber": 688,
        "author": {
          "gitId": "Alaete"
        },
        "content": "|`* *` |user who is trying to reduce expenditure |view my expenditure ranking chart by month |keep track of my top expenditure months"
      },
      {
        "lineNumber": 689,
        "author": {
          "gitId": "Alaete"
        },
        "content": ""
      },
      {
        "lineNumber": 690,
        "author": {
          "gitId": "Alaete"
        },
        "content": "|`* *` |user who is trying to reduce expenditure |view my expenditure ranking chart |keep track of my top expenditures"
      },
      {
        "lineNumber": 691,
        "author": {
          "gitId": "Alaete"
        },
        "content": ""
      },
      {
        "lineNumber": 692,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "|`* *` |user who is keeping track of net worth |view my monthly income trends |keep track of how much I earn per month"
      },
      {
        "lineNumber": 693,
        "author": {
          "gitId": "weiyang13"
        },
        "content": ""
      },
      {
        "lineNumber": 694,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "|`* *` |user who is keeping track of net worth |view my monthly balance trends |keep track of how much I save per month"
      },
      {
        "lineNumber": 695,
        "author": {
          "gitId": "weiyang13"
        },
        "content": ""
      },
      {
        "lineNumber": 696,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "|`* *` |long-term user who is keeping track of transactions |find transactions by keyword |conveniently search for transactions to edit or review"
      },
      {
        "lineNumber": 697,
        "author": {
          "gitId": "Alaete"
        },
        "content": ""
      },
      {
        "lineNumber": 698,
        "author": {
          "gitId": "troomtroom"
        },
        "content": "|`* * *`|user who wants to keep track of money owed |view all loans |see all money i am owed or currently owe others"
      },
      {
        "lineNumber": 699,
        "author": {
          "gitId": "troomtroom"
        },
        "content": ""
      },
      {
        "lineNumber": 700,
        "author": {
          "gitId": "troomtroom"
        },
        "content": "|`* * *`|user who wants to keep track of money owed |view all positive loans |see all money people owe me"
      },
      {
        "lineNumber": 701,
        "author": {
          "gitId": "troomtroom"
        },
        "content": ""
      },
      {
        "lineNumber": 702,
        "author": {
          "gitId": "troomtroom"
        },
        "content": "|`* * *`|user who wants to keep track of money owed |view all negative loans |see all money i owe people"
      },
      {
        "lineNumber": 703,
        "author": {
          "gitId": "troomtroom"
        },
        "content": ""
      },
      {
        "lineNumber": 704,
        "author": {
          "gitId": "troomtroom"
        },
        "content": "|`* *`|user who wants to keep track of money owed |select loans by names/keywords |see all loans by a particular person"
      },
      {
        "lineNumber": 705,
        "author": {
          "gitId": "troomtroom"
        },
        "content": ""
      },
      {
        "lineNumber": 706,
        "author": {
          "gitId": "troomtroom"
        },
        "content": "|`* * *`|user who wants to keep track of money owed |new loan in the list |add a new loan to keep track of"
      },
      {
        "lineNumber": 707,
        "author": {
          "gitId": "troomtroom"
        },
        "content": ""
      },
      {
        "lineNumber": 708,
        "author": {
          "gitId": "troomtroom"
        },
        "content": "|`* * *`|user who wants to keep track of money owed |mark loan as loan paid |remove one of the loans"
      },
      {
        "lineNumber": 709,
        "author": {
          "gitId": "troomtroom"
        },
        "content": ""
      },
      {
        "lineNumber": 710,
        "author": {
          "gitId": "troomtroom"
        },
        "content": "|`* *`|user who wants to keep track of money owed |paid/add by part |some amont of loan is paid off"
      },
      {
        "lineNumber": 711,
        "author": {
          "gitId": "troomtroom"
        },
        "content": ""
      },
      {
        "lineNumber": 712,
        "author": {
          "gitId": "troomtroom"
        },
        "content": "|`*`|user who wants to keep track of money owed | reminders to pay loans with dates |I can see updates and reminders for urgent loans"
      },
      {
        "lineNumber": 713,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 714,
        "author": {
          "gitId": "-"
        },
        "content": "|\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 715,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 716,
        "author": {
          "gitId": "-"
        },
        "content": "_{More to be added}_"
      },
      {
        "lineNumber": 717,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 718,
        "author": {
          "gitId": "-"
        },
        "content": "[appendix]"
      },
      {
        "lineNumber": 719,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Use Cases"
      },
      {
        "lineNumber": 720,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 721,
        "author": {
          "gitId": "nexolute"
        },
        "content": "(For all use cases below, the *System* is the `IchiFund` and the *Actor* is the `user`, unless specified otherwise)"
      },
      {
        "lineNumber": 722,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 723,
        "author": {
          "gitId": "-"
        },
        "content": "[discrete]"
      },
      {
        "lineNumber": 724,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "\u003d\u003d\u003d Use case: Set current wealth"
      },
      {
        "lineNumber": 725,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 726,
        "author": {
          "gitId": "-"
        },
        "content": "*MSS*"
      },
      {
        "lineNumber": 727,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 728,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "1.  User requests to set current wealth."
      },
      {
        "lineNumber": 729,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "2.  System sets current wealth."
      },
      {
        "lineNumber": 730,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "3.  System reflects newly set current wealth."
      },
      {
        "lineNumber": 731,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 732,
        "author": {
          "gitId": "-"
        },
        "content": "Use case ends."
      },
      {
        "lineNumber": 733,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 734,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "[discrete]"
      },
      {
        "lineNumber": 735,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "\u003d\u003d\u003d Use case: Add transaction item"
      },
      {
        "lineNumber": 736,
        "author": {
          "gitId": "weiyang13"
        },
        "content": ""
      },
      {
        "lineNumber": 737,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "*MSS*"
      },
      {
        "lineNumber": 738,
        "author": {
          "gitId": "weiyang13"
        },
        "content": ""
      },
      {
        "lineNumber": 739,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "1.  User enters information about transaction."
      },
      {
        "lineNumber": 740,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "2.  System creates transaction item."
      },
      {
        "lineNumber": 741,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "3.  System shows newly updated list of transaction items."
      },
      {
        "lineNumber": 742,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "+"
      },
      {
        "lineNumber": 743,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "Use case ends."
      },
      {
        "lineNumber": 744,
        "author": {
          "gitId": "weiyang13"
        },
        "content": ""
      },
      {
        "lineNumber": 745,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "[discrete]"
      },
      {
        "lineNumber": 746,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "\u003d\u003d\u003d Use case: Edit transaction item"
      },
      {
        "lineNumber": 747,
        "author": {
          "gitId": "weiyang13"
        },
        "content": ""
      },
      {
        "lineNumber": 748,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "*MSS*"
      },
      {
        "lineNumber": 749,
        "author": {
          "gitId": "weiyang13"
        },
        "content": ""
      },
      {
        "lineNumber": 750,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "1.  User +++\u003cu\u003efinds transaction item\u003c/u\u003e+++."
      },
      {
        "lineNumber": 751,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "1.  User specifies transaction to be edited and information to edit."
      },
      {
        "lineNumber": 752,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "1.  System updates the transaction item."
      },
      {
        "lineNumber": 753,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "1.  System shows newly updated list of transaction items."
      },
      {
        "lineNumber": 754,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "+"
      },
      {
        "lineNumber": 755,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "Use case ends."
      },
      {
        "lineNumber": 756,
        "author": {
          "gitId": "weiyang13"
        },
        "content": ""
      },
      {
        "lineNumber": 757,
        "author": {
          "gitId": "LeeYiyuan"
        },
        "content": "[discrete]"
      },
      {
        "lineNumber": 758,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "\u003d\u003d\u003d Use case: Delete transaction item"
      },
      {
        "lineNumber": 759,
        "author": {
          "gitId": "weiyang13"
        },
        "content": ""
      },
      {
        "lineNumber": 760,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "*MSS*"
      },
      {
        "lineNumber": 761,
        "author": {
          "gitId": "weiyang13"
        },
        "content": ""
      },
      {
        "lineNumber": 762,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "1.  User +++\u003cu\u003efinds transaction item\u003c/u\u003e+++."
      },
      {
        "lineNumber": 763,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "1.  User specifies transaction to be deleted."
      },
      {
        "lineNumber": 764,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "1.  System removes the transaction item."
      },
      {
        "lineNumber": 765,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "1.  System shows newly updated list of transaction items."
      },
      {
        "lineNumber": 766,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "+"
      },
      {
        "lineNumber": 767,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "Use case ends."
      },
      {
        "lineNumber": 768,
        "author": {
          "gitId": "weiyang13"
        },
        "content": ""
      },
      {
        "lineNumber": 769,
        "author": {
          "gitId": "LeeYiyuan"
        },
        "content": "[discrete]"
      },
      {
        "lineNumber": 770,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "\u003d\u003d\u003d Use case: Find transaction item"
      },
      {
        "lineNumber": 771,
        "author": {
          "gitId": "weiyang13"
        },
        "content": ""
      },
      {
        "lineNumber": 772,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "*MSS*"
      },
      {
        "lineNumber": 773,
        "author": {
          "gitId": "weiyang13"
        },
        "content": ""
      },
      {
        "lineNumber": 774,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "1.  User specifies month, year, and/or category of the transaction"
      },
      {
        "lineNumber": 775,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "1.  System shows filtered list of transaction items."
      },
      {
        "lineNumber": 776,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "+"
      },
      {
        "lineNumber": 777,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "Use case ends."
      },
      {
        "lineNumber": 778,
        "author": {
          "gitId": "weiyang13"
        },
        "content": ""
      },
      {
        "lineNumber": 779,
        "author": {
          "gitId": "LeeYiyuan"
        },
        "content": "[discrete]"
      },
      {
        "lineNumber": 780,
        "author": {
          "gitId": "LeeYiyuan"
        },
        "content": "\u003d\u003d\u003d Use case: Create transaction repeater"
      },
      {
        "lineNumber": 781,
        "author": {
          "gitId": "LeeYiyuan"
        },
        "content": ""
      },
      {
        "lineNumber": 782,
        "author": {
          "gitId": "LeeYiyuan"
        },
        "content": "*MSS*"
      },
      {
        "lineNumber": 783,
        "author": {
          "gitId": "LeeYiyuan"
        },
        "content": ""
      },
      {
        "lineNumber": 784,
        "author": {
          "gitId": "LeeYiyuan"
        },
        "content": "1. User requests to create a transaction repeater with specified arguments."
      },
      {
        "lineNumber": 785,
        "author": {
          "gitId": "LeeYiyuan"
        },
        "content": "2. System creates the transaction repeater."
      },
      {
        "lineNumber": 786,
        "author": {
          "gitId": "LeeYiyuan"
        },
        "content": "+"
      },
      {
        "lineNumber": 787,
        "author": {
          "gitId": "LeeYiyuan"
        },
        "content": "Use case ends"
      },
      {
        "lineNumber": 788,
        "author": {
          "gitId": "LeeYiyuan"
        },
        "content": ""
      },
      {
        "lineNumber": 789,
        "author": {
          "gitId": "LeeYiyuan"
        },
        "content": "[discrete]"
      },
      {
        "lineNumber": 790,
        "author": {
          "gitId": "LeeYiyuan"
        },
        "content": "\u003d\u003d\u003d Use case: Edit transaction repeater"
      },
      {
        "lineNumber": 791,
        "author": {
          "gitId": "LeeYiyuan"
        },
        "content": ""
      },
      {
        "lineNumber": 792,
        "author": {
          "gitId": "LeeYiyuan"
        },
        "content": "*MSS*"
      },
      {
        "lineNumber": 793,
        "author": {
          "gitId": "LeeYiyuan"
        },
        "content": ""
      },
      {
        "lineNumber": 794,
        "author": {
          "gitId": "LeeYiyuan"
        },
        "content": "1. User requests to edit a transaction repeated with specified arguments."
      },
      {
        "lineNumber": 795,
        "author": {
          "gitId": "LeeYiyuan"
        },
        "content": "2. System updates the transaction repeater."
      },
      {
        "lineNumber": 796,
        "author": {
          "gitId": "LeeYiyuan"
        },
        "content": "+"
      },
      {
        "lineNumber": 797,
        "author": {
          "gitId": "LeeYiyuan"
        },
        "content": "Use case ends"
      },
      {
        "lineNumber": 798,
        "author": {
          "gitId": "LeeYiyuan"
        },
        "content": ""
      },
      {
        "lineNumber": 799,
        "author": {
          "gitId": "LeeYiyuan"
        },
        "content": "[discrete]"
      },
      {
        "lineNumber": 800,
        "author": {
          "gitId": "LeeYiyuan"
        },
        "content": "\u003d\u003d\u003d Use case: Delete transaction repeaters including all produced transactions"
      },
      {
        "lineNumber": 801,
        "author": {
          "gitId": "LeeYiyuan"
        },
        "content": ""
      },
      {
        "lineNumber": 802,
        "author": {
          "gitId": "LeeYiyuan"
        },
        "content": "*MSS*"
      },
      {
        "lineNumber": 803,
        "author": {
          "gitId": "LeeYiyuan"
        },
        "content": ""
      },
      {
        "lineNumber": 804,
        "author": {
          "gitId": "LeeYiyuan"
        },
        "content": "1. User requests to delete a transaction repeater together with all its produced transactions."
      },
      {
        "lineNumber": 805,
        "author": {
          "gitId": "LeeYiyuan"
        },
        "content": "2. System removes existing transactions produced from transaction repeater."
      },
      {
        "lineNumber": 806,
        "author": {
          "gitId": "LeeYiyuan"
        },
        "content": "3. System removes transaction repeater."
      },
      {
        "lineNumber": 807,
        "author": {
          "gitId": "LeeYiyuan"
        },
        "content": "+"
      },
      {
        "lineNumber": 808,
        "author": {
          "gitId": "LeeYiyuan"
        },
        "content": "Use case ends"
      },
      {
        "lineNumber": 809,
        "author": {
          "gitId": "LeeYiyuan"
        },
        "content": ""
      },
      {
        "lineNumber": 810,
        "author": {
          "gitId": "LeeYiyuan"
        },
        "content": "[discrete]"
      },
      {
        "lineNumber": 811,
        "author": {
          "gitId": "LeeYiyuan"
        },
        "content": "\u003d\u003d\u003d Use case: Filter transaction repeaters"
      },
      {
        "lineNumber": 812,
        "author": {
          "gitId": "LeeYiyuan"
        },
        "content": ""
      },
      {
        "lineNumber": 813,
        "author": {
          "gitId": "LeeYiyuan"
        },
        "content": "*MSS*"
      },
      {
        "lineNumber": 814,
        "author": {
          "gitId": "LeeYiyuan"
        },
        "content": ""
      },
      {
        "lineNumber": 815,
        "author": {
          "gitId": "LeeYiyuan"
        },
        "content": "1. User requests to find transaction repeaters by specified fields."
      },
      {
        "lineNumber": 816,
        "author": {
          "gitId": "LeeYiyuan"
        },
        "content": "2. System filters existing transaction repeaters against specified fields."
      },
      {
        "lineNumber": 817,
        "author": {
          "gitId": "LeeYiyuan"
        },
        "content": "3. System shows filtered transaction repeaters."
      },
      {
        "lineNumber": 818,
        "author": {
          "gitId": "LeeYiyuan"
        },
        "content": "+"
      },
      {
        "lineNumber": 819,
        "author": {
          "gitId": "LeeYiyuan"
        },
        "content": "Use case ends"
      },
      {
        "lineNumber": 820,
        "author": {
          "gitId": "LeeYiyuan"
        },
        "content": ""
      },
      {
        "lineNumber": 821,
        "author": {
          "gitId": "-"
        },
        "content": "[discrete]"
      },
      {
        "lineNumber": 822,
        "author": {
          "gitId": "nexolute"
        },
        "content": "\u003d\u003d\u003d Use case: Set monthly expenditure budget"
      },
      {
        "lineNumber": 823,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 824,
        "author": {
          "gitId": "-"
        },
        "content": "*MSS*"
      },
      {
        "lineNumber": 825,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 826,
        "author": {
          "gitId": "nexolute"
        },
        "content": "1.  User requests to set the monthly expenditure budget."
      },
      {
        "lineNumber": 827,
        "author": {
          "gitId": "nexolute"
        },
        "content": "2.  System set the monthly expenditure budget."
      },
      {
        "lineNumber": 828,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 829,
        "author": {
          "gitId": "-"
        },
        "content": "Use case ends."
      },
      {
        "lineNumber": 830,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 831,
        "author": {
          "gitId": "troomtroom"
        },
        "content": "[discrete]"
      },
      {
        "lineNumber": 832,
        "author": {
          "gitId": "troomtroom"
        },
        "content": "\u003d\u003d\u003d Use case: Add loan"
      },
      {
        "lineNumber": 833,
        "author": {
          "gitId": "troomtroom"
        },
        "content": ""
      },
      {
        "lineNumber": 834,
        "author": {
          "gitId": "troomtroom"
        },
        "content": "*MSS*"
      },
      {
        "lineNumber": 835,
        "author": {
          "gitId": "troomtroom"
        },
        "content": ""
      },
      {
        "lineNumber": 836,
        "author": {
          "gitId": "troomtroom"
        },
        "content": "1. User requests to add a new loan with name, amount and date by."
      },
      {
        "lineNumber": 837,
        "author": {
          "gitId": "troomtroom"
        },
        "content": "2. System parses request to retrive details."
      },
      {
        "lineNumber": 838,
        "author": {
          "gitId": "troomtroom"
        },
        "content": "3. System adds new loan to list."
      },
      {
        "lineNumber": 839,
        "author": {
          "gitId": "troomtroom"
        },
        "content": "4. System updates list and displays what was added."
      },
      {
        "lineNumber": 840,
        "author": {
          "gitId": "troomtroom"
        },
        "content": "+"
      },
      {
        "lineNumber": 841,
        "author": {
          "gitId": "troomtroom"
        },
        "content": "Use case ends"
      },
      {
        "lineNumber": 842,
        "author": {
          "gitId": "troomtroom"
        },
        "content": ""
      },
      {
        "lineNumber": 843,
        "author": {
          "gitId": "troomtroom"
        },
        "content": "[discrete]"
      },
      {
        "lineNumber": 844,
        "author": {
          "gitId": "troomtroom"
        },
        "content": "\u003d\u003d\u003d Use case: View loans with search"
      },
      {
        "lineNumber": 845,
        "author": {
          "gitId": "troomtroom"
        },
        "content": "*MSS*"
      },
      {
        "lineNumber": 846,
        "author": {
          "gitId": "troomtroom"
        },
        "content": ""
      },
      {
        "lineNumber": 847,
        "author": {
          "gitId": "troomtroom"
        },
        "content": "1. User requests to search for all loans, with search keywords."
      },
      {
        "lineNumber": 848,
        "author": {
          "gitId": "troomtroom"
        },
        "content": "2. System parses and decides the request search constrains."
      },
      {
        "lineNumber": 849,
        "author": {
          "gitId": "troomtroom"
        },
        "content": "3. System displays seelected search results."
      },
      {
        "lineNumber": 850,
        "author": {
          "gitId": "troomtroom"
        },
        "content": "+"
      },
      {
        "lineNumber": 851,
        "author": {
          "gitId": "troomtroom"
        },
        "content": "Use case ends"
      },
      {
        "lineNumber": 852,
        "author": {
          "gitId": "troomtroom"
        },
        "content": ""
      },
      {
        "lineNumber": 853,
        "author": {
          "gitId": "troomtroom"
        },
        "content": "[discrete]"
      },
      {
        "lineNumber": 854,
        "author": {
          "gitId": "troomtroom"
        },
        "content": "\u003d\u003d\u003d Use case: Mark loans as part done"
      },
      {
        "lineNumber": 855,
        "author": {
          "gitId": "troomtroom"
        },
        "content": ""
      },
      {
        "lineNumber": 856,
        "author": {
          "gitId": "troomtroom"
        },
        "content": "*MSS*"
      },
      {
        "lineNumber": 857,
        "author": {
          "gitId": "troomtroom"
        },
        "content": ""
      },
      {
        "lineNumber": 858,
        "author": {
          "gitId": "troomtroom"
        },
        "content": "1. User requests to mark a lone as paid off."
      },
      {
        "lineNumber": 859,
        "author": {
          "gitId": "troomtroom"
        },
        "content": "2. System removes existing loan from the list."
      },
      {
        "lineNumber": 860,
        "author": {
          "gitId": "troomtroom"
        },
        "content": "3. System updates the total loan value."
      },
      {
        "lineNumber": 861,
        "author": {
          "gitId": "troomtroom"
        },
        "content": "4. System shows the new total loan value, with the new paid off loan."
      },
      {
        "lineNumber": 862,
        "author": {
          "gitId": "troomtroom"
        },
        "content": "+"
      },
      {
        "lineNumber": 863,
        "author": {
          "gitId": "troomtroom"
        },
        "content": "Use case ends"
      },
      {
        "lineNumber": 864,
        "author": {
          "gitId": "troomtroom"
        },
        "content": ""
      },
      {
        "lineNumber": 865,
        "author": {
          "gitId": "-"
        },
        "content": "*Extensions*"
      },
      {
        "lineNumber": 866,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 867,
        "author": {
          "gitId": "-"
        },
        "content": "[none]"
      },
      {
        "lineNumber": 868,
        "author": {
          "gitId": "nexolute"
        },
        "content": "* 1a. System detect an invalid budget amount."
      },
      {
        "lineNumber": 869,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 870,
        "author": {
          "gitId": "-"
        },
        "content": "[none]"
      },
      {
        "lineNumber": 871,
        "author": {
          "gitId": "nexolute"
        },
        "content": "** 1a1. System shows an error message."
      },
      {
        "lineNumber": 872,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 873,
        "author": {
          "gitId": "-"
        },
        "content": "Use case ends."
      },
      {
        "lineNumber": 874,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 875,
        "author": {
          "gitId": "Alaete"
        },
        "content": "[discrete]"
      },
      {
        "lineNumber": 876,
        "author": {
          "gitId": "Alaete"
        },
        "content": "\u003d\u003d\u003d Use case: View expenditure trend"
      },
      {
        "lineNumber": 877,
        "author": {
          "gitId": "Alaete"
        },
        "content": ""
      },
      {
        "lineNumber": 878,
        "author": {
          "gitId": "Alaete"
        },
        "content": "*MSS*"
      },
      {
        "lineNumber": 879,
        "author": {
          "gitId": "Alaete"
        },
        "content": ""
      },
      {
        "lineNumber": 880,
        "author": {
          "gitId": "Alaete"
        },
        "content": "1.  User requests to view expenditure trend over a period."
      },
      {
        "lineNumber": 881,
        "author": {
          "gitId": "Alaete"
        },
        "content": "2.  System retrieves expenditure entries for each month in the indicated period."
      },
      {
        "lineNumber": 882,
        "author": {
          "gitId": "Alaete"
        },
        "content": "3.  System totals up expenditure for each month in the indicated period."
      },
      {
        "lineNumber": 883,
        "author": {
          "gitId": "Alaete"
        },
        "content": "4.  System shows the expenditure totals for each month in the indicated period."
      },
      {
        "lineNumber": 884,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 885,
        "author": {
          "gitId": "Alaete"
        },
        "content": "Use case ends."
      },
      {
        "lineNumber": 886,
        "author": {
          "gitId": "Alaete"
        },
        "content": ""
      },
      {
        "lineNumber": 887,
        "author": {
          "gitId": "Alaete"
        },
        "content": "[discrete]"
      },
      {
        "lineNumber": 888,
        "author": {
          "gitId": "Alaete"
        },
        "content": "\u003d\u003d\u003d Use case: View expenditure breakdown by category"
      },
      {
        "lineNumber": 889,
        "author": {
          "gitId": "Alaete"
        },
        "content": ""
      },
      {
        "lineNumber": 890,
        "author": {
          "gitId": "Alaete"
        },
        "content": "*MSS*"
      },
      {
        "lineNumber": 891,
        "author": {
          "gitId": "Alaete"
        },
        "content": ""
      },
      {
        "lineNumber": 892,
        "author": {
          "gitId": "Alaete"
        },
        "content": "1.  User requests to view expenditure breakdown by category over a period."
      },
      {
        "lineNumber": 893,
        "author": {
          "gitId": "Alaete"
        },
        "content": "2.  System retrieves expenditure entries for each category in the indicated period."
      },
      {
        "lineNumber": 894,
        "author": {
          "gitId": "Alaete"
        },
        "content": "3.  System totals up expenditure for each category in the indicated period."
      },
      {
        "lineNumber": 895,
        "author": {
          "gitId": "Alaete"
        },
        "content": "4.  System shows the expenditure totals for each category in the indicated period."
      },
      {
        "lineNumber": 896,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 897,
        "author": {
          "gitId": "Alaete"
        },
        "content": "Use case ends."
      },
      {
        "lineNumber": 898,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 899,
        "author": {
          "gitId": "Alaete"
        },
        "content": "[discrete]"
      },
      {
        "lineNumber": 900,
        "author": {
          "gitId": "Alaete"
        },
        "content": "\u003d\u003d\u003d Use case: View expenditure ranking chart"
      },
      {
        "lineNumber": 901,
        "author": {
          "gitId": "Alaete"
        },
        "content": ""
      },
      {
        "lineNumber": 902,
        "author": {
          "gitId": "Alaete"
        },
        "content": "*MSS*"
      },
      {
        "lineNumber": 903,
        "author": {
          "gitId": "Alaete"
        },
        "content": ""
      },
      {
        "lineNumber": 904,
        "author": {
          "gitId": "Alaete"
        },
        "content": "1.  User requests to view expenditure ranking chart over a period."
      },
      {
        "lineNumber": 905,
        "author": {
          "gitId": "Alaete"
        },
        "content": "2.  System retrieves all expenditure entries in the indicated period."
      },
      {
        "lineNumber": 906,
        "author": {
          "gitId": "Alaete"
        },
        "content": "3.  System sorts expenditure entries in the indicated period."
      },
      {
        "lineNumber": 907,
        "author": {
          "gitId": "Alaete"
        },
        "content": "4.  System shows the sorted expenditure entries in the indicated period."
      },
      {
        "lineNumber": 908,
        "author": {
          "gitId": "Alaete"
        },
        "content": "+"
      },
      {
        "lineNumber": 909,
        "author": {
          "gitId": "Alaete"
        },
        "content": "Use case ends."
      },
      {
        "lineNumber": 910,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 911,
        "author": {
          "gitId": "-"
        },
        "content": "[appendix]"
      },
      {
        "lineNumber": 912,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Non Functional Requirements"
      },
      {
        "lineNumber": 913,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 914,
        "author": {
          "gitId": "-"
        },
        "content": ".  Should work on any \u003c\u003cmainstream-os,mainstream OS\u003e\u003e as long as it has Java `11` or above installed."
      },
      {
        "lineNumber": 915,
        "author": {
          "gitId": "weiyang13"
        },
        "content": ".  Should be able to hold up to 1000 transactions without a noticeable sluggishness in performance for typical usage."
      },
      {
        "lineNumber": 916,
        "author": {
          "gitId": "-"
        },
        "content": ".  A user with above average typing speed for regular English text (i.e. not code, not system admin commands) should be able to accomplish most of the tasks faster using commands than using the mouse."
      },
      {
        "lineNumber": 917,
        "author": {
          "gitId": "-"
        },
        "content": "_{More to be added}_"
      },
      {
        "lineNumber": 918,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 919,
        "author": {
          "gitId": "-"
        },
        "content": "[appendix]"
      },
      {
        "lineNumber": 920,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Glossary"
      },
      {
        "lineNumber": 921,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 922,
        "author": {
          "gitId": "-"
        },
        "content": "[[mainstream-os]] Mainstream OS::"
      },
      {
        "lineNumber": 923,
        "author": {
          "gitId": "-"
        },
        "content": "Windows, Linux, Unix, OS-X"
      },
      {
        "lineNumber": 924,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 925,
        "author": {
          "gitId": "-"
        },
        "content": "[appendix]"
      },
      {
        "lineNumber": 926,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Product Survey"
      },
      {
        "lineNumber": 927,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 928,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "*DBS digibank SG*"
      },
      {
        "lineNumber": 929,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 930,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "Author: DBS Bank Ltd"
      },
      {
        "lineNumber": 931,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 932,
        "author": {
          "gitId": "-"
        },
        "content": "Pros:"
      },
      {
        "lineNumber": 933,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 934,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "* Links to bank account and PayLah!"
      },
      {
        "lineNumber": 935,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "* Shows visual summary of cashflow"
      },
      {
        "lineNumber": 936,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "* Automatically categorizes items"
      },
      {
        "lineNumber": 937,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 938,
        "author": {
          "gitId": "-"
        },
        "content": "Cons:"
      },
      {
        "lineNumber": 939,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 940,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "* Does not use CLI"
      },
      {
        "lineNumber": 941,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "* Does not allow for customisation of transactions beyond categories"
      },
      {
        "lineNumber": 942,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "* Does not have a budgeting feature"
      },
      {
        "lineNumber": 943,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 944,
        "author": {
          "gitId": "-"
        },
        "content": "[appendix]"
      },
      {
        "lineNumber": 945,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Instructions for Manual Testing"
      },
      {
        "lineNumber": 946,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 947,
        "author": {
          "gitId": "-"
        },
        "content": "Given below are instructions to test the app manually."
      },
      {
        "lineNumber": 948,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 949,
        "author": {
          "gitId": "-"
        },
        "content": "[NOTE]"
      },
      {
        "lineNumber": 950,
        "author": {
          "gitId": "-"
        },
        "content": "These instructions only provide a starting point for testers to work on; testers are expected to do more _exploratory_ testing."
      },
      {
        "lineNumber": 951,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 952,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Launch and Shutdown"
      },
      {
        "lineNumber": 953,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 954,
        "author": {
          "gitId": "-"
        },
        "content": ". Initial launch"
      },
      {
        "lineNumber": 955,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 956,
        "author": {
          "gitId": "-"
        },
        "content": ".. Download the jar file and copy into an empty folder"
      },
      {
        "lineNumber": 957,
        "author": {
          "gitId": "-"
        },
        "content": ".. Double-click the jar file +"
      },
      {
        "lineNumber": 958,
        "author": {
          "gitId": "-"
        },
        "content": "   Expected: Shows the GUI with a set of sample contacts. The window size may not be optimum."
      },
      {
        "lineNumber": 959,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 960,
        "author": {
          "gitId": "-"
        },
        "content": ". Saving window preferences"
      },
      {
        "lineNumber": 961,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 962,
        "author": {
          "gitId": "-"
        },
        "content": ".. Resize the window to an optimum size. Move the window to a different location. Close the window."
      },
      {
        "lineNumber": 963,
        "author": {
          "gitId": "-"
        },
        "content": ".. Re-launch the app by double-clicking the jar file. +"
      },
      {
        "lineNumber": 964,
        "author": {
          "gitId": "-"
        },
        "content": "   Expected: The most recent window size and location is retained."
      },
      {
        "lineNumber": 965,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 966,
        "author": {
          "gitId": "-"
        },
        "content": "_{ more test cases ... }_"
      },
      {
        "lineNumber": 967,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 968,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Deleting a person"
      },
      {
        "lineNumber": 969,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 970,
        "author": {
          "gitId": "-"
        },
        "content": ". Deleting a person while all persons are listed"
      },
      {
        "lineNumber": 971,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 972,
        "author": {
          "gitId": "-"
        },
        "content": ".. Prerequisites: List all persons using the `list` command. Multiple persons in the list."
      },
      {
        "lineNumber": 973,
        "author": {
          "gitId": "-"
        },
        "content": ".. Test case: `delete 1` +"
      },
      {
        "lineNumber": 974,
        "author": {
          "gitId": "-"
        },
        "content": "   Expected: First contact is deleted from the list. Details of the deleted contact shown in the status message. Timestamp in the status bar is updated."
      },
      {
        "lineNumber": 975,
        "author": {
          "gitId": "-"
        },
        "content": ".. Test case: `delete 0` +"
      },
      {
        "lineNumber": 976,
        "author": {
          "gitId": "-"
        },
        "content": "   Expected: No person is deleted. Error details shown in the status message. Status bar remains the same."
      },
      {
        "lineNumber": 977,
        "author": {
          "gitId": "-"
        },
        "content": ".. Other incorrect delete commands to try: `delete`, `delete x` (where x is larger than the list size) _{give more}_ +"
      },
      {
        "lineNumber": 978,
        "author": {
          "gitId": "-"
        },
        "content": "   Expected: Similar to previous."
      },
      {
        "lineNumber": 979,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 980,
        "author": {
          "gitId": "-"
        },
        "content": "_{ more test cases ... }_"
      },
      {
        "lineNumber": 981,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 982,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Saving data"
      },
      {
        "lineNumber": 983,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 984,
        "author": {
          "gitId": "-"
        },
        "content": ". Dealing with missing/corrupted data files"
      },
      {
        "lineNumber": 985,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 986,
        "author": {
          "gitId": "-"
        },
        "content": ".. _{explain how to simulate a missing/corrupted file and the expected behavior}_"
      },
      {
        "lineNumber": 987,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 988,
        "author": {
          "gitId": "-"
        },
        "content": "_{ more test cases ... }_"
      }
    ],
    "authorContributionMap": {
      "LeeYiyuan": 98,
      "nexolute": 95,
      "Alaete": 130,
      "weiyang13": 231,
      "-": 384,
      "troomtroom": 50
    }
  },
  {
    "path": "docs/Documentation.adoc",
    "fileType": "docs",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "nexolute"
        },
        "content": "\u003d IchiFund - Documentation"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ":site-section: DeveloperGuide"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": ":toc:"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ":toc-title:"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ":toc-placement: preamble"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ":sectnums:"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ":imagesDir: images"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ":stylesDir: stylesheets"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ":xrefstyle: full"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "ifdef::env-github[]"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ":tip-caption: :bulb:"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ":note-caption: :information_source:"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ":warning-caption: :warning:"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "endif::[]"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ":repoURL: https://github.com/se-edu/addressbook-level3/tree/master"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Introduction"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "We use asciidoc for writing documentation."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "[NOTE]"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "We chose asciidoc over Markdown because asciidoc, although a bit more complex than Markdown, provides more flexibility in formatting."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Editing Documentation"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "See \u003c\u003cUsingGradle#rendering-asciidoc-files, UsingGradle.adoc\u003e\u003e to learn how to render `.adoc` files locally to preview the end result of your edits."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "Alternatively, you can download the AsciiDoc plugin for IntelliJ, which allows you to preview the changes you have made to your `.adoc` files in real-time."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Editing Diagrams"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "See \u003c\u003cUsingPlantUml#, UsingPlantUml.adoc\u003e\u003e to find out how to create and update the UML diagrams in the developer guide."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Publishing Documentation"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "See \u003c\u003cUsingTravis#deploying-github-pages, UsingTravis.adoc\u003e\u003e to learn how to deploy GitHub Pages using Travis."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Converting Documentation to PDF format"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "We use https://www.google.com/chrome/browser/desktop/[Google Chrome] for converting documentation to PDF format, as Chrome\u0027s PDF engine preserves hyperlinks used in webpages."
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "Here are the steps to convert the project documentation files to PDF format."
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ".  Follow the instructions in \u003c\u003cUsingGradle#rendering-asciidoc-files, UsingGradle.adoc\u003e\u003e to convert the AsciiDoc files in the `docs/` directory to HTML format."
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": ".  Go to your generated HTML files in the `build/docs` folder, right click on them and select `Open with` -\u003e `Google Chrome`."
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ".  Within Chrome, click on the `Print` option in Chrome\u0027s menu."
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": ".  Set the destination to `Save as PDF`, then click `Save` to save a copy of the file in PDF format. For best results, use the settings indicated in the screenshot below."
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": ".Saving documentation as PDF files in Chrome"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "image::chrome_save_as_pdf.png[width\u003d\"300\"]"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "[[Docs-SiteWideDocSettings]]"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Site-wide Documentation Settings"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "The link:{repoURL}/build.gradle[`build.gradle`] file specifies some project-specific https://asciidoctor.org/docs/user-manual/#attributes[asciidoc attributes] which affects how all documentation files within this project are rendered."
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "[TIP]"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "Attributes left unset in the `build.gradle` file will use their *default value*, if any."
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "[cols\u003d\"1,2a,1\", options\u003d\"header\"]"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": ".List of site-wide attributes"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "|\u003d\u003d\u003d"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "|Attribute name |Description |Default value"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "|`site-name`"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "|The name of the website."
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "If set, the name will be displayed near the top of the page."
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "|_not set_"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "|`site-githuburl`"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "|URL to the site\u0027s repository on https://github.com[GitHub]."
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "Setting this will add a \"View on GitHub\" link in the navigation bar."
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "|_not set_"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "|`site-seedu`"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "|Define this attribute if the project is an official SE-EDU project."
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "This will render the SE-EDU navigation bar at the top of the page, and add some SE-EDU-specific navigation items."
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "|_not set_"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "|\u003d\u003d\u003d"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "[[Docs-PerFileDocSettings]]"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Per-file Documentation Settings"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "Each `.adoc` file may also specify some file-specific https://asciidoctor.org/docs/user-manual/#attributes[asciidoc attributes] which affects how the file is rendered."
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "Asciidoctor\u0027s https://asciidoctor.org/docs/user-manual/#builtin-attributes[built-in attributes] may be specified and used as well."
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "[TIP]"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "Attributes left unset in `.adoc` files will use their *default value*, if any."
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "[cols\u003d\"1,2a,1\", options\u003d\"header\"]"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": ".List of per-file attributes, excluding Asciidoctor\u0027s built-in attributes"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "|\u003d\u003d\u003d"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "|Attribute name |Description |Default value"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "|`site-section`"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "|Site section that the document belongs to."
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "This will cause the associated item in the navigation bar to be highlighted."
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "One of: `UserGuide`, `DeveloperGuide`, ``LearningOutcomes``{asterisk}, `AboutUs`, `ContactUs`"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "_{asterisk} Official SE-EDU projects only_"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "|_not set_"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "|`no-site-header`"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "|Set this attribute to remove the site navigation bar."
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "|_not set_"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "|\u003d\u003d\u003d"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Site Template"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "The files in link:{repoURL}/docs/stylesheets[`docs/stylesheets`] are the https://developer.mozilla.org/en-US/docs/Web/CSS[CSS stylesheets] of the site."
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "You can modify them to change some properties of the site\u0027s design."
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "The files in link:{repoURL}/docs/templates[`docs/templates`] controls the rendering of `.adoc` files into HTML5."
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "These template files are written in a mixture of https://www.ruby-lang.org[Ruby] and http://slim-lang.com[Slim]."
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "[WARNING]"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "Modifying the template files in link:{repoURL}/docs/templates[`docs/templates`] requires some knowledge and experience with Ruby and Asciidoctor\u0027s API."
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "You should only modify them if you need greater control over the site\u0027s layout than what stylesheets can provide."
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "The SE-EDU team does not provide support for modified template files."
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d\u003d"
      }
    ],
    "authorContributionMap": {
      "nexolute": 1,
      "-": 122
    }
  },
  {
    "path": "docs/SettingUp.adoc",
    "fileType": "docs",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "nexolute"
        },
        "content": "\u003d IchiFund - Setting Up"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ":site-section: DeveloperGuide"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": ":toc:"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ":toc-title:"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ":toc-placement: preamble"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ":sectnums:"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ":imagesDir: images"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ":stylesDir: stylesheets"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ":xrefstyle: full"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "ifdef::env-github[]"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ":tip-caption: :bulb:"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ":note-caption: :information_source:"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ":warning-caption: :warning:"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "endif::[]"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ":repoURL: https://github.com/se-edu/addressbook-level3/tree/master"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Prerequisites"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ". *JDK `11`* or above"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ". *IntelliJ* IDE"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "[NOTE]"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "IntelliJ by default has Gradle and JavaFx plugins installed. +"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "Do not disable them. If you have disabled them, go to `File` \u003e `Settings` \u003e `Plugins` to re-enable them."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Setting up the project in your computer"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ". Fork this repo, and clone the fork to your computer"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ". Open IntelliJ (if you are not in the welcome screen, click `File` \u003e `Close Project` to close the existing project dialog first)"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ". Set up the correct JDK version for Gradle"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ".. Click `Configure` \u003e `Project Defaults` \u003e `Project Structure`"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ".. Click `New...` and find the directory of the JDK"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ". Click `Import Project`"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ". Locate the `build.gradle` file and select it. Click `OK`"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ". Click `Open as Project`"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": ". Click `OK` to accept the default settings."
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Verifying the setup"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "nexolute"
        },
        "content": ". Run the `seedu.ichifund.Main` and try a few commands"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ". \u003c\u003cTesting#,Run the tests\u003e\u003e to ensure they all pass."
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Configurations to do before writing code"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Configuring the coding style"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "This project follows https://github.com/oss-generic/process/blob/master/docs/CodingStandards.adoc[oss-generic coding standards]. IntelliJ\u0027s default style is mostly compliant with ours but it uses a different import order from ours. To rectify,"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": ". Go to `File` \u003e `Settings...` (Windows/Linux), or `IntelliJ IDEA` \u003e `Preferences...` (macOS)"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": ". Select `Editor` \u003e `Code Style` \u003e `Java`"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": ". Click on the `Imports` tab to set the order"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "* For `Class count to use import with \u0027\\*\u0027` and `Names count to use static import with \u0027*\u0027`: Set to `999` to prevent IntelliJ from contracting the import statements"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "* For `Import Layout`: The order is `import static all other imports`, `import java.\\*`, `import javax.*`, `import org.\\*`, `import com.*`, `import all other imports`. Add a `\u003cblank line\u003e` between each `import`"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "Optionally, you can follow the \u003c\u003cUsingCheckstyle#, UsingCheckstyle.adoc\u003e\u003e document to configure Intellij to check style-compliance as you write code."
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Updating documentation to match your fork"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "After forking the repo, the documentation will still have the SE-EDU branding and refer to the `se-edu/addressbook-level3` repo."
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "If you plan to develop this fork as a separate product (i.e. instead of contributing to `se-edu/addressbook-level3`), you should do the following:"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": ". Configure the \u003c\u003cDocumentation#Docs-SiteWideDocSettings, site-wide documentation settings\u003e\u003e in link:{repoURL}/build.gradle[`build.gradle`], such as the `site-name`, to suit your own project."
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": ". Replace the URL in the attribute `repoURL` in link:{repoURL}/docs/DeveloperGuide.adoc[`DeveloperGuide.adoc`] and link:{repoURL}/docs/UserGuide.adoc[`UserGuide.adoc`] with the URL of your fork."
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Setting up CI"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "Set up Travis to perform Continuous Integration (CI) for your fork. See \u003c\u003cUsingTravis#, UsingTravis.adoc\u003e\u003e to learn how to set it up."
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "After setting up Travis, you can optionally set up coverage reporting for your team fork (see \u003c\u003cUsingCoveralls#, UsingCoveralls.adoc\u003e\u003e)."
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "[NOTE]"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "Coverage reporting could be useful for a team repository that hosts the final version but it is not that useful for your personal fork."
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "Optionally, you can set up AppVeyor as a second CI (see \u003c\u003cUsingAppVeyor#, UsingAppVeyor.adoc\u003e\u003e)."
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "[NOTE]"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "Having both Travis and AppVeyor ensures your App works on both Unix-based platforms and Windows-based platforms (Travis is Unix-based and AppVeyor is Windows-based)"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Getting started with coding"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "When you are ready to start coding, we recommend that you get some sense of the overall design by reading about \u003c\u003cDeveloperGuide#Design-Architecture, AddressBook\u0027s architecture\u003e\u003e."
      }
    ],
    "authorContributionMap": {
      "nexolute": 2,
      "-": 82
    }
  },
  {
    "path": "docs/Testing.adoc",
    "fileType": "docs",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "nexolute"
        },
        "content": "\u003d IchiFund - Testing"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ":site-section: DeveloperGuide"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": ":toc:"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ":toc-title:"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ":toc-placement: preamble"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ":sectnums:"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ":imagesDir: images"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ":stylesDir: stylesheets"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ":xrefstyle: full"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "ifdef::env-github[]"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ":tip-caption: :bulb:"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ":note-caption: :information_source:"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ":warning-caption: :warning:"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "endif::[]"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ":repoURL: https://github.com/se-edu/addressbook-level3/tree/master"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Running Tests"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "There are two ways to run tests."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "*Method 1: Using IntelliJ JUnit test runner*"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "* To run all tests, right-click on the `src/test/java` folder and choose `Run \u0027All Tests\u0027`"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "* To run a subset of tests, you can right-click on a test package, test class, or a test and choose `Run \u0027ABC\u0027`"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "*Method 2: Using Gradle*"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "* Open a console and run the command `gradlew clean test` (Mac/Linux: `./gradlew clean test`)"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "[NOTE]"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "See \u003c\u003cUsingGradle#, UsingGradle.adoc\u003e\u003e for more info on how to run tests using Gradle."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Types of tests"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "We have three types of tests:"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": ".  _Unit tests_ targeting the lowest level methods/classes. +"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "nexolute"
        },
        "content": "e.g. `seedu.ichifund.commons.StringUtilTest`"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ".  _Integration tests_ that are checking the integration of multiple code units (those code units are assumed to be working). +"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "nexolute"
        },
        "content": "e.g. `seedu.ichifund.storage.StorageManagerTest`"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ".  Hybrids of unit and integration tests. These test are checking multiple code units as well as how the are connected together. +"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "nexolute"
        },
        "content": "e.g. `seedu.ichifund.logic.LogicManagerTest`"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Troubleshooting Testing"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "**Problem: Keyboard and mouse movements are not simulated on macOS Mojave, resulting in GUI Tests failure.**"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "* Reason: From macOS Mojave onwards, applications without `Accessibility` permission cannot simulate certain keyboard and mouse movements."
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "* Solution: Open `System Preferences`, click `Security and Privacy` -\u003e `Privacy` -\u003e `Accessibility`, and check the box beside `Intellij IDEA`."
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": ".`Accessibility` permission is granted to `IntelliJ IDEA`"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "image::testfx-idea-accessibility-permissions.png[width\u003d\"600\"]"
      }
    ],
    "authorContributionMap": {
      "nexolute": 4,
      "-": 48
    }
  },
  {
    "path": "docs/UserGuide.adoc",
    "fileType": "docs",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "nexolute"
        },
        "content": "\u003d IchiFund - User Guide"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ":site-section: UserGuide"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": ":toc:"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ":toc-title:"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ":toc-placement: preamble"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ":sectnums:"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ":imagesDir: images"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ":stylesDir: stylesheets"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ":xrefstyle: full"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ":experimental:"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "ifdef::env-github[]"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ":tip-caption: :bulb:"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ":note-caption: :information_source:"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "endif::[]"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "nexolute"
        },
        "content": ":repoURL: https://github.com/AY1920S1-CS2103T-W12-4/main"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "nexolute"
        },
        "content": "By: `Team AY1920S1-CS2103T-W12-4`      Since: `Sep 2019`      Licence: `MIT`"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Introduction"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "IchiFund is for those who *prefer to use a desktop app for managing finance*. More importantly, IchiFund is"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "*optimized for those who prefer to work with a Command Line Interface* (CLI) while still having the benefits of a"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "Graphical User Interface (GUI). If you can type fast, IchiFund can get your finance management tasks done faster than"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "traditional GUI apps. Interested? Jump to the \u003c\u003cQuick Start\u003e\u003e to get started. Enjoy!"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Quick Start"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ".  Ensure you have Java `11` or above installed in your Computer."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "nexolute"
        },
        "content": ".  Download the latest `ichifund.jar` link:{repoURL}/releases[here]."
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "nexolute"
        },
        "content": ".  Copy the file to the folder you want to use as the home folder for your IchiFund."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Alaete"
        },
        "content": ".  Double-click the file to start IchiFund. The GUI should appear in a few seconds."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "image::Ui.png[width\u003d\"790\"]"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ".  Type the command in the command box and press kbd:[Enter] to execute it. +"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Alaete"
        },
        "content": "E.g., typing *`help`* and pressing kbd:[Enter] will open the help window. +"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "Here are some example commands you can try in the transaction tab:"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "* **`add`**`de/Lunch a/12.30` : adds an expenditure item for \"Lunch\" to IchiFund."
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "* **`filter`**`m/10 y/2019 c/!all ty/exp` : finds all expenditure items from October 2019."
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Alaete"
        },
        "content": "* *`exit`* : exits IchiFund"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Alaete"
        },
        "content": ".  Refer to \u003c\u003cNavigation\u003e\u003e for details on how to navigate through IchiFund."
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": ".  Refer to \u003c\u003cFeatures\u003e\u003e for details of each command."
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "[[Navigation]]"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "\u003d\u003d Navigation"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "IchiFund has five features: Transactions, Repeaters, Budgets, Loans and Analytics."
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "Each feature is allocated to its own tab, and the commands for each feature only work when you are"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "using the tab associated to the feature."
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "weiyang13"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "When you enter a command that is not used by the feature, the following message is shown:"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "weiyang13"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "image::InapplicableCommand.png[]"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "weiyang13"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "Alaete"
        },
        "content": "In this case, `expenditure`, a command for \"Analytics\", is not recognised as the application is currently"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "Alaete"
        },
        "content": "in the \"Transactions\" tab."
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "weiyang13"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "\u003d\u003d\u003d Switching tabs"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "weiyang13"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "Alaete"
        },
        "content": "We offer three modes for you to switch tabs:"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "weiyang13"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "weiyang13"
        },
        "content": ". Clicking on the tab"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "weiyang13"
        },
        "content": ". Using a shortcut key"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "weiyang13"
        },
        "content": ". Entering a global command"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "weiyang13"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "The global commands and shortcut keys are summarized in the table below:"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "weiyang13"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "|\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "| Feature | Command | Shortcut Key"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "weiyang13"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "| Transactions | `tx` | `Ctrl + 1`"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "| Repeaters | `rep` | `Ctrl + 2`"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "| Budgets | `budget` | `Ctrl + 3`"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "| Loans | `loan` | `Ctrl + 4`"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "| Analytics | `analytics` | `Ctrl + 5`"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "|\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "weiyang13"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "To use the global command, simply enter the command as you would for any other"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "command, and the application automatically switches to the appropriate tab."
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "These commands are recognised regardless of which tab you are currently using."
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "weiyang13"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "[[Features]]"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Features"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "*Command Format*"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "Alaete"
        },
        "content": "* Words in `UPPER_CASE` are the parameters to be supplied by you. +"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "E.g., *`add`*`de/DESCRIPTION a/AMOUNT`, `DESCRIPTION` and `AMOUNT` are parameters which can be used as *`addtx`*`de/AirPods a/299.00`."
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "Alaete"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "Alaete"
        },
        "content": "* Items in square brackets are optional. +"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "E.g. *`add`*`de/DESCRIPTION a/AMOUNT [c/CATEGORY]` can be used as"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "** *`add`*`de/Saving for iPhone 11 Pro Max a/271.80 c/Gadgets`"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "** *`add`*`de/Saving for iPhone 11 Pro Max a/271.80`."
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "Alaete"
        },
        "content": ""
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "Alaete"
        },
        "content": "* You can use items with `…​` after them multiple times, including zero times. +"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "Alaete"
        },
        "content": "E.g., `[s/KEYWORD]…​` can be used as"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "Alaete"
        },
        "content": "** ` ` (i.e. 0 times)"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "Alaete"
        },
        "content": "** `s/Macbook`"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "Alaete"
        },
        "content": "** `s/Macbook s/iPad`"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "Alaete"
        },
        "content": "** etc."
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "Alaete"
        },
        "content": ""
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "Alaete"
        },
        "content": "* You can enter parameters in any order. +"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "E.g., if the command specifies *`add`*`de/DESCRIPTION a/AMOUNT`, *`add`*`a/AMOUNT de/DESCRIPTION` is also acceptable."
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "Alaete"
        },
        "content": "\u003d\u003d\u003d IchiFund Basics"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "Alaete"
        },
        "content": ""
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "Alaete"
        },
        "content": "\u003d\u003d\u003d\u003d Viewing help : `help`"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "Format: `help`"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "If you ever need to quickly refer to this user guide, entering the `help` command causes the"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "following popup to appear:"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "weiyang13"
        },
        "content": ""
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "image::Help.png[]"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "weiyang13"
        },
        "content": ""
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "You can simply click on the button \"Copy URL\" to copy the URL to your"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "clipboard. Then, paste and enter the URL into any browser to access this user guide."
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "weiyang13"
        },
        "content": ""
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "weiyang13"
        },
        "content": ""
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "Alaete"
        },
        "content": "\u003d\u003d\u003d\u003d Exiting IchiFund : `exit`"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "Alaete"
        },
        "content": ""
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "Alaete"
        },
        "content": "Exits your IchiFund. +"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "Alaete"
        },
        "content": "Format: `exit`"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "Alaete"
        },
        "content": ""
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "Alaete"
        },
        "content": "\u003d\u003d\u003d\u003d Saving IchiFund data"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "Alaete"
        },
        "content": ""
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "Alaete"
        },
        "content": "IchiFund data are saved in the hard disk automatically after you enter any command that changes the data. +"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "Alaete"
        },
        "content": "There is no need for you to save manually."
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "Alaete"
        },
        "content": ""
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "Alaete"
        },
        "content": "\u003d\u003d\u003d Transactions"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "Alaete"
        },
        "content": ""
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "Do you ever feel overwhelmed by the ever-growing number of transactions you have to keep track of?"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "With our transactions feature, you can organise your transactions in a fuss-free manner!"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "weiyang13"
        },
        "content": ""
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "\u003d\u003d\u003d\u003d Overview"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "weiyang13"
        },
        "content": ""
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "In the transactions tab, you can maintain a list of your transactions, adding, editing, deleting and filtering items"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "as you like. The image below gives an overview of the GUI of the feature:"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "weiyang13"
        },
        "content": ""
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "[[transactionsScreenshot]]"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "weiyang13"
        },
        "content": ".Transaction tab"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "image::TransactionsScreenshot.png[]"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "weiyang13"
        },
        "content": ""
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "Before we introduce the commands you can use, let us briefly run through the labelled components of our GUI."
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "weiyang13"
        },
        "content": ""
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "\u003d\u003d\u003d\u003d\u003d Transaction list / cell"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "The transaction list comprises several transaction cells. Each transaction cell represents a single transaction."
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "We give a further breakdown of the information each transaction cell displays in the following image:"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "weiyang13"
        },
        "content": ""
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "[[transactionCell]]"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "weiyang13"
        },
        "content": ".Information in a transaction cell"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "image::TransactionCell.png[]"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "weiyang13"
        },
        "content": ""
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "[NOTE]"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "We differentiate income items from expenditure items using the color of the text for the \"Amount\" field. A green"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "amount indicates that the transaction is an income item; a red amount indicates that the transaction is an"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "expenditure item. For example, the first transaction cell in \u003c\u003ctransactionsScreenshot\u003e\u003e represents an income item,"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "whereas the second cell represents an expenditure item."
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "weiyang13"
        },
        "content": ""
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "weiyang13"
        },
        "content": ""
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "\u003d\u003d\u003d\u003d\u003d Filter title"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "The filter title indicates which transactions are being shown. In \u003c\u003ctransactionsScreenshot\u003e\u003e, the list"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "shows only transactions that occur on October 2019, under the category \"Food\"."
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "weiyang13"
        },
        "content": ""
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "Minimally, the filter title contains the month and year of the filter applied. It can also display"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "the category shown, as well as whether only expenditure/income items are shown."
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "weiyang13"
        },
        "content": ""
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "The filter title changes along with the filter that is applied to the list. You can change the filter using"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "the `filter` command in \u003c\u003cfiltertx\u003e\u003e"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "weiyang13"
        },
        "content": ""
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "[NOTE]"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "On startup, the filter is generated based on the latest transaction you have recorded,"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "up to the current date. The filter follows the month and year of this transaction, and does not"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "filter for category or type."
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "If there are no transactions recorded, the current date in the system is used to"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "generate the the filter."
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "This makes it easier for you to access the transactions in the current month!"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "weiyang13"
        },
        "content": ""
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "// tag::filtertx[]"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "[[filtertx]]"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "\u003d\u003d\u003d\u003d Filtering transactions: `filter`"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "Format: `filter [m/MONTH] [y/YEAR] [c/CATEGORY] [ty/TYPE]`"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "weiyang13"
        },
        "content": ""
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "To better understand how your money goes down the drain, it is critical to organise and filter your"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "transactions. `filter` does the job for you."
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "weiyang13"
        },
        "content": ""
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "Let\u0027s say you are currently viewing transactions from"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "September 2018. The GUI of Ichifund may look like this:"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "weiyang13"
        },
        "content": ""
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "image::filtertx1.png[]"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "weiyang13"
        },
        "content": ""
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "Suppose you want to view transactions from a different month, say, September 2018."
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "You can simply enter the command `filter m/9 y/2018`, which results in the following view:"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "weiyang13"
        },
        "content": ""
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "image::filtertx2.png[]"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "weiyang13"
        },
        "content": ""
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "weiyang13"
        },
        "content": ""
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "Now, if you want to only see expenditure items, simply enter the command `filter ty/exp`."
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "weiyang13"
        },
        "content": ""
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "image::filtertx3.png[]"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "weiyang13"
        },
        "content": ""
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "You may find that this view of the list is still too cluttered for you. In that case,"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "you can further limit the transactions in the list to contain only items from the category \"FOOD\" using"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "the command `filter c/food`"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "image::filtertx4.png[]"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "weiyang13"
        },
        "content": ""
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "If you want to see expenditure items of the same time, but in a different month, say, August 2019, enter"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "the command `filter m/8`. Note that you do not need to enter the year, category, or transaction type again."
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "The GUI will update accordingly, as follows:"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "weiyang13"
        },
        "content": ""
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "image::filtertx5.png[]"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "weiyang13"
        },
        "content": ""
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "[NOTE]"
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "To see only expenditure items, enter `filter ty/exp`; to see only income items, enter `filter ty/in`. This"
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "also applies when you are adding transactions in \u003c\u003caddtx\u003e\u003e"
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "weiyang13"
        },
        "content": ""
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "\u003d\u003d\u003d\u003d\u003d Removing category and transaction type filter"
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "Now, if you want to remove both the category filter and the transaction type, you can enter the command"
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "`filter c/!all ty/!all`."
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "weiyang13"
        },
        "content": ""
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "image::filtertx6.png[]"
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "weiyang13"
        },
        "content": ""
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "[NOTE]"
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "You can only remove the category and transaction type filter using the `!all` argument. We do not support"
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "the removal of the month and year filter."
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "weiyang13"
        },
        "content": ""
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "[TIP]"
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "Like the other commands in IchiFund, you can enter the arguments in any order, as long as"
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "the command word `filter` is keyed in at the start."
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "weiyang13"
        },
        "content": ""
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "// end::filtertx[]"
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "weiyang13"
        },
        "content": ""
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "[[addtx]]"
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "Alaete"
        },
        "content": "\u003d\u003d\u003d\u003d Creating transaction: `addtx`"
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "Format: `add de/DESCRIPTION a/AMOUNT [c/CATEGORY] [d/DAY] [m/MONTH] [y/YEAR] [ty/TRANSACTION_TYPE]`"
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "weiyang13"
        },
        "content": ""
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "As painful as it is to remind yourself each time you part with your money, it is essential to meticulously"
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "record your transactions. `add` eases this process."
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "weiyang13"
        },
        "content": ""
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "Imagine you are browsing your transactions under the category of \"Transportation\""
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "in November. Your GUI may look like this:"
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "weiyang13"
        },
        "content": ""
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "image::addtx1.png[width\u003d960]"
      },
      {
        "lineNumber": 248,
        "author": {
          "gitId": "weiyang13"
        },
        "content": ""
      },
      {
        "lineNumber": 249,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "Let\u0027s say you remember that spent $12.31 on lunch on 31 October 2019."
      },
      {
        "lineNumber": 250,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "If you want to record this transaction under the category \"FOOD\", you can enter the full"
      },
      {
        "lineNumber": 251,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "command `add de/Lunch a/12.31 c/food d/31 m/10 y/2019 ty/exp`"
      },
      {
        "lineNumber": 252,
        "author": {
          "gitId": "weiyang13"
        },
        "content": ""
      },
      {
        "lineNumber": 253,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "The application now looks like this:"
      },
      {
        "lineNumber": 254,
        "author": {
          "gitId": "weiyang13"
        },
        "content": ""
      },
      {
        "lineNumber": 255,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "image::addtx2.png[]"
      },
      {
        "lineNumber": 256,
        "author": {
          "gitId": "weiyang13"
        },
        "content": ""
      },
      {
        "lineNumber": 257,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "Here, IchiFund automatically changes the filter for you, so that you can review the addition"
      },
      {
        "lineNumber": 258,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "you made. This makes it convenient if you want to edit your transactions, as detailed in \u003c\u003cedittx\u003e\u003e"
      },
      {
        "lineNumber": 259,
        "author": {
          "gitId": "weiyang13"
        },
        "content": ""
      },
      {
        "lineNumber": 260,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "Also, note that the transaction appears at the top of the list. This is because we automatically sort"
      },
      {
        "lineNumber": 261,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "your transactions by date, followed by category, so that you can systematically look through your"
      },
      {
        "lineNumber": 262,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "transactions."
      },
      {
        "lineNumber": 263,
        "author": {
          "gitId": "weiyang13"
        },
        "content": ""
      },
      {
        "lineNumber": 264,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "[NOTE]"
      },
      {
        "lineNumber": 265,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "When specifying whether a transaction is an expenditure item or an income item, use the arguments"
      },
      {
        "lineNumber": 266,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "`ty/exp` or `ty/in` respectively, similar to how would do so in \u003c\u003cfiltertx\u003e\u003e"
      },
      {
        "lineNumber": 267,
        "author": {
          "gitId": "weiyang13"
        },
        "content": ""
      },
      {
        "lineNumber": 268,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "\u003d\u003d\u003d\u003d\u003d Optional arguments"
      },
      {
        "lineNumber": 269,
        "author": {
          "gitId": "weiyang13"
        },
        "content": ""
      },
      {
        "lineNumber": 270,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "You may find the command used earlier too cumbersome to type. If so, you can leave out some of the optional"
      },
      {
        "lineNumber": 271,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "arguments. To illustrate this, let\u0027s return to the earlier scenario:"
      },
      {
        "lineNumber": 272,
        "author": {
          "gitId": "weiyang13"
        },
        "content": ""
      },
      {
        "lineNumber": 273,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "image::addtx1.png[]"
      },
      {
        "lineNumber": 274,
        "author": {
          "gitId": "weiyang13"
        },
        "content": ""
      },
      {
        "lineNumber": 275,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "Let\u0027s say it is 1 November 2019 today. You have just spent another $10.00 hiring a cab to go to the hospital,"
      },
      {
        "lineNumber": 276,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "and want to record this transaction under the category of \"Transportation\". You can simply enter"
      },
      {
        "lineNumber": 277,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "the command `add a/10 de/Cab to hospital`, and obtain the following result:"
      },
      {
        "lineNumber": 278,
        "author": {
          "gitId": "weiyang13"
        },
        "content": ""
      },
      {
        "lineNumber": 279,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "image::addtx3.png[]"
      },
      {
        "lineNumber": 280,
        "author": {
          "gitId": "weiyang13"
        },
        "content": ""
      },
      {
        "lineNumber": 281,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "Here, as the month, year, and category arguments are left empty, IchiFund fills it in according to the"
      },
      {
        "lineNumber": 282,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "filter title. The day argument is taken to be the current day of the month, according to the system date."
      },
      {
        "lineNumber": 283,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "IchiFund also assumes that most transactions are expenditure items, and uses that as a default value."
      },
      {
        "lineNumber": 284,
        "author": {
          "gitId": "weiyang13"
        },
        "content": ""
      },
      {
        "lineNumber": 285,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "The following table summarizes the default values that optional arguments take if left unspecified."
      },
      {
        "lineNumber": 286,
        "author": {
          "gitId": "weiyang13"
        },
        "content": ""
      },
      {
        "lineNumber": 287,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "|\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 288,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "| Argument | Default values"
      },
      {
        "lineNumber": 289,
        "author": {
          "gitId": "weiyang13"
        },
        "content": ""
      },
      {
        "lineNumber": 290,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "| Day | According to system time and date."
      },
      {
        "lineNumber": 291,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "| Month | According to the filter"
      },
      {
        "lineNumber": 292,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "| Year | According to the filter"
      },
      {
        "lineNumber": 293,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "| Category | According to the filter, if applicable, or \"Uncategorised\" otherwise."
      },
      {
        "lineNumber": 294,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "| Type | According to the filter, if applicable, or \"exp\" otherwise."
      },
      {
        "lineNumber": 295,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "|\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 296,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 297,
        "author": {
          "gitId": "-"
        },
        "content": "[TIP]"
      },
      {
        "lineNumber": 298,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "The default value of the day argument is the current day of month in the system time. Hence, to utilise this"
      },
      {
        "lineNumber": 299,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "feature to its fullest, you are recommended to add transactions on the day it occurs."
      },
      {
        "lineNumber": 300,
        "author": {
          "gitId": "weiyang13"
        },
        "content": ""
      },
      {
        "lineNumber": 301,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "\u003d\u003d\u003d\u003d\u003d Constraints"
      },
      {
        "lineNumber": 302,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "The feature for adding transactions is built to work best under these constraints:"
      },
      {
        "lineNumber": 303,
        "author": {
          "gitId": "weiyang13"
        },
        "content": ""
      },
      {
        "lineNumber": 304,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "|\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 305,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "| Argument | Constraints"
      },
      {
        "lineNumber": 306,
        "author": {
          "gitId": "weiyang13"
        },
        "content": ""
      },
      {
        "lineNumber": 307,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "| Description | Up to 50 alphanumeric characters, case-sensitive"
      },
      {
        "lineNumber": 308,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "| Amount | Positive number, with up to 2 decimal places; maximum value of $100000 for each transaction"
      },
      {
        "lineNumber": 309,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "| Category | Up to 50 alphanumeric characters, case-insensitive"
      },
      {
        "lineNumber": 310,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "| Day | Numerical value from 1-31"
      },
      {
        "lineNumber": 311,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "| Month | Numerical value from 1-12"
      },
      {
        "lineNumber": 312,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "| Year | Numerical value from 2000-9999"
      },
      {
        "lineNumber": 313,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "| Type | Either \"in\" or \"exp\""
      },
      {
        "lineNumber": 314,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "|\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 315,
        "author": {
          "gitId": "weiyang13"
        },
        "content": ""
      },
      {
        "lineNumber": 316,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "Additionally, the transaction feature works best when the system time functions normally, with no change in time zone."
      },
      {
        "lineNumber": 317,
        "author": {
          "gitId": "weiyang13"
        },
        "content": ""
      },
      {
        "lineNumber": 318,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "[[edittx]]"
      },
      {
        "lineNumber": 319,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "\u003d\u003d\u003d\u003d Editing transaction: `edit`"
      },
      {
        "lineNumber": 320,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "Format: `edit INDEX [de/DESCRIPTION] [a/AMOUNT] [c/CATEGORY] [d/DAY] [m/MONTH] [y/YEAR] [ty/TRANSACTION_TYPE]`"
      },
      {
        "lineNumber": 321,
        "author": {
          "gitId": "weiyang13"
        },
        "content": ""
      },
      {
        "lineNumber": 322,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "Occasionally, you may make a mistake entering your transactions. Perhaps you entered the wrong amount, or made"
      },
      {
        "lineNumber": 323,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "a heinous spelling error in your description. Fret not! You can correct these mistakes using `edit`, and it would"
      },
      {
        "lineNumber": 324,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "be as if it never happened."
      },
      {
        "lineNumber": 325,
        "author": {
          "gitId": "weiyang13"
        },
        "content": ""
      },
      {
        "lineNumber": 326,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "Suppose you wanted to record your cab fare to the hospital, and you mistakenly record the amount you spent as"
      },
      {
        "lineNumber": 327,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "$10.00 instead of $20.00:"
      },
      {
        "lineNumber": 328,
        "author": {
          "gitId": "weiyang13"
        },
        "content": ""
      },
      {
        "lineNumber": 329,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "image::addtx3.png[]"
      },
      {
        "lineNumber": 330,
        "author": {
          "gitId": "weiyang13"
        },
        "content": ""
      },
      {
        "lineNumber": 331,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "You can rectify this error simply by entering the command `edit 2 a/20.00`:"
      },
      {
        "lineNumber": 332,
        "author": {
          "gitId": "weiyang13"
        },
        "content": ""
      },
      {
        "lineNumber": 333,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "image::edittx.png[]"
      },
      {
        "lineNumber": 334,
        "author": {
          "gitId": "weiyang13"
        },
        "content": ""
      },
      {
        "lineNumber": 335,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "Here, the number \"2\" specified near the start of the command corresponds to the index of the transaction"
      },
      {
        "lineNumber": 336,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "you want to edit, as shown in the current transaction list."
      },
      {
        "lineNumber": 337,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "Apart from that, you need to specify only the information you want to edit."
      },
      {
        "lineNumber": 338,
        "author": {
          "gitId": "weiyang13"
        },
        "content": ""
      },
      {
        "lineNumber": 339,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "In addition, to make it easier for you to review your edits,"
      },
      {
        "lineNumber": 340,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "the filter of the transaction list changes accordingly such that the edited transaction is shown."
      },
      {
        "lineNumber": 341,
        "author": {
          "gitId": "weiyang13"
        },
        "content": ""
      },
      {
        "lineNumber": 342,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "[NOTE]"
      },
      {
        "lineNumber": 343,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "Unfortunately, transactions created from repeaters cannot be edited or deleted directly."
      },
      {
        "lineNumber": 344,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "For a more detailed guide on how to modify these transactions, refer to \u003c\u003crepeaters\u003e\u003e"
      },
      {
        "lineNumber": 345,
        "author": {
          "gitId": "weiyang13"
        },
        "content": ""
      },
      {
        "lineNumber": 346,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "[[deletetx]]"
      },
      {
        "lineNumber": 347,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "\u003d\u003d\u003d\u003d Deleting transaction: `delete`"
      },
      {
        "lineNumber": 348,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "Format: `delete INDEX`"
      },
      {
        "lineNumber": 349,
        "author": {
          "gitId": "weiyang13"
        },
        "content": ""
      },
      {
        "lineNumber": 350,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "By a stroke of luck, you may sometimes get a reimbursement for your expenditure! While you celebrate the"
      },
      {
        "lineNumber": 351,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "influx of precious money, do take a moment to update IchiFund using `delete`."
      },
      {
        "lineNumber": 352,
        "author": {
          "gitId": "weiyang13"
        },
        "content": ""
      },
      {
        "lineNumber": 353,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "Let\u0027s say you have just recorded and edited your cab ride to the hospital:"
      },
      {
        "lineNumber": 354,
        "author": {
          "gitId": "weiyang13"
        },
        "content": ""
      },
      {
        "lineNumber": 355,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "image::addtx3.png[]"
      },
      {
        "lineNumber": 356,
        "author": {
          "gitId": "weiyang13"
        },
        "content": ""
      },
      {
        "lineNumber": 357,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "Suppose you now find out that the expenditure is somehow covered by your insurance plan."
      },
      {
        "lineNumber": 358,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "Simply enter the command `delete 2`:"
      },
      {
        "lineNumber": 359,
        "author": {
          "gitId": "weiyang13"
        },
        "content": ""
      },
      {
        "lineNumber": 360,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "image::deletetx.png[]"
      },
      {
        "lineNumber": 361,
        "author": {
          "gitId": "weiyang13"
        },
        "content": ""
      },
      {
        "lineNumber": 362,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "Voila! The transaction is now deleted."
      },
      {
        "lineNumber": 363,
        "author": {
          "gitId": "weiyang13"
        },
        "content": ""
      },
      {
        "lineNumber": 364,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "Again, you only have to specify the index of the transaction you want to delete, as shown in the current"
      },
      {
        "lineNumber": 365,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "transaction list."
      },
      {
        "lineNumber": 366,
        "author": {
          "gitId": "weiyang13"
        },
        "content": ""
      },
      {
        "lineNumber": 367,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "[NOTE]"
      },
      {
        "lineNumber": 368,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "Unfortunately, transactions created from repeaters cannot be edited or deleted directly."
      },
      {
        "lineNumber": 369,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "For a more detailed guide on how to modify these transactions, refer to \u003c\u003crepeaters\u003e\u003e"
      },
      {
        "lineNumber": 370,
        "author": {
          "gitId": "weiyang13"
        },
        "content": ""
      },
      {
        "lineNumber": 371,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "[[repeaters]]"
      },
      {
        "lineNumber": 372,
        "author": {
          "gitId": "LeeYiyuan"
        },
        "content": "\u003d\u003d\u003d Repeaters"
      },
      {
        "lineNumber": 373,
        "author": {
          "gitId": "Alaete"
        },
        "content": ""
      },
      {
        "lineNumber": 374,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "\u003d\u003d\u003d\u003d Creating repeater: `add`"
      },
      {
        "lineNumber": 375,
        "author": {
          "gitId": "LeeYiyuan"
        },
        "content": ""
      },
      {
        "lineNumber": 376,
        "author": {
          "gitId": "LeeYiyuan"
        },
        "content": "Creates repeater together with the associated transactions. +"
      },
      {
        "lineNumber": 377,
        "author": {
          "gitId": "LeeYiyuan"
        },
        "content": "Format: `de/DESCRIPTION a/AMOUNT c/CATEGORY ty/TRANSACTION_TYPE so/MONTH_START_OFFSET eo/MONTH_END_OFFSET sm/START_MONTH sy/START_YEAR em/END_MONTH ey/END_YEAR`"
      },
      {
        "lineNumber": 378,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 379,
        "author": {
          "gitId": "-"
        },
        "content": "Examples:"
      },
      {
        "lineNumber": 380,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 381,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "* `add de/Phone bills a/42.15 c/Utilities ty/exp so/3 eo/2 sm/1 sy/2019 em/12 ey/2025` +"
      },
      {
        "lineNumber": 382,
        "author": {
          "gitId": "LeeYiyuan"
        },
        "content": "Creates a repeater titled \"Phone bills\" as an expenditure for Utilities of $42.15 for every third day and second last day of the month, between January 2019 to December 2025. Also creates the associated transactions."
      },
      {
        "lineNumber": 383,
        "author": {
          "gitId": "LeeYiyuan"
        },
        "content": ""
      },
      {
        "lineNumber": 384,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "\u003d\u003d\u003d\u003d Editing repeater `edit`"
      },
      {
        "lineNumber": 385,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 386,
        "author": {
          "gitId": "LeeYiyuan"
        },
        "content": "Edits repeater together with the associated transactions. +"
      },
      {
        "lineNumber": 387,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "Format: `edit INDEX (must be a positive integer) [de/DESCRIPTION] [a/AMOUNT] [c/CATEGORY] [ty/TRANSACTION_TYPE] [so/MONTH_START_OFFSET] [eo/MONTH_END_OFFSET] [sm/START_MONTH] [sy/START_YEAR] [em/END_MONTH] [ey/END_YEAR]`"
      },
      {
        "lineNumber": 388,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 389,
        "author": {
          "gitId": "LeeYiyuan"
        },
        "content": "Examples:"
      },
      {
        "lineNumber": 390,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 391,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "* `edit 1 a/31.34 c/Food ty/in so/1 eo/-1 sm/1 sy/2019 em/12 ey/2020` +"
      },
      {
        "lineNumber": 392,
        "author": {
          "gitId": "LeeYiyuan"
        },
        "content": "Edits the first repeater in the current list into a $31.34 expenditure for every first day of the month, between January 2019 and December 2020. Also updates the associated transactions."
      },
      {
        "lineNumber": 393,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 394,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "\u003d\u003d\u003d\u003d Deleting repeater: `delete`"
      },
      {
        "lineNumber": 395,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 396,
        "author": {
          "gitId": "LeeYiyuan"
        },
        "content": "Deletes repeater together with all created transactions associated with the specified repeater. +"
      },
      {
        "lineNumber": 397,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "Format: `delete INDEX`"
      },
      {
        "lineNumber": 398,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 399,
        "author": {
          "gitId": "-"
        },
        "content": "Examples:"
      },
      {
        "lineNumber": 400,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 401,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "* `delete 12` +"
      },
      {
        "lineNumber": 402,
        "author": {
          "gitId": "LeeYiyuan"
        },
        "content": "Deletes the 12th repeater in the current list. Also updates the associated transactions."
      },
      {
        "lineNumber": 403,
        "author": {
          "gitId": "LeeYiyuan"
        },
        "content": ""
      },
      {
        "lineNumber": 404,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "\u003d\u003d\u003d\u003d Finding repeater: `find` [Coming in v2.0]"
      },
      {
        "lineNumber": 405,
        "author": {
          "gitId": "Alaete"
        },
        "content": ""
      },
      {
        "lineNumber": 406,
        "author": {
          "gitId": "nexolute"
        },
        "content": "\u003d\u003d\u003d Budgets"
      },
      {
        "lineNumber": 407,
        "author": {
          "gitId": "nexolute"
        },
        "content": ""
      },
      {
        "lineNumber": 408,
        "author": {
          "gitId": "nexolute"
        },
        "content": "After taking the effort to record your expenditures, you want to ensure that you are spending within your limit."
      },
      {
        "lineNumber": 409,
        "author": {
          "gitId": "nexolute"
        },
        "content": "This is made simple with the budgeting features in IchiFund."
      },
      {
        "lineNumber": 410,
        "author": {
          "gitId": "nexolute"
        },
        "content": ""
      },
      {
        "lineNumber": 411,
        "author": {
          "gitId": "nexolute"
        },
        "content": "Each budget that you create will have a description and a maximum expenditure limit."
      },
      {
        "lineNumber": 412,
        "author": {
          "gitId": "nexolute"
        },
        "content": "For advanced users who require finer control in their budgeting, you can also"
      },
      {
        "lineNumber": 413,
        "author": {
          "gitId": "nexolute"
        },
        "content": "restrict which expenditures to include in the budget computation."
      },
      {
        "lineNumber": 414,
        "author": {
          "gitId": "nexolute"
        },
        "content": ""
      },
      {
        "lineNumber": 415,
        "author": {
          "gitId": "nexolute"
        },
        "content": "[NOTE]"
      },
      {
        "lineNumber": 416,
        "author": {
          "gitId": "nexolute"
        },
        "content": "In v1.4, all budgets are restricted to monthly budget."
      },
      {
        "lineNumber": 417,
        "author": {
          "gitId": "nexolute"
        },
        "content": ""
      },
      {
        "lineNumber": 418,
        "author": {
          "gitId": "nexolute"
        },
        "content": "In the budget tab, you can maintain a list of your monthly budgets, adding, deleting and filtering items"
      },
      {
        "lineNumber": 419,
        "author": {
          "gitId": "nexolute"
        },
        "content": "as you like. The image below gives an overview of the GUI of the feature:"
      },
      {
        "lineNumber": 420,
        "author": {
          "gitId": "nexolute"
        },
        "content": ""
      },
      {
        "lineNumber": 421,
        "author": {
          "gitId": "nexolute"
        },
        "content": "[[budgetsScreenshot]]"
      },
      {
        "lineNumber": 422,
        "author": {
          "gitId": "nexolute"
        },
        "content": ".Budgets tab"
      },
      {
        "lineNumber": 423,
        "author": {
          "gitId": "nexolute"
        },
        "content": "image::BudgetsScreenshot.png[]"
      },
      {
        "lineNumber": 424,
        "author": {
          "gitId": "nexolute"
        },
        "content": ""
      },
      {
        "lineNumber": 425,
        "author": {
          "gitId": "nexolute"
        },
        "content": "The budget list comprises several budget cells. Each budget cell represents a single budget."
      },
      {
        "lineNumber": 426,
        "author": {
          "gitId": "nexolute"
        },
        "content": "We give a further breakdown of the information each budget cell displays in the following image:"
      },
      {
        "lineNumber": 427,
        "author": {
          "gitId": "nexolute"
        },
        "content": ""
      },
      {
        "lineNumber": 428,
        "author": {
          "gitId": "nexolute"
        },
        "content": "[[budgetCell]]"
      },
      {
        "lineNumber": 429,
        "author": {
          "gitId": "nexolute"
        },
        "content": ".Information in a budget cell"
      },
      {
        "lineNumber": 430,
        "author": {
          "gitId": "nexolute"
        },
        "content": "image::BudgetCell.png[]"
      },
      {
        "lineNumber": 431,
        "author": {
          "gitId": "nexolute"
        },
        "content": ""
      },
      {
        "lineNumber": 432,
        "author": {
          "gitId": "nexolute"
        },
        "content": "[NOTE]"
      },
      {
        "lineNumber": 433,
        "author": {
          "gitId": "nexolute"
        },
        "content": "The budget bar will turn from green to red when you spend over 80% of the total amount."
      },
      {
        "lineNumber": 434,
        "author": {
          "gitId": "nexolute"
        },
        "content": ""
      },
      {
        "lineNumber": 435,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "\u003d\u003d\u003d\u003d Creating monthly budget: `add`"
      },
      {
        "lineNumber": 436,
        "author": {
          "gitId": "nexolute"
        },
        "content": ""
      },
      {
        "lineNumber": 437,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "Format: `add de/DESCRIPTION a/AMOUNT [c/CATEGORY] [m/MONTH y/YEAR]`"
      },
      {
        "lineNumber": 438,
        "author": {
          "gitId": "nexolute"
        },
        "content": ""
      },
      {
        "lineNumber": 439,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "You can use the `add` command to create a monthly budget."
      },
      {
        "lineNumber": 440,
        "author": {
          "gitId": "nexolute"
        },
        "content": "Let us walk through the process for creating a budget for tracking your spending on food."
      },
      {
        "lineNumber": 441,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 442,
        "author": {
          "gitId": "nexolute"
        },
        "content": "1. Check to make sure you are in the budgets tab. If not, switch to it."
      },
      {
        "lineNumber": 443,
        "author": {
          "gitId": "nexolute"
        },
        "content": ""
      },
      {
        "lineNumber": 444,
        "author": {
          "gitId": "nexolute"
        },
        "content": "image::addbud1.png[]"
      },
      {
        "lineNumber": 445,
        "author": {
          "gitId": "nexolute"
        },
        "content": ""
      },
      {
        "lineNumber": 446,
        "author": {
          "gitId": "nexolute"
        },
        "content": "[start\u003d2]"
      },
      {
        "lineNumber": 447,
        "author": {
          "gitId": "nexolute"
        },
        "content": "2. Type `addbud de/Saving my tummy a/82.69 c/food` into the command bar."
      },
      {
        "lineNumber": 448,
        "author": {
          "gitId": "nexolute"
        },
        "content": "This will create a $82.69 budget named _Saving my tummy_ that tracks this month\u0027s expenditures tagged with the _food_ category."
      },
      {
        "lineNumber": 449,
        "author": {
          "gitId": "nexolute"
        },
        "content": ""
      },
      {
        "lineNumber": 450,
        "author": {
          "gitId": "nexolute"
        },
        "content": "[NOTE]"
      },
      {
        "lineNumber": 451,
        "author": {
          "gitId": "nexolute"
        },
        "content": "If the optional arguments `m/MONTH` and `y/YEAR` are not provided, the budget will track the current month."
      },
      {
        "lineNumber": 452,
        "author": {
          "gitId": "nexolute"
        },
        "content": ""
      },
      {
        "lineNumber": 453,
        "author": {
          "gitId": "nexolute"
        },
        "content": "image::addbud2.png[]"
      },
      {
        "lineNumber": 454,
        "author": {
          "gitId": "nexolute"
        },
        "content": ""
      },
      {
        "lineNumber": 455,
        "author": {
          "gitId": "nexolute"
        },
        "content": "[start\u003d3]"
      },
      {
        "lineNumber": 456,
        "author": {
          "gitId": "nexolute"
        },
        "content": "3. Press enter to run the command."
      },
      {
        "lineNumber": 457,
        "author": {
          "gitId": "nexolute"
        },
        "content": "You should see the newly created budget in the budget list."
      },
      {
        "lineNumber": 458,
        "author": {
          "gitId": "nexolute"
        },
        "content": ""
      },
      {
        "lineNumber": 459,
        "author": {
          "gitId": "nexolute"
        },
        "content": "image::addbud3.png[]"
      },
      {
        "lineNumber": 460,
        "author": {
          "gitId": "nexolute"
        },
        "content": ""
      },
      {
        "lineNumber": 461,
        "author": {
          "gitId": "nexolute"
        },
        "content": "If you want to track all monthly expenditures, simply leave out the `c/CATEGORY` argument."
      },
      {
        "lineNumber": 462,
        "author": {
          "gitId": "nexolute"
        },
        "content": "For instance, the following command creates a $500.00 budget that is applicable to all expenditures:"
      },
      {
        "lineNumber": 463,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "`add de/General budgeting a/500`."
      },
      {
        "lineNumber": 464,
        "author": {
          "gitId": "nexolute"
        },
        "content": ""
      },
      {
        "lineNumber": 465,
        "author": {
          "gitId": "nexolute"
        },
        "content": ""
      },
      {
        "lineNumber": 466,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "\u003d\u003d\u003d\u003d Deleting monthly budget: `delete`"
      },
      {
        "lineNumber": 467,
        "author": {
          "gitId": "nexolute"
        },
        "content": ""
      },
      {
        "lineNumber": 468,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "Format: `delete INDEX`"
      },
      {
        "lineNumber": 469,
        "author": {
          "gitId": "nexolute"
        },
        "content": ""
      },
      {
        "lineNumber": 470,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "You can use `delete` to delete the budget."
      },
      {
        "lineNumber": 471,
        "author": {
          "gitId": "nexolute"
        },
        "content": "Let us walk through the process of deleting the _Saving my tummy_ budget we created previously."
      },
      {
        "lineNumber": 472,
        "author": {
          "gitId": "nexolute"
        },
        "content": ""
      },
      {
        "lineNumber": 473,
        "author": {
          "gitId": "nexolute"
        },
        "content": "1. Identify the index of the budget you are deleting. Here, the index is 2."
      },
      {
        "lineNumber": 474,
        "author": {
          "gitId": "nexolute"
        },
        "content": ""
      },
      {
        "lineNumber": 475,
        "author": {
          "gitId": "nexolute"
        },
        "content": "image::deletebud1.png[]"
      },
      {
        "lineNumber": 476,
        "author": {
          "gitId": "nexolute"
        },
        "content": ""
      },
      {
        "lineNumber": 477,
        "author": {
          "gitId": "nexolute"
        },
        "content": "[start\u003d2]"
      },
      {
        "lineNumber": 478,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "2. Type `delete 2` into the command bar and press enter."
      },
      {
        "lineNumber": 479,
        "author": {
          "gitId": "nexolute"
        },
        "content": "You should see the _Saving my tummy_ budget disappear from the budget list."
      },
      {
        "lineNumber": 480,
        "author": {
          "gitId": "nexolute"
        },
        "content": ""
      },
      {
        "lineNumber": 481,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "\u003d\u003d\u003d\u003d Finding monthly budget by keywords: `find`"
      },
      {
        "lineNumber": 482,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 483,
        "author": {
          "gitId": "-"
        },
        "content": "Format: `find KEYWORD [MORE_KEYWORDS]`"
      },
      {
        "lineNumber": 484,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 485,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "You can use `find` to find budgets with description that matches all the given keywords. To illustrate this, let us suppose you want to find all budgets with the word _saving_ in its description."
      },
      {
        "lineNumber": 486,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "To do so, type `find saving` into the command bar and press enter."
      },
      {
        "lineNumber": 487,
        "author": {
          "gitId": "nexolute"
        },
        "content": "You should see the search result in the budget list."
      },
      {
        "lineNumber": 488,
        "author": {
          "gitId": "nexolute"
        },
        "content": ""
      },
      {
        "lineNumber": 489,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "To revert the budget list so that all budgets are listed, simply execute `find` without any argument."
      },
      {
        "lineNumber": 490,
        "author": {
          "gitId": "nexolute"
        },
        "content": ""
      },
      {
        "lineNumber": 491,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "\u003d\u003d\u003d Loans [Coming in v2.0]"
      },
      {
        "lineNumber": 492,
        "author": {
          "gitId": "Alaete"
        },
        "content": ""
      },
      {
        "lineNumber": 493,
        "author": {
          "gitId": "troomtroom"
        },
        "content": "\u003d\u003d\u003d\u003d Adding new loan: `loannew `"
      },
      {
        "lineNumber": 494,
        "author": {
          "gitId": "troomtroom"
        },
        "content": ""
      },
      {
        "lineNumber": 495,
        "author": {
          "gitId": "troomtroom"
        },
        "content": "Adds new loan to list. +"
      },
      {
        "lineNumber": 496,
        "author": {
          "gitId": "troomtroom"
        },
        "content": "Format: `loannew  i/AMOUNT  n/NAME d/DESCRIPTION`"
      },
      {
        "lineNumber": 497,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 498,
        "author": {
          "gitId": "-"
        },
        "content": "Examples:"
      },
      {
        "lineNumber": 499,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 500,
        "author": {
          "gitId": "troomtroom"
        },
        "content": "* `loannew  a/10000 d/12122014 n/Charlie d/For food in Indonesia` +"
      },
      {
        "lineNumber": 501,
        "author": {
          "gitId": "troomtroom"
        },
        "content": "Takes input with initialization values and adds them to a lost of current unpaid loans."
      },
      {
        "lineNumber": 502,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 503,
        "author": {
          "gitId": "troomtroom"
        },
        "content": "\u003d\u003d\u003d\u003d Marking Loan Paid: `loan paid`"
      },
      {
        "lineNumber": 504,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 505,
        "author": {
          "gitId": "troomtroom"
        },
        "content": "Marks loan as paid or reduces amount from payment. +"
      },
      {
        "lineNumber": 506,
        "author": {
          "gitId": "troomtroom"
        },
        "content": "Format: `loanpaid i/INDEX [i/AMOUNT]`"
      },
      {
        "lineNumber": 507,
        "author": {
          "gitId": "troomtroom"
        },
        "content": ""
      },
      {
        "lineNumber": 508,
        "author": {
          "gitId": "troomtroom"
        },
        "content": "Examples:"
      },
      {
        "lineNumber": 509,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 510,
        "author": {
          "gitId": "troomtroom"
        },
        "content": "* `loanpaid i/4 a/4000` +"
      },
      {
        "lineNumber": 511,
        "author": {
          "gitId": "troomtroom"
        },
        "content": "Takes input with initialization values and adds them to a lost of current unpaid loans."
      },
      {
        "lineNumber": 512,
        "author": {
          "gitId": "troomtroom"
        },
        "content": ""
      },
      {
        "lineNumber": 513,
        "author": {
          "gitId": "troomtroom"
        },
        "content": "\u003d\u003d\u003d\u003d Loan Categorical Search: `loanshow`"
      },
      {
        "lineNumber": 514,
        "author": {
          "gitId": "troomtroom"
        },
        "content": ""
      },
      {
        "lineNumber": 515,
        "author": {
          "gitId": "troomtroom"
        },
        "content": "Shows all loans with certain name or description or date , or all loans+"
      },
      {
        "lineNumber": 516,
        "author": {
          "gitId": "troomtroom"
        },
        "content": "Format: `loanshow [s/KEYWORD]`"
      },
      {
        "lineNumber": 517,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 518,
        "author": {
          "gitId": "-"
        },
        "content": "Examples:"
      },
      {
        "lineNumber": 519,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 520,
        "author": {
          "gitId": "troomtroom"
        },
        "content": "* `loanshow s/charlie` +"
      },
      {
        "lineNumber": 521,
        "author": {
          "gitId": "troomtroom"
        },
        "content": "Shows all loans when no keyword is given, when keyword is added, all loans with given dat/name or description are shown."
      },
      {
        "lineNumber": 522,
        "author": {
          "gitId": "troomtroom"
        },
        "content": ""
      },
      {
        "lineNumber": 523,
        "author": {
          "gitId": "troomtroom"
        },
        "content": "\u003d\u003d\u003d\u003d Adding new loan: `loantotal`"
      },
      {
        "lineNumber": 524,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 525,
        "author": {
          "gitId": "troomtroom"
        },
        "content": "Finds and shows nett amount to pay/owed with keyword+"
      },
      {
        "lineNumber": 526,
        "author": {
          "gitId": "troomtroom"
        },
        "content": "Format: `loantotal s/KEYWORD`"
      },
      {
        "lineNumber": 527,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 528,
        "author": {
          "gitId": "troomtroom"
        },
        "content": "Examples:"
      },
      {
        "lineNumber": 529,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 530,
        "author": {
          "gitId": "troomtroom"
        },
        "content": "* `loantotal s/12/12/2000` +"
      },
      {
        "lineNumber": 531,
        "author": {
          "gitId": "troomtroom"
        },
        "content": "If no keyword is given, it returns total difference in amount owed to other parties and amount to be paid."
      },
      {
        "lineNumber": 532,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 533,
        "author": {
          "gitId": "troomtroom"
        },
        "content": "\u003d\u003d\u003d\u003d Adding new loan: `loanset`"
      },
      {
        "lineNumber": 534,
        "author": {
          "gitId": "troomtroom"
        },
        "content": ""
      },
      {
        "lineNumber": 535,
        "author": {
          "gitId": "troomtroom"
        },
        "content": "Changes existing loan +"
      },
      {
        "lineNumber": 536,
        "author": {
          "gitId": "troomtroom"
        },
        "content": "Format: `loanset i/INDEX [a/AMOUNT] [d/DATE] [n/NAME] [d/DESCRIPTION]`"
      },
      {
        "lineNumber": 537,
        "author": {
          "gitId": "troomtroom"
        },
        "content": ""
      },
      {
        "lineNumber": 538,
        "author": {
          "gitId": "troomtroom"
        },
        "content": "Examples:"
      },
      {
        "lineNumber": 539,
        "author": {
          "gitId": "troomtroom"
        },
        "content": ""
      },
      {
        "lineNumber": 540,
        "author": {
          "gitId": "troomtroom"
        },
        "content": "* `loanset i/3 n/Lee d/For food in NY` +"
      },
      {
        "lineNumber": 541,
        "author": {
          "gitId": "troomtroom"
        },
        "content": "Takes input with initialization values for current loan identified by index, change any value."
      },
      {
        "lineNumber": 542,
        "author": {
          "gitId": "troomtroom"
        },
        "content": ""
      },
      {
        "lineNumber": 543,
        "author": {
          "gitId": "troomtroom"
        },
        "content": "\u003d\u003d\u003d\u003d Adding new loan: `loansort`"
      },
      {
        "lineNumber": 544,
        "author": {
          "gitId": "troomtroom"
        },
        "content": ""
      },
      {
        "lineNumber": 545,
        "author": {
          "gitId": "troomtroom"
        },
        "content": "Finds and shows all loans sorted +"
      },
      {
        "lineNumber": 546,
        "author": {
          "gitId": "troomtroom"
        },
        "content": "Format: `loansort s/BY`"
      },
      {
        "lineNumber": 547,
        "author": {
          "gitId": "troomtroom"
        },
        "content": ""
      },
      {
        "lineNumber": 548,
        "author": {
          "gitId": "troomtroom"
        },
        "content": "Examples:"
      },
      {
        "lineNumber": 549,
        "author": {
          "gitId": "troomtroom"
        },
        "content": ""
      },
      {
        "lineNumber": 550,
        "author": {
          "gitId": "troomtroom"
        },
        "content": "* `loansort s/DATE` +"
      },
      {
        "lineNumber": 551,
        "author": {
          "gitId": "troomtroom"
        },
        "content": "Loans shown sorted by any given constrain, date or value owed."
      },
      {
        "lineNumber": 552,
        "author": {
          "gitId": "troomtroom"
        },
        "content": ""
      },
      {
        "lineNumber": 553,
        "author": {
          "gitId": "Alaete"
        },
        "content": "\u003d\u003d\u003d Analytics"
      },
      {
        "lineNumber": 554,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 555,
        "author": {
          "gitId": "Alaete"
        },
        "content": "\u003d\u003d\u003d\u003d Viewing expenditure trend: `expenditure`"
      },
      {
        "lineNumber": 556,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 557,
        "author": {
          "gitId": "LeeYiyuan"
        },
        "content": "Displays monthly expenditure trend for current year."
      },
      {
        "lineNumber": 558,
        "author": {
          "gitId": "Alaete"
        },
        "content": "Format: `expenditure [y/YEAR]`"
      },
      {
        "lineNumber": 559,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 560,
        "author": {
          "gitId": "Alaete"
        },
        "content": "Examples:"
      },
      {
        "lineNumber": 561,
        "author": {
          "gitId": "Alaete"
        },
        "content": ""
      },
      {
        "lineNumber": 562,
        "author": {
          "gitId": "Alaete"
        },
        "content": "* `expenditure` +"
      },
      {
        "lineNumber": 563,
        "author": {
          "gitId": "LeeYiyuan"
        },
        "content": "Displays monthly expenditure trend for current year."
      },
      {
        "lineNumber": 564,
        "author": {
          "gitId": "Alaete"
        },
        "content": "* `expenditure y/2019` +"
      },
      {
        "lineNumber": 565,
        "author": {
          "gitId": "LeeYiyuan"
        },
        "content": "Displays monthly expenditure trend for 2019."
      },
      {
        "lineNumber": 566,
        "author": {
          "gitId": "Alaete"
        },
        "content": ""
      },
      {
        "lineNumber": 567,
        "author": {
          "gitId": "Alaete"
        },
        "content": "\u003d\u003d\u003d\u003d Viewing income trend: `income`"
      },
      {
        "lineNumber": 568,
        "author": {
          "gitId": "Alaete"
        },
        "content": ""
      },
      {
        "lineNumber": 569,
        "author": {
          "gitId": "LeeYiyuan"
        },
        "content": "Displays monthly income trend for current year. +"
      },
      {
        "lineNumber": 570,
        "author": {
          "gitId": "Alaete"
        },
        "content": "Format: `income [y/YEAR]`"
      },
      {
        "lineNumber": 571,
        "author": {
          "gitId": "Alaete"
        },
        "content": ""
      },
      {
        "lineNumber": 572,
        "author": {
          "gitId": "Alaete"
        },
        "content": "Examples:"
      },
      {
        "lineNumber": 573,
        "author": {
          "gitId": "Alaete"
        },
        "content": ""
      },
      {
        "lineNumber": 574,
        "author": {
          "gitId": "Alaete"
        },
        "content": "* `income` +"
      },
      {
        "lineNumber": 575,
        "author": {
          "gitId": "LeeYiyuan"
        },
        "content": "Displays monthly income trend for current year."
      },
      {
        "lineNumber": 576,
        "author": {
          "gitId": "Alaete"
        },
        "content": "* `income y/2019` +"
      },
      {
        "lineNumber": 577,
        "author": {
          "gitId": "LeeYiyuan"
        },
        "content": "Displays monthly income trend for 2019."
      },
      {
        "lineNumber": 578,
        "author": {
          "gitId": "Alaete"
        },
        "content": ""
      },
      {
        "lineNumber": 579,
        "author": {
          "gitId": "Alaete"
        },
        "content": "\u003d\u003d\u003d\u003d Viewing balance trend: `balance`"
      },
      {
        "lineNumber": 580,
        "author": {
          "gitId": "Alaete"
        },
        "content": ""
      },
      {
        "lineNumber": 581,
        "author": {
          "gitId": "LeeYiyuan"
        },
        "content": "Displays monthly balance (income - expenditure) trend for current year. +"
      },
      {
        "lineNumber": 582,
        "author": {
          "gitId": "Alaete"
        },
        "content": "Format: `balance [y/YEAR]`"
      },
      {
        "lineNumber": 583,
        "author": {
          "gitId": "Alaete"
        },
        "content": ""
      },
      {
        "lineNumber": 584,
        "author": {
          "gitId": "Alaete"
        },
        "content": "Examples:"
      },
      {
        "lineNumber": 585,
        "author": {
          "gitId": "Alaete"
        },
        "content": ""
      },
      {
        "lineNumber": 586,
        "author": {
          "gitId": "Alaete"
        },
        "content": "* `balance` +"
      },
      {
        "lineNumber": 587,
        "author": {
          "gitId": "LeeYiyuan"
        },
        "content": "Displays monthly balance trend for current year."
      },
      {
        "lineNumber": 588,
        "author": {
          "gitId": "Alaete"
        },
        "content": "* `balance y/2019` +"
      },
      {
        "lineNumber": 589,
        "author": {
          "gitId": "LeeYiyuan"
        },
        "content": "Displays monthly balance trend for 2019."
      },
      {
        "lineNumber": 590,
        "author": {
          "gitId": "Alaete"
        },
        "content": ""
      },
      {
        "lineNumber": 591,
        "author": {
          "gitId": "Alaete"
        },
        "content": "\u003d\u003d\u003d\u003d Viewing expenditure breakdown by category: `breakdown`"
      },
      {
        "lineNumber": 592,
        "author": {
          "gitId": "Alaete"
        },
        "content": ""
      },
      {
        "lineNumber": 593,
        "author": {
          "gitId": "Alaete"
        },
        "content": "Displays breakdown of expenditure by category. +"
      },
      {
        "lineNumber": 594,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "Format: `breakdown [m/MONTH] [y/YEAR]`"
      },
      {
        "lineNumber": 595,
        "author": {
          "gitId": "Alaete"
        },
        "content": ""
      },
      {
        "lineNumber": 596,
        "author": {
          "gitId": "Alaete"
        },
        "content": "Examples:"
      },
      {
        "lineNumber": 597,
        "author": {
          "gitId": "Alaete"
        },
        "content": ""
      },
      {
        "lineNumber": 598,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "* `breakdown` +"
      },
      {
        "lineNumber": 599,
        "author": {
          "gitId": "Alaete"
        },
        "content": "Displays expenditure breakdown by category for current month."
      },
      {
        "lineNumber": 600,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "* `breakdown m/7 y/2019` +"
      },
      {
        "lineNumber": 601,
        "author": {
          "gitId": "Alaete"
        },
        "content": "Displays expenditure breakdown by category for July 2019."
      },
      {
        "lineNumber": 602,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 603,
        "author": {
          "gitId": "Alaete"
        },
        "content": "\u003d\u003d\u003d\u003d Viewing expenditure category ranking chart: `catrank`"
      },
      {
        "lineNumber": 604,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 605,
        "author": {
          "gitId": "Alaete"
        },
        "content": "Displays expenditure category ranking chart. +"
      },
      {
        "lineNumber": 606,
        "author": {
          "gitId": "Alaete"
        },
        "content": "Format: `catrank [m/MONTH] [y/YEAR]`"
      },
      {
        "lineNumber": 607,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 608,
        "author": {
          "gitId": "Alaete"
        },
        "content": "Examples:"
      },
      {
        "lineNumber": 609,
        "author": {
          "gitId": "Alaete"
        },
        "content": ""
      },
      {
        "lineNumber": 610,
        "author": {
          "gitId": "Alaete"
        },
        "content": "* `catrank` +"
      },
      {
        "lineNumber": 611,
        "author": {
          "gitId": "Alaete"
        },
        "content": "Displays expenditure category ranking chart for current month."
      },
      {
        "lineNumber": 612,
        "author": {
          "gitId": "Alaete"
        },
        "content": "* `catrank m/7 y/2019` +"
      },
      {
        "lineNumber": 613,
        "author": {
          "gitId": "Alaete"
        },
        "content": "Displays expenditure category ranking chart for July 2019."
      },
      {
        "lineNumber": 614,
        "author": {
          "gitId": "Alaete"
        },
        "content": ""
      },
      {
        "lineNumber": 615,
        "author": {
          "gitId": "Alaete"
        },
        "content": "\u003d\u003d\u003d\u003d Viewing expenditure ranking chart by month: `mthrank`"
      },
      {
        "lineNumber": 616,
        "author": {
          "gitId": "Alaete"
        },
        "content": ""
      },
      {
        "lineNumber": 617,
        "author": {
          "gitId": "Alaete"
        },
        "content": "Displays expenditure ranking chart by month. +"
      },
      {
        "lineNumber": 618,
        "author": {
          "gitId": "Alaete"
        },
        "content": "Format: `mthrank [y/YEAR]`"
      },
      {
        "lineNumber": 619,
        "author": {
          "gitId": "Alaete"
        },
        "content": ""
      },
      {
        "lineNumber": 620,
        "author": {
          "gitId": "Alaete"
        },
        "content": "Examples:"
      },
      {
        "lineNumber": 621,
        "author": {
          "gitId": "Alaete"
        },
        "content": ""
      },
      {
        "lineNumber": 622,
        "author": {
          "gitId": "Alaete"
        },
        "content": "* `mthrank` +"
      },
      {
        "lineNumber": 623,
        "author": {
          "gitId": "Alaete"
        },
        "content": "Displays expenditure ranking chart by month for current year."
      },
      {
        "lineNumber": 624,
        "author": {
          "gitId": "Alaete"
        },
        "content": "* `mthrank y/2019` +"
      },
      {
        "lineNumber": 625,
        "author": {
          "gitId": "Alaete"
        },
        "content": "Displays expenditure ranking chart by month for 2019."
      },
      {
        "lineNumber": 626,
        "author": {
          "gitId": "Alaete"
        },
        "content": ""
      },
      {
        "lineNumber": 627,
        "author": {
          "gitId": "Alaete"
        },
        "content": "\u003d\u003d\u003d\u003d Viewing expenditure ranking chart: `exprank`"
      },
      {
        "lineNumber": 628,
        "author": {
          "gitId": "Alaete"
        },
        "content": ""
      },
      {
        "lineNumber": 629,
        "author": {
          "gitId": "Alaete"
        },
        "content": "Displays expenditure ranking chart. +"
      },
      {
        "lineNumber": 630,
        "author": {
          "gitId": "Alaete"
        },
        "content": "Format: `exprank [m/MONTH] [y/YEAR]`"
      },
      {
        "lineNumber": 631,
        "author": {
          "gitId": "Alaete"
        },
        "content": ""
      },
      {
        "lineNumber": 632,
        "author": {
          "gitId": "Alaete"
        },
        "content": "Examples:"
      },
      {
        "lineNumber": 633,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 634,
        "author": {
          "gitId": "Alaete"
        },
        "content": "* `exprank` +"
      },
      {
        "lineNumber": 635,
        "author": {
          "gitId": "Alaete"
        },
        "content": "Displays expenditure ranking chart for current year."
      },
      {
        "lineNumber": 636,
        "author": {
          "gitId": "Alaete"
        },
        "content": "* `exprank y/2019` +"
      },
      {
        "lineNumber": 637,
        "author": {
          "gitId": "Alaete"
        },
        "content": "Displays expenditure ranking chart for 2019."
      },
      {
        "lineNumber": 638,
        "author": {
          "gitId": "Alaete"
        },
        "content": "* `exprank m/7 y/2019` +"
      },
      {
        "lineNumber": 639,
        "author": {
          "gitId": "Alaete"
        },
        "content": "Displays expenditure ranking chart for July 2019."
      },
      {
        "lineNumber": 640,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 641,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d FAQ"
      },
      {
        "lineNumber": 642,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 643,
        "author": {
          "gitId": "-"
        },
        "content": "*Q*: How do I transfer my data to another Computer? +"
      },
      {
        "lineNumber": 644,
        "author": {
          "gitId": "nexolute"
        },
        "content": "*A*: Install the app in the other computer and overwrite the empty data file it creates with the file that contains the data of your previous IchiFund folder."
      },
      {
        "lineNumber": 645,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 646,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Command Summary"
      },
      {
        "lineNumber": 647,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 648,
        "author": {
          "gitId": "-"
        },
        "content": "* *Help* : `help`"
      },
      {
        "lineNumber": 649,
        "author": {
          "gitId": "Alaete"
        },
        "content": "* *Exit* : `exit`"
      },
      {
        "lineNumber": 650,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "* *Transaction Add* : `add de/DESCRIPTION a/AMOUNT [c/CATEGORY] [d/DAY] [m/MONTH] [y/YEAR] [ty/TRANSACTION_TYPE]`"
      },
      {
        "lineNumber": 651,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "* *Transaction Edit* : `edit INDEX [de/DESCRIPTION] [a/AMOUNT] [c/CATEGORY] [d/DAY] [m/MONTH] [y/YEAR] [ty/TRANSACTION_TYPE]`"
      },
      {
        "lineNumber": 652,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "* *Transaction Delete* : `delete INDEX`"
      },
      {
        "lineNumber": 653,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "* *Transaction Find* : `filter [m/MONTH] [y/YEAR] [c/CATEGORY] [ty/TRANSACTION_TYPE]`"
      },
      {
        "lineNumber": 654,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "* *Transaction Repeater Add* : `add de/DESCRIPTION a/AMOUNT p/DAY_OF_MONTH... ty/TRANSACTION_TYPE`"
      },
      {
        "lineNumber": 655,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "* *Transaction Repeater Edit* : `edit INDEX [de/DESCRIPTION] [a/AMOUNT] [p/DAY_OF_MONTH]... [c/CATEGORY] [ty/TRANSACTION_TYPE]...`"
      },
      {
        "lineNumber": 656,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "* *Transaction Repeater Delete* : `delete INDEX [d/DELETEALL]`"
      },
      {
        "lineNumber": 657,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "* *Transaction Repeater Find* : `find [s/KEYWORD]... [c/CATEGORY] [p/DAY_OF_MONTH]... [ty/TRANSACTION_TYPE]`  (Coming in v2.0)"
      },
      {
        "lineNumber": 658,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "* *Loan Add new* : `loannew a/Amount [d/DATE] [n/NAME]`  (Coming in v2.0)"
      },
      {
        "lineNumber": 659,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "* *Loan Payment* : `loanpaid i/INDEX [n/NAME] [a/AMOUNT]`  (Coming in v2.0)"
      },
      {
        "lineNumber": 660,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "* *Loan Categorical Search* : `loanshow [s/KEYWORD]`  (Coming in v2.0)"
      },
      {
        "lineNumber": 661,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "* *Loan Net Amount* : `loantotal [s/KEYWORD]`  (Coming in v2.0)"
      },
      {
        "lineNumber": 662,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "* *Loan Value Update* : `loanset i/INDEX [a/AMOUNT] [s/DATE] [n/NAME] [d/DESCRIPTION]`  (Coming in v2.0)"
      },
      {
        "lineNumber": 663,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "* *Loan Sort By Value* : `loansort s/BY`  (Coming in v2.0)"
      },
      {
        "lineNumber": 664,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "* *Budget Add* : `add de/DESCRIPTION a/AMOUNT [c/CATEGORY] [m/MONTH y/YEAR]`"
      },
      {
        "lineNumber": 665,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "* *Budget Delete* : `delete INDEX`"
      },
      {
        "lineNumber": 666,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "* *Budget Find* : `find KEYWORD [MORE_KEYWORDS]`"
      },
      {
        "lineNumber": 667,
        "author": {
          "gitId": "Alaete"
        },
        "content": "* *Expenditure Trend* : `expenditure [y/YEAR]`"
      },
      {
        "lineNumber": 668,
        "author": {
          "gitId": "Alaete"
        },
        "content": "* *Income Trend* : `income [y/YEAR]`"
      },
      {
        "lineNumber": 669,
        "author": {
          "gitId": "Alaete"
        },
        "content": "* *Balance Trend* : `balance [y/YEAR]`"
      },
      {
        "lineNumber": 670,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "* *Categorical Breakdown* : `breakdown [m/MONTH] [y/YEAR]`"
      },
      {
        "lineNumber": 671,
        "author": {
          "gitId": "Alaete"
        },
        "content": "* *Categorical Ranking Chart* : `catrank [m/MONTH] [y/YEAR]`"
      },
      {
        "lineNumber": 672,
        "author": {
          "gitId": "Alaete"
        },
        "content": "* *Month-Based Ranking Chart* : `mthrank [y/YEAR]`"
      },
      {
        "lineNumber": 673,
        "author": {
          "gitId": "Alaete"
        },
        "content": "* *Ranking Chart* : `exprank [m/MONTH] [y/YEAR]`"
      }
    ],
    "authorContributionMap": {
      "LeeYiyuan": 21,
      "nexolute": 75,
      "Alaete": 113,
      "weiyang13": 331,
      "-": 86,
      "troomtroom": 47
    }
  },
  {
    "path": "docs/team/alaete.adoc",
    "fileType": "docs",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "nexolute"
        },
        "content": "\u003d Olivia Yu - Project Portfolio"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ":site-section: AboutUs"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": ":imagesDir: ../images"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ":stylesDir: ../stylesheets"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d PROJECT: AddressBook - Level 3"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "nexolute"
        },
        "content": "\u0027\u0027\u0027"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Overview"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "AddressBook - Level 3 is a desktop address book application used for teaching Software Engineering principles. The user interacts with it using a CLI, and it has a GUI created with JavaFX. It is written in Java, and has about 10 kLoC."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Summary of contributions"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "* *Major enhancement*: added *the ability to undo/redo previous commands*"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "** What it does: allows the user to undo all previous commands one at a time. Preceding undo commands can be reversed by using the redo command."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "** Justification: This feature improves the product significantly because a user can make mistakes in commands and the app should provide a convenient way to rectify them."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "** Highlights: This enhancement affects existing commands and commands to be added in future. It required an in-depth analysis of design alternatives. The implementation too was challenging as it required changes to existing commands."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "** Credits: _{mention here if you reused any code/ideas from elsewhere or if a third-party library is heavily used in the feature so that a reader can make a more accurate judgement of how much effort went into the feature}_"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "* *Minor enhancement*: added a history command that allows the user to navigate to previous commands using up/down keys."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "* *Code contributed*: [https://github.com[Functional code]] [https://github.com[Test code]] _{give links to collated code files}_"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "* *Other contributions*:"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "** Project management:"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "*** Managed releases `v1.3` - `v1.5rc` (3 releases) on GitHub"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "** Enhancements to existing features:"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "*** Updated the GUI color scheme (Pull requests https://github.com[#33], https://github.com[#34])"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "*** Wrote additional tests for existing features to increase coverage from 88% to 92% (Pull requests https://github.com[#36], https://github.com[#38])"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "** Documentation:"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "*** Did cosmetic tweaks to existing contents of the User Guide: https://github.com[#14]"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "** Community:"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "*** PRs reviewed (with non-trivial review comments): https://github.com[#12], https://github.com[#32], https://github.com[#19], https://github.com[#42]"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "*** Contributed to forum discussions (examples:  https://github.com[1], https://github.com[2], https://github.com[3], https://github.com[4])"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "*** Reported bugs and suggestions for other teams in the class (examples:  https://github.com[1], https://github.com[2], https://github.com[3])"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "*** Some parts of the history feature I added was adopted by several other class mates (https://github.com[1], https://github.com[2])"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "** Tools:"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "*** Integrated a third party library (Natty) to the project (https://github.com[#42])"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "*** Integrated a new Github plugin (CircleCI) to the team repo"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "_{you can add/remove categories in the list above}_"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Contributions to the User Guide"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "|\u003d\u003d\u003d"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "|_Given below are sections I contributed to the User Guide. They showcase my ability to write documentation targeting end-users._"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "|\u003d\u003d\u003d"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "include::../UserGuide.adoc[tag\u003ddelete]"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "include::../UserGuide.adoc[tag\u003ddataencryption]"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Contributions to the Developer Guide"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "|\u003d\u003d\u003d"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "|_Given below are sections I contributed to the Developer Guide. They showcase my ability to write technical documentation and the technical depth of my contributions to the project._"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "|\u003d\u003d\u003d"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "include::../DeveloperGuide.adoc[tag\u003dundoredo]"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "include::../DeveloperGuide.adoc[tag\u003ddataencryption]"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d PROJECT: PowerPointLabs"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "nexolute"
        },
        "content": "\u0027\u0027\u0027"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "_{Optionally, you may include other projects in your portfolio.}_"
      }
    ],
    "authorContributionMap": {
      "nexolute": 3,
      "-": 69
    }
  },
  {
    "path": "docs/team/andrewscw.adoc",
    "fileType": "docs",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "nexolute"
        },
        "content": "\u003d Andrew Sim - Project Portfolio"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "nexolute"
        },
        "content": ":site-section: AboutUs"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "nexolute"
        },
        "content": ":imagesDir: ../images"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "nexolute"
        },
        "content": ":stylesDir: ../stylesheets"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "nexolute"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "nexolute"
        },
        "content": "\u003d\u003d PROJECT: AddressBook - Level 3"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "nexolute"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "nexolute"
        },
        "content": "\u0027\u0027\u0027"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "nexolute"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "nexolute"
        },
        "content": "\u003d\u003d Overview"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "nexolute"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "nexolute"
        },
        "content": "AddressBook - Level 3 is a desktop address book application used for teaching Software Engineering principles. The user interacts with it using a CLI, and it has a GUI created with JavaFX. It is written in Java, and has about 10 kLoC."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "nexolute"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "nexolute"
        },
        "content": "\u003d\u003d Summary of contributions"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "nexolute"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "nexolute"
        },
        "content": "* *Major enhancement*: added *the ability to undo/redo previous commands*"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "nexolute"
        },
        "content": "** What it does: allows the user to undo all previous commands one at a time. Preceding undo commands can be reversed by using the redo command."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "nexolute"
        },
        "content": "** Justification: This feature improves the product significantly because a user can make mistakes in commands and the app should provide a convenient way to rectify them."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "nexolute"
        },
        "content": "** Highlights: This enhancement affects existing commands and commands to be added in future. It required an in-depth analysis of design alternatives. The implementation too was challenging as it required changes to existing commands."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "nexolute"
        },
        "content": "** Credits: _{mention here if you reused any code/ideas from elsewhere or if a third-party library is heavily used in the feature so that a reader can make a more accurate judgement of how much effort went into the feature}_"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "nexolute"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "nexolute"
        },
        "content": "* *Minor enhancement*: added a history command that allows the user to navigate to previous commands using up/down keys."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "nexolute"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "nexolute"
        },
        "content": "* *Code contributed*: [https://github.com[Functional code]] [https://github.com[Test code]] _{give links to collated code files}_"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "nexolute"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "nexolute"
        },
        "content": "* *Other contributions*:"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "nexolute"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "nexolute"
        },
        "content": "** Project management:"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "nexolute"
        },
        "content": "*** Managed releases `v1.3` - `v1.5rc` (3 releases) on GitHub"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "nexolute"
        },
        "content": "** Enhancements to existing features:"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "nexolute"
        },
        "content": "*** Updated the GUI color scheme (Pull requests https://github.com[#33], https://github.com[#34])"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "nexolute"
        },
        "content": "*** Wrote additional tests for existing features to increase coverage from 88% to 92% (Pull requests https://github.com[#36], https://github.com[#38])"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "nexolute"
        },
        "content": "** Documentation:"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "nexolute"
        },
        "content": "*** Did cosmetic tweaks to existing contents of the User Guide: https://github.com[#14]"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "nexolute"
        },
        "content": "** Community:"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "nexolute"
        },
        "content": "*** PRs reviewed (with non-trivial review comments): https://github.com[#12], https://github.com[#32], https://github.com[#19], https://github.com[#42]"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "nexolute"
        },
        "content": "*** Contributed to forum discussions (examples:  https://github.com[1], https://github.com[2], https://github.com[3], https://github.com[4])"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "nexolute"
        },
        "content": "*** Reported bugs and suggestions for other teams in the class (examples:  https://github.com[1], https://github.com[2], https://github.com[3])"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "nexolute"
        },
        "content": "*** Some parts of the history feature I added was adopted by several other class mates (https://github.com[1], https://github.com[2])"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "nexolute"
        },
        "content": "** Tools:"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "nexolute"
        },
        "content": "*** Integrated a third party library (Natty) to the project (https://github.com[#42])"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "nexolute"
        },
        "content": "*** Integrated a new Github plugin (CircleCI) to the team repo"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "nexolute"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "nexolute"
        },
        "content": "_{you can add/remove categories in the list above}_"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "nexolute"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "nexolute"
        },
        "content": "\u003d\u003d Contributions to the User Guide"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "nexolute"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "nexolute"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "nexolute"
        },
        "content": "|\u003d\u003d\u003d"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "nexolute"
        },
        "content": "|_Given below are sections I contributed to the User Guide. They showcase my ability to write documentation targeting end-users._"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "nexolute"
        },
        "content": "|\u003d\u003d\u003d"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "nexolute"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "nexolute"
        },
        "content": "include::../UserGuide.adoc[tag\u003ddelete]"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "nexolute"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "nexolute"
        },
        "content": "include::../UserGuide.adoc[tag\u003ddataencryption]"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "nexolute"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "nexolute"
        },
        "content": "\u003d\u003d Contributions to the Developer Guide"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "nexolute"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "nexolute"
        },
        "content": "|\u003d\u003d\u003d"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "nexolute"
        },
        "content": "|_Given below are sections I contributed to the Developer Guide. They showcase my ability to write technical documentation and the technical depth of my contributions to the project._"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "nexolute"
        },
        "content": "|\u003d\u003d\u003d"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "nexolute"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "nexolute"
        },
        "content": "include::../DeveloperGuide.adoc[tag\u003dundoredo]"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "nexolute"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "nexolute"
        },
        "content": "include::../DeveloperGuide.adoc[tag\u003ddataencryption]"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "nexolute"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "nexolute"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "nexolute"
        },
        "content": "\u003d\u003d PROJECT: PowerPointLabs"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "nexolute"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "nexolute"
        },
        "content": "\u0027\u0027\u0027"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "nexolute"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "nexolute"
        },
        "content": "_{Optionally, you may include other projects in your portfolio.}_"
      }
    ],
    "authorContributionMap": {
      "nexolute": 72
    }
  },
  {
    "path": "docs/team/leeyiyuan.adoc",
    "fileType": "docs",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "nexolute"
        },
        "content": "\u003d Lee Yiyuan - Project Portfolio"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "nexolute"
        },
        "content": ":site-section: AboutUs"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "nexolute"
        },
        "content": ":imagesDir: ../images"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "nexolute"
        },
        "content": ":stylesDir: ../stylesheets"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "nexolute"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "nexolute"
        },
        "content": "\u003d\u003d PROJECT: AddressBook - Level 3"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "nexolute"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "nexolute"
        },
        "content": "\u0027\u0027\u0027"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "nexolute"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "nexolute"
        },
        "content": "\u003d\u003d Overview"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "nexolute"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "nexolute"
        },
        "content": "AddressBook - Level 3 is a desktop address book application used for teaching Software Engineering principles. The user interacts with it using a CLI, and it has a GUI created with JavaFX. It is written in Java, and has about 10 kLoC."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "nexolute"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "nexolute"
        },
        "content": "\u003d\u003d Summary of contributions"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "nexolute"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "nexolute"
        },
        "content": "* *Major enhancement*: added *the ability to undo/redo previous commands*"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "nexolute"
        },
        "content": "** What it does: allows the user to undo all previous commands one at a time. Preceding undo commands can be reversed by using the redo command."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "nexolute"
        },
        "content": "** Justification: This feature improves the product significantly because a user can make mistakes in commands and the app should provide a convenient way to rectify them."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "nexolute"
        },
        "content": "** Highlights: This enhancement affects existing commands and commands to be added in future. It required an in-depth analysis of design alternatives. The implementation too was challenging as it required changes to existing commands."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "nexolute"
        },
        "content": "** Credits: _{mention here if you reused any code/ideas from elsewhere or if a third-party library is heavily used in the feature so that a reader can make a more accurate judgement of how much effort went into the feature}_"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "nexolute"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "nexolute"
        },
        "content": "* *Minor enhancement*: added a history command that allows the user to navigate to previous commands using up/down keys."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "nexolute"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "nexolute"
        },
        "content": "* *Code contributed*: [https://github.com[Functional code]] [https://github.com[Test code]] _{give links to collated code files}_"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "nexolute"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "nexolute"
        },
        "content": "* *Other contributions*:"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "nexolute"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "nexolute"
        },
        "content": "** Project management:"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "nexolute"
        },
        "content": "*** Managed releases `v1.3` - `v1.5rc` (3 releases) on GitHub"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "nexolute"
        },
        "content": "** Enhancements to existing features:"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "nexolute"
        },
        "content": "*** Updated the GUI color scheme (Pull requests https://github.com[#33], https://github.com[#34])"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "nexolute"
        },
        "content": "*** Wrote additional tests for existing features to increase coverage from 88% to 92% (Pull requests https://github.com[#36], https://github.com[#38])"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "nexolute"
        },
        "content": "** Documentation:"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "nexolute"
        },
        "content": "*** Did cosmetic tweaks to existing contents of the User Guide: https://github.com[#14]"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "nexolute"
        },
        "content": "** Community:"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "nexolute"
        },
        "content": "*** PRs reviewed (with non-trivial review comments): https://github.com[#12], https://github.com[#32], https://github.com[#19], https://github.com[#42]"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "nexolute"
        },
        "content": "*** Contributed to forum discussions (examples:  https://github.com[1], https://github.com[2], https://github.com[3], https://github.com[4])"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "nexolute"
        },
        "content": "*** Reported bugs and suggestions for other teams in the class (examples:  https://github.com[1], https://github.com[2], https://github.com[3])"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "nexolute"
        },
        "content": "*** Some parts of the history feature I added was adopted by several other class mates (https://github.com[1], https://github.com[2])"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "nexolute"
        },
        "content": "** Tools:"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "nexolute"
        },
        "content": "*** Integrated a third party library (Natty) to the project (https://github.com[#42])"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "nexolute"
        },
        "content": "*** Integrated a new Github plugin (CircleCI) to the team repo"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "nexolute"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "nexolute"
        },
        "content": "_{you can add/remove categories in the list above}_"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "nexolute"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "nexolute"
        },
        "content": "\u003d\u003d Contributions to the User Guide"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "nexolute"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "nexolute"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "nexolute"
        },
        "content": "|\u003d\u003d\u003d"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "nexolute"
        },
        "content": "|_Given below are sections I contributed to the User Guide. They showcase my ability to write documentation targeting end-users._"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "nexolute"
        },
        "content": "|\u003d\u003d\u003d"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "nexolute"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "nexolute"
        },
        "content": "include::../UserGuide.adoc[tag\u003ddelete]"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "nexolute"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "nexolute"
        },
        "content": "include::../UserGuide.adoc[tag\u003ddataencryption]"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "nexolute"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "nexolute"
        },
        "content": "\u003d\u003d Contributions to the Developer Guide"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "nexolute"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "nexolute"
        },
        "content": "|\u003d\u003d\u003d"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "nexolute"
        },
        "content": "|_Given below are sections I contributed to the Developer Guide. They showcase my ability to write technical documentation and the technical depth of my contributions to the project._"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "nexolute"
        },
        "content": "|\u003d\u003d\u003d"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "nexolute"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "nexolute"
        },
        "content": "include::../DeveloperGuide.adoc[tag\u003dundoredo]"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "nexolute"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "nexolute"
        },
        "content": "include::../DeveloperGuide.adoc[tag\u003ddataencryption]"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "nexolute"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "nexolute"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "nexolute"
        },
        "content": "\u003d\u003d PROJECT: PowerPointLabs"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "nexolute"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "nexolute"
        },
        "content": "\u0027\u0027\u0027"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "nexolute"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "nexolute"
        },
        "content": "_{Optionally, you may include other projects in your portfolio.}_"
      }
    ],
    "authorContributionMap": {
      "nexolute": 72
    }
  },
  {
    "path": "docs/team/nexolute.adoc",
    "fileType": "docs",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "nexolute"
        },
        "content": "\u003d Eugene Lim - Project Portfolio"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "nexolute"
        },
        "content": ":site-section: AboutUs"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "nexolute"
        },
        "content": ":imagesDir: ../images"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "nexolute"
        },
        "content": ":stylesDir: ../stylesheets"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "nexolute"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "nexolute"
        },
        "content": "\u003d\u003d PROJECT: AddressBook - Level 3"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "nexolute"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "nexolute"
        },
        "content": "\u0027\u0027\u0027"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "nexolute"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "nexolute"
        },
        "content": "\u003d\u003d Overview"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "nexolute"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "nexolute"
        },
        "content": "AddressBook - Level 3 is a desktop address book application used for teaching Software Engineering principles. The user interacts with it using a CLI, and it has a GUI created with JavaFX. It is written in Java, and has about 10 kLoC."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "nexolute"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "nexolute"
        },
        "content": "\u003d\u003d Summary of contributions"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "nexolute"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "nexolute"
        },
        "content": "* *Major enhancement*: added *the ability to undo/redo previous commands*"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "nexolute"
        },
        "content": "** What it does: allows the user to undo all previous commands one at a time. Preceding undo commands can be reversed by using the redo command."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "nexolute"
        },
        "content": "** Justification: This feature improves the product significantly because a user can make mistakes in commands and the app should provide a convenient way to rectify them."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "nexolute"
        },
        "content": "** Highlights: This enhancement affects existing commands and commands to be added in future. It required an in-depth analysis of design alternatives. The implementation too was challenging as it required changes to existing commands."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "nexolute"
        },
        "content": "** Credits: _{mention here if you reused any code/ideas from elsewhere or if a third-party library is heavily used in the feature so that a reader can make a more accurate judgement of how much effort went into the feature}_"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "nexolute"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "nexolute"
        },
        "content": "* *Minor enhancement*: added a history command that allows the user to navigate to previous commands using up/down keys."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "nexolute"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "nexolute"
        },
        "content": "* *Code contributed*: [https://github.com[Functional code]] [https://github.com[Test code]] _{give links to collated code files}_"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "nexolute"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "nexolute"
        },
        "content": "* *Other contributions*:"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "nexolute"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "nexolute"
        },
        "content": "** Project management:"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "nexolute"
        },
        "content": "*** Managed releases `v1.3` - `v1.5rc` (3 releases) on GitHub"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "nexolute"
        },
        "content": "** Enhancements to existing features:"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "nexolute"
        },
        "content": "*** Updated the GUI color scheme (Pull requests https://github.com[#33], https://github.com[#34])"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "nexolute"
        },
        "content": "*** Wrote additional tests for existing features to increase coverage from 88% to 92% (Pull requests https://github.com[#36], https://github.com[#38])"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "nexolute"
        },
        "content": "** Documentation:"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "nexolute"
        },
        "content": "*** Did cosmetic tweaks to existing contents of the User Guide: https://github.com[#14]"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "nexolute"
        },
        "content": "** Community:"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "nexolute"
        },
        "content": "*** PRs reviewed (with non-trivial review comments): https://github.com[#12], https://github.com[#32], https://github.com[#19], https://github.com[#42]"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "nexolute"
        },
        "content": "*** Contributed to forum discussions (examples:  https://github.com[1], https://github.com[2], https://github.com[3], https://github.com[4])"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "nexolute"
        },
        "content": "*** Reported bugs and suggestions for other teams in the class (examples:  https://github.com[1], https://github.com[2], https://github.com[3])"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "nexolute"
        },
        "content": "*** Some parts of the history feature I added was adopted by several other class mates (https://github.com[1], https://github.com[2])"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "nexolute"
        },
        "content": "** Tools:"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "nexolute"
        },
        "content": "*** Integrated a third party library (Natty) to the project (https://github.com[#42])"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "nexolute"
        },
        "content": "*** Integrated a new Github plugin (CircleCI) to the team repo"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "nexolute"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "nexolute"
        },
        "content": "_{you can add/remove categories in the list above}_"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "nexolute"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "nexolute"
        },
        "content": "\u003d\u003d Contributions to the User Guide"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "nexolute"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "nexolute"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "nexolute"
        },
        "content": "|\u003d\u003d\u003d"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "nexolute"
        },
        "content": "|_Given below are sections I contributed to the User Guide. They showcase my ability to write documentation targeting end-users._"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "nexolute"
        },
        "content": "|\u003d\u003d\u003d"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "nexolute"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "nexolute"
        },
        "content": "include::../UserGuide.adoc[tag\u003ddelete]"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "nexolute"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "nexolute"
        },
        "content": "include::../UserGuide.adoc[tag\u003ddataencryption]"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "nexolute"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "nexolute"
        },
        "content": "\u003d\u003d Contributions to the Developer Guide"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "nexolute"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "nexolute"
        },
        "content": "|\u003d\u003d\u003d"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "nexolute"
        },
        "content": "|_Given below are sections I contributed to the Developer Guide. They showcase my ability to write technical documentation and the technical depth of my contributions to the project._"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "nexolute"
        },
        "content": "|\u003d\u003d\u003d"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "nexolute"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "nexolute"
        },
        "content": "include::../DeveloperGuide.adoc[tag\u003dundoredo]"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "nexolute"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "nexolute"
        },
        "content": "include::../DeveloperGuide.adoc[tag\u003ddataencryption]"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "nexolute"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "nexolute"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "nexolute"
        },
        "content": "\u003d\u003d PROJECT: PowerPointLabs"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "nexolute"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "nexolute"
        },
        "content": "\u0027\u0027\u0027"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "nexolute"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "nexolute"
        },
        "content": "_{Optionally, you may include other projects in your portfolio.}_"
      }
    ],
    "authorContributionMap": {
      "nexolute": 72
    }
  },
  {
    "path": "docs/team/troomtroom.adoc",
    "fileType": "docs",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "nexolute"
        },
        "content": "\u003d Kartike Khandelwal - Project Portfolio"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "nexolute"
        },
        "content": ":site-section: AboutUs"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "nexolute"
        },
        "content": ":imagesDir: ../images"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "nexolute"
        },
        "content": ":stylesDir: ../stylesheets"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "nexolute"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "nexolute"
        },
        "content": "\u003d\u003d PROJECT: AddressBook - Level 3"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "nexolute"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "nexolute"
        },
        "content": "\u0027\u0027\u0027"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "nexolute"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "nexolute"
        },
        "content": "\u003d\u003d Overview"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "nexolute"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "nexolute"
        },
        "content": "AddressBook - Level 3 is a desktop address book application used for teaching Software Engineering principles. The user interacts with it using a CLI, and it has a GUI created with JavaFX. It is written in Java, and has about 10 kLoC."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "nexolute"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "nexolute"
        },
        "content": "\u003d\u003d Summary of contributions"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "nexolute"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "nexolute"
        },
        "content": "* *Major enhancement*: added *the ability to undo/redo previous commands*"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "nexolute"
        },
        "content": "** What it does: allows the user to undo all previous commands one at a time. Preceding undo commands can be reversed by using the redo command."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "nexolute"
        },
        "content": "** Justification: This feature improves the product significantly because a user can make mistakes in commands and the app should provide a convenient way to rectify them."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "nexolute"
        },
        "content": "** Highlights: This enhancement affects existing commands and commands to be added in future. It required an in-depth analysis of design alternatives. The implementation too was challenging as it required changes to existing commands."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "nexolute"
        },
        "content": "** Credits: _{mention here if you reused any code/ideas from elsewhere or if a third-party library is heavily used in the feature so that a reader can make a more accurate judgement of how much effort went into the feature}_"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "nexolute"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "nexolute"
        },
        "content": "* *Minor enhancement*: added a history command that allows the user to navigate to previous commands using up/down keys."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "nexolute"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "nexolute"
        },
        "content": "* *Code contributed*: [https://github.com[Functional code]] [https://github.com[Test code]] _{give links to collated code files}_"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "nexolute"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "nexolute"
        },
        "content": "* *Other contributions*:"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "nexolute"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "nexolute"
        },
        "content": "** Project management:"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "nexolute"
        },
        "content": "*** Managed releases `v1.3` - `v1.5rc` (3 releases) on GitHub"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "nexolute"
        },
        "content": "** Enhancements to existing features:"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "nexolute"
        },
        "content": "*** Updated the GUI color scheme (Pull requests https://github.com[#33], https://github.com[#34])"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "nexolute"
        },
        "content": "*** Wrote additional tests for existing features to increase coverage from 88% to 92% (Pull requests https://github.com[#36], https://github.com[#38])"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "nexolute"
        },
        "content": "** Documentation:"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "nexolute"
        },
        "content": "*** Did cosmetic tweaks to existing contents of the User Guide: https://github.com[#14]"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "nexolute"
        },
        "content": "** Community:"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "nexolute"
        },
        "content": "*** PRs reviewed (with non-trivial review comments): https://github.com[#12], https://github.com[#32], https://github.com[#19], https://github.com[#42]"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "nexolute"
        },
        "content": "*** Contributed to forum discussions (examples:  https://github.com[1], https://github.com[2], https://github.com[3], https://github.com[4])"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "nexolute"
        },
        "content": "*** Reported bugs and suggestions for other teams in the class (examples:  https://github.com[1], https://github.com[2], https://github.com[3])"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "nexolute"
        },
        "content": "*** Some parts of the history feature I added was adopted by several other class mates (https://github.com[1], https://github.com[2])"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "nexolute"
        },
        "content": "** Tools:"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "nexolute"
        },
        "content": "*** Integrated a third party library (Natty) to the project (https://github.com[#42])"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "nexolute"
        },
        "content": "*** Integrated a new Github plugin (CircleCI) to the team repo"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "nexolute"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "nexolute"
        },
        "content": "_{you can add/remove categories in the list above}_"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "nexolute"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "nexolute"
        },
        "content": "\u003d\u003d Contributions to the User Guide"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "nexolute"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "nexolute"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "nexolute"
        },
        "content": "|\u003d\u003d\u003d"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "nexolute"
        },
        "content": "|_Given below are sections I contributed to the User Guide. They showcase my ability to write documentation targeting end-users._"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "nexolute"
        },
        "content": "|\u003d\u003d\u003d"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "nexolute"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "nexolute"
        },
        "content": "include::../UserGuide.adoc[tag\u003ddelete]"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "nexolute"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "nexolute"
        },
        "content": "include::../UserGuide.adoc[tag\u003ddataencryption]"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "nexolute"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "nexolute"
        },
        "content": "\u003d\u003d Contributions to the Developer Guide"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "nexolute"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "nexolute"
        },
        "content": "|\u003d\u003d\u003d"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "nexolute"
        },
        "content": "|_Given below are sections I contributed to the Developer Guide. They showcase my ability to write technical documentation and the technical depth of my contributions to the project._"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "nexolute"
        },
        "content": "|\u003d\u003d\u003d"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "nexolute"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "nexolute"
        },
        "content": "include::../DeveloperGuide.adoc[tag\u003dundoredo]"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "nexolute"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "nexolute"
        },
        "content": "include::../DeveloperGuide.adoc[tag\u003ddataencryption]"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "nexolute"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "nexolute"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "nexolute"
        },
        "content": "\u003d\u003d PROJECT: PowerPointLabs"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "nexolute"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "nexolute"
        },
        "content": "\u0027\u0027\u0027"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "nexolute"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "nexolute"
        },
        "content": "_{Optionally, you may include other projects in your portfolio.}_"
      }
    ],
    "authorContributionMap": {
      "nexolute": 72
    }
  },
  {
    "path": "docs/team/weiyang13.adoc",
    "fileType": "docs",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "nexolute"
        },
        "content": "\u003d Tan Wei Yang - Project Portfolio"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "nexolute"
        },
        "content": ":site-section: AboutUs"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "nexolute"
        },
        "content": ":imagesDir: ../images"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "nexolute"
        },
        "content": ":stylesDir: ../stylesheets"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "nexolute"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "nexolute"
        },
        "content": "\u003d\u003d PROJECT: AddressBook - Level 3"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "nexolute"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "nexolute"
        },
        "content": "\u0027\u0027\u0027"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "nexolute"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "nexolute"
        },
        "content": "\u003d\u003d Overview"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "nexolute"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "nexolute"
        },
        "content": "AddressBook - Level 3 is a desktop address book application used for teaching Software Engineering principles. The user interacts with it using a CLI, and it has a GUI created with JavaFX. It is written in Java, and has about 10 kLoC."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "nexolute"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "nexolute"
        },
        "content": "\u003d\u003d Summary of contributions"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "nexolute"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "nexolute"
        },
        "content": "* *Major enhancement*: added *the ability to undo/redo previous commands*"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "nexolute"
        },
        "content": "** What it does: allows the user to undo all previous commands one at a time. Preceding undo commands can be reversed by using the redo command."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "nexolute"
        },
        "content": "** Justification: This feature improves the product significantly because a user can make mistakes in commands and the app should provide a convenient way to rectify them."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "nexolute"
        },
        "content": "** Highlights: This enhancement affects existing commands and commands to be added in future. It required an in-depth analysis of design alternatives. The implementation too was challenging as it required changes to existing commands."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "nexolute"
        },
        "content": "** Credits: _{mention here if you reused any code/ideas from elsewhere or if a third-party library is heavily used in the feature so that a reader can make a more accurate judgement of how much effort went into the feature}_"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "nexolute"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "nexolute"
        },
        "content": "* *Minor enhancement*: added a history command that allows the user to navigate to previous commands using up/down keys."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "nexolute"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "nexolute"
        },
        "content": "* *Code contributed*: [https://github.com[Functional code]] [https://github.com[Test code]] _{give links to collated code files}_"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "nexolute"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "nexolute"
        },
        "content": "* *Other contributions*:"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "nexolute"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "nexolute"
        },
        "content": "** Project management:"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "nexolute"
        },
        "content": "*** Managed releases `v1.3` - `v1.5rc` (3 releases) on GitHub"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "nexolute"
        },
        "content": "** Enhancements to existing features:"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "nexolute"
        },
        "content": "*** Updated the GUI color scheme (Pull requests https://github.com[#33], https://github.com[#34])"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "nexolute"
        },
        "content": "*** Wrote additional tests for existing features to increase coverage from 88% to 92% (Pull requests https://github.com[#36], https://github.com[#38])"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "nexolute"
        },
        "content": "** Documentation:"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "nexolute"
        },
        "content": "*** Did cosmetic tweaks to existing contents of the User Guide: https://github.com[#14]"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "nexolute"
        },
        "content": "** Community:"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "nexolute"
        },
        "content": "*** PRs reviewed (with non-trivial review comments): https://github.com[#12], https://github.com[#32], https://github.com[#19], https://github.com[#42]"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "nexolute"
        },
        "content": "*** Contributed to forum discussions (examples:  https://github.com[1], https://github.com[2], https://github.com[3], https://github.com[4])"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "nexolute"
        },
        "content": "*** Reported bugs and suggestions for other teams in the class (examples:  https://github.com[1], https://github.com[2], https://github.com[3])"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "nexolute"
        },
        "content": "*** Some parts of the history feature I added was adopted by several other class mates (https://github.com[1], https://github.com[2])"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "nexolute"
        },
        "content": "** Tools:"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "nexolute"
        },
        "content": "*** Integrated a third party library (Natty) to the project (https://github.com[#42])"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "nexolute"
        },
        "content": "*** Integrated a new Github plugin (CircleCI) to the team repo"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "nexolute"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "nexolute"
        },
        "content": "_{you can add/remove categories in the list above}_"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "nexolute"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "nexolute"
        },
        "content": "\u003d\u003d Contributions to the User Guide"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "nexolute"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "nexolute"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "nexolute"
        },
        "content": "|\u003d\u003d\u003d"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "nexolute"
        },
        "content": "|_Given below are sections I contributed to the User Guide. They showcase my ability to write documentation targeting end-users._"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "nexolute"
        },
        "content": "|\u003d\u003d\u003d"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "nexolute"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "nexolute"
        },
        "content": "include::../UserGuide.adoc[tag\u003ddelete]"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "nexolute"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "nexolute"
        },
        "content": "include::../UserGuide.adoc[tag\u003ddataencryption]"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "nexolute"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "nexolute"
        },
        "content": "\u003d\u003d Contributions to the Developer Guide"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "nexolute"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "nexolute"
        },
        "content": "|\u003d\u003d\u003d"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "nexolute"
        },
        "content": "|_Given below are sections I contributed to the Developer Guide. They showcase my ability to write technical documentation and the technical depth of my contributions to the project._"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "nexolute"
        },
        "content": "|\u003d\u003d\u003d"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "nexolute"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "nexolute"
        },
        "content": "include::../DeveloperGuide.adoc[tag\u003dundoredo]"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "nexolute"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "nexolute"
        },
        "content": "include::../DeveloperGuide.adoc[tag\u003ddataencryption]"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "nexolute"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "nexolute"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "nexolute"
        },
        "content": "\u003d\u003d PROJECT: PowerPointLabs"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "nexolute"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "nexolute"
        },
        "content": "\u0027\u0027\u0027"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "nexolute"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "nexolute"
        },
        "content": "_{Optionally, you may include other projects in your portfolio.}_"
      }
    ],
    "authorContributionMap": {
      "nexolute": 72
    }
  },
  {
    "path": "docs/tutorials/RemovingFields.adoc",
    "fileType": "docs",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d Tutorial - Removing a field from an entity"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ":site-section: DeveloperGuide"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": ":imagesDir: ../images/remove"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ":stylesDir: ../stylesheets"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ":xrefstyle: full"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "ifdef::env-github[]"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ":tip-caption: :bulb:"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ":note-caption: :information_source:"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ":warning-caption: :warning:"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "endif::[]"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "[quote, Antoine de Saint-Exupery]"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "Perfection is achieved, not when there is nothing more to add, but when there is nothing left to take away."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Introduction"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "When working on Address Book, you will most likely find that some features and fields that are no longer necessary."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "In scenarios like this, you can consider refactoring the existing `Person` model to suit your use case."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "In this tutorial, we\u0027ll do exactly just that and remove the `address` field from `Person`."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Safely deleting `Address`"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "Fortunately, the IntelliJ IDEA provides a robust refactoring tool that can identify _most_ usages."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "Let\u0027s try to use it as much as we can."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Assisted refactoring"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "nexolute"
        },
        "content": "The `address` field in `Person` is actually an instance of the `seedu.ichifund.model.person.Address` class."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "Since removing the `Address` class will break the application, we start by identifying ``Address``\u0027s usages."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "This allows us to see code that depends on `Address` to function properly and edit them on a case-by-case basis."
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "Right-click the `Address` class and select `Refactor` \u003e `Safe Delete` through the menu."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ".Usages detected"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "image::UnsafeDelete.png[width\u003d787px. height\u003d238px]"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "Choose to `View Usages` and you should be presented with a list of `Safe Delete Conflicts`."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "These conflicts describe locations in which the `Address` class is used."
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": ".List of conflicts"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "image::SafeDeleteConflicts.png[width\u003d955, height\u003d640px]"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "Remove usages of `Address` by performing ``Safe Delete``s on each entry."
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "You will need to exercise discretion when removing usages of `Address`."
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "Functions like `ParserUtil#parseAddress()` can be safely removed but its usages must be removed as well."
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "Other usages like in `EditPersonDescriptor` may require more careful inspection."
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "Let\u0027s try removing references to `Address` in `EditPersonDescriptor`."
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": ". Safe delete the field `address` in `EditPersonDescriptor`"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": ". Select `Yes` when prompted to remove getters and setters"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": ". Select `View Usages` again image:UnsafeDeleteOnField.png[width\u003d1145px, height\u003d583px]"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": ". Remove the usages of `address` and select `Do refactor` when you are done."
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "TIP: Removing usages may result in errors."
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "Exercise discretion and fix them."
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "For example, removing the `address` field from the `Person` class will require you to modify its constructor."
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": ". Repeat the steps for the remaining usages of `Address`"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "After you are done, verify that the application still works by compiling and running it again."
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Manual refactoring"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "Unfortunately, there are usages of `Address` that IntelliJ IDEA cannot identify."
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "You can find them by searching for instances of the word `address` in your code (`Edit` \u003e `Find` \u003e `Find in path`)."
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "Places of interest to look out for would be resources used by the application."
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "`main/resources` contains images and `fxml` files used by the application and `test/resources` contains test data."
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "For example, there is a `$address` in each `PersonCard` that has not been removed nor identified."
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "image::$address.png[width\u003d1090px, height\u003d890px]"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "A quick look at the `PersonCard` class and its `fxml` file quickly reveals why it slipped past the automated refactoring."
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": ".PersonCard.java"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "[source, java]"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "----"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "..."
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "@FXML"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "private Label address;"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "..."
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "----"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": ".PersonCard.fxml"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "[source, xml]"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "----"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "..."
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "\u003cLabel fx:id\u003d\"phone\" styleClass\u003d\"cell_small_label\" text\u003d\"\\$phone\" /\u003e"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "\u003cLabel fx:id\u003d\"address\" styleClass\u003d\"cell_small_label\" text\u003d\"\\$address\" /\u003e"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "\u003cLabel fx:id\u003d\"email\" styleClass\u003d\"cell_small_label\" text\u003d\"\\$email\" /\u003e"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "..."
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "----"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "After removing the `Label`, we can proceed to formally test our code."
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "If everything went well, you should have most of your tests pass."
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "Fix any remaining errors until the tests all pass."
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Tidying up"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "At this point, your application is working as intended and all your tests are passing."
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "What\u0027s left to do is to clean up references to `Address` in test data and documentation."
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "In `src/test/data/`, data meant for testing purposes are stored."
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "While keeping the `address` field in the json files does not cause the tests to fail, it is not good practice to let cruft from old features accumulate."
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": ".invalidPersonAddressBook.json"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "[source, json]"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "```"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "{"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "  \"persons\": [ {"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "    \"name\": \"Person with invalid name field: Ha!ns Mu@ster\","
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "    \"phone\": \"9482424\","
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "    \"email\": \"hans@example.com\","
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "    \"address\": \"4th street\""
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "  } ]"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "```"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "You can go through each individual `json` file and manually remove the `address` field."
      }
    ],
    "authorContributionMap": {
      "nexolute": 1,
      "-": 116
    }
  },
  {
    "path": "docs/tutorials/TracingCode.adoc",
    "fileType": "docs",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d Tutorial - Tracing a Command Execution Path"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ":site-section: DeveloperGuide"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": ":imagesDir: ../images/tracing"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ":stylesDir: ../stylesheets"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ":xrefstyle: full"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "ifdef::env-github[]"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ":tip-caption: :bulb:"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ":note-caption: :information_source:"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ":warning-caption: :warning:"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "endif::[]"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "[quote, Robert C. Martin, Clean Code: A Handbook of Agile Software Craftsmanship ]"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "Indeed, the ratio of time spent reading versus writing is well over 10 to 1. We are constantly reading old code as"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "part of the effort to write new code.  ...[Therefore,] making it easy to read makes it easier to write."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "When trying to understand an unfamiliar code base, one common strategy used is to trace some representative execution"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "path through the code base. One easy way to trace an execution path is to use a debugger to step through the code."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "In this tutorial, you will be using the IntelliJ IDEA\u0027s debugger to trace the execution path of a specific user command."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "Before we jump into the code, it is useful to get an idea of the overall structure and the high-level behavior of the"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "application. This is provided in the \u0027Architecture\u0027 section of the developer guide. In particular, the"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "architecture diagram (reproduced below), tells us that the App consists of several components."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "image::../ArchitectureDiagram.png[]"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "It also has a sequence diagram (reproduced below) that tells us how a command propagates through the App."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ".Architecture sequence diagram from the developer guide"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "image::../ArchitectureSequenceDiagram.png[]"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "Note how the diagram shows only how the execution flows _between_ the main components. That is, it does not show details of"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "the execution path _inside_ each component. By hiding those details, the diagram succeeds in informing the reader"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "about the overall execution path of a command without overwhelming the reader with too much details."
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "In this tutorial, you aim to find those omitted details so that you get a more in-depth understanding of the code base."
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "Before we proceed, ensure that you have done the following:"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": ". Read the _Architecture_ section of the DG"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ". Set up the project in Intellij IDEA"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ". Learn basic debugging features of Intellij IDEA"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Setting a break point"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "As you know, the first step of debugging is to put in a breakpoint where you want the debugger to pause the execution."
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "For example, if you are trying to understand how the App starts up, you would put a breakpoint in the first statement"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "of the `main` method. In our case, we would want to begin the tracing at the very point where the App start processing"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "user input i.e., somewhere in the UI component, and then trace through how the execution proceeds through the UI component."
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "However, the execution path through a GUI is often somewhat obscure due to various _event-driven mechanisms_"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "used by GUI frameworks, which happens to be the case here too. Therefore, let us put the breakpoint where the UI transfers"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "control to the Logic component. According to the sequence diagram, the UI component yields control to the Logic component"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "through a method named `execute`. Searching through the code base for `execute()` yields a promising candidate in"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "nexolute"
        },
        "content": "`seedu.ichifund.ui.CommandBox.CommandExecutor`."
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": ".Using the `Search for target by name` feature. `Navigate` \u003e `Symbol`."
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "image::Execute.png[]"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "A quick look at the class confirms that this is indeed close to what we\u0027re looking for. However, it is just an"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "`Interface`. Let\u0027s delve further and find the implementation of the interface by using the `Find Usages` feature in"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "IntelliJ IDEA."
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": ".`Find Usages` tool window. `Edit` \u003e `Find` \u003e `Find Usages`."
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "image::FindUsages.png[]"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "Bingo! `MainWindow#executeCommand()` seems to be exactly what we\u0027re looking for!"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "Now let\u0027s set the breakpoint. First, double-click the item to reach the corresponding code. Once there, click on the left"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "gutter to set a breakpoint, as shown below."
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "image:LeftGutter.png[]"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Tracing the execution path"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "Recall from the User Guide that the `edit` command has the format: `edit INDEX [n/NAME] [p/PHONE] [e/EMAIL]"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "[a/ADDRESS] [t/TAG]...` For this tutorial we will be issuing the command `edit 1 n/Alice Yeoh`."
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "[TIP]"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": ".Taking notes"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "Over the course of the debugging session, you will encounter every major component in the application. Try to jot down"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "what happens inside the component and where the execution transfers to another component."
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": ". To start the debugging session, simply `Run` \u003e `Debug Main`"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": ". Enter `edit 1 n/Alice Yeoh` into the command box and press `Enter`."
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": ". The Debugger tool window should show up and look something like this:"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "image:DebuggerStep1.png[]"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": ". Use the `Show execution point` feature to jump to the line of code that we stopped at:"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "image:ShowExecutionPoint.png[]"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": ". `CommandResult commandResult \u003d logic.execute(commandText);` is the line that you end up at."
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": ". We are interested in the `logic.execute(commandText)` portion of that line so let\u0027s `Step in` into that method call:"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "image:StepInto.png[]"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": ". We end up in `LogicManager#execute()`. Let\u0027s take a look at the body of the method and annotate what we can deduce."
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": ".LogicManager#execute()"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "[source, java]"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "----"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "@Override"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "public CommandResult execute(String commandText) throws CommandException, ParseException {"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "     //Logging, safe to ignore"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "     logger.info(\"----------------[USER COMMAND][\" + commandText + \"]\");"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "     CommandResult commandResult;"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "     //Parse user input from String to a Command"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "     Command command \u003d addressBookParser.parseCommand(commandText);"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "     //Executes the Command and stores the result"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "     commandResult \u003d command.execute(model);"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "     try {"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "         //We can deduce that the previous line of code modifies model in some way"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "         // since it\u0027s being stored here."
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "         storage.saveAddressBook(model.getAddressBook());"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "     } catch (IOException ioe) {"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "         throw new CommandException(FILE_OPS_ERROR_MESSAGE + ioe, ioe);"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "     }"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "     return commandResult;"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": " }"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "----"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": ". `LogicManager#execute()` appears to delegate most of the heavy lifting to other components. Let\u0027s take a closer"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "look at each one."
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": ". `Step over` the logging code since it is of no interest to us now."
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "image:StepOver.png[]"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": ". `Step into` the line where user input in parsed from a String to a Command."
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": ".AddressBookParser#parseCommand()"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "[source, java]"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "----"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "public Command parseCommand(String userInput) throws ParseException {"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "    ..."
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "    final String commandWord \u003d matcher.group(\"commandWord\");"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "    final String arguments \u003d matcher.group(\"arguments\");"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": "    ..."
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "----"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": ". `Step over` until you reach the `switch` statement. The `Variables` window now shows the value of both"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": "`commandWord` and `arguments` :"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": "image:Variables.png[]"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": ". We see that the value of `commandWord` is now `edit` but `arguments` is still not processed in any meaningful way."
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": ". Stepping into the `switch`, we obviously stop at"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": ".AddressBookParser#parseCommand()"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": "[source, java]"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": "----"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": "..."
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": "case EditCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": "    return new EditCommandParser().parse(arguments);"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": "..."
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": "----"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": ". Let\u0027s see what `EditCommandParser#parse()` does by stepping into it."
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": ". Stepping through the method shows that it calls `ArgumentTokenizer#tokenize()` and `ParserUtil#parseIndex()` to"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "-"
        },
        "content": "obtain the arguments and index required."
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "-"
        },
        "content": "[TIP]"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "-"
        },
        "content": ".Stepping out"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "-"
        },
        "content": "Sometimes you might end up stepping into functions that are not of interest. Simply `step out` of them!"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "-"
        },
        "content": ". The rest of the method seems to exhaustively check for the existence of each possible parameter of the `edit`"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "-"
        },
        "content": "command and store any possible changes in an `EditPersonDescriptor`. Recall that we can verify the contents of"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "-"
        },
        "content": "`editPersonDesciptor` through the `Variable` tool window."
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "-"
        },
        "content": "image:EditCommand.png[]"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "-"
        },
        "content": ". Let\u0027s continue stepping through until we return to `LogicManager#execute()`."
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "-"
        },
        "content": "The sequence diagram below shows the details of the execution path through the Logic component."
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "-"
        },
        "content": "Does the execution path you traced in the code so far matches with the diagram?"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "-"
        },
        "content": ".Tracing an `edit` command through the Logic component"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "-"
        },
        "content": "image::LogicSequenceDiagram.png[]"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "-"
        },
        "content": ". Now let\u0027s see what happens when we call `command#execute()`!"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "-"
        },
        "content": ".EditCommand#execute()"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "-"
        },
        "content": "[source, java]"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "-"
        },
        "content": "----"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "-"
        },
        "content": "@Override"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "-"
        },
        "content": "public CommandResult execute(Model model) throws CommandException {"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "-"
        },
        "content": "    ..."
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "-"
        },
        "content": "    Person personToEdit \u003d lastShownList.get(index.getZeroBased());"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "-"
        },
        "content": "    Person editedPerson \u003d createEditedPerson(personToEdit, editPersonDescriptor);"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "-"
        },
        "content": "    if (!personToEdit.isSamePerson(editedPerson) \u0026\u0026 model.hasPerson(editedPerson)) {"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "-"
        },
        "content": "        throw new CommandException(MESSAGE_DUPLICATE_PERSON);"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "-"
        },
        "content": "    model.setPerson(personToEdit, editedPerson);"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "-"
        },
        "content": "    model.updateFilteredPersonList(PREDICATE_SHOW_ALL_PERSONS);"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "-"
        },
        "content": "    return new CommandResult(String.format(MESSAGE_EDIT_PERSON_SUCCESS, editedPerson));"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "-"
        },
        "content": "----"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "-"
        },
        "content": ". As suspected, `command#execute()` does indeed make changes to `model`."
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "-"
        },
        "content": ". We can a closer look at how storage works by repeatedly stepping into the code until we arrive at"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "-"
        },
        "content": "`JsonAddressBook#saveAddressBook()`."
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "-"
        },
        "content": ". Again, it appears that the heavy lifting is delegated. Let\u0027s take a look at ``JsonSerializableAddressBook``\u0027s"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "-"
        },
        "content": "constructor."
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "-"
        },
        "content": ".JsonSerializableAddressBook#JsonSerializableAddressBook()"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "-"
        },
        "content": "[source, java]"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "-"
        },
        "content": "----"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "-"
        },
        "content": " * Converts a given {@code ReadOnlyAddressBook} into this class for Jackson use."
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "-"
        },
        "content": " *"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "-"
        },
        "content": " * @param source future changes to this will not affect the created"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "-"
        },
        "content": " * {@code JsonSerializableAddressBook}."
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "-"
        },
        "content": "public JsonSerializableAddressBook(ReadOnlyAddressBook source) {"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "-"
        },
        "content": "    persons.addAll("
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "-"
        },
        "content": "        source.getPersonList()"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "-"
        },
        "content": "              .stream()"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "-"
        },
        "content": "              .map(JsonAdaptedPerson::new)"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "-"
        },
        "content": "              .collect(Collectors.toList()));"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "-"
        },
        "content": "----"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "-"
        },
        "content": ". It appears that a `JsonAdaptedPerson` is created for each `Person` and then added to the"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "-"
        },
        "content": "`JsonSerializableAddressBook`."
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "-"
        },
        "content": ". We can continue to step through until we return to `MainWindow#executeCommand()`."
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "-"
        },
        "content": ". Stepping into ``resultDisplay.setFeedbackToUser(commandResult.getFeedbackToUser());``, we end up in:"
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "-"
        },
        "content": ".ResultDisplay#setFeedbackToUser()"
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "-"
        },
        "content": "[source, java]"
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "-"
        },
        "content": "----"
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "-"
        },
        "content": "public void setFeedbackToUser(String feedbackToUser) {"
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "-"
        },
        "content": "    requireNonNull(feedbackToUser);"
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "-"
        },
        "content": "    resultDisplay.setText(feedbackToUser);"
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "-"
        },
        "content": "----"
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "-"
        },
        "content": ". Finally, we step through until we reach the end of `MainWindow#executeCommand()`."
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Conclusion"
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "-"
        },
        "content": "In this tutorial, we traced a valid edit command from raw user input to the result being displayed to the user. From"
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "-"
        },
        "content": "this tutorial, you learned more about the inner workings of AddressBook and how the various components mesh together"
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "-"
        },
        "content": "to form one cohesive product."
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "-"
        },
        "content": ".What\u0027s next?"
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "-"
        },
        "content": "****"
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "-"
        },
        "content": "Here are some quick questions you can try to answer based on your execution path tracing. In some cases, you can"
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "-"
        },
        "content": "do further tracing for the given commands to find exactly what happens."
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "-"
        },
        "content": ". In this tutorial, we traced the \"happy path\" (i.e., no errors). What do you think will happen if we traced the following commands"
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "-"
        },
        "content": "instead? What exceptions do you think will be thrown(if any), where will the exceptions be thrown and where will they be"
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "-"
        },
        "content": "handled?"
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "-"
        },
        "content": ".. `redit 1 n/Alice Yu`"
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "-"
        },
        "content": ".. `edit 0 n/Alice Yu`"
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "-"
        },
        "content": ".. `edit 1 n/Alex Yeoh`"
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "-"
        },
        "content": ".. `edit 1`"
      },
      {
        "lineNumber": 248,
        "author": {
          "gitId": "-"
        },
        "content": ".. `edit 1 n/アリス ユー`"
      },
      {
        "lineNumber": 249,
        "author": {
          "gitId": "-"
        },
        "content": ".. `edit 1 t/one t/two t/three t/one`"
      },
      {
        "lineNumber": 250,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 251,
        "author": {
          "gitId": "-"
        },
        "content": ". What components will you have to modify to perform the following enhancements to the application?"
      },
      {
        "lineNumber": 252,
        "author": {
          "gitId": "-"
        },
        "content": ".. Make command words case-insensitive"
      },
      {
        "lineNumber": 253,
        "author": {
          "gitId": "-"
        },
        "content": ".. Allow `delete` to remove more than one index at a time"
      },
      {
        "lineNumber": 254,
        "author": {
          "gitId": "-"
        },
        "content": ".. Save the address book in the CSV format instead"
      },
      {
        "lineNumber": 255,
        "author": {
          "gitId": "-"
        },
        "content": ".. Add a new command"
      },
      {
        "lineNumber": 256,
        "author": {
          "gitId": "-"
        },
        "content": ".. Add a new field to `Person`"
      },
      {
        "lineNumber": 257,
        "author": {
          "gitId": "-"
        },
        "content": ".. Add a new entity to the address book"
      },
      {
        "lineNumber": 258,
        "author": {
          "gitId": "-"
        },
        "content": "****"
      }
    ],
    "authorContributionMap": {
      "nexolute": 1,
      "-": 257
    }
  },
  {
    "path": "src/main/java/seedu/ichifund/AppParameters.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "nexolute"
        },
        "content": "package seedu.ichifund;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Paths;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Map;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Objects;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.application.Application;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "nexolute"
        },
        "content": "import seedu.ichifund.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "nexolute"
        },
        "content": "import seedu.ichifund.commons.util.FileUtil;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": " * Represents the parsed command-line parameters given to the application."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "public class AppParameters {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final Logger logger \u003d LogsCenter.getLogger(AppParameters.class);"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    private Path configPath;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    public Path getConfigPath() {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "        return configPath;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setConfigPath(Path configPath) {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "        this.configPath \u003d configPath;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "     * Parses the application command-line parameters."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    public static AppParameters parse(Application.Parameters parameters) {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "        AppParameters appParameters \u003d new AppParameters();"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        Map\u003cString, String\u003e namedParameters \u003d parameters.getNamed();"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        String configPathParameter \u003d namedParameters.get(\"config\");"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        if (configPathParameter !\u003d null \u0026\u0026 !FileUtil.isValidPath(configPathParameter)) {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "            logger.warning(\"Invalid config path \" + configPathParameter + \". Using default config path.\");"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "            configPathParameter \u003d null;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "        appParameters.setConfigPath(configPathParameter !\u003d null ? Paths.get(configPathParameter) : null);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        return appParameters;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!(other instanceof AppParameters)) {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "        AppParameters otherAppParameters \u003d (AppParameters) other;"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "        return Objects.equals(getConfigPath(), otherAppParameters.getConfigPath());"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "        return configPath.hashCode();"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "nexolute": 3,
      "-": 61
    }
  },
  {
    "path": "src/main/java/seedu/ichifund/Main.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "nexolute"
        },
        "content": "package seedu.ichifund;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.application.Application;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": " * The main entry point to the application."
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": " *"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": " * This is a workaround for the following error when MainApp is made the"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": " * entry point of the application:"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": " *"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": " *     Error: JavaFX runtime components are missing, and are required to run this application"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": " *"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": " * The reason is that MainApp extends Application. In that case, the"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": " * LauncherHelper will check for the javafx.graphics module to be present"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": " * as a named module. We don\u0027t use JavaFX via the module system so it can\u0027t"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": " * find the javafx.graphics module, and so the launch is aborted."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": " *"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": " * By having a separate main class (Main) that doesn\u0027t extend Application"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": " * to be the entry point of the application, we avoid this issue."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "public class Main {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    public static void main(String[] args) {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "        Application.launch(MainApp.class, args);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "nexolute": 1,
      "-": 24
    }
  },
  {
    "path": "src/main/java/seedu/ichifund/MainApp.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "nexolute"
        },
        "content": "package seedu.ichifund;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.application.Application;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.stage.Stage;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "nexolute"
        },
        "content": "import seedu.ichifund.commons.core.Config;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "nexolute"
        },
        "content": "import seedu.ichifund.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "nexolute"
        },
        "content": "import seedu.ichifund.commons.core.Version;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "nexolute"
        },
        "content": "import seedu.ichifund.commons.exceptions.DataConversionException;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "nexolute"
        },
        "content": "import seedu.ichifund.commons.util.ConfigUtil;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "nexolute"
        },
        "content": "import seedu.ichifund.commons.util.StringUtil;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "nexolute"
        },
        "content": "import seedu.ichifund.logic.Logic;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "nexolute"
        },
        "content": "import seedu.ichifund.logic.LogicManager;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "nexolute"
        },
        "content": "import seedu.ichifund.model.FundBook;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "nexolute"
        },
        "content": "import seedu.ichifund.model.Model;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "nexolute"
        },
        "content": "import seedu.ichifund.model.ModelManager;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "nexolute"
        },
        "content": "import seedu.ichifund.model.ReadOnlyFundBook;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "nexolute"
        },
        "content": "import seedu.ichifund.model.ReadOnlyUserPrefs;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "nexolute"
        },
        "content": "import seedu.ichifund.model.UserPrefs;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "nexolute"
        },
        "content": "import seedu.ichifund.model.util.SampleDataUtil;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "nexolute"
        },
        "content": "import seedu.ichifund.storage.FundBookStorage;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "nexolute"
        },
        "content": "import seedu.ichifund.storage.JsonFundBookStorage;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "nexolute"
        },
        "content": "import seedu.ichifund.storage.JsonUserPrefsStorage;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "nexolute"
        },
        "content": "import seedu.ichifund.storage.Storage;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "nexolute"
        },
        "content": "import seedu.ichifund.storage.StorageManager;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "nexolute"
        },
        "content": "import seedu.ichifund.storage.UserPrefsStorage;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "nexolute"
        },
        "content": "import seedu.ichifund.ui.Ui;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "nexolute"
        },
        "content": "import seedu.ichifund.ui.UiManager;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": " * Runs the application."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "public class MainApp extends Application {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "LeeYiyuan"
        },
        "content": "    public static final Version VERSION \u003d new Version(1, 3, 0, true);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final Logger logger \u003d LogsCenter.getLogger(MainApp.class);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    protected Ui ui;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    protected Logic logic;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    protected Storage storage;"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    protected Model model;"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    protected Config config;"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    public void init() throws Exception {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "nexolute"
        },
        "content": "        logger.info(\"\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d[ Initializing IchiFund ]\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\");"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        super.init();"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "        AppParameters appParameters \u003d AppParameters.parse(getParameters());"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "        config \u003d initConfig(appParameters.getConfigPath());"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefsStorage userPrefsStorage \u003d new JsonUserPrefsStorage(config.getUserPrefsFilePath());"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs userPrefs \u003d initPrefs(userPrefsStorage);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "nexolute"
        },
        "content": "        FundBookStorage fundBookStorage \u003d new JsonFundBookStorage(userPrefs.getFundBookFilePath());"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "nexolute"
        },
        "content": "        storage \u003d new StorageManager(fundBookStorage, userPrefsStorage);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "        initLogging(config);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "        model \u003d initModelManager(storage, userPrefs);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "        logic \u003d new LogicManager(model, storage);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "nexolute"
        },
        "content": "        logic.executeAllTasks();"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "        ui \u003d new UiManager(logic);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "nexolute"
        },
        "content": "     * Returns a {@code ModelManager} with the data from {@code storage}\u0027s fund book and {@code userPrefs}. \u003cbr\u003e"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "nexolute"
        },
        "content": "     * The data from the sample fund book will be used instead if {@code storage}\u0027s fund book is not found,"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "nexolute"
        },
        "content": "     * or an empty fund book will be used instead if errors occur when reading {@code storage}\u0027s fund book."
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "    private Model initModelManager(Storage storage, ReadOnlyUserPrefs userPrefs) {"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "nexolute"
        },
        "content": "        Optional\u003cReadOnlyFundBook\u003e addressBookOptional;"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "nexolute"
        },
        "content": "        ReadOnlyFundBook initialData;"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "nexolute"
        },
        "content": "            addressBookOptional \u003d storage.readFundBook();"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "            if (!addressBookOptional.isPresent()) {"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "nexolute"
        },
        "content": "                logger.info(\"Data file not found. Will be starting with a sample fund book\");"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "nexolute"
        },
        "content": "            initialData \u003d addressBookOptional.orElseGet(SampleDataUtil::getSampleFundBook);"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (DataConversionException e) {"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "nexolute"
        },
        "content": "            logger.warning(\"Data file not in the correct format. Will be starting with an empty fund book\");"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "nexolute"
        },
        "content": "            initialData \u003d new FundBook();"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "nexolute"
        },
        "content": "            logger.warning(\"Problem while reading from the file. Will be starting with an empty fund book\");"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "nexolute"
        },
        "content": "            initialData \u003d new FundBook();"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "        return new ModelManager(initialData, userPrefs);"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "    private void initLogging(Config config) {"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "        LogsCenter.init(config);"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns a {@code Config} using the file at {@code configFilePath}. \u003cbr\u003e"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "     * The default file path {@code Config#DEFAULT_CONFIG_FILE} will be used instead"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "     * if {@code configFilePath} is null."
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "    protected Config initConfig(Path configFilePath) {"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "        Config initializedConfig;"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "        Path configFilePathUsed;"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "        configFilePathUsed \u003d Config.DEFAULT_CONFIG_FILE;"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "        if (configFilePath !\u003d null) {"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "            logger.info(\"Custom Config file specified \" + configFilePath);"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "            configFilePathUsed \u003d configFilePath;"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "        logger.info(\"Using config file : \" + configFilePathUsed);"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "            Optional\u003cConfig\u003e configOptional \u003d ConfigUtil.readConfig(configFilePathUsed);"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "            initializedConfig \u003d configOptional.orElse(new Config());"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (DataConversionException e) {"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "            logger.warning(\"Config file at \" + configFilePathUsed + \" is not in the correct format. \""
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "                    + \"Using default config properties\");"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "            initializedConfig \u003d new Config();"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "        //Update config file in case it was missing to begin with or there are new/unused fields"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "            ConfigUtil.saveConfig(initializedConfig, configFilePathUsed);"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "            logger.warning(\"Failed to save config file : \" + StringUtil.getDetails(e));"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "        return initializedConfig;"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns a {@code UserPrefs} using the file at {@code storage}\u0027s user prefs file path,"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": "     * or a new {@code UserPrefs} with default configuration if errors occur when"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": "     * reading from the file."
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": "    protected UserPrefs initPrefs(UserPrefsStorage storage) {"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": "        Path prefsFilePath \u003d storage.getUserPrefsFilePath();"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": "        logger.info(\"Using prefs file : \" + prefsFilePath);"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs initializedPrefs;"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": "            Optional\u003cUserPrefs\u003e prefsOptional \u003d storage.readUserPrefs();"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": "            initializedPrefs \u003d prefsOptional.orElse(new UserPrefs());"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (DataConversionException e) {"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": "            logger.warning(\"UserPrefs file at \" + prefsFilePath + \" is not in the correct format. \""
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": "                    + \"Using default user prefs\");"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": "            initializedPrefs \u003d new UserPrefs();"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "nexolute"
        },
        "content": "            logger.warning(\"Problem while reading from the file. Will be starting with an empty fund book\");"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "-"
        },
        "content": "            initializedPrefs \u003d new UserPrefs();"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "-"
        },
        "content": "        //Update prefs file in case it was missing to begin with or there are new/unused fields"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "-"
        },
        "content": "            storage.saveUserPrefs(initializedPrefs);"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "-"
        },
        "content": "            logger.warning(\"Failed to save config file : \" + StringUtil.getDetails(e));"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "-"
        },
        "content": "        return initializedPrefs;"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "-"
        },
        "content": "    public void start(Stage primaryStage) {"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "nexolute"
        },
        "content": "        logger.info(\"Starting IchiFund \" + MainApp.VERSION);"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "-"
        },
        "content": "        ui.start(primaryStage);"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "-"
        },
        "content": "    public void stop() {"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "nexolute"
        },
        "content": "        logger.info(\"\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d [ Stopping IchiFund ] \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\");"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "-"
        },
        "content": "            storage.saveUserPrefs(model.getUserPrefs());"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "-"
        },
        "content": "            logger.severe(\"Failed to save preferences \" + StringUtil.getDetails(e));"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "LeeYiyuan": 1,
      "nexolute": 43,
      "-": 140
    }
  },
  {
    "path": "src/main/java/seedu/ichifund/commons/core/Config.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "nexolute"
        },
        "content": "package seedu.ichifund.commons.core;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Paths;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Objects;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.logging.Level;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": " * Config values used by the app"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "public class Config {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final Path DEFAULT_CONFIG_FILE \u003d Paths.get(\"config.json\");"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    // Config values customizable through config file"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    private Level logLevel \u003d Level.INFO;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    private Path userPrefsFilePath \u003d Paths.get(\"preferences.json\");"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    public Level getLogLevel() {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "        return logLevel;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setLogLevel(Level logLevel) {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "        this.logLevel \u003d logLevel;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    public Path getUserPrefsFilePath() {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        return userPrefsFilePath;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setUserPrefsFilePath(Path userPrefsFilePath) {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        this.userPrefsFilePath \u003d userPrefsFilePath;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!(other instanceof Config)) { //this handles null as well."
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        Config o \u003d (Config) other;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        return Objects.equals(logLevel, o.logLevel)"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "                \u0026\u0026 Objects.equals(userPrefsFilePath, o.userPrefsFilePath);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        return Objects.hash(logLevel, userPrefsFilePath);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "        StringBuilder sb \u003d new StringBuilder();"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "        sb.append(\"Current log level : \" + logLevel);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "        sb.append(\"\\nPreference file Location : \" + userPrefsFilePath);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "        return sb.toString();"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "nexolute": 1,
      "-": 62
    }
  },
  {
    "path": "src/main/java/seedu/ichifund/commons/core/GuiSettings.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "nexolute"
        },
        "content": "package seedu.ichifund.commons.core;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.awt.Point;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.Serializable;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Objects;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": " * A Serializable class that contains the GUI settings."
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": " * Guarantees: immutable."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "public class GuiSettings implements Serializable {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "nexolute"
        },
        "content": "    private static final double DEFAULT_HEIGHT \u003d 960;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "nexolute"
        },
        "content": "    private static final double DEFAULT_WIDTH \u003d 720;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    private final double windowWidth;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    private final double windowHeight;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    private final Point windowCoordinates;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    public GuiSettings() {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "        windowWidth \u003d DEFAULT_WIDTH;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "        windowHeight \u003d DEFAULT_HEIGHT;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "        windowCoordinates \u003d null; // null represent no coordinates"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    public GuiSettings(double windowWidth, double windowHeight, int xPosition, int yPosition) {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        this.windowWidth \u003d windowWidth;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        this.windowHeight \u003d windowHeight;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        windowCoordinates \u003d new Point(xPosition, yPosition);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    public double getWindowWidth() {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "        return windowWidth;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    public double getWindowHeight() {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        return windowHeight;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    public Point getWindowCoordinates() {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "        return windowCoordinates !\u003d null ? new Point(windowCoordinates) : null;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!(other instanceof GuiSettings)) { //this handles null as well."
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "        GuiSettings o \u003d (GuiSettings) other;"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "        return windowWidth \u003d\u003d o.windowWidth"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "                \u0026\u0026 windowHeight \u003d\u003d o.windowHeight"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "                \u0026\u0026 Objects.equals(windowCoordinates, o.windowCoordinates);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "        return Objects.hash(windowWidth, windowHeight, windowCoordinates);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "        StringBuilder sb \u003d new StringBuilder();"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "        sb.append(\"Width : \" + windowWidth + \"\\n\");"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "        sb.append(\"Height : \" + windowHeight + \"\\n\");"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "        sb.append(\"Position : \" + windowCoordinates);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "        return sb.toString();"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "nexolute": 3,
      "-": 70
    }
  },
  {
    "path": "src/main/java/seedu/ichifund/commons/core/LogsCenter.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "nexolute"
        },
        "content": "package seedu.ichifund.commons.core;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.logging.ConsoleHandler;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.logging.FileHandler;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.logging.Level;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.logging.SimpleFormatter;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": " * Configures and manages loggers and handlers, including their logging level"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": " * Named {@link Logger}s can be obtained from this class\u003cbr\u003e"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": " * These loggers have been configured to output messages to the console and a {@code .log} file by default,"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": " *   at the {@code INFO} level. A new {@code .log} file with a new numbering will be created after the log"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": " *   file reaches 5MB big, up to a maximum of 5 files.\u003cbr\u003e"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "public class LogsCenter {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final int MAX_FILE_COUNT \u003d 5;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final int MAX_FILE_SIZE_IN_BYTES \u003d (int) (Math.pow(2, 20) * 5); // 5MB"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "nexolute"
        },
        "content": "    private static final String LOG_FILE \u003d \"ichifund.log\";"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    private static Level currentLogLevel \u003d Level.INFO;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final Logger logger \u003d LogsCenter.getLogger(LogsCenter.class);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    private static FileHandler fileHandler;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    private static ConsoleHandler consoleHandler;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "     * Initializes with a custom log level (specified in the {@code config} object)"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "     * Loggers obtained *AFTER* this initialization will have their logging level changed\u003cbr\u003e"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "     * Logging levels for existing loggers will only be updated if the logger with the same name"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "     * is requested again from the LogsCenter."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    public static void init(Config config) {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        currentLogLevel \u003d config.getLogLevel();"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "        logger.info(\"currentLogLevel: \" + currentLogLevel);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "     * Creates a logger with the given name."
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    public static Logger getLogger(String name) {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "        Logger logger \u003d Logger.getLogger(name);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        logger.setUseParentHandlers(false);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        removeHandlers(logger);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        addConsoleHandler(logger);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        addFileHandler(logger);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        return Logger.getLogger(name);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "     * Creates a Logger for the given class name."
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    public static \u003cT\u003e Logger getLogger(Class\u003cT\u003e clazz) {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "        if (clazz \u003d\u003d null) {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "            return Logger.getLogger(\"\");"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "        return getLogger(clazz.getSimpleName());"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "     * Adds the {@code consoleHandler} to the {@code logger}. \u003cbr\u003e"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "     * Creates the {@code consoleHandler} if it is null."
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "    private static void addConsoleHandler(Logger logger) {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "        if (consoleHandler \u003d\u003d null) {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "            consoleHandler \u003d createConsoleHandler();"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "        logger.addHandler(consoleHandler);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "     * Remove all the handlers from {@code logger}."
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "    private static void removeHandlers(Logger logger) {"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "        Arrays.stream(logger.getHandlers())"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "                .forEach(logger::removeHandler);"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "     * Adds the {@code fileHandler} to the {@code logger}. \u003cbr\u003e"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "     * Creates {@code fileHandler} if it is null."
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "    private static void addFileHandler(Logger logger) {"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "            if (fileHandler \u003d\u003d null) {"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "                fileHandler \u003d createFileHandler();"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "            logger.addHandler(fileHandler);"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "            logger.warning(\"Error adding file handler for logger.\");"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "     * Creates a {@code FileHandler} for the log file."
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws IOException if there are problems opening the file."
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "    private static FileHandler createFileHandler() throws IOException {"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "        FileHandler fileHandler \u003d new FileHandler(LOG_FILE, MAX_FILE_SIZE_IN_BYTES, MAX_FILE_COUNT, true);"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "        fileHandler.setFormatter(new SimpleFormatter());"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "        fileHandler.setLevel(currentLogLevel);"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "        return fileHandler;"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "    private static ConsoleHandler createConsoleHandler() {"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "        ConsoleHandler consoleHandler \u003d new ConsoleHandler();"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "        consoleHandler.setLevel(currentLogLevel);"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "        return consoleHandler;"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "nexolute": 2,
      "-": 110
    }
  },
  {
    "path": "src/main/java/seedu/ichifund/commons/core/Messages.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "nexolute"
        },
        "content": "package seedu.ichifund.commons.core;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": " * Container for user visible messages."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "public class Messages {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "    public static final String MESSAGE_UNKNOWN_COMMAND \u003d \"Command is either unknown or inapplicable to feature\";"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_INVALID_COMMAND_FORMAT \u003d \"Invalid command format! \\n%1$s\";"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_INVALID_PERSON_DISPLAYED_INDEX \u003d \"The person index provided is invalid\";"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "    public static final String MESSAGE_TRANSACTION_FROM_REPEATER \u003d \"Cannot delete or edit transactions from repeaters\";"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_PERSONS_LISTED_OVERVIEW \u003d \"%1$d persons listed!\";"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "    public static final String MESSAGE_TRANSACTIONS_LISTED_OVERVIEW \u003d \"%1$d transactions listed!\";"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "    public static final String MESSAGE_INVALID_TRANSACTION_DISPLAYED_INDEX \u003d"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "            \"The transaction index provided is invalid\";"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "LeeYiyuan"
        },
        "content": "    public static final String MESSAGE_INVALID_REPEATER_DISPLAYED_INDEX \u003d \"The repeater index provided is invalid\";"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "nexolute"
        },
        "content": "    public static final String MESSAGE_BUDGETS_LISTED_OVERVIEW \u003d \"%1$d budgets listed!\";"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "nexolute"
        },
        "content": "    public static final String MESSAGE_INVALID_BUDGET_DISPLAYED_INDEX \u003d \"The budget index provided is invalid\";"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "LeeYiyuan": 1,
      "nexolute": 3,
      "weiyang13": 5,
      "-": 11
    }
  },
  {
    "path": "src/main/java/seedu/ichifund/commons/core/Version.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "nexolute"
        },
        "content": "package seedu.ichifund.commons.core;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.regex.Matcher;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.regex.Pattern;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import com.fasterxml.jackson.annotation.JsonCreator;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import com.fasterxml.jackson.annotation.JsonValue;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": " * Represents a version with major, minor and patch number"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "public class Version implements Comparable\u003cVersion\u003e {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String VERSION_REGEX \u003d \"V(\\\\d+)\\\\.(\\\\d+)\\\\.(\\\\d+)(ea)?\";"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String EXCEPTION_STRING_NOT_VERSION \u003d \"String is not a valid Version. %s\";"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final Pattern VERSION_PATTERN \u003d Pattern.compile(VERSION_REGEX);"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    private final int major;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    private final int minor;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    private final int patch;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    private final boolean isEarlyAccess;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    public Version(int major, int minor, int patch, boolean isEarlyAccess) {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "        this.major \u003d major;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        this.minor \u003d minor;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        this.patch \u003d patch;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        this.isEarlyAccess \u003d isEarlyAccess;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    public int getMajor() {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "        return major;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    public int getMinor() {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        return minor;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    public int getPatch() {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "        return patch;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean isEarlyAccess() {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        return isEarlyAccess;"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "     * Parses a version number string in the format V1.2.3."
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param versionString version number string"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "     * @return a Version object"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    @JsonCreator"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    public static Version fromString(String versionString) throws IllegalArgumentException {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "        Matcher versionMatcher \u003d VERSION_PATTERN.matcher(versionString);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!versionMatcher.find()) {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new IllegalArgumentException(String.format(EXCEPTION_STRING_NOT_VERSION, versionString));"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "        return new Version(Integer.parseInt(versionMatcher.group(1)),"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "                Integer.parseInt(versionMatcher.group(2)),"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "                Integer.parseInt(versionMatcher.group(3)),"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "                versionMatcher.group(4) \u003d\u003d null ? false : true);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "    @JsonValue"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "        return String.format(\"V%d.%d.%d%s\", major, minor, patch, isEarlyAccess ? \"ea\" : \"\");"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "    public int compareTo(Version other) {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "        if (major !\u003d other.major) {"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "            return major - other.major;"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "        if (minor !\u003d other.minor) {"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "            return minor - other.minor;"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "        if (patch !\u003d other.patch) {"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "            return patch - other.patch;"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "        if (isEarlyAccess \u003d\u003d other.isEarlyAccess()) {"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "            return 0;"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "        if (isEarlyAccess) {"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "            return -1;"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "        return 1;"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object obj) {"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "        if (obj \u003d\u003d null) {"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!(obj instanceof Version)) {"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "        final Version other \u003d (Version) obj;"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "        return compareTo(other) \u003d\u003d 0;"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "        String hash \u003d String.format(\"%03d%03d%03d\", major, minor, patch);"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!isEarlyAccess) {"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "            hash \u003d \"1\" + hash;"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "        return Integer.parseInt(hash);"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "nexolute": 1,
      "-": 112
    }
  },
  {
    "path": "src/main/java/seedu/ichifund/commons/core/index/Index.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "nexolute"
        },
        "content": "package seedu.ichifund.commons.core.index;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": " * Represents a zero-based or one-based index."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": " *"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": " * {@code Index} should be used right from the start (when parsing in a new user input), so that if the current"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": " * component wants to communicate with another component, it can send an {@code Index} to avoid having to know what"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": " * base the other component is using for its index. However, after receiving the {@code Index}, that component can"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": " * convert it back to an int if the index will not be passed to a different component again."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "public class Index {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    private int zeroBasedIndex;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "     * Index can only be created by calling {@link Index#fromZeroBased(int)} or"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "     * {@link Index#fromOneBased(int)}."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    private Index(int zeroBasedIndex) {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "        if (zeroBasedIndex \u003c 0) {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new IndexOutOfBoundsException();"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "        this.zeroBasedIndex \u003d zeroBasedIndex;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    public int getZeroBased() {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        return zeroBasedIndex;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    public int getOneBased() {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        return zeroBasedIndex + 1;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "     * Creates a new {@code Index} using a zero-based index."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    public static Index fromZeroBased(int zeroBasedIndex) {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        return new Index(zeroBasedIndex);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "     * Creates a new {@code Index} using a one-based index."
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    public static Index fromOneBased(int oneBasedIndex) {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        return new Index(oneBasedIndex - 1);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "                || (other instanceof Index // instanceof handles nulls"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "                \u0026\u0026 zeroBasedIndex \u003d\u003d ((Index) other).zeroBasedIndex); // state check"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "nexolute": 1,
      "-": 53
    }
  },
  {
    "path": "src/main/java/seedu/ichifund/commons/exceptions/DataConversionException.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "nexolute"
        },
        "content": "package seedu.ichifund.commons.exceptions;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": " * Represents an error during conversion of data from one format to another"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "public class DataConversionException extends Exception {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "    public DataConversionException(Exception cause) {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "        super(cause);"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "nexolute": 1,
      "-": 10
    }
  },
  {
    "path": "src/main/java/seedu/ichifund/commons/exceptions/IllegalValueException.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "nexolute"
        },
        "content": "package seedu.ichifund.commons.exceptions;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": " * Signals that some given data does not fulfill some constraints."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "public class IllegalValueException extends Exception {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param message should contain relevant information on the failed constraint(s)"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "    public IllegalValueException(String message) {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "        super(message);"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param message should contain relevant information on the failed constraint(s)"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param cause of the main exception"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    public IllegalValueException(String message, Throwable cause) {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "        super(message, cause);"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "nexolute": 1,
      "-": 20
    }
  },
  {
    "path": "src/main/java/seedu/ichifund/commons/util/AppUtil.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "nexolute"
        },
        "content": "package seedu.ichifund.commons.util;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.image.Image;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "nexolute"
        },
        "content": "import seedu.ichifund.MainApp;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": " * A container for App specific utility functions"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "public class AppUtil {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "    public static Image getImage(String imagePath) {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(imagePath);"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "        return new Image(MainApp.class.getResourceAsStream(imagePath));"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "     * Checks that {@code condition} is true. Used for validating arguments to methods."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws IllegalArgumentException if {@code condition} is false."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    public static void checkArgument(Boolean condition) {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!condition) {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new IllegalArgumentException();"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "     * Checks that {@code condition} is true. Used for validating arguments to methods."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws IllegalArgumentException with {@code errorMessage} if {@code condition} is false."
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    public static void checkArgument(Boolean condition, String errorMessage) {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!condition) {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new IllegalArgumentException(errorMessage);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "nexolute": 2,
      "-": 37
    }
  },
  {
    "path": "src/main/java/seedu/ichifund/commons/util/CollectionUtil.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "nexolute"
        },
        "content": "package seedu.ichifund.commons.util;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Collection;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Objects;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.stream.Stream;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": " * Utility methods related to Collections"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "public class CollectionUtil {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    /** @see #requireAllNonNull(Collection) */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    public static void requireAllNonNull(Object... items) {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(items);"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "        Stream.of(items).forEach(Objects::requireNonNull);"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "     * Throws NullPointerException if {@code items} or any element of {@code items} is null."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    public static void requireAllNonNull(Collection\u003c?\u003e items) {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(items);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "        items.forEach(Objects::requireNonNull);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns true if {@code items} contain any elements that are non-null."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    public static boolean isAnyNonNull(Object... items) {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "        return items !\u003d null \u0026\u0026 Arrays.stream(items).anyMatch(Objects::nonNull);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "nexolute": 1,
      "-": 34
    }
  },
  {
    "path": "src/main/java/seedu/ichifund/commons/util/ConfigUtil.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "nexolute"
        },
        "content": "package seedu.ichifund.commons.util;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "nexolute"
        },
        "content": "import seedu.ichifund.commons.core.Config;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "nexolute"
        },
        "content": "import seedu.ichifund.commons.exceptions.DataConversionException;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": " * A class for accessing the Config File."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "public class ConfigUtil {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    public static Optional\u003cConfig\u003e readConfig(Path configFilePath) throws DataConversionException {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "        return JsonUtil.readJsonFile(configFilePath, Config.class);"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    public static void saveConfig(Config config, Path configFilePath) throws IOException {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "        JsonUtil.saveJsonFile(config, configFilePath);"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "nexolute": 3,
      "-": 20
    }
  },
  {
    "path": "src/main/java/seedu/ichifund/commons/util/FileUtil.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "nexolute"
        },
        "content": "package seedu.ichifund.commons.util;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Files;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.InvalidPathException;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Paths;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": " * Writes and reads files"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "public class FileUtil {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String CHARSET \u003d \"UTF-8\";"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    public static boolean isFileExists(Path file) {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "        return Files.exists(file) \u0026\u0026 Files.isRegularFile(file);"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "nexolute"
        },
        "content": "     * Returns true if {@code path} can be converted into a {@code Path} via {@link Paths#get},"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "     * otherwise returns false."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param path A string representing the file path. Cannot be null."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    public static boolean isValidPath(String path) {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "            Paths.get(path);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (InvalidPathException ipe) {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        return true;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "     * Creates a file if it does not exist along with its missing parent directories."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws IOException if the file or directory cannot be created."
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    public static void createIfMissing(Path file) throws IOException {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!isFileExists(file)) {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "            createFile(file);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "     * Creates a file if it does not exist along with its missing parent directories."
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    public static void createFile(Path file) throws IOException {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        if (Files.exists(file)) {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "            return;"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        createParentDirsOfFile(file);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "        Files.createFile(file);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "     * Creates parent directories of file if it has a parent directory"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    public static void createParentDirsOfFile(Path file) throws IOException {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "        Path parentDir \u003d file.getParent();"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "        if (parentDir !\u003d null) {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "            Files.createDirectories(parentDir);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "     * Assumes file exists"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "    public static String readFromFile(Path file) throws IOException {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "        return new String(Files.readAllBytes(file), CHARSET);"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "     * Writes given string to a file."
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "     * Will create the file if it does not exist yet."
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "    public static void writeToFile(Path file, String content) throws IOException {"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "        Files.write(file, content.getBytes(CHARSET));"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "nexolute": 2,
      "-": 81
    }
  },
  {
    "path": "src/main/java/seedu/ichifund/commons/util/JsonUtil.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "nexolute"
        },
        "content": "package seedu.ichifund.commons.util;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Files;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.logging.Level;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import com.fasterxml.jackson.annotation.JsonAutoDetect;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import com.fasterxml.jackson.annotation.PropertyAccessor;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import com.fasterxml.jackson.core.JsonProcessingException;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import com.fasterxml.jackson.databind.DeserializationContext;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import com.fasterxml.jackson.databind.DeserializationFeature;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "import com.fasterxml.jackson.databind.ObjectMapper;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "import com.fasterxml.jackson.databind.SerializationFeature;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "import com.fasterxml.jackson.databind.deser.std.FromStringDeserializer;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "import com.fasterxml.jackson.databind.module.SimpleModule;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "import com.fasterxml.jackson.databind.ser.std.ToStringSerializer;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "nexolute"
        },
        "content": "import seedu.ichifund.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "nexolute"
        },
        "content": "import seedu.ichifund.commons.exceptions.DataConversionException;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": " * Converts a Java object instance to JSON and vice versa"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "public class JsonUtil {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final Logger logger \u003d LogsCenter.getLogger(JsonUtil.class);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    private static ObjectMapper objectMapper \u003d new ObjectMapper().findAndRegisterModules()"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "            .configure(SerializationFeature.WRITE_DATES_AS_TIMESTAMPS, false)"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "            .configure(DeserializationFeature.FAIL_ON_UNKNOWN_PROPERTIES, false)"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "            .setVisibility(PropertyAccessor.ALL, JsonAutoDetect.Visibility.NONE)"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "            .setVisibility(PropertyAccessor.FIELD, JsonAutoDetect.Visibility.ANY)"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "            .registerModule(new SimpleModule(\"SimpleModule\")"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "                    .addSerializer(Level.class, new ToStringSerializer())"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "                    .addDeserializer(Level.class, new LevelDeserializer(Level.class)));"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    static \u003cT\u003e void serializeObjectToJsonFile(Path jsonFile, T objectToSerialize) throws IOException {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        FileUtil.writeToFile(jsonFile, toJsonString(objectToSerialize));"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    static \u003cT\u003e T deserializeObjectFromJsonFile(Path jsonFile, Class\u003cT\u003e classOfObjectToDeserialize)"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "            throws IOException {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        return fromJsonString(FileUtil.readFromFile(jsonFile), classOfObjectToDeserialize);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns the Json object from the given file or {@code Optional.empty()} object if the file is not found."
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "     * If any values are missing from the file, default values will be used, as long as the file is a valid json file."
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param filePath cannot be null."
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param classOfObjectToDeserialize Json file has to correspond to the structure in the class given here."
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws DataConversionException if the file format is not as expected."
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    public static \u003cT\u003e Optional\u003cT\u003e readJsonFile("
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "            Path filePath, Class\u003cT\u003e classOfObjectToDeserialize) throws DataConversionException {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(filePath);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!Files.exists(filePath)) {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "            logger.info(\"Json file \" + filePath + \" not found\");"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "            return Optional.empty();"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "        T jsonFile;"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "            jsonFile \u003d deserializeObjectFromJsonFile(filePath, classOfObjectToDeserialize);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "            logger.warning(\"Error reading from jsonFile file \" + filePath + \": \" + e);"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new DataConversionException(e);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "        return Optional.of(jsonFile);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "     * Saves the Json object to the specified file."
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "     * Overwrites existing file if it exists, creates a new file if it doesn\u0027t."
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param jsonFile cannot be null"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param filePath cannot be null"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws IOException if there was an error during writing to the file"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "    public static \u003cT\u003e void saveJsonFile(T jsonFile, Path filePath) throws IOException {"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(filePath);"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(jsonFile);"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "        serializeObjectToJsonFile(filePath, jsonFile);"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "     * Converts a given string representation of a JSON data to instance of a class"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param \u003cT\u003e The generic type to create an instance of"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "     * @return The instance of T with the specified values in the JSON string"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "    public static \u003cT\u003e T fromJsonString(String json, Class\u003cT\u003e instanceClass) throws IOException {"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "        return objectMapper.readValue(json, instanceClass);"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "     * Converts a given instance of a class into its JSON data string representation"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param instance The T object to be converted into the JSON string"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param \u003cT\u003e The generic type to create an instance of"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "     * @return JSON data representation of the given class instance, in string"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "    public static \u003cT\u003e String toJsonString(T instance) throws JsonProcessingException {"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "        return objectMapper.writerWithDefaultPrettyPrinter().writeValueAsString(instance);"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "     * Contains methods that retrieve logging level from serialized string."
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "    private static class LevelDeserializer extends FromStringDeserializer\u003cLevel\u003e {"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "        protected LevelDeserializer(Class\u003c?\u003e vc) {"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "            super(vc);"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "        protected Level _deserialize(String value, DeserializationContext ctxt) {"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "            return getLoggingLevel(value);"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "        /**"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "         * Gets the logging level that matches loggingLevelString"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "         * \u003cp\u003e"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "         * Returns null if there are no matches"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "         *"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "         */"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "        private Level getLoggingLevel(String loggingLevelString) {"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "            return Level.parse(loggingLevelString);"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": "        public Class\u003cLevel\u003e handledType() {"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": "            return Level.class;"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "nexolute": 3,
      "-": 140
    }
  },
  {
    "path": "src/main/java/seedu/ichifund/commons/util/StringUtil.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "nexolute"
        },
        "content": "package seedu.ichifund.commons.util;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "nexolute"
        },
        "content": "import static seedu.ichifund.commons.util.AppUtil.checkArgument;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.PrintWriter;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.StringWriter;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": " * Helper functions for handling strings."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "public class StringUtil {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns true if the {@code sentence} contains the {@code word}."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "     *   Ignores case, but a full word match is required."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "     *   \u003cbr\u003eexamples:\u003cpre\u003e"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "     *       containsWordIgnoreCase(\"ABc def\", \"abc\") \u003d\u003d true"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "     *       containsWordIgnoreCase(\"ABc def\", \"DEF\") \u003d\u003d true"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "     *       containsWordIgnoreCase(\"ABc def\", \"AB\") \u003d\u003d false //not a full word match"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "     *       \u003c/pre\u003e"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param sentence cannot be null"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param word cannot be null, cannot be empty, must be a single word"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    public static boolean containsWordIgnoreCase(String sentence, String word) {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(sentence);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(word);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "        String preppedWord \u003d word.trim();"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        checkArgument(!preppedWord.isEmpty(), \"Word parameter cannot be empty\");"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        checkArgument(preppedWord.split(\"\\\\s+\").length \u003d\u003d 1, \"Word parameter should be a single word\");"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        String preppedSentence \u003d sentence;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "        String[] wordsInPreppedSentence \u003d preppedSentence.split(\"\\\\s+\");"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        return Arrays.stream(wordsInPreppedSentence)"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "                .anyMatch(preppedWord::equalsIgnoreCase);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns a detailed message of the t, including the stack trace."
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    public static String getDetails(Throwable t) {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(t);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        StringWriter sw \u003d new StringWriter();"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        t.printStackTrace(new PrintWriter(sw));"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        return t.getMessage() + \"\\n\" + sw.toString();"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns true if {@code s} represents a non-zero unsigned integer"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "     * e.g. 1, 2, 3, ..., {@code Integer.MAX_VALUE} \u003cbr\u003e"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "     * Will return false for any other non-null string input"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "     * e.g. empty string, \"-1\", \"0\", \"+1\", and \" 2 \" (untrimmed), \"3 0\" (contains whitespace), \"1 a\" (contains letters)"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws NullPointerException if {@code s} is null."
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    public static boolean isNonZeroUnsignedInteger(String s) {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(s);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "            int value \u003d Integer.parseInt(s);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "            return value \u003e 0 \u0026\u0026 !s.startsWith(\"+\"); // \"+1\" is successfully parsed by Integer#parseInt(String)"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (NumberFormatException nfe) {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "nexolute": 2,
      "-": 66
    }
  },
  {
    "path": "src/main/java/seedu/ichifund/logic/Logic.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "nexolute"
        },
        "content": "package seedu.ichifund.logic;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "import javafx.beans.value.ObservableValue;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "nexolute"
        },
        "content": "import seedu.ichifund.commons.core.GuiSettings;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "nexolute"
        },
        "content": "import seedu.ichifund.logic.commands.CommandResult;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "import seedu.ichifund.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "nexolute"
        },
        "content": "import seedu.ichifund.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "nexolute"
        },
        "content": "import seedu.ichifund.model.ReadOnlyFundBook;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Alaete"
        },
        "content": "import seedu.ichifund.model.analytics.Data;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "nexolute"
        },
        "content": "import seedu.ichifund.model.budget.Budget;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "import seedu.ichifund.model.context.TransactionContext;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "nexolute"
        },
        "content": "import seedu.ichifund.model.person.Person;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "LeeYiyuan"
        },
        "content": "import seedu.ichifund.model.repeater.Repeater;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "import seedu.ichifund.model.transaction.Transaction;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": " * API of the Logic component"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "public interface Logic {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "     * Executes the command and returns the result."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param commandText The command as entered by the user."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "     * @return the result of the command execution."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws CommandException If an error occurs during command execution."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws ParseException If an error occurs during parsing."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    CommandResult execute(String commandText) throws CommandException, ParseException;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "nexolute"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "nexolute"
        },
        "content": "     * Executes all the tasks."
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "nexolute"
        },
        "content": "     */"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "nexolute"
        },
        "content": "    void executeAllTasks();"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "nexolute"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "     * Returns an unmodifiable version of the index of the current parser manager."
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "     */"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "    ObservableValue\u003cInteger\u003e getCurrentFeatureParserIndex();"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "weiyang13"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "     * Sets the current parser manager according to the given index."
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "     */"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "    void setFeatureParser(int index);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "weiyang13"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "nexolute"
        },
        "content": "     * Returns the FundBook."
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "nexolute"
        },
        "content": "     * @see seedu.ichifund.model.Model#getFundBook()"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "nexolute"
        },
        "content": "    ReadOnlyFundBook getFundBook();"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    /** Returns an unmodifiable view of the filtered list of persons */"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    ObservableList\u003cPerson\u003e getFilteredPersonList();"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "    /** Returns an unmodifiable view of the filtered list of transactions */"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "    ObservableList\u003cTransaction\u003e getFilteredTransactionList();"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "weiyang13"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "LeeYiyuan"
        },
        "content": "    /** Returns an unmodifiable view of the filtered list of repeaters */"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "LeeYiyuan"
        },
        "content": "    ObservableList\u003cRepeater\u003e getFilteredRepeaterList();"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "LeeYiyuan"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "nexolute"
        },
        "content": "    /** Returns an unmodifiable view of the filtered list of persons */"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "nexolute"
        },
        "content": "    ObservableList\u003cBudget\u003e getFilteredBudgetList();"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "nexolute"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "Alaete"
        },
        "content": "    /** Returns the current analytics view */"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "Alaete"
        },
        "content": "    ObservableList\u003cData\u003e getDataList();"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "Alaete"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "nexolute"
        },
        "content": "     * Returns the user prefs\u0027 fund book file path."
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "nexolute"
        },
        "content": "    Path getFundBookFilePath();"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns the user prefs\u0027 GUI settings."
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "    GuiSettings getGuiSettings();"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "     * Set the user prefs\u0027 GUI settings."
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "    void setGuiSettings(GuiSettings guiSettings);"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "weiyang13"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "    ObservableValue\u003cTransactionContext\u003e getTransactionContextProperty();"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "LeeYiyuan": 4,
      "nexolute": 20,
      "Alaete": 4,
      "weiyang13": 19,
      "-": 38
    }
  },
  {
    "path": "src/main/java/seedu/ichifund/logic/LogicManager.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "nexolute"
        },
        "content": "package seedu.ichifund.logic;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "import javafx.beans.value.ObservableValue;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "nexolute"
        },
        "content": "import seedu.ichifund.commons.core.GuiSettings;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "nexolute"
        },
        "content": "import seedu.ichifund.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "nexolute"
        },
        "content": "import seedu.ichifund.logic.commands.Command;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "nexolute"
        },
        "content": "import seedu.ichifund.logic.commands.CommandResult;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "nexolute"
        },
        "content": "import seedu.ichifund.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "nexolute"
        },
        "content": "import seedu.ichifund.logic.parser.IchiFundParser;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "nexolute"
        },
        "content": "import seedu.ichifund.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "nexolute"
        },
        "content": "import seedu.ichifund.logic.tasks.TaskManager;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "nexolute"
        },
        "content": "import seedu.ichifund.model.Model;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "nexolute"
        },
        "content": "import seedu.ichifund.model.ReadOnlyFundBook;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Alaete"
        },
        "content": "import seedu.ichifund.model.analytics.Data;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "nexolute"
        },
        "content": "import seedu.ichifund.model.budget.Budget;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "import seedu.ichifund.model.context.TransactionContext;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "nexolute"
        },
        "content": "import seedu.ichifund.model.person.Person;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "LeeYiyuan"
        },
        "content": "import seedu.ichifund.model.repeater.Repeater;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "import seedu.ichifund.model.transaction.Transaction;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "nexolute"
        },
        "content": "import seedu.ichifund.storage.Storage;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": " * The main LogicManager of the app."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "public class LogicManager implements Logic {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String FILE_OPS_ERROR_MESSAGE \u003d \"Could not save data to file: \";"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    private final Logger logger \u003d LogsCenter.getLogger(LogicManager.class);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    private final Model model;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    private final Storage storage;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "nexolute"
        },
        "content": "    private final IchiFundParser ichiFundParser;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "nexolute"
        },
        "content": "    private final TaskManager taskManager;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    public LogicManager(Model model, Storage storage) {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "        this.model \u003d model;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "        this.storage \u003d storage;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "nexolute"
        },
        "content": "        ichiFundParser \u003d new IchiFundParser();"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "nexolute"
        },
        "content": "        taskManager \u003d new TaskManager();"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    public CommandResult execute(String commandText) throws CommandException, ParseException {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        logger.info(\"----------------[USER COMMAND][\" + commandText + \"]\");"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "        CommandResult commandResult;"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "nexolute"
        },
        "content": "        Command command \u003d ichiFundParser.parseCommand(commandText);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        commandResult \u003d command.execute(model);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "nexolute"
        },
        "content": "        taskManager.executeAll(model);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "nexolute"
        },
        "content": "            storage.saveFundBook(model.getFundBook());"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (IOException ioe) {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new CommandException(FILE_OPS_ERROR_MESSAGE + ioe, ioe);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "        return commandResult;"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "weiyang13"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "nexolute"
        },
        "content": "    public void executeAllTasks() {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "nexolute"
        },
        "content": "        taskManager.executeAll(model);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "nexolute"
        },
        "content": "    }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "nexolute"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "    public ObservableValue\u003cInteger\u003e getCurrentFeatureParserIndex() {"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "        return ichiFundParser.getCurrentFeatureParserIndex();"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "    }"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "weiyang13"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "    public void setFeatureParser(int index) {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "        ichiFundParser.setFeatureParser(index);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "    }"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "weiyang13"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "    public ObservableValue\u003cTransactionContext\u003e getTransactionContextProperty() {"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "        return model.getTransactionContextProperty();"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "    }"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "weiyang13"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "nexolute"
        },
        "content": "    public ReadOnlyFundBook getFundBook() {"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "nexolute"
        },
        "content": "        return model.getFundBook();"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "    public ObservableList\u003cPerson\u003e getFilteredPersonList() {"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "        return model.getFilteredPersonList();"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "    public ObservableList\u003cTransaction\u003e getFilteredTransactionList() {"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "        return model.getFilteredTransactionList();"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "    }"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "weiyang13"
        },
        "content": ""
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "LeeYiyuan"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "LeeYiyuan"
        },
        "content": "    public ObservableList\u003cRepeater\u003e getFilteredRepeaterList() {"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "LeeYiyuan"
        },
        "content": "        return model.getFilteredRepeaterList();"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "LeeYiyuan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "LeeYiyuan"
        },
        "content": ""
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "nexolute"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "nexolute"
        },
        "content": "    public ObservableList\u003cBudget\u003e getFilteredBudgetList() {"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "nexolute"
        },
        "content": "        return model.getFilteredBudgetList();"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "nexolute"
        },
        "content": "    }"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "nexolute"
        },
        "content": ""
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "Alaete"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "Alaete"
        },
        "content": "    public ObservableList\u003cData\u003e getDataList() {"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "Alaete"
        },
        "content": "        return model.getDataList();"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "Alaete"
        },
        "content": "    }"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "Alaete"
        },
        "content": ""
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "nexolute"
        },
        "content": "    public Path getFundBookFilePath() {"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "nexolute"
        },
        "content": "        return model.getFundBookFilePath();"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "    public GuiSettings getGuiSettings() {"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "        return model.getGuiSettings();"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setGuiSettings(GuiSettings guiSettings) {"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "        model.setGuiSettings(guiSettings);"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "LeeYiyuan": 6,
      "nexolute": 34,
      "Alaete": 6,
      "weiyang13": 24,
      "-": 58
    }
  },
  {
    "path": "src/main/java/seedu/ichifund/logic/commands/AddCommand.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "nexolute"
        },
        "content": "package seedu.ichifund.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "nexolute"
        },
        "content": "import static seedu.ichifund.logic.parser.CliSyntax.PREFIX_ADDRESS;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "nexolute"
        },
        "content": "import static seedu.ichifund.logic.parser.CliSyntax.PREFIX_EMAIL;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "nexolute"
        },
        "content": "import static seedu.ichifund.logic.parser.CliSyntax.PREFIX_NAME;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "nexolute"
        },
        "content": "import static seedu.ichifund.logic.parser.CliSyntax.PREFIX_PHONE;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "nexolute"
        },
        "content": "import static seedu.ichifund.logic.parser.CliSyntax.PREFIX_TAG;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "nexolute"
        },
        "content": "import seedu.ichifund.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "nexolute"
        },
        "content": "import seedu.ichifund.model.Model;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "nexolute"
        },
        "content": "import seedu.ichifund.model.person.Person;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": " * Adds a person to the address book."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "public class AddCommand extends Command {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"add\";"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \": Adds a person to the address book. \""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"Parameters: \""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "            + PREFIX_NAME + \"NAME \""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "            + PREFIX_PHONE + \"PHONE \""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "            + PREFIX_EMAIL + \"EMAIL \""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "            + PREFIX_ADDRESS + \"ADDRESS \""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"[\" + PREFIX_TAG + \"TAG]...\\n\""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"Example: \" + COMMAND_WORD + \" \""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "            + PREFIX_NAME + \"John Doe \""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "            + PREFIX_PHONE + \"98765432 \""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "            + PREFIX_EMAIL + \"johnd@example.com \""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "            + PREFIX_ADDRESS + \"311, Clementi Ave 2, #02-25 \""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "            + PREFIX_TAG + \"friends \""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "            + PREFIX_TAG + \"owesMoney\";"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_SUCCESS \u003d \"New person added: %1$s\";"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_DUPLICATE_PERSON \u003d \"This person already exists in the address book\";"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    private final Person toAdd;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "     * Creates an AddCommand to add the specified {@code Person}"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    public AddCommand(Person person) {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(person);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        toAdd \u003d person;"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    public CommandResult execute(Model model) throws CommandException {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "        if (model.hasPerson(toAdd)) {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new CommandException(MESSAGE_DUPLICATE_PERSON);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "        model.addPerson(toAdd);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "        return new CommandResult(String.format(MESSAGE_SUCCESS, toAdd));"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "                || (other instanceof AddCommand // instanceof handles nulls"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "                \u0026\u0026 toAdd.equals(((AddCommand) other).toAdd));"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "nexolute": 9,
      "-": 58
    }
  },
  {
    "path": "src/main/java/seedu/ichifund/logic/commands/ClearCommand.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "nexolute"
        },
        "content": "package seedu.ichifund.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "nexolute"
        },
        "content": "import seedu.ichifund.model.FundBook;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "nexolute"
        },
        "content": "import seedu.ichifund.model.Model;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": " * Clears the address book."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "public class ClearCommand extends Command {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"clear\";"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_SUCCESS \u003d \"Address book has been cleared!\";"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    public CommandResult execute(Model model) {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "nexolute"
        },
        "content": "        model.setFundBook(new FundBook());"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "        return new CommandResult(MESSAGE_SUCCESS);"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "nexolute": 4,
      "-": 19
    }
  },
  {
    "path": "src/main/java/seedu/ichifund/logic/commands/Command.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "nexolute"
        },
        "content": "package seedu.ichifund.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "nexolute"
        },
        "content": "import seedu.ichifund.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "nexolute"
        },
        "content": "import seedu.ichifund.model.Model;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": " * Represents a command with hidden internal logic and the ability to be executed."
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "public abstract class Command {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "     * Executes the command and returns the result message."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param model {@code Model} which the command should operate on."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "     * @return feedback message of the operation result for display"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws CommandException If an error occurs during command execution."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    public abstract CommandResult execute(Model model) throws CommandException;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "nexolute": 3,
      "-": 17
    }
  },
  {
    "path": "src/main/java/seedu/ichifund/logic/commands/CommandResult.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "nexolute"
        },
        "content": "package seedu.ichifund.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Objects;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": " * Represents the result of a command execution."
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "public class CommandResult {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    private final String feedbackToUser;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    /** Help information should be shown to the user. */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    private final boolean showHelp;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    /** The application should exit. */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    private final boolean exit;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "     * Constructs a {@code CommandResult} with the specified fields."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    public CommandResult(String feedbackToUser, boolean showHelp, boolean exit) {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "        this.feedbackToUser \u003d requireNonNull(feedbackToUser);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "        this.showHelp \u003d showHelp;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "        this.exit \u003d exit;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "     * Constructs a {@code CommandResult} with the specified {@code feedbackToUser},"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "     * and other fields set to their default value."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    public CommandResult(String feedbackToUser) {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        this(feedbackToUser, false, false);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    public String getFeedbackToUser() {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        return feedbackToUser;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean isShowHelp() {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "        return showHelp;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean isExit() {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        return exit;"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "        // instanceof handles nulls"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!(other instanceof CommandResult)) {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "        CommandResult otherCommandResult \u003d (CommandResult) other;"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "        return feedbackToUser.equals(otherCommandResult.feedbackToUser)"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "                \u0026\u0026 showHelp \u003d\u003d otherCommandResult.showHelp"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "                \u0026\u0026 exit \u003d\u003d otherCommandResult.exit;"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "        return Objects.hash(feedbackToUser, showHelp, exit);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "nexolute": 1,
      "-": 70
    }
  },
  {
    "path": "src/main/java/seedu/ichifund/logic/commands/DeleteCommand.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "nexolute"
        },
        "content": "package seedu.ichifund.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "nexolute"
        },
        "content": "import seedu.ichifund.commons.core.Messages;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "nexolute"
        },
        "content": "import seedu.ichifund.commons.core.index.Index;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "nexolute"
        },
        "content": "import seedu.ichifund.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "nexolute"
        },
        "content": "import seedu.ichifund.model.Model;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "nexolute"
        },
        "content": "import seedu.ichifund.model.person.Person;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": " * Deletes a person identified using it\u0027s displayed index from the address book."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "public class DeleteCommand extends Command {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"delete\";"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "            + \": Deletes the person identified by the index number used in the displayed person list.\\n\""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"Parameters: INDEX (must be a positive integer)\\n\""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"Example: \" + COMMAND_WORD + \" 1\";"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_DELETE_PERSON_SUCCESS \u003d \"Deleted Person: %1$s\";"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    private final Index targetIndex;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    public DeleteCommand(Index targetIndex) {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "        this.targetIndex \u003d targetIndex;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    public CommandResult execute(Model model) throws CommandException {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        List\u003cPerson\u003e lastShownList \u003d model.getFilteredPersonList();"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        if (targetIndex.getZeroBased() \u003e\u003d lastShownList.size()) {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new CommandException(Messages.MESSAGE_INVALID_PERSON_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "        Person personToDelete \u003d lastShownList.get(targetIndex.getZeroBased());"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        model.deletePerson(personToDelete);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        return new CommandResult(String.format(MESSAGE_DELETE_PERSON_SUCCESS, personToDelete));"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "                || (other instanceof DeleteCommand // instanceof handles nulls"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "                \u0026\u0026 targetIndex.equals(((DeleteCommand) other).targetIndex)); // state check"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "nexolute": 6,
      "-": 47
    }
  },
  {
    "path": "src/main/java/seedu/ichifund/logic/commands/EditCommand.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "nexolute"
        },
        "content": "package seedu.ichifund.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "nexolute"
        },
        "content": "import static seedu.ichifund.logic.parser.CliSyntax.PREFIX_ADDRESS;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "nexolute"
        },
        "content": "import static seedu.ichifund.logic.parser.CliSyntax.PREFIX_EMAIL;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "nexolute"
        },
        "content": "import static seedu.ichifund.logic.parser.CliSyntax.PREFIX_NAME;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "nexolute"
        },
        "content": "import static seedu.ichifund.logic.parser.CliSyntax.PREFIX_PHONE;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "nexolute"
        },
        "content": "import static seedu.ichifund.logic.parser.CliSyntax.PREFIX_TAG;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "nexolute"
        },
        "content": "import static seedu.ichifund.model.Model.PREDICATE_SHOW_ALL_PERSONS;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Collections;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.HashSet;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "nexolute"
        },
        "content": "import seedu.ichifund.commons.core.Messages;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "nexolute"
        },
        "content": "import seedu.ichifund.commons.core.index.Index;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "nexolute"
        },
        "content": "import seedu.ichifund.commons.util.CollectionUtil;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "nexolute"
        },
        "content": "import seedu.ichifund.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "nexolute"
        },
        "content": "import seedu.ichifund.model.Model;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "nexolute"
        },
        "content": "import seedu.ichifund.model.person.Address;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "nexolute"
        },
        "content": "import seedu.ichifund.model.person.Email;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "nexolute"
        },
        "content": "import seedu.ichifund.model.person.Name;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "nexolute"
        },
        "content": "import seedu.ichifund.model.person.Person;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "nexolute"
        },
        "content": "import seedu.ichifund.model.person.Phone;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "nexolute"
        },
        "content": "import seedu.ichifund.model.tag.Tag;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": " * Edits the details of an existing person in the address book."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "public class EditCommand extends Command {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"edit\";"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \": Edits the details of the person identified \""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"by the index number used in the displayed person list. \""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"Existing values will be overwritten by the input values.\\n\""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"Parameters: INDEX (must be a positive integer) \""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"[\" + PREFIX_NAME + \"NAME] \""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"[\" + PREFIX_PHONE + \"PHONE] \""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"[\" + PREFIX_EMAIL + \"EMAIL] \""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"[\" + PREFIX_ADDRESS + \"ADDRESS] \""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"[\" + PREFIX_TAG + \"TAG]...\\n\""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"Example: \" + COMMAND_WORD + \" 1 \""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "            + PREFIX_PHONE + \"91234567 \""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "            + PREFIX_EMAIL + \"johndoe@example.com\";"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_EDIT_PERSON_SUCCESS \u003d \"Edited Person: %1$s\";"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_NOT_EDITED \u003d \"At least one field to edit must be provided.\";"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_DUPLICATE_PERSON \u003d \"This person already exists in the address book.\";"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    private final Index index;"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    private final EditPersonDescriptor editPersonDescriptor;"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param index of the person in the filtered person list to edit"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param editPersonDescriptor details to edit the person with"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    public EditCommand(Index index, EditPersonDescriptor editPersonDescriptor) {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(index);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(editPersonDescriptor);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "        this.index \u003d index;"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "        this.editPersonDescriptor \u003d new EditPersonDescriptor(editPersonDescriptor);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "    public CommandResult execute(Model model) throws CommandException {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "        List\u003cPerson\u003e lastShownList \u003d model.getFilteredPersonList();"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "        if (index.getZeroBased() \u003e\u003d lastShownList.size()) {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new CommandException(Messages.MESSAGE_INVALID_PERSON_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "        Person personToEdit \u003d lastShownList.get(index.getZeroBased());"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "        Person editedPerson \u003d createEditedPerson(personToEdit, editPersonDescriptor);"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!personToEdit.isSamePerson(editedPerson) \u0026\u0026 model.hasPerson(editedPerson)) {"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new CommandException(MESSAGE_DUPLICATE_PERSON);"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "        model.setPerson(personToEdit, editedPerson);"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "        model.updateFilteredPersonList(PREDICATE_SHOW_ALL_PERSONS);"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "        return new CommandResult(String.format(MESSAGE_EDIT_PERSON_SUCCESS, editedPerson));"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "     * Creates and returns a {@code Person} with the details of {@code personToEdit}"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "     * edited with {@code editPersonDescriptor}."
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "    private static Person createEditedPerson(Person personToEdit, EditPersonDescriptor editPersonDescriptor) {"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "        assert personToEdit !\u003d null;"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "        Name updatedName \u003d editPersonDescriptor.getName().orElse(personToEdit.getName());"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "        Phone updatedPhone \u003d editPersonDescriptor.getPhone().orElse(personToEdit.getPhone());"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "        Email updatedEmail \u003d editPersonDescriptor.getEmail().orElse(personToEdit.getEmail());"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "        Address updatedAddress \u003d editPersonDescriptor.getAddress().orElse(personToEdit.getAddress());"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "        Set\u003cTag\u003e updatedTags \u003d editPersonDescriptor.getTags().orElse(personToEdit.getTags());"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "        return new Person(updatedName, updatedPhone, updatedEmail, updatedAddress, updatedTags);"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "        // short circuit if same object"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "        if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "        // instanceof handles nulls"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!(other instanceof EditCommand)) {"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "        // state check"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "        EditCommand e \u003d (EditCommand) other;"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "        return index.equals(e.index)"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "                \u0026\u0026 editPersonDescriptor.equals(e.editPersonDescriptor);"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "     * Stores the details to edit the person with. Each non-empty field value will replace the"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "     * corresponding field value of the person."
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "    public static class EditPersonDescriptor {"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "        private Name name;"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "        private Phone phone;"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "        private Email email;"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "        private Address address;"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "        private Set\u003cTag\u003e tags;"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "        public EditPersonDescriptor() {}"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "        /**"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": "         * Copy constructor."
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": "         * A defensive copy of {@code tags} is used internally."
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": "         */"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": "        public EditPersonDescriptor(EditPersonDescriptor toCopy) {"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": "            setName(toCopy.name);"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": "            setPhone(toCopy.phone);"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": "            setEmail(toCopy.email);"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": "            setAddress(toCopy.address);"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": "            setTags(toCopy.tags);"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": "        /**"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": "         * Returns true if at least one field is edited."
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": "         */"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": "        public boolean isAnyFieldEdited() {"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": "            return CollectionUtil.isAnyNonNull(name, phone, email, address, tags);"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "-"
        },
        "content": "        public void setName(Name name) {"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "-"
        },
        "content": "            this.name \u003d name;"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "-"
        },
        "content": "        public Optional\u003cName\u003e getName() {"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "-"
        },
        "content": "            return Optional.ofNullable(name);"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "-"
        },
        "content": "        public void setPhone(Phone phone) {"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "-"
        },
        "content": "            this.phone \u003d phone;"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "-"
        },
        "content": "        public Optional\u003cPhone\u003e getPhone() {"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "-"
        },
        "content": "            return Optional.ofNullable(phone);"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "-"
        },
        "content": "        public void setEmail(Email email) {"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "-"
        },
        "content": "            this.email \u003d email;"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "-"
        },
        "content": "        public Optional\u003cEmail\u003e getEmail() {"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "-"
        },
        "content": "            return Optional.ofNullable(email);"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "-"
        },
        "content": "        public void setAddress(Address address) {"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "-"
        },
        "content": "            this.address \u003d address;"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "-"
        },
        "content": "        public Optional\u003cAddress\u003e getAddress() {"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "-"
        },
        "content": "            return Optional.ofNullable(address);"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "-"
        },
        "content": "        /**"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "-"
        },
        "content": "         * Sets {@code tags} to this object\u0027s {@code tags}."
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "-"
        },
        "content": "         * A defensive copy of {@code tags} is used internally."
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "-"
        },
        "content": "         */"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "-"
        },
        "content": "        public void setTags(Set\u003cTag\u003e tags) {"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "-"
        },
        "content": "            this.tags \u003d (tags !\u003d null) ? new HashSet\u003c\u003e(tags) : null;"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "-"
        },
        "content": "        /**"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "-"
        },
        "content": "         * Returns an unmodifiable tag set, which throws {@code UnsupportedOperationException}"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "-"
        },
        "content": "         * if modification is attempted."
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "-"
        },
        "content": "         * Returns {@code Optional#empty()} if {@code tags} is null."
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "-"
        },
        "content": "         */"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "-"
        },
        "content": "        public Optional\u003cSet\u003cTag\u003e\u003e getTags() {"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "-"
        },
        "content": "            return (tags !\u003d null) ? Optional.of(Collections.unmodifiableSet(tags)) : Optional.empty();"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "-"
        },
        "content": "        public boolean equals(Object other) {"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "-"
        },
        "content": "            // short circuit if same object"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "-"
        },
        "content": "            if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "-"
        },
        "content": "                return true;"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "-"
        },
        "content": "            // instanceof handles nulls"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "-"
        },
        "content": "            if (!(other instanceof EditPersonDescriptor)) {"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "-"
        },
        "content": "                return false;"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "-"
        },
        "content": "            // state check"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "-"
        },
        "content": "            EditPersonDescriptor e \u003d (EditPersonDescriptor) other;"
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "-"
        },
        "content": "            return getName().equals(e.getName())"
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "-"
        },
        "content": "                    \u0026\u0026 getPhone().equals(e.getPhone())"
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "-"
        },
        "content": "                    \u0026\u0026 getEmail().equals(e.getEmail())"
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "-"
        },
        "content": "                    \u0026\u0026 getAddress().equals(e.getAddress())"
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "-"
        },
        "content": "                    \u0026\u0026 getTags().equals(e.getTags());"
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "nexolute": 18,
      "-": 208
    }
  },
  {
    "path": "src/main/java/seedu/ichifund/logic/commands/EmptyCommand.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "package seedu.ichifund.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "weiyang13"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "import seedu.ichifund.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "import seedu.ichifund.model.Model;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "weiyang13"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "/**"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "weiyang13"
        },
        "content": " * Represents an empty {@code Command} that returns a {@code CommandResult} with an empty string when executed."
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "weiyang13"
        },
        "content": " */"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "public class EmptyCommand extends Command {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "    public CommandResult execute(Model model) throws CommandException {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "        return new CommandResult(\"\");"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "    }"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "weiyang13": 14
    }
  },
  {
    "path": "src/main/java/seedu/ichifund/logic/commands/ExitCommand.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "nexolute"
        },
        "content": "package seedu.ichifund.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "nexolute"
        },
        "content": "import seedu.ichifund.model.Model;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": " * Terminates the program."
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "public class ExitCommand extends Command {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"exit\";"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_EXIT_ACKNOWLEDGEMENT \u003d \"Exiting Address Book as requested ...\";"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    public CommandResult execute(Model model) {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "        return new CommandResult(MESSAGE_EXIT_ACKNOWLEDGEMENT, false, true);"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "nexolute": 2,
      "-": 17
    }
  },
  {
    "path": "src/main/java/seedu/ichifund/logic/commands/FindCommand.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "nexolute"
        },
        "content": "package seedu.ichifund.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "nexolute"
        },
        "content": "import seedu.ichifund.commons.core.Messages;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "nexolute"
        },
        "content": "import seedu.ichifund.model.Model;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "nexolute"
        },
        "content": "import seedu.ichifund.model.person.NameContainsKeywordsPredicate;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": " * Finds and lists all persons in address book whose name contains any of the argument keywords."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": " * Keyword matching is case insensitive."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "public class FindCommand extends Command {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"find\";"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \": Finds all persons whose names contain any of \""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"the specified keywords (case-insensitive) and displays them as a list with index numbers.\\n\""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"Parameters: KEYWORD [MORE_KEYWORDS]...\\n\""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"Example: \" + COMMAND_WORD + \" alice bob charlie\";"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    private final NameContainsKeywordsPredicate predicate;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    public FindCommand(NameContainsKeywordsPredicate predicate) {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "        this.predicate \u003d predicate;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    public CommandResult execute(Model model) {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        model.updateFilteredPersonList(predicate);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        return new CommandResult("
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "                String.format(Messages.MESSAGE_PERSONS_LISTED_OVERVIEW, model.getFilteredPersonList().size()));"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "                || (other instanceof FindCommand // instanceof handles nulls"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "                \u0026\u0026 predicate.equals(((FindCommand) other).predicate)); // state check"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "nexolute": 4,
      "-": 38
    }
  },
  {
    "path": "src/main/java/seedu/ichifund/logic/commands/HelpCommand.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "nexolute"
        },
        "content": "package seedu.ichifund.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "nexolute"
        },
        "content": "import seedu.ichifund.model.Model;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": " * Format full help instructions for every command for display."
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "public class HelpCommand extends Command {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"help\";"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \": Shows program usage instructions.\\n\""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"Example: \" + COMMAND_WORD;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String SHOWING_HELP_MESSAGE \u003d \"Opened help window.\";"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    public CommandResult execute(Model model) {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "        return new CommandResult(SHOWING_HELP_MESSAGE, true, false);"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "nexolute": 2,
      "-": 19
    }
  },
  {
    "path": "src/main/java/seedu/ichifund/logic/commands/ListCommand.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "nexolute"
        },
        "content": "package seedu.ichifund.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "nexolute"
        },
        "content": "import static seedu.ichifund.model.Model.PREDICATE_SHOW_ALL_PERSONS;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "nexolute"
        },
        "content": "import seedu.ichifund.model.Model;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": " * Lists all persons in the address book to the user."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "public class ListCommand extends Command {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"list\";"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_SUCCESS \u003d \"Listed all persons\";"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    public CommandResult execute(Model model) {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "        model.updateFilteredPersonList(PREDICATE_SHOW_ALL_PERSONS);"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "        return new CommandResult(MESSAGE_SUCCESS);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "nexolute": 3,
      "-": 21
    }
  },
  {
    "path": "src/main/java/seedu/ichifund/logic/commands/analytics/BalanceTrendCommand.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Alaete"
        },
        "content": "package seedu.ichifund.logic.commands.analytics;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Alaete"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Alaete"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Alaete"
        },
        "content": "import static seedu.ichifund.logic.parser.CliSyntax.PREFIX_YEAR;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Alaete"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Alaete"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Alaete"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Alaete"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Alaete"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Alaete"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Alaete"
        },
        "content": "import seedu.ichifund.logic.commands.CommandResult;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Alaete"
        },
        "content": "import seedu.ichifund.model.Model;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Alaete"
        },
        "content": "import seedu.ichifund.model.amount.Amount;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Alaete"
        },
        "content": "import seedu.ichifund.model.analytics.Data;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Alaete"
        },
        "content": "import seedu.ichifund.model.analytics.TrendReport;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Alaete"
        },
        "content": "import seedu.ichifund.model.date.Month;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Alaete"
        },
        "content": "import seedu.ichifund.model.date.Year;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Alaete"
        },
        "content": "import seedu.ichifund.model.transaction.Transaction;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Alaete"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Alaete"
        },
        "content": "/**"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Alaete"
        },
        "content": " * Generates an expenditure trend report."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Alaete"
        },
        "content": " */"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Alaete"
        },
        "content": "public class BalanceTrendCommand extends TrendCommand {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Alaete"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Alaete"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"balance\";"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Alaete"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Alaete"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \": Displays monthly balance trend for the year \""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Alaete"
        },
        "content": "            + \"specified, or current year if year is unspecified.\""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Alaete"
        },
        "content": "            + \"Parameters: \""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Alaete"
        },
        "content": "            + \"[\" + PREFIX_YEAR + \"YEAR] \""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Alaete"
        },
        "content": "            + \"Example: \" + COMMAND_WORD + \" \""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Alaete"
        },
        "content": "            + PREFIX_YEAR + \"2019 \";"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Alaete"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Alaete"
        },
        "content": "    public static final String MESSAGE_SUCCESS \u003d \"Monthly balance trend for %1$s displayed.\";"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Alaete"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Alaete"
        },
        "content": "    public static final String REPORT_DESCRIPTION \u003d \"Total balance for %1$s %2$s\";"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Alaete"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Alaete"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Alaete"
        },
        "content": "     * Constructs a {@code BalanceTrendCommand}."
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Alaete"
        },
        "content": "     *"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Alaete"
        },
        "content": "     * @param year A year."
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Alaete"
        },
        "content": "     */"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Alaete"
        },
        "content": "    public BalanceTrendCommand(Optional\u003cYear\u003e year) {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Alaete"
        },
        "content": "        super(year);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Alaete"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Alaete"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Alaete"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Alaete"
        },
        "content": "     * Fills a {@code TrendReport} using data from a {@code Model}."
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Alaete"
        },
        "content": "     *"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Alaete"
        },
        "content": "     * @param model Model to be referenced."
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Alaete"
        },
        "content": "     * @param report Report to be filled."
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Alaete"
        },
        "content": "     */"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Alaete"
        },
        "content": "    private void fillBalanceTrendReport(Model model, TrendReport report) {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "Alaete"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "Alaete"
        },
        "content": "        requireNonNull(report);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "Alaete"
        },
        "content": "        ObservableList\u003cTransaction\u003e transactionList \u003d model.getFundBook().getTransactionList();"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "Alaete"
        },
        "content": "        List\u003cData\u003e monthlyBalanceList \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "Alaete"
        },
        "content": "        for (int i \u003d 0; i \u003c 12; i++) {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "Alaete"
        },
        "content": "            Month currentMonth \u003d new Month(Integer.toString(i + 1));"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "Alaete"
        },
        "content": "            List\u003cAmount\u003e currentMonthExpenditureList \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "Alaete"
        },
        "content": "            List\u003cAmount\u003e currentMonthIncomeList \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "Alaete"
        },
        "content": "            for (Transaction transaction : transactionList) {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "Alaete"
        },
        "content": "                if (transaction.isIn(year) \u0026\u0026 transaction.isIn(currentMonth)) {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "Alaete"
        },
        "content": "                    if (transaction.isExpenditure()) {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "Alaete"
        },
        "content": "                        currentMonthExpenditureList.add(transaction.getAmount());"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "Alaete"
        },
        "content": "                    } else if (!transaction.isExpenditure()) {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "Alaete"
        },
        "content": "                        currentMonthIncomeList.add(transaction.getAmount());"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "Alaete"
        },
        "content": "                    }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "Alaete"
        },
        "content": "                }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "Alaete"
        },
        "content": "            }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "Alaete"
        },
        "content": "            Amount currentMonthExpenditure \u003d Amount.addAll(currentMonthExpenditureList);"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "Alaete"
        },
        "content": "            Amount currentMonthIncome \u003d Amount.addAll(currentMonthIncomeList);"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "Alaete"
        },
        "content": "            Amount currentMonthBalance \u003d Amount.subtract(currentMonthIncome, currentMonthExpenditure);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "Alaete"
        },
        "content": "            Data currentData \u003d new Data(String.format(REPORT_DESCRIPTION, currentMonth.wordString(), year.toString()),"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "Alaete"
        },
        "content": "                    currentMonthBalance, Optional.of(year),"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "Alaete"
        },
        "content": "                    Optional.of(currentMonth), Optional.empty(), Optional.empty());"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "Alaete"
        },
        "content": "            monthlyBalanceList.add(currentData);"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "Alaete"
        },
        "content": "        }"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "Alaete"
        },
        "content": "        report.fillReport(monthlyBalanceList);"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "Alaete"
        },
        "content": "    }"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "Alaete"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "Alaete"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "Alaete"
        },
        "content": "    public CommandResult execute(Model model) {"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "Alaete"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "Alaete"
        },
        "content": "        TrendReport report \u003d createTrendReport(year);"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "Alaete"
        },
        "content": "        fillBalanceTrendReport(model, report);"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "Alaete"
        },
        "content": "        model.updateDataList(report.getTrendList());"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "Alaete"
        },
        "content": "        return new CommandResult(String.format(MESSAGE_SUCCESS, year.toString()));"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "Alaete"
        },
        "content": "    }"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "Alaete"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Alaete": 90
    }
  },
  {
    "path": "src/main/java/seedu/ichifund/logic/commands/analytics/BreakdownCommand.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Alaete"
        },
        "content": "package seedu.ichifund.logic.commands.analytics;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Alaete"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Alaete"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Alaete"
        },
        "content": "import static seedu.ichifund.logic.parser.CliSyntax.PREFIX_MONTH;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Alaete"
        },
        "content": "import static seedu.ichifund.logic.parser.CliSyntax.PREFIX_YEAR;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Alaete"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Alaete"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Alaete"
        },
        "content": "import java.util.HashMap;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Alaete"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Alaete"
        },
        "content": "import java.util.Map;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Alaete"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Alaete"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Alaete"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Alaete"
        },
        "content": "import seedu.ichifund.logic.commands.Command;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Alaete"
        },
        "content": "import seedu.ichifund.logic.commands.CommandResult;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Alaete"
        },
        "content": "import seedu.ichifund.model.Model;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Alaete"
        },
        "content": "import seedu.ichifund.model.amount.Amount;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Alaete"
        },
        "content": "import seedu.ichifund.model.analytics.BreakdownReport;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Alaete"
        },
        "content": "import seedu.ichifund.model.analytics.Data;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Alaete"
        },
        "content": "import seedu.ichifund.model.date.Month;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Alaete"
        },
        "content": "import seedu.ichifund.model.date.Year;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Alaete"
        },
        "content": "import seedu.ichifund.model.transaction.Category;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Alaete"
        },
        "content": "import seedu.ichifund.model.transaction.Transaction;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Alaete"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Alaete"
        },
        "content": "/**"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Alaete"
        },
        "content": " * Generates a report for expenditure breakdown by category."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Alaete"
        },
        "content": " */"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Alaete"
        },
        "content": "public class BreakdownCommand extends Command {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Alaete"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Alaete"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"breakdown\";"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Alaete"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Alaete"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \": Displays breakdown of expenditure by category for the \""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Alaete"
        },
        "content": "            + \"month and/or year specified, or current month and/or year if month and/or year is unspecified.\""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Alaete"
        },
        "content": "            + \"Parameters: \""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Alaete"
        },
        "content": "            + \"[\" + PREFIX_MONTH + \"MONTH] \""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Alaete"
        },
        "content": "            + \"[\" + PREFIX_YEAR + \"YEAR] \""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Alaete"
        },
        "content": "            + \"Example: \" + COMMAND_WORD + \" \""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Alaete"
        },
        "content": "            + PREFIX_MONTH + \"7 \""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Alaete"
        },
        "content": "            + PREFIX_YEAR + \"2019 \";"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Alaete"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Alaete"
        },
        "content": "    public static final String MESSAGE_SUCCESS \u003d \"Breakdown of expenditure by category for %1$s %2$s displayed.\";"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Alaete"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Alaete"
        },
        "content": "    public static final String REPORT_DESCRIPTION \u003d \"Total expenditure on %1$s for %2$s %3$s\";"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Alaete"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Alaete"
        },
        "content": "    protected final Month month;"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Alaete"
        },
        "content": "    protected final Year year;"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Alaete"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Alaete"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Alaete"
        },
        "content": "     * Constructs a {@code BreakdownCommand}."
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Alaete"
        },
        "content": "     *"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Alaete"
        },
        "content": "     * @param month A month."
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Alaete"
        },
        "content": "     * @param year A year."
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Alaete"
        },
        "content": "     */"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "Alaete"
        },
        "content": "    public BreakdownCommand(Optional\u003cMonth\u003e month, Optional\u003cYear\u003e year) {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "Alaete"
        },
        "content": "        requireNonNull(month);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "Alaete"
        },
        "content": "        requireNonNull(year);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "Alaete"
        },
        "content": "        this.month \u003d month.orElseGet(Month::getCurrent);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "Alaete"
        },
        "content": "        this.year \u003d year.orElseGet(Year::getCurrent);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "Alaete"
        },
        "content": "    }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "Alaete"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "Alaete"
        },
        "content": "    protected BreakdownReport createBreakdownReport(Month month, Year year) {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "Alaete"
        },
        "content": "        requireNonNull(month);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "Alaete"
        },
        "content": "        requireNonNull(year);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "Alaete"
        },
        "content": "        return new BreakdownReport(month, year);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "Alaete"
        },
        "content": "    }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "Alaete"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "Alaete"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "Alaete"
        },
        "content": "     * Fills a {@code BreakdownReport} using data from a {@code Model}."
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "Alaete"
        },
        "content": "     *"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "Alaete"
        },
        "content": "     * @param model Model to be referenced."
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "Alaete"
        },
        "content": "     * @param report Report to be filled."
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "Alaete"
        },
        "content": "     */"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "Alaete"
        },
        "content": "    void fillBreakdownReport(Model model, BreakdownReport report) {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "Alaete"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "Alaete"
        },
        "content": "        requireNonNull(report);"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "Alaete"
        },
        "content": "        ObservableList\u003cTransaction\u003e transactionList \u003d model.getFundBook().getTransactionList();"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "Alaete"
        },
        "content": "        Map\u003cCategory, Amount\u003e categoricalExpenditureMap \u003d new HashMap\u003c\u003e();"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "Alaete"
        },
        "content": "        List\u003cData\u003e categoricalExpenditureList \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "Alaete"
        },
        "content": "        for (Transaction transaction : transactionList) {"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "Alaete"
        },
        "content": "            if (transaction.isIn(year) \u0026\u0026 transaction.isIn(month) \u0026\u0026 transaction.isExpenditure()) {"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "Alaete"
        },
        "content": "                if (categoricalExpenditureMap.containsKey(transaction.getCategory())) {"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "Alaete"
        },
        "content": "                    categoricalExpenditureMap.put(transaction.getCategory(),"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "Alaete"
        },
        "content": "                            Amount.add(categoricalExpenditureMap.get(transaction.getCategory()),"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "Alaete"
        },
        "content": "                                    transaction.getAmount()));"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "Alaete"
        },
        "content": "                } else {"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "Alaete"
        },
        "content": "                    categoricalExpenditureMap.put(transaction.getCategory(), transaction.getAmount());"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "Alaete"
        },
        "content": "                }"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "Alaete"
        },
        "content": "            }"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "Alaete"
        },
        "content": "        }"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "Alaete"
        },
        "content": "        for (Map.Entry\u003cCategory, Amount\u003e entry : categoricalExpenditureMap.entrySet()) {"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "Alaete"
        },
        "content": "            Category category \u003d entry.getKey();"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "Alaete"
        },
        "content": "            Amount amount \u003d entry.getValue();"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "Alaete"
        },
        "content": "            Data currentData \u003d new Data(String.format(REPORT_DESCRIPTION, category.toString(), month.wordString(),"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "Alaete"
        },
        "content": "                    year.toString()), amount, Optional.of(year),"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "Alaete"
        },
        "content": "                    Optional.of(month), Optional.empty(), Optional.of(category));"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "Alaete"
        },
        "content": "            categoricalExpenditureList.add(currentData);"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "Alaete"
        },
        "content": "        }"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "Alaete"
        },
        "content": "        report.fillReport(categoricalExpenditureList);"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "Alaete"
        },
        "content": "    }"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "Alaete"
        },
        "content": ""
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "Alaete"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "Alaete"
        },
        "content": "    public CommandResult execute(Model model) {"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "Alaete"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "Alaete"
        },
        "content": "        BreakdownReport report \u003d createBreakdownReport(month, year);"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "Alaete"
        },
        "content": "        fillBreakdownReport(model, report);"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "Alaete"
        },
        "content": "        model.updateDataList(report.getBreakdownList());"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "Alaete"
        },
        "content": "        return new CommandResult(String.format(MESSAGE_SUCCESS, month.wordString(), year.toString()));"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "Alaete"
        },
        "content": "    }"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "Alaete"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Alaete": 109
    }
  },
  {
    "path": "src/main/java/seedu/ichifund/logic/commands/analytics/CategoryRankingCommand.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Alaete"
        },
        "content": "package seedu.ichifund.logic.commands.analytics;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Alaete"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Alaete"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Alaete"
        },
        "content": "import static seedu.ichifund.logic.parser.CliSyntax.PREFIX_MONTH;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Alaete"
        },
        "content": "import static seedu.ichifund.logic.parser.CliSyntax.PREFIX_YEAR;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Alaete"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Alaete"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Alaete"
        },
        "content": "import java.util.HashMap;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Alaete"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Alaete"
        },
        "content": "import java.util.Map;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Alaete"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Alaete"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Alaete"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Alaete"
        },
        "content": "import seedu.ichifund.logic.commands.Command;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Alaete"
        },
        "content": "import seedu.ichifund.logic.commands.CommandResult;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Alaete"
        },
        "content": "import seedu.ichifund.model.Model;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Alaete"
        },
        "content": "import seedu.ichifund.model.amount.Amount;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Alaete"
        },
        "content": "import seedu.ichifund.model.analytics.BreakdownReport;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Alaete"
        },
        "content": "import seedu.ichifund.model.analytics.Data;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Alaete"
        },
        "content": "import seedu.ichifund.model.date.Month;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Alaete"
        },
        "content": "import seedu.ichifund.model.date.Year;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Alaete"
        },
        "content": "import seedu.ichifund.model.transaction.Category;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Alaete"
        },
        "content": "import seedu.ichifund.model.transaction.Transaction;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Alaete"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Alaete"
        },
        "content": "/**"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Alaete"
        },
        "content": " * Generates a report for expenditure breakdown by category."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Alaete"
        },
        "content": " */"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Alaete"
        },
        "content": "public class CategoryRankingCommand extends Command {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Alaete"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Alaete"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"catrank\";"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Alaete"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Alaete"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \": Displays expenditure category ranking chart for the \""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Alaete"
        },
        "content": "            + \"month and/or year specified, or current month and/or year if month and/or year is unspecified.\""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Alaete"
        },
        "content": "            + \"Parameters: \""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Alaete"
        },
        "content": "            + \"[\" + PREFIX_MONTH + \"MONTH] \""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Alaete"
        },
        "content": "            + \"[\" + PREFIX_YEAR + \"YEAR] \""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Alaete"
        },
        "content": "            + \"Example: \" + COMMAND_WORD + \" \""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Alaete"
        },
        "content": "            + PREFIX_MONTH + \"7 \""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Alaete"
        },
        "content": "            + PREFIX_YEAR + \"2019 \";"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Alaete"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Alaete"
        },
        "content": "    public static final String MESSAGE_SUCCESS \u003d \"Expenditure category ranking chart for %1$s %2$s displayed.\";"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Alaete"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Alaete"
        },
        "content": "    public static final String REPORT_DESCRIPTION \u003d \"Total expenditure on %1$s for %2$s %3$s\";"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Alaete"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Alaete"
        },
        "content": "    protected final Month month;"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Alaete"
        },
        "content": "    protected final Year year;"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Alaete"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Alaete"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Alaete"
        },
        "content": "     * Constructs a {@code BreakdownCommand}."
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Alaete"
        },
        "content": "     *"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Alaete"
        },
        "content": "     * @param month A month."
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Alaete"
        },
        "content": "     * @param year A year."
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Alaete"
        },
        "content": "     */"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "Alaete"
        },
        "content": "    public CategoryRankingCommand(Optional\u003cMonth\u003e month, Optional\u003cYear\u003e year) {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "Alaete"
        },
        "content": "        requireNonNull(month);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "Alaete"
        },
        "content": "        requireNonNull(year);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "Alaete"
        },
        "content": "        this.month \u003d month.orElseGet(Month::getCurrent);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "Alaete"
        },
        "content": "        this.year \u003d year.orElseGet(Year::getCurrent);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "Alaete"
        },
        "content": "    }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "Alaete"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "Alaete"
        },
        "content": "    protected BreakdownReport createBreakdownReport(Month month, Year year) {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "Alaete"
        },
        "content": "        requireNonNull(month);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "Alaete"
        },
        "content": "        requireNonNull(year);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "Alaete"
        },
        "content": "        return new BreakdownReport(month, year);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "Alaete"
        },
        "content": "    }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "Alaete"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "Alaete"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "Alaete"
        },
        "content": "     * Fills a {@code BreakdownReport} using data from a {@code Model}."
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "Alaete"
        },
        "content": "     *"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "Alaete"
        },
        "content": "     * @param model Model to be referenced."
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "Alaete"
        },
        "content": "     * @param report Report to be filled."
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "Alaete"
        },
        "content": "     */"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "Alaete"
        },
        "content": "    void fillBreakdownReport(Model model, BreakdownReport report) {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "Alaete"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "Alaete"
        },
        "content": "        requireNonNull(report);"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "Alaete"
        },
        "content": "        ObservableList\u003cTransaction\u003e transactionList \u003d model.getFundBook().getTransactionList();"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "Alaete"
        },
        "content": "        Map\u003cCategory, Amount\u003e categoricalExpenditureMap \u003d new HashMap\u003c\u003e();"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "Alaete"
        },
        "content": "        List\u003cData\u003e categoricalExpenditureList \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "Alaete"
        },
        "content": "        for (Transaction transaction : transactionList) {"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "Alaete"
        },
        "content": "            if (transaction.isIn(year) \u0026\u0026 transaction.isIn(month) \u0026\u0026 transaction.isExpenditure()) {"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "Alaete"
        },
        "content": "                if (categoricalExpenditureMap.containsKey(transaction.getCategory())) {"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "Alaete"
        },
        "content": "                    categoricalExpenditureMap.put(transaction.getCategory(),"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "Alaete"
        },
        "content": "                            Amount.add(categoricalExpenditureMap.get(transaction.getCategory()),"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "Alaete"
        },
        "content": "                                    transaction.getAmount()));"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "Alaete"
        },
        "content": "                } else {"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "Alaete"
        },
        "content": "                    categoricalExpenditureMap.put(transaction.getCategory(), transaction.getAmount());"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "Alaete"
        },
        "content": "                }"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "Alaete"
        },
        "content": "            }"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "Alaete"
        },
        "content": "        }"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "Alaete"
        },
        "content": "        for (Map.Entry\u003cCategory, Amount\u003e entry : categoricalExpenditureMap.entrySet()) {"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "Alaete"
        },
        "content": "            Category category \u003d entry.getKey();"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "Alaete"
        },
        "content": "            Amount amount \u003d entry.getValue();"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "Alaete"
        },
        "content": "            Data currentData \u003d new Data(String.format(REPORT_DESCRIPTION, category.toString(), month.wordString(),"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "Alaete"
        },
        "content": "                    year.toString()), amount, Optional.of(year),"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "Alaete"
        },
        "content": "                    Optional.of(month), Optional.empty(), Optional.of(category));"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "Alaete"
        },
        "content": "            categoricalExpenditureList.add(currentData);"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "Alaete"
        },
        "content": "        }"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "Alaete"
        },
        "content": "        report.fillReport(categoricalExpenditureList);"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "Alaete"
        },
        "content": "    }"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "Alaete"
        },
        "content": ""
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "Alaete"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "Alaete"
        },
        "content": "    public CommandResult execute(Model model) {"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "Alaete"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "Alaete"
        },
        "content": "        BreakdownReport report \u003d createBreakdownReport(month, year);"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "Alaete"
        },
        "content": "        fillBreakdownReport(model, report);"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "Alaete"
        },
        "content": "        model.updateDataList(report.getSortedBreakdownList());"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "Alaete"
        },
        "content": "        return new CommandResult(String.format(MESSAGE_SUCCESS, month.wordString(), year.toString()));"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "Alaete"
        },
        "content": "    }"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "Alaete"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Alaete": 109
    }
  },
  {
    "path": "src/main/java/seedu/ichifund/logic/commands/analytics/ExpenditureRankingCommand.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Alaete"
        },
        "content": "package seedu.ichifund.logic.commands.analytics;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Alaete"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Alaete"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Alaete"
        },
        "content": "import static seedu.ichifund.logic.parser.CliSyntax.PREFIX_MONTH;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Alaete"
        },
        "content": "import static seedu.ichifund.logic.parser.CliSyntax.PREFIX_YEAR;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Alaete"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Alaete"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Alaete"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Alaete"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Alaete"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Alaete"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Alaete"
        },
        "content": "import seedu.ichifund.logic.commands.Command;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Alaete"
        },
        "content": "import seedu.ichifund.logic.commands.CommandResult;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Alaete"
        },
        "content": "import seedu.ichifund.model.Model;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Alaete"
        },
        "content": "import seedu.ichifund.model.analytics.Data;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Alaete"
        },
        "content": "import seedu.ichifund.model.analytics.TrendReport;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Alaete"
        },
        "content": "import seedu.ichifund.model.date.Month;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Alaete"
        },
        "content": "import seedu.ichifund.model.date.Year;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Alaete"
        },
        "content": "import seedu.ichifund.model.transaction.Transaction;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Alaete"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Alaete"
        },
        "content": "/**"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Alaete"
        },
        "content": " * Generates a report for expenditure ranking."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Alaete"
        },
        "content": " */"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Alaete"
        },
        "content": "public class ExpenditureRankingCommand extends Command {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Alaete"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Alaete"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"exprank\";"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Alaete"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Alaete"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \": Displays expenditure ranking chart for the \""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Alaete"
        },
        "content": "            + \"month and year specified, or current month and year if year is unspecified, \""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Alaete"
        },
        "content": "            + \"or current year if month and year are unspecified.\""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Alaete"
        },
        "content": "            + \"Parameters: \""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Alaete"
        },
        "content": "            + \"[\" + PREFIX_MONTH + \"MONTH] \""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Alaete"
        },
        "content": "            + \"[\" + PREFIX_YEAR + \"YEAR] \""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Alaete"
        },
        "content": "            + \"Example: \" + COMMAND_WORD + \" \""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Alaete"
        },
        "content": "            + PREFIX_MONTH + \"7 \""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Alaete"
        },
        "content": "            + PREFIX_YEAR + \"2019 \";"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Alaete"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Alaete"
        },
        "content": "    public static final String MESSAGE_SUCCESS \u003d \"Expenditure ranking chart for %1$s %2$s displayed.\";"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Alaete"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Alaete"
        },
        "content": "    protected final Optional\u003cMonth\u003e month;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Alaete"
        },
        "content": "    protected final Year year;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Alaete"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Alaete"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Alaete"
        },
        "content": "     * Constructs a {@code ExpenditureRankingCommand}."
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Alaete"
        },
        "content": "     *"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Alaete"
        },
        "content": "     * @param month A month."
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Alaete"
        },
        "content": "     * @param year A year."
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Alaete"
        },
        "content": "     */"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Alaete"
        },
        "content": "    public ExpenditureRankingCommand(Optional\u003cMonth\u003e month, Optional\u003cYear\u003e year) {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Alaete"
        },
        "content": "        requireNonNull(month);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Alaete"
        },
        "content": "        requireNonNull(year);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Alaete"
        },
        "content": "        this.month \u003d month;"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Alaete"
        },
        "content": "        this.year \u003d year.orElseGet(Year::getCurrent);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "Alaete"
        },
        "content": "    }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "Alaete"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "Alaete"
        },
        "content": "    protected TrendReport createTrendReport(Year year) {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "Alaete"
        },
        "content": "        requireNonNull(year);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "Alaete"
        },
        "content": "        return new TrendReport(year);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "Alaete"
        },
        "content": "    }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "Alaete"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "Alaete"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "Alaete"
        },
        "content": "     * Fills a {@code TrendReport} using data from a {@code Model}."
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "Alaete"
        },
        "content": "     *"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "Alaete"
        },
        "content": "     * @param model Model to be referenced."
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "Alaete"
        },
        "content": "     * @param report Report to be filled."
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "Alaete"
        },
        "content": "     */"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "Alaete"
        },
        "content": "    private void fillExpenditureRankingTrendReport(Model model, TrendReport report) {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "Alaete"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "Alaete"
        },
        "content": "        requireNonNull(report);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "Alaete"
        },
        "content": "        ObservableList\u003cTransaction\u003e transactionList \u003d model.getFundBook().getTransactionList();"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "Alaete"
        },
        "content": "        List\u003cData\u003e expenditureList \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "Alaete"
        },
        "content": "        if (month.isPresent()) {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "Alaete"
        },
        "content": "            for (Transaction transaction : transactionList) {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "Alaete"
        },
        "content": "                if (transaction.isIn(year) \u0026\u0026 transaction.isIn(month.get()) \u0026\u0026 transaction.isExpenditure()) {"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "Alaete"
        },
        "content": "                    Data currentData \u003d new Data(transaction.getDescription().toString(), transaction.getAmount(),"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "Alaete"
        },
        "content": "                            Optional.ofNullable(transaction.getDate().getYear()),"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "Alaete"
        },
        "content": "                            Optional.ofNullable(transaction.getDate().getMonth()),"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "Alaete"
        },
        "content": "                            Optional.ofNullable(transaction.getDate().getDay()),"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "Alaete"
        },
        "content": "                            Optional.ofNullable(transaction.getCategory()));"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "Alaete"
        },
        "content": "                    expenditureList.add(currentData);"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "Alaete"
        },
        "content": "                }"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "Alaete"
        },
        "content": "            }"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "Alaete"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "Alaete"
        },
        "content": "            for (Transaction transaction : transactionList) {"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "Alaete"
        },
        "content": "                if (transaction.isIn(year) \u0026\u0026 transaction.isExpenditure()) {"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "Alaete"
        },
        "content": "                    Data currentData \u003d new Data(transaction.getDescription().toString(), transaction.getAmount(),"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "Alaete"
        },
        "content": "                            Optional.ofNullable(transaction.getDate().getYear()),"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "Alaete"
        },
        "content": "                            Optional.ofNullable(transaction.getDate().getMonth()),"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "Alaete"
        },
        "content": "                            Optional.ofNullable(transaction.getDate().getDay()),"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "Alaete"
        },
        "content": "                            Optional.ofNullable(transaction.getCategory()));"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "Alaete"
        },
        "content": "                    expenditureList.add(currentData);"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "Alaete"
        },
        "content": "                }"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "Alaete"
        },
        "content": "            }"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "Alaete"
        },
        "content": "        }"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "Alaete"
        },
        "content": "        report.fillReport(expenditureList);"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "Alaete"
        },
        "content": "    }"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "Alaete"
        },
        "content": ""
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "Alaete"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "Alaete"
        },
        "content": "    public CommandResult execute(Model model) {"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "Alaete"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "Alaete"
        },
        "content": "        TrendReport report \u003d createTrendReport(year);"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "Alaete"
        },
        "content": "        fillExpenditureRankingTrendReport(model, report);"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "Alaete"
        },
        "content": "        model.updateDataList(report.getSortedTrendList());"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "Alaete"
        },
        "content": "        if (month.isPresent()) {"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "Alaete"
        },
        "content": "            return new CommandResult(String.format(MESSAGE_SUCCESS, month.get().wordString(), year.toString()));"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "Alaete"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "Alaete"
        },
        "content": "            return new CommandResult(String.format(MESSAGE_SUCCESS, \"the whole of\", year.toString()));"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "Alaete"
        },
        "content": "        }"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "Alaete"
        },
        "content": "    }"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "Alaete"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Alaete": 110
    }
  },
  {
    "path": "src/main/java/seedu/ichifund/logic/commands/analytics/ExpenditureTrendCommand.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Alaete"
        },
        "content": "package seedu.ichifund.logic.commands.analytics;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Alaete"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Alaete"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Alaete"
        },
        "content": "import static seedu.ichifund.logic.parser.CliSyntax.PREFIX_YEAR;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Alaete"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Alaete"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Alaete"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Alaete"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Alaete"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Alaete"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Alaete"
        },
        "content": "import seedu.ichifund.logic.commands.CommandResult;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Alaete"
        },
        "content": "import seedu.ichifund.model.Model;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Alaete"
        },
        "content": "import seedu.ichifund.model.amount.Amount;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Alaete"
        },
        "content": "import seedu.ichifund.model.analytics.Data;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Alaete"
        },
        "content": "import seedu.ichifund.model.analytics.TrendReport;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Alaete"
        },
        "content": "import seedu.ichifund.model.date.Month;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Alaete"
        },
        "content": "import seedu.ichifund.model.date.Year;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Alaete"
        },
        "content": "import seedu.ichifund.model.transaction.Transaction;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Alaete"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Alaete"
        },
        "content": "/**"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Alaete"
        },
        "content": " * Generates an expenditure trend report."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Alaete"
        },
        "content": " */"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Alaete"
        },
        "content": "public class ExpenditureTrendCommand extends TrendCommand {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Alaete"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Alaete"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"expenditure\";"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Alaete"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Alaete"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \": Displays monthly expenditure trend for the year \""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Alaete"
        },
        "content": "            + \"specified, or current year if year is unspecified.\""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Alaete"
        },
        "content": "            + \"Parameters: \""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Alaete"
        },
        "content": "            + \"[\" + PREFIX_YEAR + \"YEAR] \""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Alaete"
        },
        "content": "            + \"Example: \" + COMMAND_WORD + \" \""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Alaete"
        },
        "content": "            + PREFIX_YEAR + \"2019 \";"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Alaete"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Alaete"
        },
        "content": "    public static final String MESSAGE_SUCCESS \u003d \"Monthly expenditure trend for %1$s displayed.\";"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Alaete"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Alaete"
        },
        "content": "    public static final String REPORT_DESCRIPTION \u003d \"Total expenditure for %1$s %2$s\";"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Alaete"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Alaete"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Alaete"
        },
        "content": "     * Constructs a {@code ExpenditureTrendCommand}."
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Alaete"
        },
        "content": "     *"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Alaete"
        },
        "content": "     * @param year A year."
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Alaete"
        },
        "content": "     */"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Alaete"
        },
        "content": "    public ExpenditureTrendCommand(Optional\u003cYear\u003e year) {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Alaete"
        },
        "content": "        super(year);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Alaete"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Alaete"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Alaete"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Alaete"
        },
        "content": "     * Fills a {@code TrendReport} using data from a {@code Model}."
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Alaete"
        },
        "content": "     *"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Alaete"
        },
        "content": "     * @param model Model to be referenced."
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Alaete"
        },
        "content": "     * @param report Report to be filled."
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Alaete"
        },
        "content": "     */"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Alaete"
        },
        "content": "    private void fillExpenditureTrendReport(Model model, TrendReport report) {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "Alaete"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "Alaete"
        },
        "content": "        requireNonNull(report);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "Alaete"
        },
        "content": "        ObservableList\u003cTransaction\u003e transactionList \u003d model.getFundBook().getTransactionList();"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "Alaete"
        },
        "content": "        List\u003cData\u003e monthlyExpenditureList \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "Alaete"
        },
        "content": "        for (int i \u003d 0; i \u003c 12; i++) {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "Alaete"
        },
        "content": "            Month currentMonth \u003d new Month(Integer.toString(i + 1));"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "Alaete"
        },
        "content": "            List\u003cAmount\u003e currentMonthExpenditureList \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "Alaete"
        },
        "content": "            for (Transaction transaction : transactionList) {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "Alaete"
        },
        "content": "                if (transaction.isIn(year) \u0026\u0026 transaction.isIn(currentMonth) \u0026\u0026 transaction.isExpenditure()) {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "Alaete"
        },
        "content": "                    currentMonthExpenditureList.add(transaction.getAmount());"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "Alaete"
        },
        "content": "                }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "Alaete"
        },
        "content": "            }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "Alaete"
        },
        "content": "            Amount currentMonthExpenditure \u003d Amount.addAll(currentMonthExpenditureList);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "Alaete"
        },
        "content": "            Data currentData \u003d new Data(String.format(REPORT_DESCRIPTION, currentMonth.wordString(), year.toString()),"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "Alaete"
        },
        "content": "                    currentMonthExpenditure, Optional.of(year), Optional.of(currentMonth),"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "Alaete"
        },
        "content": "                    Optional.empty(), Optional.empty());"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "Alaete"
        },
        "content": "            monthlyExpenditureList.add(currentData);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "Alaete"
        },
        "content": "        }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "Alaete"
        },
        "content": "        report.fillReport(monthlyExpenditureList);"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "Alaete"
        },
        "content": "    }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "Alaete"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "Alaete"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "Alaete"
        },
        "content": "    public CommandResult execute(Model model) {"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "Alaete"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "Alaete"
        },
        "content": "        TrendReport report \u003d createTrendReport(year);"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "Alaete"
        },
        "content": "        fillExpenditureTrendReport(model, report);"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "Alaete"
        },
        "content": "        model.updateDataList(report.getTrendList());"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "Alaete"
        },
        "content": "        return new CommandResult(String.format(MESSAGE_SUCCESS, year.toString()));"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "Alaete"
        },
        "content": "    }"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "Alaete"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Alaete": 83
    }
  },
  {
    "path": "src/main/java/seedu/ichifund/logic/commands/analytics/IncomeTrendCommand.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Alaete"
        },
        "content": "package seedu.ichifund.logic.commands.analytics;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Alaete"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Alaete"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Alaete"
        },
        "content": "import static seedu.ichifund.logic.parser.CliSyntax.PREFIX_YEAR;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Alaete"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Alaete"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Alaete"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Alaete"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Alaete"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Alaete"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Alaete"
        },
        "content": "import seedu.ichifund.logic.commands.CommandResult;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Alaete"
        },
        "content": "import seedu.ichifund.model.Model;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Alaete"
        },
        "content": "import seedu.ichifund.model.amount.Amount;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Alaete"
        },
        "content": "import seedu.ichifund.model.analytics.Data;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Alaete"
        },
        "content": "import seedu.ichifund.model.analytics.TrendReport;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Alaete"
        },
        "content": "import seedu.ichifund.model.date.Month;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Alaete"
        },
        "content": "import seedu.ichifund.model.date.Year;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Alaete"
        },
        "content": "import seedu.ichifund.model.transaction.Transaction;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Alaete"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Alaete"
        },
        "content": "/**"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Alaete"
        },
        "content": " * Generates an expenditure trend report."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Alaete"
        },
        "content": " */"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Alaete"
        },
        "content": "public class IncomeTrendCommand extends TrendCommand {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Alaete"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Alaete"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"income\";"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Alaete"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Alaete"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \": Displays monthly income trend for the year \""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Alaete"
        },
        "content": "            + \"specified, or current year if year is unspecified.\""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Alaete"
        },
        "content": "            + \"Parameters: \""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Alaete"
        },
        "content": "            + \"[\" + PREFIX_YEAR + \"YEAR] \""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Alaete"
        },
        "content": "            + \"Example: \" + COMMAND_WORD + \" \""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Alaete"
        },
        "content": "            + PREFIX_YEAR + \"2019 \";"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Alaete"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Alaete"
        },
        "content": "    public static final String MESSAGE_SUCCESS \u003d \"Monthly income trend for %1$s displayed.\";"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Alaete"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Alaete"
        },
        "content": "    public static final String REPORT_DESCRIPTION \u003d \"Total income for %1$s %2$s\";"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Alaete"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Alaete"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Alaete"
        },
        "content": "     * Constructs a {@code IncomeTrendCommand}."
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Alaete"
        },
        "content": "     *"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Alaete"
        },
        "content": "     * @param year A year."
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Alaete"
        },
        "content": "     */"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Alaete"
        },
        "content": "    public IncomeTrendCommand(Optional\u003cYear\u003e year) {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Alaete"
        },
        "content": "        super(year);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Alaete"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Alaete"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Alaete"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Alaete"
        },
        "content": "     * Fills a {@code TrendReport} using data from a {@code Model}."
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Alaete"
        },
        "content": "     *"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Alaete"
        },
        "content": "     * @param model Model to be referenced."
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Alaete"
        },
        "content": "     * @param report Report to be filled."
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Alaete"
        },
        "content": "     */"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Alaete"
        },
        "content": "    private void fillIncomeTrendReport(Model model, TrendReport report) {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "Alaete"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "Alaete"
        },
        "content": "        requireNonNull(report);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "Alaete"
        },
        "content": "        ObservableList\u003cTransaction\u003e transactionList \u003d model.getFundBook().getTransactionList();"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "Alaete"
        },
        "content": "        List\u003cData\u003e monthlyIncomeList \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "Alaete"
        },
        "content": "        for (int i \u003d 0; i \u003c 12; i++) {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "Alaete"
        },
        "content": "            Month currentMonth \u003d new Month(Integer.toString(i + 1));"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "Alaete"
        },
        "content": "            List\u003cAmount\u003e currentMonthIncomeList \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "Alaete"
        },
        "content": "            for (Transaction transaction : transactionList) {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "Alaete"
        },
        "content": "                if (transaction.isIn(year) \u0026\u0026 transaction.isIn(currentMonth) \u0026\u0026 !(transaction.isExpenditure())) {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "Alaete"
        },
        "content": "                    currentMonthIncomeList.add(transaction.getAmount());"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "Alaete"
        },
        "content": "                }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "Alaete"
        },
        "content": "            }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "Alaete"
        },
        "content": "            Amount currentMonthIncome \u003d Amount.addAll(currentMonthIncomeList);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "Alaete"
        },
        "content": "            currentMonthIncomeList.add(currentMonthIncome);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "Alaete"
        },
        "content": "            Data currentData \u003d new Data(String.format(REPORT_DESCRIPTION, currentMonth.wordString(), year.toString()),"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "Alaete"
        },
        "content": "                    currentMonthIncome, Optional.of(year),"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "Alaete"
        },
        "content": "                    Optional.of(currentMonth), Optional.empty(), Optional.empty());"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "Alaete"
        },
        "content": "            monthlyIncomeList.add(currentData);"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "Alaete"
        },
        "content": "        }"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "Alaete"
        },
        "content": "        report.fillReport(monthlyIncomeList);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "Alaete"
        },
        "content": "    }"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "Alaete"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "Alaete"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "Alaete"
        },
        "content": "    public CommandResult execute(Model model) {"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "Alaete"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "Alaete"
        },
        "content": "        TrendReport report \u003d createTrendReport(year);"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "Alaete"
        },
        "content": "        fillIncomeTrendReport(model, report);"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "Alaete"
        },
        "content": "        model.updateDataList(report.getTrendList());"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "Alaete"
        },
        "content": "        return new CommandResult(String.format(MESSAGE_SUCCESS, year.toString()));"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "Alaete"
        },
        "content": "    }"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "Alaete"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Alaete": 84
    }
  },
  {
    "path": "src/main/java/seedu/ichifund/logic/commands/analytics/MonthlyExpenditureRankingCommand.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Alaete"
        },
        "content": "package seedu.ichifund.logic.commands.analytics;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Alaete"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Alaete"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Alaete"
        },
        "content": "import static seedu.ichifund.logic.parser.CliSyntax.PREFIX_YEAR;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Alaete"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Alaete"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Alaete"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Alaete"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Alaete"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Alaete"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Alaete"
        },
        "content": "import seedu.ichifund.logic.commands.CommandResult;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Alaete"
        },
        "content": "import seedu.ichifund.model.Model;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Alaete"
        },
        "content": "import seedu.ichifund.model.amount.Amount;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Alaete"
        },
        "content": "import seedu.ichifund.model.analytics.Data;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Alaete"
        },
        "content": "import seedu.ichifund.model.analytics.TrendReport;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Alaete"
        },
        "content": "import seedu.ichifund.model.date.Month;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Alaete"
        },
        "content": "import seedu.ichifund.model.date.Year;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Alaete"
        },
        "content": "import seedu.ichifund.model.transaction.Transaction;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Alaete"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Alaete"
        },
        "content": "/**"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Alaete"
        },
        "content": " * Generates an expenditure trend report."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Alaete"
        },
        "content": " */"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Alaete"
        },
        "content": "public class MonthlyExpenditureRankingCommand extends TrendCommand {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Alaete"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Alaete"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"mthrank\";"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Alaete"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Alaete"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \": Displays expenditure ranking chart by month for the \""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Alaete"
        },
        "content": "            + \"year specified, or current year if year is unspecified.\""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Alaete"
        },
        "content": "            + \"Parameters: \""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Alaete"
        },
        "content": "            + \"[\" + PREFIX_YEAR + \"YEAR] \""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Alaete"
        },
        "content": "            + \"Example: \" + COMMAND_WORD + \" \""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Alaete"
        },
        "content": "            + PREFIX_YEAR + \"2019 \";"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Alaete"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Alaete"
        },
        "content": "    public static final String MESSAGE_SUCCESS \u003d \"Expenditure ranking chart by month for %1$s displayed.\";"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Alaete"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Alaete"
        },
        "content": "    public static final String REPORT_DESCRIPTION \u003d \"Total expenditure for %1$s %2$s\";"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Alaete"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Alaete"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Alaete"
        },
        "content": "     * Constructs a {@code MonthlyExpenditureRankingCommand}."
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Alaete"
        },
        "content": "     *"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Alaete"
        },
        "content": "     * @param year A year."
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Alaete"
        },
        "content": "     */"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Alaete"
        },
        "content": "    public MonthlyExpenditureRankingCommand(Optional\u003cYear\u003e year) {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Alaete"
        },
        "content": "        super(year);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Alaete"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Alaete"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Alaete"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Alaete"
        },
        "content": "     * Fills a {@code TrendReport} using data from a {@code Model}."
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Alaete"
        },
        "content": "     *"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Alaete"
        },
        "content": "     * @param model Model to be referenced."
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Alaete"
        },
        "content": "     * @param report Report to be filled."
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Alaete"
        },
        "content": "     */"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Alaete"
        },
        "content": "    private void fillMonthlyExpenditureRankingReport(Model model, TrendReport report) {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "Alaete"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "Alaete"
        },
        "content": "        requireNonNull(report);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "Alaete"
        },
        "content": "        ObservableList\u003cTransaction\u003e transactionList \u003d model.getFundBook().getTransactionList();"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "Alaete"
        },
        "content": "        List\u003cData\u003e monthlyExpenditureList \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "Alaete"
        },
        "content": "        for (int i \u003d 0; i \u003c 12; i++) {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "Alaete"
        },
        "content": "            Month currentMonth \u003d new Month(Integer.toString(i + 1));"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "Alaete"
        },
        "content": "            List\u003cAmount\u003e currentMonthExpenditureList \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "Alaete"
        },
        "content": "            for (Transaction transaction : transactionList) {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "Alaete"
        },
        "content": "                if (transaction.isIn(year) \u0026\u0026 transaction.isIn(currentMonth) \u0026\u0026 transaction.isExpenditure()) {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "Alaete"
        },
        "content": "                    currentMonthExpenditureList.add(transaction.getAmount());"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "Alaete"
        },
        "content": "                }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "Alaete"
        },
        "content": "            }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "Alaete"
        },
        "content": "            Amount currentMonthExpenditure \u003d Amount.addAll(currentMonthExpenditureList);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "Alaete"
        },
        "content": "            Data currentData \u003d new Data(String.format(REPORT_DESCRIPTION, currentMonth.wordString(), year.toString()),"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "Alaete"
        },
        "content": "                    currentMonthExpenditure, Optional.of(year), Optional.of(currentMonth),"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "Alaete"
        },
        "content": "                    Optional.empty(), Optional.empty());"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "Alaete"
        },
        "content": "            monthlyExpenditureList.add(currentData);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "Alaete"
        },
        "content": "        }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "Alaete"
        },
        "content": "        report.fillReport(monthlyExpenditureList);"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "Alaete"
        },
        "content": "    }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "Alaete"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "Alaete"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "Alaete"
        },
        "content": "    public CommandResult execute(Model model) {"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "Alaete"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "Alaete"
        },
        "content": "        TrendReport report \u003d createTrendReport(year);"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "Alaete"
        },
        "content": "        fillMonthlyExpenditureRankingReport(model, report);"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "Alaete"
        },
        "content": "        model.updateDataList(report.getSortedTrendList());"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "Alaete"
        },
        "content": "        return new CommandResult(String.format(MESSAGE_SUCCESS, year.toString()));"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "Alaete"
        },
        "content": "    }"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "Alaete"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Alaete": 83
    }
  },
  {
    "path": "src/main/java/seedu/ichifund/logic/commands/analytics/TrendCommand.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Alaete"
        },
        "content": "package seedu.ichifund.logic.commands.analytics;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Alaete"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Alaete"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Alaete"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Alaete"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Alaete"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Alaete"
        },
        "content": "import seedu.ichifund.logic.commands.Command;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Alaete"
        },
        "content": "import seedu.ichifund.logic.commands.CommandResult;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Alaete"
        },
        "content": "import seedu.ichifund.model.Model;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Alaete"
        },
        "content": "import seedu.ichifund.model.analytics.TrendReport;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Alaete"
        },
        "content": "import seedu.ichifund.model.date.Year;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Alaete"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Alaete"
        },
        "content": "/**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Alaete"
        },
        "content": " * Represents a report command for expenditure, income or balance trends."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Alaete"
        },
        "content": " */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Alaete"
        },
        "content": "public abstract class TrendCommand extends Command {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Alaete"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Alaete"
        },
        "content": "    protected final Year year;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Alaete"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Alaete"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Alaete"
        },
        "content": "     * Constructs a {@code TrendCommand}."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Alaete"
        },
        "content": "     *"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Alaete"
        },
        "content": "     * @param year A year."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Alaete"
        },
        "content": "     */"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Alaete"
        },
        "content": "    public TrendCommand(Optional\u003cYear\u003e year) {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Alaete"
        },
        "content": "        requireNonNull(year);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Alaete"
        },
        "content": "        this.year \u003d year.orElseGet(Year::getCurrent);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Alaete"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Alaete"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Alaete"
        },
        "content": "    protected TrendReport createTrendReport(Year year) {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Alaete"
        },
        "content": "        requireNonNull(year);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Alaete"
        },
        "content": "        return new TrendReport(year);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Alaete"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Alaete"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Alaete"
        },
        "content": "    public abstract CommandResult execute(Model model);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Alaete"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Alaete": 36
    }
  },
  {
    "path": "src/main/java/seedu/ichifund/logic/commands/budget/AddBudgetCommand.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "nexolute"
        },
        "content": "package seedu.ichifund.logic.commands.budget;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "nexolute"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "nexolute"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "nexolute"
        },
        "content": "import static seedu.ichifund.logic.parser.CliSyntax.PREFIX_AMOUNT;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "nexolute"
        },
        "content": "import static seedu.ichifund.logic.parser.CliSyntax.PREFIX_CATEGORY;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "nexolute"
        },
        "content": "import static seedu.ichifund.logic.parser.CliSyntax.PREFIX_DESCRIPTION;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "nexolute"
        },
        "content": "import static seedu.ichifund.logic.parser.CliSyntax.PREFIX_MONTH;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "nexolute"
        },
        "content": "import static seedu.ichifund.logic.parser.CliSyntax.PREFIX_YEAR;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "nexolute"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "nexolute"
        },
        "content": "import seedu.ichifund.logic.commands.Command;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "nexolute"
        },
        "content": "import seedu.ichifund.logic.commands.CommandResult;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "nexolute"
        },
        "content": "import seedu.ichifund.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "nexolute"
        },
        "content": "import seedu.ichifund.model.Model;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "nexolute"
        },
        "content": "import seedu.ichifund.model.budget.Budget;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "nexolute"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "nexolute"
        },
        "content": "/**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "nexolute"
        },
        "content": " * Adds a budget to IchiFund."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "nexolute"
        },
        "content": " */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "nexolute"
        },
        "content": "public class AddBudgetCommand extends Command {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "nexolute"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"add\";"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "nexolute"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "nexolute"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \": Adds a budget to IchiFund.\\n\""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "nexolute"
        },
        "content": "            + \"Parameters: \""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "nexolute"
        },
        "content": "            + PREFIX_DESCRIPTION + \"DESCRIPTION \""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "nexolute"
        },
        "content": "            + PREFIX_AMOUNT + \"AMOUNT \""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "nexolute"
        },
        "content": "            + \"[\" + PREFIX_CATEGORY + \"CATEGORY] \""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "nexolute"
        },
        "content": "            + \"[\" + PREFIX_MONTH + \"MONTH \""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "nexolute"
        },
        "content": "            + PREFIX_YEAR + \"YEAR]\\n\""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "nexolute"
        },
        "content": "            + \"Example: \""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "nexolute"
        },
        "content": "            + COMMAND_WORD + \" \""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "nexolute"
        },
        "content": "            + PREFIX_DESCRIPTION + \"Saving for my future \""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "nexolute"
        },
        "content": "            + PREFIX_AMOUNT + \"200.00\";"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "nexolute"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "nexolute"
        },
        "content": "    public static final String MESSAGE_SUCCESS \u003d \"New budget added: %1$s\";"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "nexolute"
        },
        "content": "    public static final String MESSAGE_DUPLICATE_BUDGET \u003d \"This budget already exists in IchiFund\";"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "nexolute"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "nexolute"
        },
        "content": "    private final Budget toAdd;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "nexolute"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "nexolute"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "nexolute"
        },
        "content": "     * Creates an AddBudgetCommand to add the specified {@code Budget}"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "nexolute"
        },
        "content": "     */"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "nexolute"
        },
        "content": "    public AddBudgetCommand(Budget budget) {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "nexolute"
        },
        "content": "        requireNonNull(budget);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "nexolute"
        },
        "content": "        toAdd \u003d budget;"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "nexolute"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "nexolute"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "nexolute"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "nexolute"
        },
        "content": "    public CommandResult execute(Model model) throws CommandException {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "nexolute"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "nexolute"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "nexolute"
        },
        "content": "        if (model.hasBudget(toAdd)) {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "nexolute"
        },
        "content": "            throw new CommandException(MESSAGE_DUPLICATE_BUDGET);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "nexolute"
        },
        "content": "        }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "nexolute"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "nexolute"
        },
        "content": "        model.addBudget(toAdd);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "nexolute"
        },
        "content": "        return new CommandResult(String.format(MESSAGE_SUCCESS, toAdd));"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "nexolute"
        },
        "content": "    }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "nexolute"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "nexolute"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "nexolute"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "nexolute"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "nexolute"
        },
        "content": "                || (other instanceof AddBudgetCommand // instanceof handles nulls"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "nexolute"
        },
        "content": "                \u0026\u0026 toAdd.equals(((AddBudgetCommand) other).toAdd));"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "nexolute"
        },
        "content": "    }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "nexolute"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "nexolute": 65,
      "weiyang13": 1
    }
  },
  {
    "path": "src/main/java/seedu/ichifund/logic/commands/budget/DeleteBudgetCommand.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "nexolute"
        },
        "content": "package seedu.ichifund.logic.commands.budget;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "nexolute"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "nexolute"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "nexolute"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "nexolute"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "nexolute"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "nexolute"
        },
        "content": "import seedu.ichifund.commons.core.Messages;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "nexolute"
        },
        "content": "import seedu.ichifund.commons.core.index.Index;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "nexolute"
        },
        "content": "import seedu.ichifund.logic.commands.Command;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "nexolute"
        },
        "content": "import seedu.ichifund.logic.commands.CommandResult;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "nexolute"
        },
        "content": "import seedu.ichifund.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "nexolute"
        },
        "content": "import seedu.ichifund.model.Model;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "nexolute"
        },
        "content": "import seedu.ichifund.model.budget.Budget;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "nexolute"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "nexolute"
        },
        "content": "/**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "nexolute"
        },
        "content": " * Deletes a budget identified using it\u0027s displayed index from the displayed budget list."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "nexolute"
        },
        "content": " */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "nexolute"
        },
        "content": "public class DeleteBudgetCommand extends Command {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "nexolute"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"delete\";"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "nexolute"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "nexolute"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "nexolute"
        },
        "content": "            + \": Deletes the budget identified by the index number used in the displayed budget list.\\n\""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "nexolute"
        },
        "content": "            + \"Parameters: INDEX (must be a positive integer)\\n\""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "nexolute"
        },
        "content": "            + \"Example: \" + COMMAND_WORD + \" 1\";"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "nexolute"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "nexolute"
        },
        "content": "    public static final String MESSAGE_DELETE_BUDGET_SUCCESS \u003d \"Deleted Budget: %1$s\";"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "nexolute"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "nexolute"
        },
        "content": "    private final Index targetIndex;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "nexolute"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "nexolute"
        },
        "content": "    public DeleteBudgetCommand(Index targetIndex) {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "nexolute"
        },
        "content": "        this.targetIndex \u003d targetIndex;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "nexolute"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "nexolute"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "nexolute"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "nexolute"
        },
        "content": "    public CommandResult execute(Model model) throws CommandException {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "nexolute"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "nexolute"
        },
        "content": "        List\u003cBudget\u003e lastShownList \u003d model.getFilteredBudgetList();"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "nexolute"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "nexolute"
        },
        "content": "        if (targetIndex.getZeroBased() \u003e\u003d lastShownList.size()) {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "nexolute"
        },
        "content": "            throw new CommandException(Messages.MESSAGE_INVALID_BUDGET_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "nexolute"
        },
        "content": "        }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "nexolute"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "nexolute"
        },
        "content": "        Budget budgetToDelete \u003d lastShownList.get(targetIndex.getZeroBased());"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "nexolute"
        },
        "content": "        model.deleteBudget(budgetToDelete);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "nexolute"
        },
        "content": "        return new CommandResult(String.format(MESSAGE_DELETE_BUDGET_SUCCESS, budgetToDelete));"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "nexolute"
        },
        "content": "    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "nexolute"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "nexolute"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "nexolute"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "nexolute"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "nexolute"
        },
        "content": "                || (other instanceof DeleteBudgetCommand // instanceof handles nulls"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "nexolute"
        },
        "content": "                \u0026\u0026 targetIndex.equals(((DeleteBudgetCommand) other).targetIndex)); // state check"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "nexolute"
        },
        "content": "    }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "nexolute"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "nexolute": 54,
      "weiyang13": 1
    }
  },
  {
    "path": "src/main/java/seedu/ichifund/logic/commands/budget/FindBudgetCommand.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "nexolute"
        },
        "content": "package seedu.ichifund.logic.commands.budget;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "nexolute"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "nexolute"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "nexolute"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "nexolute"
        },
        "content": "import seedu.ichifund.commons.core.Messages;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "nexolute"
        },
        "content": "import seedu.ichifund.logic.commands.Command;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "nexolute"
        },
        "content": "import seedu.ichifund.logic.commands.CommandResult;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "nexolute"
        },
        "content": "import seedu.ichifund.model.Model;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "nexolute"
        },
        "content": "import seedu.ichifund.model.budget.BudgetDescriptionPredicate;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "nexolute"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "nexolute"
        },
        "content": "/**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "nexolute"
        },
        "content": " * Finds and lists all budgets in fund book whose description contains any of the argument keywords."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "nexolute"
        },
        "content": " * Keyword matching is case insensitive."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "nexolute"
        },
        "content": " */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "nexolute"
        },
        "content": "public class FindBudgetCommand extends Command {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "nexolute"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"find\";"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "nexolute"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "nexolute"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \": Finds all budgets whose descriptions contain\""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "nexolute"
        },
        "content": "            + \"any of the specified keywords (case-insensitive) and displays them as a list with index numbers.\\n\""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "nexolute"
        },
        "content": "            + \"Parameters: KEYWORD [MORE_KEYWORDS]...\\n\""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "nexolute"
        },
        "content": "            + \"Example: \" + COMMAND_WORD + \" food anime\";"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "nexolute"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "nexolute"
        },
        "content": "    private final BudgetDescriptionPredicate predicate;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "nexolute"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "nexolute"
        },
        "content": "    public FindBudgetCommand(BudgetDescriptionPredicate predicate) {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "nexolute"
        },
        "content": "        this.predicate \u003d predicate;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "nexolute"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "nexolute"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "nexolute"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "nexolute"
        },
        "content": "    public CommandResult execute(Model model) {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "nexolute"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "nexolute"
        },
        "content": "        model.updateFilteredBudgetList(predicate);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "nexolute"
        },
        "content": "        return new CommandResult("
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "nexolute"
        },
        "content": "                String.format(Messages.MESSAGE_BUDGETS_LISTED_OVERVIEW, model.getFilteredBudgetList().size()));"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "nexolute"
        },
        "content": "    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "nexolute"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "nexolute"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "nexolute"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "nexolute"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "nexolute"
        },
        "content": "                || (other instanceof FindBudgetCommand // instanceof handles nulls"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "nexolute"
        },
        "content": "                \u0026\u0026 predicate.equals(((FindBudgetCommand) other).predicate)); // state check"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "nexolute"
        },
        "content": "    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "nexolute"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "nexolute": 43,
      "weiyang13": 1
    }
  },
  {
    "path": "src/main/java/seedu/ichifund/logic/commands/exceptions/CommandException.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "nexolute"
        },
        "content": "package seedu.ichifund.logic.commands.exceptions;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "nexolute"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "nexolute"
        },
        "content": "import seedu.ichifund.logic.commands.Command;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": " * Represents an error which occurs during execution of a {@link Command}."
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "public class CommandException extends Exception {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "    public CommandException(String message) {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "        super(message);"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "     * Constructs a new {@code CommandException} with the specified detail {@code message} and {@code cause}."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    public CommandException(String message, Throwable cause) {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "        super(message, cause);"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "nexolute": 3,
      "-": 16
    }
  },
  {
    "path": "src/main/java/seedu/ichifund/logic/commands/repeater/AddRepeaterCommand.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "LeeYiyuan"
        },
        "content": "package seedu.ichifund.logic.commands.repeater;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "LeeYiyuan"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "LeeYiyuan"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "LeeYiyuan"
        },
        "content": "import static seedu.ichifund.logic.parser.CliSyntax.PREFIX_AMOUNT;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "LeeYiyuan"
        },
        "content": "import static seedu.ichifund.logic.parser.CliSyntax.PREFIX_CATEGORY;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "LeeYiyuan"
        },
        "content": "import static seedu.ichifund.logic.parser.CliSyntax.PREFIX_DESCRIPTION;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "LeeYiyuan"
        },
        "content": "import static seedu.ichifund.logic.parser.CliSyntax.PREFIX_END_MONTH;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "LeeYiyuan"
        },
        "content": "import static seedu.ichifund.logic.parser.CliSyntax.PREFIX_END_YEAR;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "LeeYiyuan"
        },
        "content": "import static seedu.ichifund.logic.parser.CliSyntax.PREFIX_MONTH_END_OFFSET;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "LeeYiyuan"
        },
        "content": "import static seedu.ichifund.logic.parser.CliSyntax.PREFIX_MONTH_START_OFFSET;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "LeeYiyuan"
        },
        "content": "import static seedu.ichifund.logic.parser.CliSyntax.PREFIX_START_MONTH;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "LeeYiyuan"
        },
        "content": "import static seedu.ichifund.logic.parser.CliSyntax.PREFIX_START_YEAR;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "LeeYiyuan"
        },
        "content": "import static seedu.ichifund.logic.parser.CliSyntax.PREFIX_TRANSACTION_TYPE;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "LeeYiyuan"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "LeeYiyuan"
        },
        "content": "import seedu.ichifund.logic.commands.Command;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "LeeYiyuan"
        },
        "content": "import seedu.ichifund.logic.commands.CommandResult;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "LeeYiyuan"
        },
        "content": "import seedu.ichifund.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "LeeYiyuan"
        },
        "content": "import seedu.ichifund.model.Model;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "LeeYiyuan"
        },
        "content": "import seedu.ichifund.model.date.Date;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "LeeYiyuan"
        },
        "content": "import seedu.ichifund.model.date.Day;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "LeeYiyuan"
        },
        "content": "import seedu.ichifund.model.date.Month;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "LeeYiyuan"
        },
        "content": "import seedu.ichifund.model.date.Year;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "LeeYiyuan"
        },
        "content": "import seedu.ichifund.model.repeater.Repeater;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "LeeYiyuan"
        },
        "content": "import seedu.ichifund.model.repeater.RepeaterUniqueId;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "LeeYiyuan"
        },
        "content": "import seedu.ichifund.model.transaction.Transaction;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "LeeYiyuan"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "LeeYiyuan"
        },
        "content": "/**"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "LeeYiyuan"
        },
        "content": " * Adds a repeater to IchiFund."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "LeeYiyuan"
        },
        "content": " */"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "LeeYiyuan"
        },
        "content": "public class AddRepeaterCommand extends Command {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "LeeYiyuan"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"add\";"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "LeeYiyuan"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "LeeYiyuan"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \": Adds a repeater to IchiFund. \""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "LeeYiyuan"
        },
        "content": "            + \"Parameters: \""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "LeeYiyuan"
        },
        "content": "            + PREFIX_DESCRIPTION + \"DESCRIPTION \""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "LeeYiyuan"
        },
        "content": "            + PREFIX_AMOUNT + \"AMOUNT \""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "LeeYiyuan"
        },
        "content": "            + PREFIX_CATEGORY + \"CATEGORY \""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "LeeYiyuan"
        },
        "content": "            + PREFIX_TRANSACTION_TYPE + \"TRANSACTION_TYPE \""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "LeeYiyuan"
        },
        "content": "            + PREFIX_MONTH_START_OFFSET + \"MONTH_START_OFFSET \""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "LeeYiyuan"
        },
        "content": "            + PREFIX_MONTH_END_OFFSET + \"MONTH_END_OFFSET \""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "LeeYiyuan"
        },
        "content": "            + PREFIX_START_MONTH + \"START_MONTH \""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "LeeYiyuan"
        },
        "content": "            + PREFIX_START_YEAR + \"START_YEAR \""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "LeeYiyuan"
        },
        "content": "            + PREFIX_END_MONTH + \"END_MONTH \""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "LeeYiyuan"
        },
        "content": "            + PREFIX_END_YEAR + \"END_YEAR \""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "LeeYiyuan"
        },
        "content": "            + \"Example: \" + COMMAND_WORD + \" \""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "LeeYiyuan"
        },
        "content": "            + PREFIX_DESCRIPTION + \"Phone bills \""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "LeeYiyuan"
        },
        "content": "            + PREFIX_AMOUNT + \"42.15 \""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "LeeYiyuan"
        },
        "content": "            + PREFIX_CATEGORY + \"Utilities \""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "LeeYiyuan"
        },
        "content": "            + PREFIX_TRANSACTION_TYPE + \"exp \""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "LeeYiyuan"
        },
        "content": "            + PREFIX_MONTH_START_OFFSET + \"3 \""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "LeeYiyuan"
        },
        "content": "            + PREFIX_MONTH_END_OFFSET + \"2 \""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "LeeYiyuan"
        },
        "content": "            + PREFIX_START_MONTH + \"1 \""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "LeeYiyuan"
        },
        "content": "            + PREFIX_START_YEAR + \"2019 \""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "LeeYiyuan"
        },
        "content": "            + PREFIX_END_MONTH + \"12 \""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "LeeYiyuan"
        },
        "content": "            + PREFIX_END_YEAR + \"2025\";"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "LeeYiyuan"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "LeeYiyuan"
        },
        "content": "    public static final String MESSAGE_ADD_REPEATER_SUCCESS \u003d \"New repeater added: %1$s\";"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "LeeYiyuan"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "LeeYiyuan"
        },
        "content": "    private final Repeater toAdd;"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "LeeYiyuan"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "LeeYiyuan"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "LeeYiyuan"
        },
        "content": "     * Creates an AddCommand to add the specified {@code Repeater}"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "LeeYiyuan"
        },
        "content": "     */"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "LeeYiyuan"
        },
        "content": "    public AddRepeaterCommand(Repeater repeater) {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "LeeYiyuan"
        },
        "content": "        requireNonNull(repeater);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "LeeYiyuan"
        },
        "content": "        toAdd \u003d repeater;"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "LeeYiyuan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "LeeYiyuan"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "LeeYiyuan"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "LeeYiyuan"
        },
        "content": "    public CommandResult execute(Model model) throws CommandException {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "LeeYiyuan"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "LeeYiyuan"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "LeeYiyuan"
        },
        "content": "        // Get current repeater unique id."
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "LeeYiyuan"
        },
        "content": "        RepeaterUniqueId repeaterUniqueId \u003d model.getCurrentRepeaterUniqueId();"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "LeeYiyuan"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "LeeYiyuan"
        },
        "content": "        // Create new repeater."
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "LeeYiyuan"
        },
        "content": "        Repeater newRepeater \u003d new Repeater("
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "LeeYiyuan"
        },
        "content": "                    repeaterUniqueId,"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "LeeYiyuan"
        },
        "content": "                    toAdd.getDescription(), toAdd.getAmount(), toAdd.getCategory(),"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "LeeYiyuan"
        },
        "content": "                    toAdd.getTransactionType(), toAdd.getMonthStartOffset(), toAdd.getMonthEndOffset(),"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "LeeYiyuan"
        },
        "content": "                    toAdd.getStartDate(), toAdd.getEndDate());"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "LeeYiyuan"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "LeeYiyuan"
        },
        "content": "        // Update current repeater unique id."
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "LeeYiyuan"
        },
        "content": "        model.setCurrentRepeaterUniqueId(new RepeaterUniqueId(String.valueOf("
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "LeeYiyuan"
        },
        "content": "                    repeaterUniqueId.id + 1)));"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "LeeYiyuan"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "LeeYiyuan"
        },
        "content": "        // Add repeater."
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "LeeYiyuan"
        },
        "content": "        model.addRepeater(newRepeater);"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "LeeYiyuan"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "LeeYiyuan"
        },
        "content": "        // Create repeater transactions."
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "LeeYiyuan"
        },
        "content": "        createRepeaterTransactions(model, newRepeater);"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "LeeYiyuan"
        },
        "content": ""
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "LeeYiyuan"
        },
        "content": "        return new CommandResult(String.format(MESSAGE_ADD_REPEATER_SUCCESS, toAdd));"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "LeeYiyuan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "LeeYiyuan"
        },
        "content": ""
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "LeeYiyuan"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "LeeYiyuan"
        },
        "content": "     * Creates the transactions associated with the specified {@code Repeater}."
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "LeeYiyuan"
        },
        "content": "     */"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "LeeYiyuan"
        },
        "content": "    private void createRepeaterTransactions(Model model, Repeater repeater) {"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "LeeYiyuan"
        },
        "content": "        int currentMonth \u003d repeater.getStartDate().getMonth().monthNumber;"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "LeeYiyuan"
        },
        "content": "        int currentYear \u003d repeater.getStartDate().getYear().yearNumber;"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "LeeYiyuan"
        },
        "content": "        int endMonth \u003d repeater.getEndDate().getMonth().monthNumber;"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "LeeYiyuan"
        },
        "content": "        int endYear \u003d repeater.getEndDate().getYear().yearNumber;"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "LeeYiyuan"
        },
        "content": ""
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "LeeYiyuan"
        },
        "content": "        while ((currentYear \u003c endYear) || (currentYear \u003d\u003d endYear \u0026\u0026 currentMonth \u003c\u003d endMonth)) {"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "LeeYiyuan"
        },
        "content": "            if (!repeater.getMonthStartOffset().isIgnored()) {"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "LeeYiyuan"
        },
        "content": "                Transaction transaction \u003d new Transaction("
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "LeeYiyuan"
        },
        "content": "                        repeater.getDescription(),"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "LeeYiyuan"
        },
        "content": "                        repeater.getAmount(),"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "LeeYiyuan"
        },
        "content": "                        repeater.getCategory(),"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "LeeYiyuan"
        },
        "content": "                        new Date("
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "LeeYiyuan"
        },
        "content": "                            new Day(repeater.getMonthStartOffset().toString()),"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "LeeYiyuan"
        },
        "content": "                            new Month(String.valueOf(currentMonth)),"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "LeeYiyuan"
        },
        "content": "                            new Year(String.valueOf(currentYear))),"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "LeeYiyuan"
        },
        "content": "                        repeater.getTransactionType(),"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "LeeYiyuan"
        },
        "content": "                        repeater.getUniqueId());"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "LeeYiyuan"
        },
        "content": "                model.addTransaction(transaction);"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "LeeYiyuan"
        },
        "content": "            }"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "LeeYiyuan"
        },
        "content": ""
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "LeeYiyuan"
        },
        "content": "            if (!repeater.getMonthEndOffset().isIgnored()) {"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "LeeYiyuan"
        },
        "content": "                int daysInMonth;"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "LeeYiyuan"
        },
        "content": "                if ((new Month(String.valueOf(currentMonth))).has30Days()) {"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "LeeYiyuan"
        },
        "content": "                    daysInMonth \u003d 30;"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "LeeYiyuan"
        },
        "content": "                } else if ((new Month(String.valueOf(currentMonth))).has31Days()) {"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "LeeYiyuan"
        },
        "content": "                    daysInMonth \u003d 31;"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "LeeYiyuan"
        },
        "content": "                } else if ((new Year(String.valueOf(currentYear))).isLeapYear()) {"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "LeeYiyuan"
        },
        "content": "                    daysInMonth \u003d 29;"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "LeeYiyuan"
        },
        "content": "                } else {"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "LeeYiyuan"
        },
        "content": "                    daysInMonth \u003d 28;"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "LeeYiyuan"
        },
        "content": "                }"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "LeeYiyuan"
        },
        "content": ""
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "LeeYiyuan"
        },
        "content": "                Transaction transaction \u003d new Transaction("
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "LeeYiyuan"
        },
        "content": "                        repeater.getDescription(),"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "LeeYiyuan"
        },
        "content": "                        repeater.getAmount(),"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "LeeYiyuan"
        },
        "content": "                        repeater.getCategory(),"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "LeeYiyuan"
        },
        "content": "                        new Date("
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "LeeYiyuan"
        },
        "content": "                            new Day(String.valueOf(daysInMonth - (repeater.getMonthEndOffset().value - 1))),"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "LeeYiyuan"
        },
        "content": "                            new Month(String.valueOf(currentMonth)),"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "LeeYiyuan"
        },
        "content": "                            new Year(String.valueOf(currentYear))),"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "LeeYiyuan"
        },
        "content": "                        repeater.getTransactionType(),"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "LeeYiyuan"
        },
        "content": "                        repeater.getUniqueId());"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "LeeYiyuan"
        },
        "content": "                model.addTransaction(transaction);"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "LeeYiyuan"
        },
        "content": "            }"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "LeeYiyuan"
        },
        "content": ""
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "LeeYiyuan"
        },
        "content": "            currentMonth++;"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "LeeYiyuan"
        },
        "content": "            if (currentMonth \u003d\u003d 12) {"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "LeeYiyuan"
        },
        "content": "                currentMonth \u003d 1;"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "LeeYiyuan"
        },
        "content": "                currentYear++;"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "LeeYiyuan"
        },
        "content": "            }"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "LeeYiyuan"
        },
        "content": "        }"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "LeeYiyuan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "LeeYiyuan"
        },
        "content": ""
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "LeeYiyuan"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "LeeYiyuan"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "LeeYiyuan"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "LeeYiyuan"
        },
        "content": "                || (other instanceof AddRepeaterCommand // instanceof handles nulls"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "LeeYiyuan"
        },
        "content": "                \u0026\u0026 toAdd.equals(((AddRepeaterCommand) other).toAdd));"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "LeeYiyuan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "LeeYiyuan"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "LeeYiyuan": 159,
      "weiyang13": 1
    }
  },
  {
    "path": "src/main/java/seedu/ichifund/logic/commands/repeater/DeleteRepeaterCommand.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "LeeYiyuan"
        },
        "content": "package seedu.ichifund.logic.commands.repeater;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "LeeYiyuan"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "LeeYiyuan"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "LeeYiyuan"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "LeeYiyuan"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "LeeYiyuan"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "LeeYiyuan"
        },
        "content": "import seedu.ichifund.commons.core.Messages;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "LeeYiyuan"
        },
        "content": "import seedu.ichifund.commons.core.index.Index;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "LeeYiyuan"
        },
        "content": "import seedu.ichifund.logic.commands.Command;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "LeeYiyuan"
        },
        "content": "import seedu.ichifund.logic.commands.CommandResult;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "LeeYiyuan"
        },
        "content": "import seedu.ichifund.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "LeeYiyuan"
        },
        "content": "import seedu.ichifund.model.Model;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "LeeYiyuan"
        },
        "content": "import seedu.ichifund.model.repeater.Repeater;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "LeeYiyuan"
        },
        "content": "import seedu.ichifund.model.repeater.RepeaterUniqueId;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "LeeYiyuan"
        },
        "content": "import seedu.ichifund.model.transaction.Transaction;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "LeeYiyuan"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "LeeYiyuan"
        },
        "content": "/**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "LeeYiyuan"
        },
        "content": " * Deletes a repeater identified using it\u0027s displayed index."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "LeeYiyuan"
        },
        "content": " */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "LeeYiyuan"
        },
        "content": "public class DeleteRepeaterCommand extends Command {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "LeeYiyuan"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"del\";"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "LeeYiyuan"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "LeeYiyuan"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "LeeYiyuan"
        },
        "content": "            + \": Deletes the repeater identified by the index number used in the displayed repeater list.\\n\""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "LeeYiyuan"
        },
        "content": "            + \"Parameters: INDEX (must be a positive integer)\\n\""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "LeeYiyuan"
        },
        "content": "            + \"Example: \" + COMMAND_WORD + \" 1\";"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "LeeYiyuan"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "LeeYiyuan"
        },
        "content": "    public static final String MESSAGE_DELETE_REPEATER_SUCCESS \u003d \"Deleted Repeater: %1$s\";"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "LeeYiyuan"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "LeeYiyuan"
        },
        "content": "    private final Index targetIndex;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "LeeYiyuan"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "LeeYiyuan"
        },
        "content": "    public DeleteRepeaterCommand(Index targetIndex) {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "LeeYiyuan"
        },
        "content": "        this.targetIndex \u003d targetIndex;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "LeeYiyuan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "LeeYiyuan"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "LeeYiyuan"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "LeeYiyuan"
        },
        "content": "    public CommandResult execute(Model model) throws CommandException {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "LeeYiyuan"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "LeeYiyuan"
        },
        "content": "        List\u003cRepeater\u003e lastShownList \u003d model.getFilteredRepeaterList();"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "LeeYiyuan"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "LeeYiyuan"
        },
        "content": "        if (targetIndex.getZeroBased() \u003e\u003d lastShownList.size()) {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "LeeYiyuan"
        },
        "content": "            throw new CommandException(Messages.MESSAGE_INVALID_REPEATER_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "LeeYiyuan"
        },
        "content": "        }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "LeeYiyuan"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "LeeYiyuan"
        },
        "content": "        Repeater repeaterToDelete \u003d lastShownList.get(targetIndex.getZeroBased());"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "LeeYiyuan"
        },
        "content": "        deleteRepeaterTransactions(model, repeaterToDelete.getUniqueId());"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "LeeYiyuan"
        },
        "content": "        model.deleteRepeater(repeaterToDelete);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "LeeYiyuan"
        },
        "content": "        return new CommandResult(String.format(MESSAGE_DELETE_REPEATER_SUCCESS, repeaterToDelete));"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "LeeYiyuan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "LeeYiyuan"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "LeeYiyuan"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "LeeYiyuan"
        },
        "content": "     * Deletes all transactions associated with the specified {@code RepeaterUniqueId}."
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "LeeYiyuan"
        },
        "content": "     */"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "LeeYiyuan"
        },
        "content": "    private void deleteRepeaterTransactions(Model model, RepeaterUniqueId repeaterUniqueId) {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "LeeYiyuan"
        },
        "content": "        for (Transaction transaction : model.getAssociatedTransactions(repeaterUniqueId)) {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "LeeYiyuan"
        },
        "content": "            model.deleteTransaction(transaction);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "LeeYiyuan"
        },
        "content": "        }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "LeeYiyuan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "LeeYiyuan"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "LeeYiyuan"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "LeeYiyuan"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "LeeYiyuan"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "LeeYiyuan"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "LeeYiyuan"
        },
        "content": "                || (other instanceof DeleteRepeaterCommand // instanceof handles nulls"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "LeeYiyuan"
        },
        "content": "                \u0026\u0026 targetIndex.equals(((DeleteRepeaterCommand) other).targetIndex)); // state check"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "LeeYiyuan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "LeeYiyuan"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "LeeYiyuan": 67,
      "weiyang13": 1
    }
  },
  {
    "path": "src/main/java/seedu/ichifund/logic/commands/repeater/EditRepeaterCommand.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "LeeYiyuan"
        },
        "content": "package seedu.ichifund.logic.commands.repeater;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "LeeYiyuan"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "LeeYiyuan"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "LeeYiyuan"
        },
        "content": "import static seedu.ichifund.commons.util.CollectionUtil.isAnyNonNull;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "LeeYiyuan"
        },
        "content": "import static seedu.ichifund.logic.parser.CliSyntax.PREFIX_AMOUNT;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "LeeYiyuan"
        },
        "content": "import static seedu.ichifund.logic.parser.CliSyntax.PREFIX_CATEGORY;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "LeeYiyuan"
        },
        "content": "import static seedu.ichifund.logic.parser.CliSyntax.PREFIX_DESCRIPTION;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "LeeYiyuan"
        },
        "content": "import static seedu.ichifund.logic.parser.CliSyntax.PREFIX_END_MONTH;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "LeeYiyuan"
        },
        "content": "import static seedu.ichifund.logic.parser.CliSyntax.PREFIX_END_YEAR;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "LeeYiyuan"
        },
        "content": "import static seedu.ichifund.logic.parser.CliSyntax.PREFIX_MONTH_END_OFFSET;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "LeeYiyuan"
        },
        "content": "import static seedu.ichifund.logic.parser.CliSyntax.PREFIX_MONTH_START_OFFSET;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "LeeYiyuan"
        },
        "content": "import static seedu.ichifund.logic.parser.CliSyntax.PREFIX_START_MONTH;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "LeeYiyuan"
        },
        "content": "import static seedu.ichifund.logic.parser.CliSyntax.PREFIX_START_YEAR;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "LeeYiyuan"
        },
        "content": "import static seedu.ichifund.logic.parser.CliSyntax.PREFIX_TRANSACTION_TYPE;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "LeeYiyuan"
        },
        "content": "import static seedu.ichifund.model.Model.PREDICATE_SHOW_ALL_REPEATERS;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "LeeYiyuan"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "LeeYiyuan"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "LeeYiyuan"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "LeeYiyuan"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "LeeYiyuan"
        },
        "content": "import seedu.ichifund.commons.core.Messages;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "LeeYiyuan"
        },
        "content": "import seedu.ichifund.commons.core.index.Index;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "LeeYiyuan"
        },
        "content": "import seedu.ichifund.logic.commands.Command;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "LeeYiyuan"
        },
        "content": "import seedu.ichifund.logic.commands.CommandResult;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "LeeYiyuan"
        },
        "content": "import seedu.ichifund.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "LeeYiyuan"
        },
        "content": "import seedu.ichifund.model.Description;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "LeeYiyuan"
        },
        "content": "import seedu.ichifund.model.Model;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "LeeYiyuan"
        },
        "content": "import seedu.ichifund.model.amount.Amount;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "LeeYiyuan"
        },
        "content": "import seedu.ichifund.model.date.Date;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "LeeYiyuan"
        },
        "content": "import seedu.ichifund.model.date.Day;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "LeeYiyuan"
        },
        "content": "import seedu.ichifund.model.date.Month;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "LeeYiyuan"
        },
        "content": "import seedu.ichifund.model.date.Year;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "LeeYiyuan"
        },
        "content": "import seedu.ichifund.model.repeater.MonthOffset;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "LeeYiyuan"
        },
        "content": "import seedu.ichifund.model.repeater.Repeater;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "LeeYiyuan"
        },
        "content": "import seedu.ichifund.model.repeater.RepeaterUniqueId;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "LeeYiyuan"
        },
        "content": "import seedu.ichifund.model.transaction.Category;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "LeeYiyuan"
        },
        "content": "import seedu.ichifund.model.transaction.Transaction;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "LeeYiyuan"
        },
        "content": "import seedu.ichifund.model.transaction.TransactionType;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "LeeYiyuan"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "LeeYiyuan"
        },
        "content": "/**"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "LeeYiyuan"
        },
        "content": " * Edits a repeater in IchiFund."
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "LeeYiyuan"
        },
        "content": " */"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "LeeYiyuan"
        },
        "content": "public class EditRepeaterCommand extends Command {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "LeeYiyuan"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"edit\";"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "LeeYiyuan"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "LeeYiyuan"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \": Edits a repeater to IchiFund. \""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "LeeYiyuan"
        },
        "content": "            + \"Parameters: \""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "LeeYiyuan"
        },
        "content": "            + \"INDEX (must be a positive integer) \""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "LeeYiyuan"
        },
        "content": "            + PREFIX_DESCRIPTION + \"DESCRIPTION \""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "LeeYiyuan"
        },
        "content": "            + PREFIX_AMOUNT + \"AMOUNT \""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "LeeYiyuan"
        },
        "content": "            + PREFIX_CATEGORY + \"CATEGORY \""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "LeeYiyuan"
        },
        "content": "            + PREFIX_TRANSACTION_TYPE + \"TRANSACTION_TYPE \""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "LeeYiyuan"
        },
        "content": "            + PREFIX_MONTH_START_OFFSET + \"MONTH_START_OFFSET \""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "LeeYiyuan"
        },
        "content": "            + PREFIX_MONTH_END_OFFSET + \"MONTH_END_OFFSET \""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "LeeYiyuan"
        },
        "content": "            + PREFIX_START_MONTH + \"START_MONTH \""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "LeeYiyuan"
        },
        "content": "            + PREFIX_START_YEAR + \"START_YEAR \""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "LeeYiyuan"
        },
        "content": "            + PREFIX_END_MONTH + \"END_MONTH \""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "LeeYiyuan"
        },
        "content": "            + PREFIX_END_YEAR + \"END_YEAR \""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "LeeYiyuan"
        },
        "content": "            + \"Example: \" + COMMAND_WORD + \" 1 \""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "LeeYiyuan"
        },
        "content": "            + PREFIX_DESCRIPTION + \"Potato money \""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "LeeYiyuan"
        },
        "content": "            + PREFIX_AMOUNT + \"31.34 \""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "LeeYiyuan"
        },
        "content": "            + PREFIX_CATEGORY + \"Food \""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "LeeYiyuan"
        },
        "content": "            + PREFIX_TRANSACTION_TYPE + \"in \""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "LeeYiyuan"
        },
        "content": "            + PREFIX_MONTH_START_OFFSET + \"1 \""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "LeeYiyuan"
        },
        "content": "            + PREFIX_MONTH_END_OFFSET + \"2 \""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "LeeYiyuan"
        },
        "content": "            + PREFIX_START_MONTH + \"1 \""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "LeeYiyuan"
        },
        "content": "            + PREFIX_START_YEAR + \"2019 \""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "LeeYiyuan"
        },
        "content": "            + PREFIX_END_MONTH + \"12 \""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "LeeYiyuan"
        },
        "content": "            + PREFIX_END_YEAR + \"2020\";"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "LeeYiyuan"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "LeeYiyuan"
        },
        "content": "    public static final String MESSAGE_EDIT_REPEATER_SUCCESS \u003d \"Edited repeater: %1$s\";"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "LeeYiyuan"
        },
        "content": "    public static final String MESSAGE_NOT_EDITED \u003d \"At least one field to edit must be provided.\";"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "LeeYiyuan"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "LeeYiyuan"
        },
        "content": "    private final Index index;"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "LeeYiyuan"
        },
        "content": "    private final EditRepeaterDescriptor editRepeaterDescriptor;"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "LeeYiyuan"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "LeeYiyuan"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "LeeYiyuan"
        },
        "content": "     * Creates an EditRepeaterCommand to edit the specified {@code Repeater}"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "LeeYiyuan"
        },
        "content": "     */"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "LeeYiyuan"
        },
        "content": "    public EditRepeaterCommand(Index index, EditRepeaterDescriptor editRepeaterDescriptor) {"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "LeeYiyuan"
        },
        "content": "        requireNonNull(index);"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "LeeYiyuan"
        },
        "content": "        requireNonNull(editRepeaterDescriptor);"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "LeeYiyuan"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "LeeYiyuan"
        },
        "content": "        this.index \u003d index;"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "LeeYiyuan"
        },
        "content": "        this.editRepeaterDescriptor \u003d editRepeaterDescriptor;"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "LeeYiyuan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "LeeYiyuan"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "LeeYiyuan"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "LeeYiyuan"
        },
        "content": "    public CommandResult execute(Model model) throws CommandException {"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "LeeYiyuan"
        },
        "content": "        List\u003cRepeater\u003e lastShownList \u003d model.getFilteredRepeaterList();"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "LeeYiyuan"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "LeeYiyuan"
        },
        "content": "        if (index.getZeroBased() \u003e\u003d lastShownList.size()) {"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "LeeYiyuan"
        },
        "content": "            throw new CommandException(Messages.MESSAGE_INVALID_REPEATER_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "LeeYiyuan"
        },
        "content": "        }"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "LeeYiyuan"
        },
        "content": ""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "LeeYiyuan"
        },
        "content": "        Repeater repeaterToEdit \u003d lastShownList.get(index.getZeroBased());"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "LeeYiyuan"
        },
        "content": ""
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "LeeYiyuan"
        },
        "content": "        RepeaterUniqueId updatedUniqueId \u003d repeaterToEdit.getUniqueId();"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "LeeYiyuan"
        },
        "content": "        Description updatedDescription \u003d editRepeaterDescriptor.getDescription()"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "LeeYiyuan"
        },
        "content": "                .orElse(repeaterToEdit.getDescription());"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "LeeYiyuan"
        },
        "content": "        Amount updatedAmount \u003d editRepeaterDescriptor.getAmount()"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "LeeYiyuan"
        },
        "content": "                .orElse(repeaterToEdit.getAmount());"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "LeeYiyuan"
        },
        "content": "        Category updatedCategory \u003d editRepeaterDescriptor.getCategory()"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "LeeYiyuan"
        },
        "content": "                .orElse(repeaterToEdit.getCategory());"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "LeeYiyuan"
        },
        "content": "        TransactionType updatedTransactionType \u003d editRepeaterDescriptor.getTransactionType()"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "LeeYiyuan"
        },
        "content": "                .orElse(repeaterToEdit.getTransactionType());"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "LeeYiyuan"
        },
        "content": "        MonthOffset updatedMonthStartOffset \u003d editRepeaterDescriptor.getMonthStartOffset()"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "LeeYiyuan"
        },
        "content": "                .orElse(repeaterToEdit.getMonthStartOffset());"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "LeeYiyuan"
        },
        "content": "        MonthOffset updatedMonthEndOffset \u003d editRepeaterDescriptor.getMonthEndOffset()"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "LeeYiyuan"
        },
        "content": "                .orElse(repeaterToEdit.getMonthEndOffset());"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "LeeYiyuan"
        },
        "content": "        Date updatedStartDate \u003d editRepeaterDescriptor.getStartDate()"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "LeeYiyuan"
        },
        "content": "                .orElse(repeaterToEdit.getStartDate());"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "LeeYiyuan"
        },
        "content": "        Date updatedEndDate \u003d editRepeaterDescriptor.getEndDate()"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "LeeYiyuan"
        },
        "content": "                .orElse(repeaterToEdit.getEndDate());"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "LeeYiyuan"
        },
        "content": ""
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "LeeYiyuan"
        },
        "content": "        Repeater editedRepeater \u003d new Repeater(updatedUniqueId, updatedDescription, updatedAmount,"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "LeeYiyuan"
        },
        "content": "                updatedCategory, updatedTransactionType,"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "LeeYiyuan"
        },
        "content": "                updatedMonthStartOffset, updatedMonthEndOffset, updatedStartDate, updatedEndDate);"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "LeeYiyuan"
        },
        "content": ""
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "LeeYiyuan"
        },
        "content": "        model.setRepeater(repeaterToEdit, editedRepeater);"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "LeeYiyuan"
        },
        "content": "        model.updateFilteredRepeaterList(PREDICATE_SHOW_ALL_REPEATERS);"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "LeeYiyuan"
        },
        "content": ""
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "LeeYiyuan"
        },
        "content": "        deleteRepeaterTransactions(model, editedRepeater.getUniqueId());"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "LeeYiyuan"
        },
        "content": "        createRepeaterTransactions(model, editedRepeater);"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "LeeYiyuan"
        },
        "content": ""
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "LeeYiyuan"
        },
        "content": "        return new CommandResult(String.format(MESSAGE_EDIT_REPEATER_SUCCESS, editedRepeater));"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "LeeYiyuan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "LeeYiyuan"
        },
        "content": ""
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "LeeYiyuan"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "LeeYiyuan"
        },
        "content": "     * Deletes all transactions associated with the specified {@code RepeaterUniqueId}."
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "LeeYiyuan"
        },
        "content": "     */"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "LeeYiyuan"
        },
        "content": "    private void deleteRepeaterTransactions(Model model, RepeaterUniqueId repeaterUniqueId) {"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "LeeYiyuan"
        },
        "content": "        for (Transaction transaction : model.getAssociatedTransactions(repeaterUniqueId)) {"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "LeeYiyuan"
        },
        "content": "            model.deleteTransaction(transaction);"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "LeeYiyuan"
        },
        "content": "        }"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "LeeYiyuan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "LeeYiyuan"
        },
        "content": ""
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "LeeYiyuan"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "LeeYiyuan"
        },
        "content": "     * Creates the transactions associated with the specified {@code Repeater}."
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "LeeYiyuan"
        },
        "content": "     */"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "LeeYiyuan"
        },
        "content": "    private void createRepeaterTransactions(Model model, Repeater repeater) {"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "LeeYiyuan"
        },
        "content": "        int currentMonth \u003d repeater.getStartDate().getMonth().monthNumber;"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "LeeYiyuan"
        },
        "content": "        int currentYear \u003d repeater.getStartDate().getYear().yearNumber;"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "LeeYiyuan"
        },
        "content": "        int endMonth \u003d repeater.getEndDate().getMonth().monthNumber;"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "LeeYiyuan"
        },
        "content": "        int endYear \u003d repeater.getEndDate().getYear().yearNumber;"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "LeeYiyuan"
        },
        "content": ""
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "LeeYiyuan"
        },
        "content": "        while ((currentYear \u003c endYear) || (currentYear \u003d\u003d endYear \u0026\u0026 currentMonth \u003c\u003d endMonth)) {"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "LeeYiyuan"
        },
        "content": "            if (!repeater.getMonthStartOffset().isIgnored()) {"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "LeeYiyuan"
        },
        "content": "                Transaction transaction \u003d new Transaction("
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "LeeYiyuan"
        },
        "content": "                        repeater.getDescription(),"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "LeeYiyuan"
        },
        "content": "                        repeater.getAmount(),"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "LeeYiyuan"
        },
        "content": "                        repeater.getCategory(),"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "LeeYiyuan"
        },
        "content": "                        new Date("
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "LeeYiyuan"
        },
        "content": "                            new Day(repeater.getMonthStartOffset().toString()),"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "LeeYiyuan"
        },
        "content": "                            new Month(String.valueOf(currentMonth)),"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "LeeYiyuan"
        },
        "content": "                            new Year(String.valueOf(currentYear))),"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "LeeYiyuan"
        },
        "content": "                        repeater.getTransactionType(),"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "LeeYiyuan"
        },
        "content": "                        repeater.getUniqueId());"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "LeeYiyuan"
        },
        "content": "                model.addTransaction(transaction);"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "LeeYiyuan"
        },
        "content": "            }"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "LeeYiyuan"
        },
        "content": ""
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "LeeYiyuan"
        },
        "content": "            if (!repeater.getMonthEndOffset().isIgnored()) {"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "LeeYiyuan"
        },
        "content": "                int daysInMonth;"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "LeeYiyuan"
        },
        "content": "                if ((new Month(String.valueOf(currentMonth))).has30Days()) {"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "LeeYiyuan"
        },
        "content": "                    daysInMonth \u003d 30;"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "LeeYiyuan"
        },
        "content": "                } else if ((new Month(String.valueOf(currentMonth))).has31Days()) {"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "LeeYiyuan"
        },
        "content": "                    daysInMonth \u003d 31;"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "LeeYiyuan"
        },
        "content": "                } else if ((new Year(String.valueOf(currentYear))).isLeapYear()) {"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "LeeYiyuan"
        },
        "content": "                    daysInMonth \u003d 29;"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "LeeYiyuan"
        },
        "content": "                } else {"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "LeeYiyuan"
        },
        "content": "                    daysInMonth \u003d 28;"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "LeeYiyuan"
        },
        "content": "                }"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "LeeYiyuan"
        },
        "content": ""
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "LeeYiyuan"
        },
        "content": "                Transaction transaction \u003d new Transaction("
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "LeeYiyuan"
        },
        "content": "                        repeater.getDescription(),"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "LeeYiyuan"
        },
        "content": "                        repeater.getAmount(),"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "LeeYiyuan"
        },
        "content": "                        repeater.getCategory(),"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "LeeYiyuan"
        },
        "content": "                        new Date("
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "LeeYiyuan"
        },
        "content": "                            new Day(String.valueOf(daysInMonth - (repeater.getMonthStartOffset().value - 1))),"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "LeeYiyuan"
        },
        "content": "                            new Month(String.valueOf(currentMonth)),"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "LeeYiyuan"
        },
        "content": "                            new Year(String.valueOf(currentYear))),"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "LeeYiyuan"
        },
        "content": "                        repeater.getTransactionType(),"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "LeeYiyuan"
        },
        "content": "                        repeater.getUniqueId());"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "LeeYiyuan"
        },
        "content": "                model.addTransaction(transaction);"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "LeeYiyuan"
        },
        "content": "            }"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "LeeYiyuan"
        },
        "content": ""
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "LeeYiyuan"
        },
        "content": "            currentMonth++;"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "LeeYiyuan"
        },
        "content": "            if (currentMonth \u003d\u003d 12) {"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "LeeYiyuan"
        },
        "content": "                currentMonth \u003d 1;"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "LeeYiyuan"
        },
        "content": "                currentYear++;"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "LeeYiyuan"
        },
        "content": "            }"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "LeeYiyuan"
        },
        "content": "        }"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "LeeYiyuan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "LeeYiyuan"
        },
        "content": ""
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "LeeYiyuan"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "LeeYiyuan"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "LeeYiyuan"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "LeeYiyuan"
        },
        "content": "                || (other instanceof EditRepeaterCommand // instanceof handles nulls"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "LeeYiyuan"
        },
        "content": "                \u0026\u0026 editRepeaterDescriptor.equals(((EditRepeaterCommand) other).editRepeaterDescriptor));"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "LeeYiyuan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "LeeYiyuan"
        },
        "content": ""
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "LeeYiyuan"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "LeeYiyuan"
        },
        "content": "     * Stores the details to edit the repeater with. Each non-empty field value will replace the"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "LeeYiyuan"
        },
        "content": "     * corresponding field value of the repeater."
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "LeeYiyuan"
        },
        "content": "     */"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "LeeYiyuan"
        },
        "content": "    public static class EditRepeaterDescriptor {"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "LeeYiyuan"
        },
        "content": "        private Description description;"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "LeeYiyuan"
        },
        "content": "        private Amount amount;"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "LeeYiyuan"
        },
        "content": "        private Category category;"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "LeeYiyuan"
        },
        "content": "        private TransactionType transactionType;"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "LeeYiyuan"
        },
        "content": "        private MonthOffset monthStartOffset;"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "LeeYiyuan"
        },
        "content": "        private MonthOffset monthEndOffset;"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "LeeYiyuan"
        },
        "content": "        private Date startDate;"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "LeeYiyuan"
        },
        "content": "        private Date endDate;"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "LeeYiyuan"
        },
        "content": ""
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "LeeYiyuan"
        },
        "content": "        public EditRepeaterDescriptor() {}"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "LeeYiyuan"
        },
        "content": ""
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "LeeYiyuan"
        },
        "content": "        /**"
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "LeeYiyuan"
        },
        "content": "         * Copy constructor."
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "LeeYiyuan"
        },
        "content": "         */"
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "LeeYiyuan"
        },
        "content": "        public EditRepeaterDescriptor(EditRepeaterDescriptor toCopy) {"
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "LeeYiyuan"
        },
        "content": "            setDescription(toCopy.description);"
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "LeeYiyuan"
        },
        "content": "            setAmount(toCopy.amount);"
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "LeeYiyuan"
        },
        "content": "            setCategory(toCopy.category);"
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "LeeYiyuan"
        },
        "content": "            setTransactionType(toCopy.transactionType);"
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "LeeYiyuan"
        },
        "content": "            setMonthStartOffset(toCopy.monthStartOffset);"
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "LeeYiyuan"
        },
        "content": "            setMonthEndOffset(toCopy.monthEndOffset);"
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "LeeYiyuan"
        },
        "content": "            setStartDate(toCopy.startDate);"
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "LeeYiyuan"
        },
        "content": "            setEndDate(toCopy.endDate);"
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "LeeYiyuan"
        },
        "content": "        }"
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "LeeYiyuan"
        },
        "content": ""
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "LeeYiyuan"
        },
        "content": "        /**"
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "LeeYiyuan"
        },
        "content": "         * Returns true if at least one field is edited."
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "LeeYiyuan"
        },
        "content": "         */"
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "LeeYiyuan"
        },
        "content": "        public boolean isAnyFieldEdited() {"
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "LeeYiyuan"
        },
        "content": "            return isAnyNonNull(description, amount, category, transactionType,"
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "LeeYiyuan"
        },
        "content": "                    monthStartOffset, monthEndOffset, startDate, endDate);"
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "LeeYiyuan"
        },
        "content": "        }"
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "LeeYiyuan"
        },
        "content": ""
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "LeeYiyuan"
        },
        "content": "        public void setDescription(Description description) {"
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "LeeYiyuan"
        },
        "content": "            this.description \u003d description;"
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "LeeYiyuan"
        },
        "content": "        }"
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "LeeYiyuan"
        },
        "content": ""
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "LeeYiyuan"
        },
        "content": "        public Optional\u003cDescription\u003e getDescription() {"
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "LeeYiyuan"
        },
        "content": "            return Optional.ofNullable(description);"
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "LeeYiyuan"
        },
        "content": "        }"
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "LeeYiyuan"
        },
        "content": ""
      },
      {
        "lineNumber": 248,
        "author": {
          "gitId": "LeeYiyuan"
        },
        "content": "        public void setAmount(Amount amount) {"
      },
      {
        "lineNumber": 249,
        "author": {
          "gitId": "LeeYiyuan"
        },
        "content": "            this.amount \u003d amount;"
      },
      {
        "lineNumber": 250,
        "author": {
          "gitId": "LeeYiyuan"
        },
        "content": "        }"
      },
      {
        "lineNumber": 251,
        "author": {
          "gitId": "LeeYiyuan"
        },
        "content": ""
      },
      {
        "lineNumber": 252,
        "author": {
          "gitId": "LeeYiyuan"
        },
        "content": "        public Optional\u003cAmount\u003e getAmount() {"
      },
      {
        "lineNumber": 253,
        "author": {
          "gitId": "LeeYiyuan"
        },
        "content": "            return Optional.ofNullable(amount);"
      },
      {
        "lineNumber": 254,
        "author": {
          "gitId": "LeeYiyuan"
        },
        "content": "        }"
      },
      {
        "lineNumber": 255,
        "author": {
          "gitId": "LeeYiyuan"
        },
        "content": ""
      },
      {
        "lineNumber": 256,
        "author": {
          "gitId": "LeeYiyuan"
        },
        "content": "        public void setCategory(Category category) {"
      },
      {
        "lineNumber": 257,
        "author": {
          "gitId": "LeeYiyuan"
        },
        "content": "            this.category \u003d category;"
      },
      {
        "lineNumber": 258,
        "author": {
          "gitId": "LeeYiyuan"
        },
        "content": "        }"
      },
      {
        "lineNumber": 259,
        "author": {
          "gitId": "LeeYiyuan"
        },
        "content": ""
      },
      {
        "lineNumber": 260,
        "author": {
          "gitId": "LeeYiyuan"
        },
        "content": "        public Optional\u003cCategory\u003e getCategory() {"
      },
      {
        "lineNumber": 261,
        "author": {
          "gitId": "LeeYiyuan"
        },
        "content": "            return Optional.ofNullable(category);"
      },
      {
        "lineNumber": 262,
        "author": {
          "gitId": "LeeYiyuan"
        },
        "content": "        }"
      },
      {
        "lineNumber": 263,
        "author": {
          "gitId": "LeeYiyuan"
        },
        "content": ""
      },
      {
        "lineNumber": 264,
        "author": {
          "gitId": "LeeYiyuan"
        },
        "content": "        public void setTransactionType(TransactionType transactionType) {"
      },
      {
        "lineNumber": 265,
        "author": {
          "gitId": "LeeYiyuan"
        },
        "content": "            this.transactionType \u003d transactionType;"
      },
      {
        "lineNumber": 266,
        "author": {
          "gitId": "LeeYiyuan"
        },
        "content": "        }"
      },
      {
        "lineNumber": 267,
        "author": {
          "gitId": "LeeYiyuan"
        },
        "content": ""
      },
      {
        "lineNumber": 268,
        "author": {
          "gitId": "LeeYiyuan"
        },
        "content": "        public Optional\u003cTransactionType\u003e getTransactionType() {"
      },
      {
        "lineNumber": 269,
        "author": {
          "gitId": "LeeYiyuan"
        },
        "content": "            return Optional.ofNullable(transactionType);"
      },
      {
        "lineNumber": 270,
        "author": {
          "gitId": "LeeYiyuan"
        },
        "content": "        }"
      },
      {
        "lineNumber": 271,
        "author": {
          "gitId": "LeeYiyuan"
        },
        "content": ""
      },
      {
        "lineNumber": 272,
        "author": {
          "gitId": "LeeYiyuan"
        },
        "content": "        public void setMonthStartOffset(MonthOffset monthStartOffset) {"
      },
      {
        "lineNumber": 273,
        "author": {
          "gitId": "LeeYiyuan"
        },
        "content": "            this.monthStartOffset \u003d monthStartOffset;"
      },
      {
        "lineNumber": 274,
        "author": {
          "gitId": "LeeYiyuan"
        },
        "content": "        }"
      },
      {
        "lineNumber": 275,
        "author": {
          "gitId": "LeeYiyuan"
        },
        "content": ""
      },
      {
        "lineNumber": 276,
        "author": {
          "gitId": "LeeYiyuan"
        },
        "content": "        public Optional\u003cMonthOffset\u003e getMonthStartOffset() {"
      },
      {
        "lineNumber": 277,
        "author": {
          "gitId": "LeeYiyuan"
        },
        "content": "            return Optional.ofNullable(monthStartOffset);"
      },
      {
        "lineNumber": 278,
        "author": {
          "gitId": "LeeYiyuan"
        },
        "content": "        }"
      },
      {
        "lineNumber": 279,
        "author": {
          "gitId": "LeeYiyuan"
        },
        "content": ""
      },
      {
        "lineNumber": 280,
        "author": {
          "gitId": "LeeYiyuan"
        },
        "content": "        public void setMonthEndOffset(MonthOffset monthEndOffset) {"
      },
      {
        "lineNumber": 281,
        "author": {
          "gitId": "LeeYiyuan"
        },
        "content": "            this.monthEndOffset \u003d monthEndOffset;"
      },
      {
        "lineNumber": 282,
        "author": {
          "gitId": "LeeYiyuan"
        },
        "content": "        }"
      },
      {
        "lineNumber": 283,
        "author": {
          "gitId": "LeeYiyuan"
        },
        "content": ""
      },
      {
        "lineNumber": 284,
        "author": {
          "gitId": "LeeYiyuan"
        },
        "content": "        public Optional\u003cMonthOffset\u003e getMonthEndOffset() {"
      },
      {
        "lineNumber": 285,
        "author": {
          "gitId": "LeeYiyuan"
        },
        "content": "            return Optional.ofNullable(monthEndOffset);"
      },
      {
        "lineNumber": 286,
        "author": {
          "gitId": "LeeYiyuan"
        },
        "content": "        }"
      },
      {
        "lineNumber": 287,
        "author": {
          "gitId": "LeeYiyuan"
        },
        "content": ""
      },
      {
        "lineNumber": 288,
        "author": {
          "gitId": "LeeYiyuan"
        },
        "content": "        public void setStartDate(Date startDate) {"
      },
      {
        "lineNumber": 289,
        "author": {
          "gitId": "LeeYiyuan"
        },
        "content": "            this.startDate \u003d startDate;"
      },
      {
        "lineNumber": 290,
        "author": {
          "gitId": "LeeYiyuan"
        },
        "content": "        }"
      },
      {
        "lineNumber": 291,
        "author": {
          "gitId": "LeeYiyuan"
        },
        "content": ""
      },
      {
        "lineNumber": 292,
        "author": {
          "gitId": "LeeYiyuan"
        },
        "content": "        public Optional\u003cDate\u003e getStartDate() {"
      },
      {
        "lineNumber": 293,
        "author": {
          "gitId": "LeeYiyuan"
        },
        "content": "            return Optional.ofNullable(startDate);"
      },
      {
        "lineNumber": 294,
        "author": {
          "gitId": "LeeYiyuan"
        },
        "content": "        }"
      },
      {
        "lineNumber": 295,
        "author": {
          "gitId": "LeeYiyuan"
        },
        "content": ""
      },
      {
        "lineNumber": 296,
        "author": {
          "gitId": "LeeYiyuan"
        },
        "content": "        public void setEndDate(Date endDate) {"
      },
      {
        "lineNumber": 297,
        "author": {
          "gitId": "LeeYiyuan"
        },
        "content": "            this.endDate \u003d endDate;"
      },
      {
        "lineNumber": 298,
        "author": {
          "gitId": "LeeYiyuan"
        },
        "content": "        }"
      },
      {
        "lineNumber": 299,
        "author": {
          "gitId": "LeeYiyuan"
        },
        "content": ""
      },
      {
        "lineNumber": 300,
        "author": {
          "gitId": "LeeYiyuan"
        },
        "content": "        public Optional\u003cDate\u003e getEndDate() {"
      },
      {
        "lineNumber": 301,
        "author": {
          "gitId": "LeeYiyuan"
        },
        "content": "            return Optional.ofNullable(endDate);"
      },
      {
        "lineNumber": 302,
        "author": {
          "gitId": "LeeYiyuan"
        },
        "content": "        }"
      },
      {
        "lineNumber": 303,
        "author": {
          "gitId": "LeeYiyuan"
        },
        "content": ""
      },
      {
        "lineNumber": 304,
        "author": {
          "gitId": "LeeYiyuan"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 305,
        "author": {
          "gitId": "LeeYiyuan"
        },
        "content": "        public boolean equals(Object other) {"
      },
      {
        "lineNumber": 306,
        "author": {
          "gitId": "LeeYiyuan"
        },
        "content": "            // short circuit if same object"
      },
      {
        "lineNumber": 307,
        "author": {
          "gitId": "LeeYiyuan"
        },
        "content": "            if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 308,
        "author": {
          "gitId": "LeeYiyuan"
        },
        "content": "                return true;"
      },
      {
        "lineNumber": 309,
        "author": {
          "gitId": "LeeYiyuan"
        },
        "content": "            }"
      },
      {
        "lineNumber": 310,
        "author": {
          "gitId": "LeeYiyuan"
        },
        "content": ""
      },
      {
        "lineNumber": 311,
        "author": {
          "gitId": "LeeYiyuan"
        },
        "content": "            // instanceof handles nulls"
      },
      {
        "lineNumber": 312,
        "author": {
          "gitId": "LeeYiyuan"
        },
        "content": "            if (!(other instanceof EditRepeaterDescriptor)) {"
      },
      {
        "lineNumber": 313,
        "author": {
          "gitId": "LeeYiyuan"
        },
        "content": "                return false;"
      },
      {
        "lineNumber": 314,
        "author": {
          "gitId": "LeeYiyuan"
        },
        "content": "            }"
      },
      {
        "lineNumber": 315,
        "author": {
          "gitId": "LeeYiyuan"
        },
        "content": ""
      },
      {
        "lineNumber": 316,
        "author": {
          "gitId": "LeeYiyuan"
        },
        "content": "            // state check"
      },
      {
        "lineNumber": 317,
        "author": {
          "gitId": "LeeYiyuan"
        },
        "content": "            EditRepeaterDescriptor e \u003d (EditRepeaterDescriptor) other;"
      },
      {
        "lineNumber": 318,
        "author": {
          "gitId": "LeeYiyuan"
        },
        "content": ""
      },
      {
        "lineNumber": 319,
        "author": {
          "gitId": "LeeYiyuan"
        },
        "content": "            return getDescription().equals(e.getDescription())"
      },
      {
        "lineNumber": 320,
        "author": {
          "gitId": "LeeYiyuan"
        },
        "content": "                \u0026\u0026 getAmount().equals(e.getAmount())"
      },
      {
        "lineNumber": 321,
        "author": {
          "gitId": "LeeYiyuan"
        },
        "content": "                \u0026\u0026 getCategory().equals(e.getCategory())"
      },
      {
        "lineNumber": 322,
        "author": {
          "gitId": "LeeYiyuan"
        },
        "content": "                \u0026\u0026 getTransactionType().equals(e.getTransactionType())"
      },
      {
        "lineNumber": 323,
        "author": {
          "gitId": "LeeYiyuan"
        },
        "content": "                \u0026\u0026 getMonthStartOffset().equals(e.getMonthStartOffset())"
      },
      {
        "lineNumber": 324,
        "author": {
          "gitId": "LeeYiyuan"
        },
        "content": "                \u0026\u0026 getMonthEndOffset().equals(e.getMonthEndOffset())"
      },
      {
        "lineNumber": 325,
        "author": {
          "gitId": "LeeYiyuan"
        },
        "content": "                \u0026\u0026 getStartDate().equals(e.getStartDate())"
      },
      {
        "lineNumber": 326,
        "author": {
          "gitId": "LeeYiyuan"
        },
        "content": "                \u0026\u0026 getEndDate().equals(e.getEndDate());"
      },
      {
        "lineNumber": 327,
        "author": {
          "gitId": "LeeYiyuan"
        },
        "content": "        }"
      },
      {
        "lineNumber": 328,
        "author": {
          "gitId": "LeeYiyuan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 329,
        "author": {
          "gitId": "LeeYiyuan"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "LeeYiyuan": 328,
      "weiyang13": 1
    }
  },
  {
    "path": "src/main/java/seedu/ichifund/logic/commands/transaction/AddTransactionCommand.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "package seedu.ichifund.logic.commands.transaction;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "weiyang13"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "import static seedu.ichifund.commons.util.CollectionUtil.requireAllNonNull;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "import static seedu.ichifund.logic.parser.CliSyntax.PREFIX_AMOUNT;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "import static seedu.ichifund.logic.parser.CliSyntax.PREFIX_CATEGORY;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "import static seedu.ichifund.logic.parser.CliSyntax.PREFIX_DAY;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "import static seedu.ichifund.logic.parser.CliSyntax.PREFIX_DESCRIPTION;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "import static seedu.ichifund.logic.parser.CliSyntax.PREFIX_MONTH;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "import static seedu.ichifund.logic.parser.CliSyntax.PREFIX_TRANSACTION_TYPE;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "import static seedu.ichifund.logic.parser.CliSyntax.PREFIX_YEAR;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "weiyang13"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "weiyang13"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "import seedu.ichifund.logic.commands.Command;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "import seedu.ichifund.logic.commands.CommandResult;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "import seedu.ichifund.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "import seedu.ichifund.model.Description;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "import seedu.ichifund.model.Model;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "import seedu.ichifund.model.amount.Amount;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "import seedu.ichifund.model.context.TransactionContext;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "import seedu.ichifund.model.date.Date;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "import seedu.ichifund.model.date.Day;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "import seedu.ichifund.model.date.Month;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "import seedu.ichifund.model.date.Year;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "LeeYiyuan"
        },
        "content": "import seedu.ichifund.model.repeater.RepeaterUniqueId;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "import seedu.ichifund.model.transaction.Category;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "import seedu.ichifund.model.transaction.Transaction;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "import seedu.ichifund.model.transaction.TransactionType;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "weiyang13"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "/**"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "weiyang13"
        },
        "content": " * Adds a transaction to IchiFund."
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "weiyang13"
        },
        "content": " */"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "public class AddTransactionCommand extends Command {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "weiyang13"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"add\";"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "weiyang13"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \": Adds a transaction to IchiFund \""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "            + \"and switches view to show new transaction. \\n\""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "            + \"Parameters: \""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "            + PREFIX_DESCRIPTION + \"DESCRIPTION \""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "            + PREFIX_AMOUNT + \"AMOUNT \""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "            + \"[\" + PREFIX_CATEGORY + \"CATEGORY] \""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "            + \"[\" + PREFIX_DAY + \"DAY] \""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "            + \"[\" + PREFIX_MONTH + \"MONTH] \""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "            + \"[\" + PREFIX_YEAR + \"YEAR] \""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "            + \"[\" + PREFIX_TRANSACTION_TYPE + \"TRANSACTION_TYPE] \""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "            + \"Example: \" + COMMAND_WORD + \" \""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "            + PREFIX_DESCRIPTION + \"Buy lunch \""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "            + PREFIX_AMOUNT + \"5.28 \""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "            + PREFIX_CATEGORY + \"Food \""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "            + PREFIX_DAY + \"5 \""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "            + PREFIX_MONTH + \"10 \""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "            + PREFIX_YEAR + \"2019 \""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "            + PREFIX_TRANSACTION_TYPE + \"exp \";"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "weiyang13"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "    public static final String MESSAGE_SUCCESS \u003d \"New transaction added: %1$s\";"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "weiyang13"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "    private final Description description;"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "    private final Amount amount;"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "    private final Optional\u003cCategory\u003e category;"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "    private final Optional\u003cDay\u003e day;"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "    private final Optional\u003cMonth\u003e month;"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "    private final Optional\u003cYear\u003e year;"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "    private final Optional\u003cTransactionType\u003e transactionType;"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "weiyang13"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "     * Creates an AddCommand to add the specified {@code Transaction}"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "     */"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "    public AddTransactionCommand(Description description, Amount amount, Optional\u003cCategory\u003e category,"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "                                 Optional\u003cDay\u003e day, Optional\u003cMonth\u003e month, Optional\u003cYear\u003e year,"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "                                 Optional\u003cTransactionType\u003e transactionType) {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "        requireAllNonNull(description, amount, category, day, month, year, transactionType);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "        this.description \u003d description;"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "        this.amount \u003d amount;"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "        this.category \u003d category;"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "        this.day \u003d day;"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "        this.month \u003d month;"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "        this.year \u003d year;"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "        this.transactionType \u003d transactionType;"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "    }"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "weiyang13"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "     * Returns a {@code Transaction} object based on fields, as well as the given context."
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "     *"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "     * @param context Context from which values of unspecified fields are inferred."
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "     * @return {@code Transaction} object generated."
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "     * @throws CommandException If date generated is not valid."
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "     */"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "    private Transaction generateTransaction(TransactionContext context) throws CommandException {"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "        Category category \u003d this.category.orElseGet(context::getCategory);"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "        Date date \u003d generateDate(context);"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "        TransactionType transactionType \u003d this.transactionType.orElseGet(context::getTransactionType);"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "LeeYiyuan"
        },
        "content": "        RepeaterUniqueId repeaterUniqueId \u003d new RepeaterUniqueId(\"\");"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "LeeYiyuan"
        },
        "content": "        return new Transaction(description, amount, category, date, transactionType, repeaterUniqueId);"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "    }"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "weiyang13"
        },
        "content": ""
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "     * Returns a {@code Date} object based on fields, as well as the given context."
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "     *"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "     * @param context Context form which values of unspecified fields are inferred."
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "     * @return {@code Date} object generated."
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "     * @throws CommandException If date generated is not valid."
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "     */"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "    private Date generateDate(TransactionContext context) throws CommandException {"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "        Day day \u003d this.day.orElseGet(Day::getCurrent);"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "        Month month \u003d this.month.orElseGet(context::getMonth);"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "        Year year \u003d this.year.orElseGet(context::getYear);"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "        if (!Date.isValidDate(day, month, year)) {"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "            throw new CommandException(Date.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "            return new Date(day, month, year);"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "        }"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "    }"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "weiyang13"
        },
        "content": ""
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "    public CommandResult execute(Model model) throws CommandException {"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "        TransactionContext context \u003d model.getTransactionContext();"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "        Transaction toAdd \u003d generateTransaction(context);"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "        model.addTransaction(toAdd);"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "        model.updateTransactionContext(toAdd);"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "        return new CommandResult(String.format(MESSAGE_SUCCESS, toAdd));"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "    }"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "weiyang13"
        },
        "content": ""
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "                || (other instanceof AddTransactionCommand // instanceof handles nulls"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "                \u0026\u0026 description.equals(((AddTransactionCommand) other).description) // state check"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "                \u0026\u0026 amount.equals(((AddTransactionCommand) other).amount)"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "                \u0026\u0026 category.equals(((AddTransactionCommand) other).category)"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "                \u0026\u0026 day.equals(((AddTransactionCommand) other).day)"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "                \u0026\u0026 month.equals(((AddTransactionCommand) other).month)"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "                \u0026\u0026 year.equals(((AddTransactionCommand) other).year)"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "                \u0026\u0026 transactionType.equals(((AddTransactionCommand) other).transactionType));"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "    }"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "weiyang13"
        },
        "content": ""
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "     * Builder class to construct an AddTransactionCommand."
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "     */"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "    public static class AddTransactionCommandBuilder {"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "        private Description description;"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "        private Amount amount;"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "        private Optional\u003cCategory\u003e category;"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "        private Optional\u003cDay\u003e day;"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "        private Optional\u003cMonth\u003e month;"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "        private Optional\u003cYear\u003e year;"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "        private Optional\u003cTransactionType\u003e transactionType;"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "weiyang13"
        },
        "content": ""
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "        public void setDescription(Description description) {"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "            this.description \u003d description;"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "        }"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "weiyang13"
        },
        "content": ""
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "        public void setAmount(Amount amount) {"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "            this.amount \u003d amount;"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "        }"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "weiyang13"
        },
        "content": ""
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "        public void setCategory(Optional\u003cCategory\u003e category) {"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "            this.category \u003d category;"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "        }"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "weiyang13"
        },
        "content": ""
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "        public void setDay(Optional\u003cDay\u003e day) {"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "            this.day \u003d day;"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "        }"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "weiyang13"
        },
        "content": ""
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "        public void setMonth(Optional\u003cMonth\u003e month) {"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "            this.month \u003d month;"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "        }"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "weiyang13"
        },
        "content": ""
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "        public void setYear(Optional\u003cYear\u003e year) {"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "            this.year \u003d year;"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "        }"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "weiyang13"
        },
        "content": ""
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "        public void setTransactionType(Optional\u003cTransactionType\u003e transactionType) {"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "            this.transactionType \u003d transactionType;"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "        }"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "weiyang13"
        },
        "content": ""
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "        /**"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "         * Returns a {@code AddTransactionCommand} built from the builder."
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "         * All fields must be non-null."
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "         *"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "         * @return The command corresponding to the builder"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "         */"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "        public AddTransactionCommand build() {"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "            requireAllNonNull(description, amount, category, day, month, year, transactionType);"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "            return new AddTransactionCommand(description, amount, category, day, month, year, transactionType);"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "        }"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "weiyang13"
        },
        "content": ""
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "        public boolean equals(Object other) {"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "            return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "                    || (other instanceof AddTransactionCommandBuilder // instanceof handles nulls"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "                    \u0026\u0026 description.equals(((AddTransactionCommandBuilder) other).description) // state check"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "                    \u0026\u0026 amount.equals(((AddTransactionCommandBuilder) other).amount)"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "                    \u0026\u0026 category.equals(((AddTransactionCommandBuilder) other).category)"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "                    \u0026\u0026 day.equals(((AddTransactionCommandBuilder) other).day)"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "                    \u0026\u0026 month.equals(((AddTransactionCommandBuilder) other).month)"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "                    \u0026\u0026 year.equals(((AddTransactionCommandBuilder) other).year)"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "                    \u0026\u0026 transactionType.equals(((AddTransactionCommandBuilder) other).transactionType));"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "        }"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "    }"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "LeeYiyuan": 3,
      "weiyang13": 200
    }
  },
  {
    "path": "src/main/java/seedu/ichifund/logic/commands/transaction/DeleteTransactionCommand.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "package seedu.ichifund.logic.commands.transaction;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "weiyang13"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "weiyang13"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "weiyang13"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "import seedu.ichifund.commons.core.Messages;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "import seedu.ichifund.commons.core.index.Index;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "import seedu.ichifund.logic.commands.Command;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "import seedu.ichifund.logic.commands.CommandResult;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "import seedu.ichifund.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "import seedu.ichifund.model.Model;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "import seedu.ichifund.model.transaction.Transaction;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "weiyang13"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "/**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "weiyang13"
        },
        "content": " * Deletes an existing transaction in IchiFund."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "weiyang13"
        },
        "content": " */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "public class DeleteTransactionCommand extends Command {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"delete\";"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "weiyang13"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "            + \": Deletes the transaction identified by the index number used in the displayed transaction list. \""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "            + \"Transaction must not be from a repeatable. \\n\""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "            + \"Parameters: INDEX (must be a positive integer)\\n\""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "            + \"Example: \" + COMMAND_WORD + \" 1\";"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "weiyang13"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "    public static final String MESSAGE_DELETE_TRANSACTION_SUCCESS \u003d \"Deleted Transaction: %1$s\";"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "weiyang13"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "    private final Index targetIndex;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "weiyang13"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "    public DeleteTransactionCommand(Index targetIndex) {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "        this.targetIndex \u003d targetIndex;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "weiyang13"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "    public CommandResult execute(Model model) throws CommandException {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "        List\u003cTransaction\u003e lastShownList \u003d model.getFilteredTransactionList();"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "weiyang13"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "        if (targetIndex.getZeroBased() \u003e\u003d lastShownList.size()) {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "            throw new CommandException(Messages.MESSAGE_INVALID_TRANSACTION_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "        }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "weiyang13"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "        Transaction transactionToDelete \u003d lastShownList.get(targetIndex.getZeroBased());"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "weiyang13"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "        if (transactionToDelete.isFromRepeater()) {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "            throw new CommandException(Messages.MESSAGE_TRANSACTION_FROM_REPEATER);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "        }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "weiyang13"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "        model.deleteTransaction(transactionToDelete);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "        return new CommandResult(String.format(MESSAGE_DELETE_TRANSACTION_SUCCESS, transactionToDelete));"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "weiyang13"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "                || (other instanceof DeleteTransactionCommand // instanceof handles nulls"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "                \u0026\u0026 targetIndex.equals(((DeleteTransactionCommand) other).targetIndex)); // state check"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "    }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "weiyang13": 60
    }
  },
  {
    "path": "src/main/java/seedu/ichifund/logic/commands/transaction/EditTransactionCommand.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "package seedu.ichifund.logic.commands.transaction;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "weiyang13"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "import static seedu.ichifund.logic.parser.CliSyntax.PREFIX_AMOUNT;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "import static seedu.ichifund.logic.parser.CliSyntax.PREFIX_CATEGORY;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "import static seedu.ichifund.logic.parser.CliSyntax.PREFIX_DAY;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "import static seedu.ichifund.logic.parser.CliSyntax.PREFIX_DESCRIPTION;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "import static seedu.ichifund.logic.parser.CliSyntax.PREFIX_MONTH;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "import static seedu.ichifund.logic.parser.CliSyntax.PREFIX_TRANSACTION_TYPE;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "import static seedu.ichifund.logic.parser.CliSyntax.PREFIX_YEAR;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "weiyang13"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "weiyang13"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "import seedu.ichifund.commons.core.Messages;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "import seedu.ichifund.commons.core.index.Index;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "import seedu.ichifund.commons.util.CollectionUtil;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "import seedu.ichifund.logic.commands.Command;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "import seedu.ichifund.logic.commands.CommandResult;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "import seedu.ichifund.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "import seedu.ichifund.model.Description;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "import seedu.ichifund.model.Model;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "import seedu.ichifund.model.amount.Amount;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "import seedu.ichifund.model.date.Date;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "import seedu.ichifund.model.date.Day;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "import seedu.ichifund.model.date.Month;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "import seedu.ichifund.model.date.Year;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "import seedu.ichifund.model.repeater.RepeaterUniqueId;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "import seedu.ichifund.model.transaction.Category;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "import seedu.ichifund.model.transaction.Transaction;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "import seedu.ichifund.model.transaction.TransactionType;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "weiyang13"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "/**"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "weiyang13"
        },
        "content": " * Edits the details of an existing transaction in IchiFund."
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "weiyang13"
        },
        "content": " */"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "public class EditTransactionCommand extends Command {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "weiyang13"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"edit\";"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "weiyang13"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \": Edits the details of the transaction identified \""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "            + \"by the index number used in the displayed transaction list. \""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "            + \"Existing values will be overwritten by the input values. \""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "            + \"Transaction must not be from a repeatable.\\n\""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "            + \"Parameters: INDEX (must be a positive integer) \""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "            + \"[\" + PREFIX_DESCRIPTION + \"DESCRIPTION] \""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "            + \"[\" + PREFIX_AMOUNT + \"AMOUNT] \""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "            + \"[\" + PREFIX_CATEGORY + \"CATEGORY] \""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "            + \"[\" + PREFIX_DAY + \"DAY] \""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "            + \"[\" + PREFIX_MONTH + \"MONTH] \""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "            + \"[\" + PREFIX_YEAR + \"YEAR] \""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "            + \"[\" + PREFIX_TRANSACTION_TYPE + \"TRANSACTION_TYPE] \""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "            + \"Example: \" + COMMAND_WORD + \" 1 \""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "            + PREFIX_DESCRIPTION + \"Buy lunch \""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "            + PREFIX_AMOUNT + \"5.28 \""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "            + PREFIX_DAY + \"5 \""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "            + PREFIX_MONTH + \"10 \";"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "weiyang13"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "    public static final String MESSAGE_EDIT_TRANSACTION_SUCCESS \u003d \"Edited Transaction: %1$s\";"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "    public static final String MESSAGE_NOT_EDITED \u003d \"At least one field to edit must be provided.\";"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "weiyang13"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "    private final Index index;"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "    private final EditTransactionDescriptor editTransactionDescriptor;"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "weiyang13"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "     * @param index of the transaction in the filtered transaction list to edit"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "     * @param editTransactionDescriptor details to edit the transaction with"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "     */"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "    public EditTransactionCommand(Index index, EditTransactionDescriptor editTransactionDescriptor) {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "        requireNonNull(index);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "        requireNonNull(editTransactionDescriptor);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "weiyang13"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "        this.index \u003d index;"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "        this.editTransactionDescriptor \u003d new EditTransactionDescriptor(editTransactionDescriptor);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "    }"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "weiyang13"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "    public CommandResult execute(Model model) throws CommandException {"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "        List\u003cTransaction\u003e lastShownList \u003d model.getFilteredTransactionList();"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "weiyang13"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "        if (index.getZeroBased() \u003e\u003d lastShownList.size()) {"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "            throw new CommandException(Messages.MESSAGE_INVALID_TRANSACTION_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "        }"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "weiyang13"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "        Transaction transactionToEdit \u003d lastShownList.get(index.getZeroBased());"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "weiyang13"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "        if (transactionToEdit.isFromRepeater()) {"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "            throw new CommandException(Messages.MESSAGE_TRANSACTION_FROM_REPEATER);"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "        }"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "weiyang13"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "        Transaction editedTransaction \u003d createEditedTransaction(transactionToEdit, editTransactionDescriptor);"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "weiyang13"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "        model.setTransaction(transactionToEdit, editedTransaction);"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "        model.updateTransactionContext(editedTransaction);"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "        return new CommandResult(String.format(MESSAGE_EDIT_TRANSACTION_SUCCESS, editedTransaction));"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "    }"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "weiyang13"
        },
        "content": ""
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "     * Creates and returns a {@code Transaction} with the details of {@code transactionToEdit}"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "     * edited with {@code editTransactionDescriptor}."
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "     */"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "    private static Transaction createEditedTransaction("
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "            Transaction transactionToEdit, EditTransactionDescriptor editTransactionDescriptor)"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "            throws CommandException {"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "        assert transactionToEdit !\u003d null;"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "weiyang13"
        },
        "content": ""
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "        Description updatedDescription \u003d editTransactionDescriptor.getDescription()"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "                .orElse(transactionToEdit.getDescription());"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "        Amount updatedAmount \u003d editTransactionDescriptor.getAmount().orElse(transactionToEdit.getAmount());"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "        Day updatedDay \u003d editTransactionDescriptor.getDay().orElse(transactionToEdit.getDay());"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "        Month updatedMonth \u003d editTransactionDescriptor.getMonth().orElse(transactionToEdit.getMonth());"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "        Year updatedYear \u003d editTransactionDescriptor.getYear().orElse(transactionToEdit.getYear());"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "        Category updatedCategory \u003d editTransactionDescriptor.getCategory().orElse(transactionToEdit.getCategory());"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "        TransactionType updatedTransactionType \u003d editTransactionDescriptor.getTransactionType()"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "                .orElse(transactionToEdit.getTransactionType());"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "weiyang13"
        },
        "content": ""
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "        if (!Date.isValidDate(updatedDay, updatedMonth, updatedYear)) {"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "            throw new CommandException(Date.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "        }"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "weiyang13"
        },
        "content": ""
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "        Date updatedDate \u003d new Date(updatedDay, updatedMonth, updatedYear);"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "weiyang13"
        },
        "content": ""
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "        return new Transaction(updatedDescription, updatedAmount, updatedCategory,"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "                updatedDate, updatedTransactionType, new RepeaterUniqueId(\"\"));"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "    }"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "weiyang13"
        },
        "content": ""
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "        // short circuit if same object"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "        if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "        }"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "weiyang13"
        },
        "content": ""
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "        // instanceof handles nulls"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "        if (!(other instanceof EditTransactionCommand)) {"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "        }"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "weiyang13"
        },
        "content": ""
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "        // state check"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "        EditTransactionCommand e \u003d (EditTransactionCommand) other;"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "        return index.equals(e.index)"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "                \u0026\u0026 editTransactionDescriptor.equals(e.editTransactionDescriptor);"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "    }"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "weiyang13"
        },
        "content": ""
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "     * Stores the details to edit the transaction with. Each non-empty field value will replace the"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "     * corresponding field value of the transaction."
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "     */"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "    public static class EditTransactionDescriptor {"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "        private Description description;"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "        private Amount amount;"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "        private Day day;"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "        private Month month;"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "        private Year year;"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "        private Category category;"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "        private TransactionType transactionType;"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "weiyang13"
        },
        "content": ""
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "        public EditTransactionDescriptor() {}"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "weiyang13"
        },
        "content": ""
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "        /**"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "         * Copy constructor."
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "         */"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "        public EditTransactionDescriptor(EditTransactionDescriptor toCopy) {"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "            setDescription(toCopy.description);"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "            setAmount(toCopy.amount);"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "            setDay(toCopy.day);"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "            setMonth(toCopy.month);"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "            setYear(toCopy.year);"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "            setCategory(toCopy.category);"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "            setTransactionType(toCopy.transactionType);"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "        }"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "weiyang13"
        },
        "content": ""
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "        /**"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "         * Returns true if at least one field is edited."
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "         */"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "        public boolean isAnyFieldEdited() {"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "            return CollectionUtil.isAnyNonNull(description, amount, day, month, year, category, transactionType);"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "        }"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "weiyang13"
        },
        "content": ""
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "        public void setDescription(Description description) {"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "            this.description \u003d description;"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "        }"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "weiyang13"
        },
        "content": ""
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "        public Optional\u003cDescription\u003e getDescription() {"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "            return Optional.ofNullable(description);"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "        }"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "weiyang13"
        },
        "content": ""
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "        public void setAmount(Amount amount) {"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "            this.amount \u003d amount;"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "        }"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "weiyang13"
        },
        "content": ""
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "        public Optional\u003cAmount\u003e getAmount() {"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "            return Optional.ofNullable(amount);"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "        }"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "weiyang13"
        },
        "content": ""
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "        public void setDay(Day day) {"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "            this.day \u003d day;"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "        }"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "weiyang13"
        },
        "content": ""
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "        public Optional\u003cDay\u003e getDay() {"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "            return Optional.ofNullable(day);"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "        }"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "weiyang13"
        },
        "content": ""
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "        public void setMonth(Month month) {"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "            this.month \u003d month;"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "        }"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "weiyang13"
        },
        "content": ""
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "        public Optional\u003cMonth\u003e getMonth() {"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "            return Optional.ofNullable(month);"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "        }"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "weiyang13"
        },
        "content": ""
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "        public void setYear(Year year) {"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "            this.year \u003d year;"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "        }"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "weiyang13"
        },
        "content": ""
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "        public Optional\u003cYear\u003e getYear() {"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "            return Optional.ofNullable(year);"
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "        }"
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "weiyang13"
        },
        "content": ""
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "        public void setCategory(Category category) {"
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "            this.category \u003d category;"
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "        }"
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "weiyang13"
        },
        "content": ""
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "        public Optional\u003cCategory\u003e getCategory() {"
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "            return Optional.ofNullable(category);"
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "        }"
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "weiyang13"
        },
        "content": ""
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "        public void setTransactionType(TransactionType transactionType) {"
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "            this.transactionType \u003d transactionType;"
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "        }"
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "weiyang13"
        },
        "content": ""
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "        public Optional\u003cTransactionType\u003e getTransactionType() {"
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "            return Optional.ofNullable(transactionType);"
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "        }"
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "weiyang13"
        },
        "content": ""
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "        public boolean equals(Object other) {"
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "            // short circuit if same object"
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "            if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "                return true;"
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "            }"
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "weiyang13"
        },
        "content": ""
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "            // instanceof handles nulls"
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "            if (!(other instanceof EditTransactionDescriptor)) {"
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "                return false;"
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "            }"
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "weiyang13"
        },
        "content": ""
      },
      {
        "lineNumber": 248,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "            // state check"
      },
      {
        "lineNumber": 249,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "            EditTransactionDescriptor e \u003d (EditTransactionDescriptor) other;"
      },
      {
        "lineNumber": 250,
        "author": {
          "gitId": "weiyang13"
        },
        "content": ""
      },
      {
        "lineNumber": 251,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "            return getDescription().equals(e.getDescription())"
      },
      {
        "lineNumber": 252,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "                    \u0026\u0026 getAmount().equals(e.getAmount())"
      },
      {
        "lineNumber": 253,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "                    \u0026\u0026 getDay().equals(e.getDay())"
      },
      {
        "lineNumber": 254,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "                    \u0026\u0026 getMonth().equals(e.getMonth())"
      },
      {
        "lineNumber": 255,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "                    \u0026\u0026 getYear().equals(e.getYear())"
      },
      {
        "lineNumber": 256,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "                    \u0026\u0026 getCategory().equals(e.getCategory())"
      },
      {
        "lineNumber": 257,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "                    \u0026\u0026 getTransactionType().equals(e.getTransactionType());"
      },
      {
        "lineNumber": 258,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "        }"
      },
      {
        "lineNumber": 259,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "    }"
      },
      {
        "lineNumber": 260,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "weiyang13": 260
    }
  },
  {
    "path": "src/main/java/seedu/ichifund/logic/commands/transaction/FilterTransactionCommand.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "package seedu.ichifund.logic.commands.transaction;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "weiyang13"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "import static seedu.ichifund.commons.util.CollectionUtil.requireAllNonNull;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "import static seedu.ichifund.logic.parser.CliSyntax.PREFIX_CATEGORY;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "import static seedu.ichifund.logic.parser.CliSyntax.PREFIX_MONTH;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "import static seedu.ichifund.logic.parser.CliSyntax.PREFIX_TRANSACTION_TYPE;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "import static seedu.ichifund.logic.parser.CliSyntax.PREFIX_YEAR;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "weiyang13"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "weiyang13"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "import seedu.ichifund.commons.core.Messages;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "import seedu.ichifund.logic.commands.Command;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "import seedu.ichifund.logic.commands.CommandResult;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "import seedu.ichifund.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "import seedu.ichifund.model.Model;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "import seedu.ichifund.model.date.Month;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "import seedu.ichifund.model.date.Year;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "import seedu.ichifund.model.transaction.Category;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "import seedu.ichifund.model.transaction.TransactionType;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "weiyang13"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "/**"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "weiyang13"
        },
        "content": " * Filters the list of transaction in IchiFund by Year, Month, and optionally Category."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "weiyang13"
        },
        "content": " */"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "public class FilterTransactionCommand extends Command {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "weiyang13"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"filter\";"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "weiyang13"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \": Filters transactions as specified by parameters, \""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "            + \"and displays them as a list with index numbers. \""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "            + \"To show all categories, use \""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "            + \"\\\"\" + PREFIX_CATEGORY + Category.CATEGORY_ALL.toString() + \"\\\". \""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "            + \"To show both income and expenditure items, use \""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "            + \"\\\"\" + PREFIX_TRANSACTION_TYPE + TransactionType.TRANSACTION_TYPE_ALL.toString() + \"\\\". \""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "            + \"Parameters: \""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "            + \"[\" + PREFIX_MONTH + \"MONTH] \""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "            + \"[\" + PREFIX_YEAR + \"YEAR] \""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "            + \"[\" + PREFIX_CATEGORY + \"CATEGORY] \""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "            + \"[\" + PREFIX_TRANSACTION_TYPE + \"TRANSACTION_TYPE] \""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "            + \"Example: \" + COMMAND_WORD + \" \""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "            + PREFIX_MONTH + \"10 \""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "            + PREFIX_YEAR + \"2019 \""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "            + PREFIX_CATEGORY + \"!all \""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "            + PREFIX_TRANSACTION_TYPE + \"exp \";"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "weiyang13"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "    private final Optional\u003cMonth\u003e month;"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "    private final Optional\u003cYear\u003e year;"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "    private final Optional\u003cCategory\u003e category;"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "    private final Optional\u003cTransactionType\u003e transactionType;"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "weiyang13"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "    public FilterTransactionCommand(Optional\u003cMonth\u003e month, Optional\u003cYear\u003e year, Optional\u003cCategory\u003e category,"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "                                    Optional\u003cTransactionType\u003e transactionType) {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "        this.month \u003d month;"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "        this.year \u003d year;"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "        this.category \u003d category;"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "        this.transactionType \u003d transactionType;"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "    }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "weiyang13"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "    public CommandResult execute(Model model) throws CommandException {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "        model.setTransactionContext("
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "                model.getTransactionContext()"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "                        .withMonth(month)"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "                        .withYear(year)"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "                        .withCategory(category)"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "                        .withType(transactionType)"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "        );"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "        return new CommandResult("
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "                String.format(Messages.MESSAGE_TRANSACTIONS_LISTED_OVERVIEW,"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "                        model.getFilteredTransactionList().size()));"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "    }"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "weiyang13"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "                || (other instanceof FilterTransactionCommand // instanceof handles nulls"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "                \u0026\u0026 month.equals(((FilterTransactionCommand) other).month)"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "                \u0026\u0026 year.equals(((FilterTransactionCommand) other).year)"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "                \u0026\u0026 category.equals(((FilterTransactionCommand) other).category)); // state check"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "    }"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "weiyang13"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "     * Builder class to construct a FilterTransactionCommand."
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "     */"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "    public static class FilterTransactionCommandBuilder {"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "        private Optional\u003cMonth\u003e month;"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "        private Optional\u003cYear\u003e year;"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "        private Optional\u003cCategory\u003e category;"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "        private Optional\u003cTransactionType\u003e transactionType;"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "weiyang13"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "        public void setMonth(Optional\u003cMonth\u003e month) {"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "            this.month \u003d month;"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "        }"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "weiyang13"
        },
        "content": ""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "        public void setYear(Optional\u003cYear\u003e year) {"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "            this.year \u003d year;"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "        }"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "weiyang13"
        },
        "content": ""
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "        public void setCategory(Optional\u003cCategory\u003e category) {"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "            this.category \u003d category;"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "        }"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "weiyang13"
        },
        "content": ""
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "        public void setType(Optional\u003cTransactionType\u003e transactionType) {"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "            this.transactionType \u003d transactionType;"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "        }"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "weiyang13"
        },
        "content": ""
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "        /**"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "         * Returns a {@code FilterTransactionCommand} built from the builder."
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "         * All fields must be non-null."
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "         *"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "         * @return The command corresponding to the builder"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "         */"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "        public FilterTransactionCommand build() {"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "            requireAllNonNull(month, year, category, transactionType);"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "            return new FilterTransactionCommand(month, year, category, transactionType);"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "        }"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "    }"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "weiyang13": 119
    }
  },
  {
    "path": "src/main/java/seedu/ichifund/logic/parser/AddCommandParser.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "nexolute"
        },
        "content": "package seedu.ichifund.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "nexolute"
        },
        "content": "import static seedu.ichifund.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "nexolute"
        },
        "content": "import static seedu.ichifund.logic.parser.CliSyntax.PREFIX_ADDRESS;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "nexolute"
        },
        "content": "import static seedu.ichifund.logic.parser.CliSyntax.PREFIX_EMAIL;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "nexolute"
        },
        "content": "import static seedu.ichifund.logic.parser.CliSyntax.PREFIX_NAME;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "nexolute"
        },
        "content": "import static seedu.ichifund.logic.parser.CliSyntax.PREFIX_PHONE;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "nexolute"
        },
        "content": "import static seedu.ichifund.logic.parser.CliSyntax.PREFIX_TAG;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.stream.Stream;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "nexolute"
        },
        "content": "import seedu.ichifund.logic.commands.AddCommand;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "nexolute"
        },
        "content": "import seedu.ichifund.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "nexolute"
        },
        "content": "import seedu.ichifund.model.person.Address;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "nexolute"
        },
        "content": "import seedu.ichifund.model.person.Email;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "nexolute"
        },
        "content": "import seedu.ichifund.model.person.Name;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "nexolute"
        },
        "content": "import seedu.ichifund.model.person.Person;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "nexolute"
        },
        "content": "import seedu.ichifund.model.person.Phone;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "nexolute"
        },
        "content": "import seedu.ichifund.model.tag.Tag;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": " * Parses input arguments and creates a new AddCommand object"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "public class AddCommandParser implements Parser\u003cAddCommand\u003e {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "     * Parses the given {@code String} of arguments in the context of the AddCommand"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "     * and returns an AddCommand object for execution."
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws ParseException if the user input does not conform the expected format"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    public AddCommand parse(String args) throws ParseException {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "        ArgumentMultimap argMultimap \u003d"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "                ArgumentTokenizer.tokenize(args, PREFIX_NAME, PREFIX_PHONE, PREFIX_EMAIL, PREFIX_ADDRESS, PREFIX_TAG);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!arePrefixesPresent(argMultimap, PREFIX_NAME, PREFIX_ADDRESS, PREFIX_PHONE, PREFIX_EMAIL)"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "                || !argMultimap.getPreamble().isEmpty()) {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT, AddCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "        Name name \u003d ParserUtil.parseName(argMultimap.getValue(PREFIX_NAME).get());"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "        Phone phone \u003d ParserUtil.parsePhone(argMultimap.getValue(PREFIX_PHONE).get());"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        Email email \u003d ParserUtil.parseEmail(argMultimap.getValue(PREFIX_EMAIL).get());"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        Address address \u003d ParserUtil.parseAddress(argMultimap.getValue(PREFIX_ADDRESS).get());"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        Set\u003cTag\u003e tagList \u003d ParserUtil.parseTags(argMultimap.getAllValues(PREFIX_TAG));"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        Person person \u003d new Person(name, phone, email, address, tagList);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        return new AddCommand(person);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns true if none of the prefixes contains empty {@code Optional} values in the given"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "     * {@code ArgumentMultimap}."
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    private static boolean arePrefixesPresent(ArgumentMultimap argumentMultimap, Prefix... prefixes) {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "        return Stream.of(prefixes).allMatch(prefix -\u003e argumentMultimap.getValue(prefix).isPresent());"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "nexolute": 15,
      "-": 45
    }
  },
  {
    "path": "src/main/java/seedu/ichifund/logic/parser/ArgumentMultimap.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "nexolute"
        },
        "content": "package seedu.ichifund.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.HashMap;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Map;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": " * Stores mapping of prefixes to their respective arguments."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": " * Each key may be associated with multiple argument values."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": " * Values for a given key are stored in a list, and the insertion ordering is maintained."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": " * Keys are unique, but the list of argument values may contain duplicate argument values, i.e. the same argument value"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": " * can be inserted multiple times for the same prefix."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "public class ArgumentMultimap {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    /** Prefixes mapped to their respective arguments**/"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    private final Map\u003cPrefix, List\u003cString\u003e\u003e argMultimap \u003d new HashMap\u003c\u003e();"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "     * Associates the specified argument value with {@code prefix} key in this map."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "     * If the map previously contained a mapping for the key, the new value is appended to the list of existing values."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param prefix   Prefix key with which the specified argument value is to be associated"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param argValue Argument value to be associated with the specified prefix key"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    public void put(Prefix prefix, String argValue) {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        List\u003cString\u003e argValues \u003d getAllValues(prefix);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "        argValues.add(argValue);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        argMultimap.put(prefix, argValues);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns the last value of {@code prefix}."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    public Optional\u003cString\u003e getValue(Prefix prefix) {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        List\u003cString\u003e values \u003d getAllValues(prefix);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        return values.isEmpty() ? Optional.empty() : Optional.of(values.get(values.size() - 1));"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns all values of {@code prefix}."
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "     * If the prefix does not exist or has no values, this will return an empty list."
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "     * Modifying the returned list will not affect the underlying data structure of the ArgumentMultimap."
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    public List\u003cString\u003e getAllValues(Prefix prefix) {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!argMultimap.containsKey(prefix)) {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "            return new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        return new ArrayList\u003c\u003e(argMultimap.get(prefix));"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns the preamble (text before the first valid prefix). Trims any leading/trailing spaces."
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    public String getPreamble() {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "        return getValue(new Prefix(\"\")).orElse(\"\");"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "nexolute": 1,
      "-": 59
    }
  },
  {
    "path": "src/main/java/seedu/ichifund/logic/parser/ArgumentTokenizer.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "nexolute"
        },
        "content": "package seedu.ichifund.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.stream.Collectors;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": " * Tokenizes arguments string of the form: {@code preamble \u003cprefix\u003evalue \u003cprefix\u003evalue ...}\u003cbr\u003e"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": " *     e.g. {@code some preamble text t/ 11.00 t/12.00 k/ m/ July}  where prefixes are {@code t/ k/ m/}.\u003cbr\u003e"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": " * 1. An argument\u0027s value can be an empty string e.g. the value of {@code k/} in the above example.\u003cbr\u003e"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": " * 2. Leading and trailing whitespaces of an argument value will be discarded.\u003cbr\u003e"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": " * 3. An argument may be repeated and all its values will be accumulated e.g. the value of {@code t/}"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": " *    in the above example.\u003cbr\u003e"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "public class ArgumentTokenizer {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "     * Tokenizes an arguments string and returns an {@code ArgumentMultimap} object that maps prefixes to their"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "     * respective argument values. Only the given prefixes will be recognized in the arguments string."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param argsString Arguments string of the form: {@code preamble \u003cprefix\u003evalue \u003cprefix\u003evalue ...}"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param prefixes   Prefixes to tokenize the arguments string with"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "     * @return           ArgumentMultimap object that maps prefixes to their arguments"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    public static ArgumentMultimap tokenize(String argsString, Prefix... prefixes) {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        List\u003cPrefixPosition\u003e positions \u003d findAllPrefixPositions(argsString, prefixes);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        return extractArguments(argsString, positions);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "     * Finds all zero-based prefix positions in the given arguments string."
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param argsString Arguments string of the form: {@code preamble \u003cprefix\u003evalue \u003cprefix\u003evalue ...}"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param prefixes   Prefixes to find in the arguments string"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "     * @return           List of zero-based prefix positions in the given arguments string"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    private static List\u003cPrefixPosition\u003e findAllPrefixPositions(String argsString, Prefix... prefixes) {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        return Arrays.stream(prefixes)"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "                .flatMap(prefix -\u003e findPrefixPositions(argsString, prefix).stream())"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "                .collect(Collectors.toList());"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "     * {@see findAllPrefixPositions}"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    private static List\u003cPrefixPosition\u003e findPrefixPositions(String argsString, Prefix prefix) {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        List\u003cPrefixPosition\u003e positions \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "        int prefixPosition \u003d findPrefixPosition(argsString, prefix.getPrefix(), 0);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        while (prefixPosition !\u003d -1) {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "            PrefixPosition extendedPrefix \u003d new PrefixPosition(prefix, prefixPosition);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "            positions.add(extendedPrefix);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "            prefixPosition \u003d findPrefixPosition(argsString, prefix.getPrefix(), prefixPosition);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "        return positions;"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns the index of the first occurrence of {@code prefix} in"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "     * {@code argsString} starting from index {@code fromIndex}. An occurrence"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "     * is valid if there is a whitespace before {@code prefix}. Returns -1 if no"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "     * such occurrence can be found."
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "     * E.g if {@code argsString} \u003d \"e/hip/900\", {@code prefix} \u003d \"p/\" and"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "     * {@code fromIndex} \u003d 0, this method returns -1 as there are no valid"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "     * occurrences of \"p/\" with whitespace before it. However, if"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "     * {@code argsString} \u003d \"e/hi p/900\", {@code prefix} \u003d \"p/\" and"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "     * {@code fromIndex} \u003d 0, this method returns 5."
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "    private static int findPrefixPosition(String argsString, String prefix, int fromIndex) {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "        int prefixIndex \u003d argsString.indexOf(\" \" + prefix, fromIndex);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "        return prefixIndex \u003d\u003d -1 ? -1"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "                : prefixIndex + 1; // +1 as offset for whitespace"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "     * Extracts prefixes and their argument values, and returns an {@code ArgumentMultimap} object that maps the"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "     * extracted prefixes to their respective arguments. Prefixes are extracted based on their zero-based positions in"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "     * {@code argsString}."
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param argsString      Arguments string of the form: {@code preamble \u003cprefix\u003evalue \u003cprefix\u003evalue ...}"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param prefixPositions Zero-based positions of all prefixes in {@code argsString}"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "     * @return                ArgumentMultimap object that maps prefixes to their arguments"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "    private static ArgumentMultimap extractArguments(String argsString, List\u003cPrefixPosition\u003e prefixPositions) {"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "        // Sort by start position"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "        prefixPositions.sort((prefix1, prefix2) -\u003e prefix1.getStartPosition() - prefix2.getStartPosition());"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "        // Insert a PrefixPosition to represent the preamble"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "        PrefixPosition preambleMarker \u003d new PrefixPosition(new Prefix(\"\"), 0);"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "        prefixPositions.add(0, preambleMarker);"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "        // Add a dummy PrefixPosition to represent the end of the string"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "        PrefixPosition endPositionMarker \u003d new PrefixPosition(new Prefix(\"\"), argsString.length());"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "        prefixPositions.add(endPositionMarker);"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "        // Map prefixes to their argument values (if any)"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "        ArgumentMultimap argMultimap \u003d new ArgumentMultimap();"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "        for (int i \u003d 0; i \u003c prefixPositions.size() - 1; i++) {"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "            // Extract and store prefixes and their arguments"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "            Prefix argPrefix \u003d prefixPositions.get(i).getPrefix();"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "            String argValue \u003d extractArgumentValue(argsString, prefixPositions.get(i), prefixPositions.get(i + 1));"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "            argMultimap.put(argPrefix, argValue);"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "        return argMultimap;"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns the trimmed value of the argument in the arguments string specified by {@code currentPrefixPosition}."
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "     * The end position of the value is determined by {@code nextPrefixPosition}."
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "    private static String extractArgumentValue(String argsString,"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "                                        PrefixPosition currentPrefixPosition,"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "                                        PrefixPosition nextPrefixPosition) {"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "        Prefix prefix \u003d currentPrefixPosition.getPrefix();"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "        int valueStartPos \u003d currentPrefixPosition.getStartPosition() + prefix.getPrefix().length();"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "        String value \u003d argsString.substring(valueStartPos, nextPrefixPosition.getStartPosition());"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "        return value.trim();"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "     * Represents a prefix\u0027s position in an arguments string."
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "    private static class PrefixPosition {"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "        private int startPosition;"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "        private final Prefix prefix;"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "        PrefixPosition(Prefix prefix, int startPosition) {"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": "            this.prefix \u003d prefix;"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "            this.startPosition \u003d startPosition;"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": "        int getStartPosition() {"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": "            return startPosition;"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": "        Prefix getPrefix() {"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": "            return prefix;"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "nexolute": 1,
      "-": 147
    }
  },
  {
    "path": "src/main/java/seedu/ichifund/logic/parser/CliSyntax.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "nexolute"
        },
        "content": "package seedu.ichifund.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": " * Contains Command Line Interface (CLI) syntax definitions common to multiple commands"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "public class CliSyntax {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "    /* Prefix definitions */"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final Prefix PREFIX_NAME \u003d new Prefix(\"n/\");"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final Prefix PREFIX_PHONE \u003d new Prefix(\"p/\");"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final Prefix PREFIX_EMAIL \u003d new Prefix(\"e/\");"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final Prefix PREFIX_ADDRESS \u003d new Prefix(\"a/\");"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final Prefix PREFIX_TAG \u003d new Prefix(\"t/\");"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "    public static final Prefix PREFIX_AMOUNT \u003d new Prefix(\"a/\");"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "    public static final Prefix PREFIX_DESCRIPTION \u003d new Prefix(\"de/\");"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "    public static final Prefix PREFIX_YEAR \u003d new Prefix(\"y/\");"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "    public static final Prefix PREFIX_MONTH \u003d new Prefix(\"m/\");"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "    public static final Prefix PREFIX_DAY \u003d new Prefix(\"d/\");"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "    public static final Prefix PREFIX_CATEGORY \u003d new Prefix(\"c/\");"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "    public static final Prefix PREFIX_TRANSACTION_TYPE \u003d new Prefix(\"ty/\");"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "LeeYiyuan"
        },
        "content": "    public static final Prefix PREFIX_END_MONTH \u003d new Prefix(\"em/\");"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "LeeYiyuan"
        },
        "content": "    public static final Prefix PREFIX_END_YEAR \u003d new Prefix(\"ey/\");"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "LeeYiyuan"
        },
        "content": "    public static final Prefix PREFIX_MONTH_END_OFFSET \u003d new Prefix(\"eo/\");"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "LeeYiyuan"
        },
        "content": "    public static final Prefix PREFIX_MONTH_START_OFFSET \u003d new Prefix(\"so/\");"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "LeeYiyuan"
        },
        "content": "    public static final Prefix PREFIX_START_MONTH \u003d new Prefix(\"sm/\");"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "LeeYiyuan"
        },
        "content": "    public static final Prefix PREFIX_START_YEAR \u003d new Prefix(\"sy/\");"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "LeeYiyuan"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "LeeYiyuan": 7,
      "nexolute": 1,
      "weiyang13": 7,
      "-": 14
    }
  },
  {
    "path": "src/main/java/seedu/ichifund/logic/parser/DeleteCommandParser.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "nexolute"
        },
        "content": "package seedu.ichifund.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "nexolute"
        },
        "content": "import static seedu.ichifund.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "nexolute"
        },
        "content": "import seedu.ichifund.commons.core.index.Index;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "nexolute"
        },
        "content": "import seedu.ichifund.logic.commands.DeleteCommand;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "nexolute"
        },
        "content": "import seedu.ichifund.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": " * Parses input arguments and creates a new DeleteCommand object"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "public class DeleteCommandParser implements Parser\u003cDeleteCommand\u003e {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "     * Parses the given {@code String} of arguments in the context of the DeleteCommand"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "     * and returns a DeleteCommand object for execution."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws ParseException if the user input does not conform the expected format"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    public DeleteCommand parse(String args) throws ParseException {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "            Index index \u003d ParserUtil.parseIndex(args);"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "            return new DeleteCommand(index);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (ParseException pe) {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new ParseException("
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "                    String.format(MESSAGE_INVALID_COMMAND_FORMAT, DeleteCommand.MESSAGE_USAGE), pe);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "nexolute": 5,
      "-": 24
    }
  },
  {
    "path": "src/main/java/seedu/ichifund/logic/parser/EditCommandParser.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "nexolute"
        },
        "content": "package seedu.ichifund.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "nexolute"
        },
        "content": "import static seedu.ichifund.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "nexolute"
        },
        "content": "import static seedu.ichifund.logic.parser.CliSyntax.PREFIX_ADDRESS;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "nexolute"
        },
        "content": "import static seedu.ichifund.logic.parser.CliSyntax.PREFIX_EMAIL;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "nexolute"
        },
        "content": "import static seedu.ichifund.logic.parser.CliSyntax.PREFIX_NAME;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "nexolute"
        },
        "content": "import static seedu.ichifund.logic.parser.CliSyntax.PREFIX_PHONE;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "nexolute"
        },
        "content": "import static seedu.ichifund.logic.parser.CliSyntax.PREFIX_TAG;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Collection;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Collections;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "nexolute"
        },
        "content": "import seedu.ichifund.commons.core.index.Index;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "nexolute"
        },
        "content": "import seedu.ichifund.logic.commands.EditCommand;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "nexolute"
        },
        "content": "import seedu.ichifund.logic.commands.EditCommand.EditPersonDescriptor;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "nexolute"
        },
        "content": "import seedu.ichifund.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "nexolute"
        },
        "content": "import seedu.ichifund.model.tag.Tag;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": " * Parses input arguments and creates a new EditCommand object"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "public class EditCommandParser implements Parser\u003cEditCommand\u003e {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "     * Parses the given {@code String} of arguments in the context of the EditCommand"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "     * and returns an EditCommand object for execution."
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws ParseException if the user input does not conform the expected format"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    public EditCommand parse(String args) throws ParseException {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(args);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        ArgumentMultimap argMultimap \u003d"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "                ArgumentTokenizer.tokenize(args, PREFIX_NAME, PREFIX_PHONE, PREFIX_EMAIL, PREFIX_ADDRESS, PREFIX_TAG);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        Index index;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "            index \u003d ParserUtil.parseIndex(argMultimap.getPreamble());"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (ParseException pe) {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT, EditCommand.MESSAGE_USAGE), pe);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        EditPersonDescriptor editPersonDescriptor \u003d new EditPersonDescriptor();"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        if (argMultimap.getValue(PREFIX_NAME).isPresent()) {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "            editPersonDescriptor.setName(ParserUtil.parseName(argMultimap.getValue(PREFIX_NAME).get()));"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        if (argMultimap.getValue(PREFIX_PHONE).isPresent()) {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "            editPersonDescriptor.setPhone(ParserUtil.parsePhone(argMultimap.getValue(PREFIX_PHONE).get()));"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        if (argMultimap.getValue(PREFIX_EMAIL).isPresent()) {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "            editPersonDescriptor.setEmail(ParserUtil.parseEmail(argMultimap.getValue(PREFIX_EMAIL).get()));"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "        if (argMultimap.getValue(PREFIX_ADDRESS).isPresent()) {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "            editPersonDescriptor.setAddress(ParserUtil.parseAddress(argMultimap.getValue(PREFIX_ADDRESS).get()));"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "        parseTagsForEdit(argMultimap.getAllValues(PREFIX_TAG)).ifPresent(editPersonDescriptor::setTags);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!editPersonDescriptor.isAnyFieldEdited()) {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new ParseException(EditCommand.MESSAGE_NOT_EDITED);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "        return new EditCommand(index, editPersonDescriptor);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "     * Parses {@code Collection\u003cString\u003e tags} into a {@code Set\u003cTag\u003e} if {@code tags} is non-empty."
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "     * If {@code tags} contain only one element which is an empty string, it will be parsed into a"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "     * {@code Set\u003cTag\u003e} containing zero tags."
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "    private Optional\u003cSet\u003cTag\u003e\u003e parseTagsForEdit(Collection\u003cString\u003e tags) throws ParseException {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "        assert tags !\u003d null;"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "        if (tags.isEmpty()) {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "            return Optional.empty();"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "        Collection\u003cString\u003e tagSet \u003d tags.size() \u003d\u003d 1 \u0026\u0026 tags.contains(\"\") ? Collections.emptySet() : tags;"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "        return Optional.of(ParserUtil.parseTags(tagSet));"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "nexolute": 12,
      "-": 70
    }
  },
  {
    "path": "src/main/java/seedu/ichifund/logic/parser/FeatureParser.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "package seedu.ichifund.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "weiyang13"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "import seedu.ichifund.logic.commands.Command;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "import seedu.ichifund.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "weiyang13"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "/**"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "weiyang13"
        },
        "content": " * Represents a FeatureParser that passes user input to the appropriate Parser."
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "weiyang13"
        },
        "content": " */"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "public interface FeatureParser {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "weiyang13"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "    String getTabSwitchCommandWord();"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "weiyang13"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "    int getTabIndex();"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "weiyang13"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "    Command parseCommand(String commandWord, String arguments) throws ParseException;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "weiyang13": 16
    }
  },
  {
    "path": "src/main/java/seedu/ichifund/logic/parser/FindCommandParser.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "nexolute"
        },
        "content": "package seedu.ichifund.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "nexolute"
        },
        "content": "import static seedu.ichifund.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "nexolute"
        },
        "content": "import seedu.ichifund.logic.commands.FindCommand;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "nexolute"
        },
        "content": "import seedu.ichifund.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "nexolute"
        },
        "content": "import seedu.ichifund.model.person.NameContainsKeywordsPredicate;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": " * Parses input arguments and creates a new FindCommand object"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "public class FindCommandParser implements Parser\u003cFindCommand\u003e {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "     * Parses the given {@code String} of arguments in the context of the FindCommand"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "     * and returns a FindCommand object for execution."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws ParseException if the user input does not conform the expected format"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    public FindCommand parse(String args) throws ParseException {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "        String trimmedArgs \u003d args.trim();"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "        if (trimmedArgs.isEmpty()) {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new ParseException("
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "                    String.format(MESSAGE_INVALID_COMMAND_FORMAT, FindCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        String[] nameKeywords \u003d trimmedArgs.split(\"\\\\s+\");"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "        return new FindCommand(new NameContainsKeywordsPredicate(Arrays.asList(nameKeywords)));"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "nexolute": 5,
      "-": 28
    }
  },
  {
    "path": "src/main/java/seedu/ichifund/logic/parser/IchiFundParser.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "nexolute"
        },
        "content": "package seedu.ichifund.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "nexolute"
        },
        "content": "import static seedu.ichifund.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.regex.Matcher;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.regex.Pattern;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "import javafx.beans.property.SimpleObjectProperty;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "import javafx.beans.value.ObservableValue;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "nexolute"
        },
        "content": "import seedu.ichifund.logic.commands.ClearCommand;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "nexolute"
        },
        "content": "import seedu.ichifund.logic.commands.Command;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "import seedu.ichifund.logic.commands.EmptyCommand;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "nexolute"
        },
        "content": "import seedu.ichifund.logic.commands.ExitCommand;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "nexolute"
        },
        "content": "import seedu.ichifund.logic.commands.HelpCommand;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "import seedu.ichifund.logic.parser.analytics.AnalyticsFeatureParser;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "import seedu.ichifund.logic.parser.budget.BudgetFeatureParser;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "nexolute"
        },
        "content": "import seedu.ichifund.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "import seedu.ichifund.logic.parser.loan.LoanFeatureParser;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "import seedu.ichifund.logic.parser.repeater.RepeaterFeatureParser;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "import seedu.ichifund.logic.parser.transaction.TransactionFeatureParser;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": " * Parses user input."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "nexolute"
        },
        "content": "public class IchiFundParser {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "     * Used for initial separation of command word and args."
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final Pattern BASIC_COMMAND_FORMAT \u003d Pattern.compile(\"(?\u003ccommandWord\u003e\\\\S+)(?\u003carguments\u003e.*)\");"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "    private final ArrayList\u003cFeatureParser\u003e featureParsers;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "    private FeatureParser currentFeatureParser;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "    private SimpleObjectProperty\u003cInteger\u003e currentFeatureParserIndex;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "weiyang13"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "    public IchiFundParser() {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "        featureParsers \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "        featureParsers.add(new TransactionFeatureParser());"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "        featureParsers.add(new RepeaterFeatureParser());"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "        featureParsers.add(new BudgetFeatureParser());"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "        featureParsers.add(new LoanFeatureParser());"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "        featureParsers.add(new AnalyticsFeatureParser());"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "        currentFeatureParser \u003d featureParsers.get(0);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "        currentFeatureParserIndex \u003d new SimpleObjectProperty\u003c\u003e(currentFeatureParser.getTabIndex());"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "weiyang13"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "     * Parses user input into command for execution."
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param userInput full user input string"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "     * @return the command based on the user input"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws ParseException if the user input does not conform the expected format"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    public Command parseCommand(String userInput) throws ParseException {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "        final Matcher matcher \u003d BASIC_COMMAND_FORMAT.matcher(userInput.trim());"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!matcher.matches()) {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT, HelpCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "        final String commandWord \u003d matcher.group(\"commandWord\");"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "        final String arguments \u003d matcher.group(\"arguments\");"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "        switch (commandWord) {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "        case ClearCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "            return new ClearCommand();"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "        case ExitCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "            return new ExitCommand();"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "        case HelpCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "            return new HelpCommand();"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "        default:"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "            return handleFeatureCommand(commandWord, arguments);"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "        }"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "    }"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "LeeYiyuan"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "     * Checks if user input is for tab switching and performs tab switching."
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "     * Otherwise, passes user input into the current {@code FeatureParser} for parsing."
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "     *"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "     * @return The command based on the user input. EmptyCommand for tab switching."
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "     * @throws ParseException If the user input does not conform the expected format for the {@code FeatureParser}"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "     */"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "    private Command handleFeatureCommand(String commandWord, String arguments) throws ParseException {"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "        boolean isTabSwitchCommand \u003d false;"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "LeeYiyuan"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "        for (FeatureParser featureParser : featureParsers) {"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "            if (featureParser.getTabSwitchCommandWord().equals(commandWord)) {"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "                isTabSwitchCommand \u003d true;"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "                setFeatureParser(featureParser.getTabIndex());"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "            }"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "        }"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "nexolute"
        },
        "content": ""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "        if (!isTabSwitchCommand) {"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "            return currentFeatureParser.parseCommand(commandWord, arguments);"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "        }"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "nexolute"
        },
        "content": ""
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "        return new EmptyCommand();"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "nexolute"
        },
        "content": ""
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "    public void setFeatureParser(int index) {"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "        FeatureParser featureParser \u003d featureParsers.get(index);"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "        assert(featureParser.getTabIndex() \u003d\u003d index);"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "        currentFeatureParser \u003d featureParser;"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "        currentFeatureParserIndex.setValue(currentFeatureParser.getTabIndex());"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "    public ObservableValue\u003cInteger\u003e getCurrentFeatureParserIndex() {"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "        return currentFeatureParserIndex;"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "    }"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "LeeYiyuan": 2,
      "nexolute": 11,
      "weiyang13": 56,
      "-": 44
    }
  },
  {
    "path": "src/main/java/seedu/ichifund/logic/parser/Parser.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "nexolute"
        },
        "content": "package seedu.ichifund.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "nexolute"
        },
        "content": "import seedu.ichifund.logic.commands.Command;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "nexolute"
        },
        "content": "import seedu.ichifund.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": " * Represents a Parser that is able to parse user input into a {@code Command} of type {@code T}."
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "public interface Parser\u003cT extends Command\u003e {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "     * Parses {@code userInput} into a command and returns it."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws ParseException if {@code userInput} does not conform the expected format"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    T parse(String userInput) throws ParseException;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "nexolute": 3,
      "-": 13
    }
  },
  {
    "path": "src/main/java/seedu/ichifund/logic/parser/ParserUtil.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "nexolute"
        },
        "content": "package seedu.ichifund.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Collection;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.HashSet;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "nexolute"
        },
        "content": "import seedu.ichifund.commons.core.index.Index;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "nexolute"
        },
        "content": "import seedu.ichifund.commons.util.StringUtil;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "nexolute"
        },
        "content": "import seedu.ichifund.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "import seedu.ichifund.model.Description;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "import seedu.ichifund.model.amount.Amount;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "import seedu.ichifund.model.date.Day;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "import seedu.ichifund.model.date.Month;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "import seedu.ichifund.model.date.Year;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "nexolute"
        },
        "content": "import seedu.ichifund.model.person.Address;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "nexolute"
        },
        "content": "import seedu.ichifund.model.person.Email;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "nexolute"
        },
        "content": "import seedu.ichifund.model.person.Name;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "nexolute"
        },
        "content": "import seedu.ichifund.model.person.Phone;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "LeeYiyuan"
        },
        "content": "import seedu.ichifund.model.repeater.MonthOffset;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "nexolute"
        },
        "content": "import seedu.ichifund.model.tag.Tag;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "import seedu.ichifund.model.transaction.Category;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "import seedu.ichifund.model.transaction.TransactionType;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": " * Contains utility methods used for parsing strings in the various *Parser classes."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "public class ParserUtil {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_INVALID_INDEX \u003d \"Index is not a non-zero unsigned integer.\";"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "     * Parses {@code oneBasedIndex} into an {@code Index} and returns it. Leading and trailing whitespaces will be"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "     * trimmed."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws ParseException if the specified index is invalid (not non-zero unsigned integer)."
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    public static Index parseIndex(String oneBasedIndex) throws ParseException {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        String trimmedIndex \u003d oneBasedIndex.trim();"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!StringUtil.isNonZeroUnsignedInteger(trimmedIndex)) {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new ParseException(MESSAGE_INVALID_INDEX);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        return Index.fromOneBased(Integer.parseInt(trimmedIndex));"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "     * Parses a {@code String name} into a {@code Name}."
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "     * Leading and trailing whitespaces will be trimmed."
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws ParseException if the given {@code name} is invalid."
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    public static Name parseName(String name) throws ParseException {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(name);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "        String trimmedName \u003d name.trim();"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!Name.isValidName(trimmedName)) {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new ParseException(Name.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "        return new Name(trimmedName);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "     * Parses a {@code String phone} into a {@code Phone}."
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "     * Leading and trailing whitespaces will be trimmed."
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws ParseException if the given {@code phone} is invalid."
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "    public static Phone parsePhone(String phone) throws ParseException {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(phone);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "        String trimmedPhone \u003d phone.trim();"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!Phone.isValidPhone(trimmedPhone)) {"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new ParseException(Phone.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "        return new Phone(trimmedPhone);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "     * Parses a {@code String address} into an {@code Address}."
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "     * Leading and trailing whitespaces will be trimmed."
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws ParseException if the given {@code address} is invalid."
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "    public static Address parseAddress(String address) throws ParseException {"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(address);"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "        String trimmedAddress \u003d address.trim();"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!Address.isValidAddress(trimmedAddress)) {"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new ParseException(Address.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "        return new Address(trimmedAddress);"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "     * Parses a {@code String email} into an {@code Email}."
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "     * Leading and trailing whitespaces will be trimmed."
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws ParseException if the given {@code email} is invalid."
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "    public static Email parseEmail(String email) throws ParseException {"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(email);"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "        String trimmedEmail \u003d email.trim();"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!Email.isValidEmail(trimmedEmail)) {"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new ParseException(Email.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "        return new Email(trimmedEmail);"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "     * Parses a {@code String tag} into a {@code Tag}."
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "     * Leading and trailing whitespaces will be trimmed."
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws ParseException if the given {@code tag} is invalid."
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "    public static Tag parseTag(String tag) throws ParseException {"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(tag);"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "        String trimmedTag \u003d tag.trim();"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!Tag.isValidTagName(trimmedTag)) {"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new ParseException(Tag.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "        return new Tag(trimmedTag);"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "     * Parses {@code Collection\u003cString\u003e tags} into a {@code Set\u003cTag\u003e}."
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "    public static Set\u003cTag\u003e parseTags(Collection\u003cString\u003e tags) throws ParseException {"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(tags);"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "        final Set\u003cTag\u003e tagSet \u003d new HashSet\u003c\u003e();"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "        for (String tagName : tags) {"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "            tagSet.add(parseTag(tagName));"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "        return tagSet;"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "weiyang13"
        },
        "content": ""
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "     * Parses a {@code String description} into a {@code Description}."
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "     * Leading and trailing whitespaces will be trimmed."
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "     *"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "     * @throws ParseException if the given {@code description} is invalid."
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "     */"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "    public static Description parseDescription(String description) throws ParseException {"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "        requireNonNull(description);"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "        String trimmedDescription \u003d description.trim();"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "        if (!Description.isValidDescription(trimmedDescription)) {"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "            throw new ParseException(Description.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "        }"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "        return new Description(trimmedDescription);"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "    }"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "weiyang13"
        },
        "content": ""
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "     * Parses a {@code String amount} into a {@code Amount}."
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "     * Leading and trailing whitespaces will be trimmed."
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "     *"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "     * @throws ParseException if the given {@code amount} is invalid."
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "     */"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "    public static Amount parseAmount(String amount) throws ParseException {"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "        requireNonNull(amount);"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "        String trimmedAmount \u003d amount.trim();"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "        if (!Amount.isValidAmount(trimmedAmount)) {"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "            throw new ParseException(Amount.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "        }"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "        return new Amount(trimmedAmount);"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "    }"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "weiyang13"
        },
        "content": ""
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "     * Parses a {@code String amount} into a {@code Amount}."
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "     * Leading and trailing whitespaces will be trimmed."
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "     *"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "     * @throws ParseException if the given {@code amount} is invalid or negative."
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "     */"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "    public static Amount parsePositiveAmount(String amount) throws ParseException {"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "        requireNonNull(amount);"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "        String trimmedAmount \u003d amount.trim();"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "        if (!Amount.isValidAmount(trimmedAmount)) {"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "            throw new ParseException(Amount.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "        } else if (Amount.isNegative(trimmedAmount)) {"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "            throw new ParseException(Amount.NEGATIVE_AMOUNT_CONSTRAINT);"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "        }"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "        return new Amount(trimmedAmount);"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "    }"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "weiyang13"
        },
        "content": ""
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "     * Parses a {@code String category} into a {@code Category}."
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "     * Leading and trailing whitespaces will be trimmed."
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "     *"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "     * @throws ParseException if the given {@code category} is invalid."
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "     */"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "    public static Category parseCategory(String category) throws ParseException {"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "        requireNonNull(category);"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "        String trimmedCategory \u003d category.trim();"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "        if (!Category.isValidCategory(trimmedCategory)) {"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "            throw new ParseException(Category.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "        }"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "        return new Category(trimmedCategory);"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "    }"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "weiyang13"
        },
        "content": ""
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "     * Parses a {@code String category} into a {@code Category}."
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "     * Leading and trailing whitespaces will be trimmed."
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "     * Allows for parsing of {@code Category.CATEGORY_ALL}"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "     *"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "     * @throws ParseException if the given {@code category} is invalid and is not \"!all\"."
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "     */"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "    public static Category parseCategoryWithAll(String category) throws ParseException {"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "        requireNonNull(category);"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "        String trimmedCategory \u003d category.trim();"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "        if (trimmedCategory.equals(Category.CATEGORY_ALL.toString())) {"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "            return Category.CATEGORY_ALL;"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "        } else if (!Category.isValidCategory(trimmedCategory)) {"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "            throw new ParseException(Category.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "        }"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "        return new Category(trimmedCategory);"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "    }"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "weiyang13"
        },
        "content": ""
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "weiyang13"
        },
        "content": ""
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "     * Parses a {@code String day} into a {@code Day}."
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "     * Leading and trailing whitespaces will be trimmed."
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "     *"
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "     * @throws ParseException if the given {@code day} is invalid."
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "     */"
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "    public static Day parseDay(String day) throws ParseException {"
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "        requireNonNull(day);"
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "        String trimmedDay \u003d day.trim();"
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "        if (!Day.isValidDay(trimmedDay)) {"
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "            throw new ParseException(Day.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "        }"
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "        return new Day(trimmedDay);"
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "    }"
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "weiyang13"
        },
        "content": ""
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "     * Parses a {@code String month} into a {@code Month}."
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "     * Leading and trailing whitespaces will be trimmed."
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "     *"
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "     * @throws ParseException if the given {@code month} is invalid."
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "     */"
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "    public static Month parseMonth(String month) throws ParseException {"
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "        requireNonNull(month);"
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "        String trimmedMonth \u003d month.trim();"
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "        if (!Month.isValidMonth(trimmedMonth)) {"
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "            throw new ParseException(Month.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "        }"
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "        return new Month(trimmedMonth);"
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "    }"
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "weiyang13"
        },
        "content": ""
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "     * Parses a {@code String year} into a {@code Year}."
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "     * Leading and trailing whitespaces will be trimmed."
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "     *"
      },
      {
        "lineNumber": 248,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "     * @throws ParseException if the given {@code year} is invalid."
      },
      {
        "lineNumber": 249,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "     */"
      },
      {
        "lineNumber": 250,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "    public static Year parseYear(String year) throws ParseException {"
      },
      {
        "lineNumber": 251,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "        requireNonNull(year);"
      },
      {
        "lineNumber": 252,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "        String trimmedYear \u003d year.trim();"
      },
      {
        "lineNumber": 253,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "        if (!Year.isValidYear(trimmedYear)) {"
      },
      {
        "lineNumber": 254,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "            throw new ParseException(Year.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 255,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "        }"
      },
      {
        "lineNumber": 256,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "        return new Year(trimmedYear);"
      },
      {
        "lineNumber": 257,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "    }"
      },
      {
        "lineNumber": 258,
        "author": {
          "gitId": "weiyang13"
        },
        "content": ""
      },
      {
        "lineNumber": 259,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 260,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "     * Parses a {@code String transactionType} into a {@code TransactionType}."
      },
      {
        "lineNumber": 261,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "     * Leading and trailing whitespaces will be trimmed."
      },
      {
        "lineNumber": 262,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "     *"
      },
      {
        "lineNumber": 263,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "     * @throws ParseException if the given {@code transactionType} is invalid."
      },
      {
        "lineNumber": 264,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "     */"
      },
      {
        "lineNumber": 265,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "    public static TransactionType parseTransactionType(String transactionType) throws ParseException {"
      },
      {
        "lineNumber": 266,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "        requireNonNull(transactionType);"
      },
      {
        "lineNumber": 267,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "        String trimmedTransactionType \u003d transactionType.trim();"
      },
      {
        "lineNumber": 268,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "        if (!TransactionType.isValidTransactionType(trimmedTransactionType)) {"
      },
      {
        "lineNumber": 269,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "            throw new ParseException(TransactionType.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 270,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "        }"
      },
      {
        "lineNumber": 271,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "        return new TransactionType(trimmedTransactionType);"
      },
      {
        "lineNumber": 272,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "    }"
      },
      {
        "lineNumber": 273,
        "author": {
          "gitId": "LeeYiyuan"
        },
        "content": ""
      },
      {
        "lineNumber": 274,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 275,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "     * Parses a {@code String transactionType} into a {@code TransactionType}."
      },
      {
        "lineNumber": 276,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "     * Leading and trailing whitespaces will be trimmed."
      },
      {
        "lineNumber": 277,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "     * Allows for parsing of {@code TransactionType.TRANSACTION_TYPE_ALL}"
      },
      {
        "lineNumber": 278,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "     *"
      },
      {
        "lineNumber": 279,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "     * @throws ParseException if the given {@code transactionType} is invalid."
      },
      {
        "lineNumber": 280,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "     */"
      },
      {
        "lineNumber": 281,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "    public static TransactionType parseTransactionTypeWithAll(String transactionType) throws ParseException {"
      },
      {
        "lineNumber": 282,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "        requireNonNull(transactionType);"
      },
      {
        "lineNumber": 283,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "        String trimmedTransactionType \u003d transactionType.trim();"
      },
      {
        "lineNumber": 284,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "        if (trimmedTransactionType.equals(TransactionType.TRANSACTION_TYPE_ALL.toString())) {"
      },
      {
        "lineNumber": 285,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "            return TransactionType.TRANSACTION_TYPE_ALL;"
      },
      {
        "lineNumber": 286,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "        } else if (!TransactionType.isValidTransactionType(trimmedTransactionType)) {"
      },
      {
        "lineNumber": 287,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "            throw new ParseException(TransactionType.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 288,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "        }"
      },
      {
        "lineNumber": 289,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "        return new TransactionType(trimmedTransactionType);"
      },
      {
        "lineNumber": 290,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "    }"
      },
      {
        "lineNumber": 291,
        "author": {
          "gitId": "weiyang13"
        },
        "content": ""
      },
      {
        "lineNumber": 292,
        "author": {
          "gitId": "LeeYiyuan"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 293,
        "author": {
          "gitId": "LeeYiyuan"
        },
        "content": "     * Parses a {@code String monthOffset} into a {@code MonthOffset}."
      },
      {
        "lineNumber": 294,
        "author": {
          "gitId": "LeeYiyuan"
        },
        "content": "     * Leading and trailing whitespaces will be trimmed."
      },
      {
        "lineNumber": 295,
        "author": {
          "gitId": "LeeYiyuan"
        },
        "content": "     *"
      },
      {
        "lineNumber": 296,
        "author": {
          "gitId": "LeeYiyuan"
        },
        "content": "     * @throws ParseException if the given {@code transactionType} is invalid."
      },
      {
        "lineNumber": 297,
        "author": {
          "gitId": "LeeYiyuan"
        },
        "content": "     */"
      },
      {
        "lineNumber": 298,
        "author": {
          "gitId": "LeeYiyuan"
        },
        "content": "    public static MonthOffset parseMonthOffset(String monthOffset) throws ParseException {"
      },
      {
        "lineNumber": 299,
        "author": {
          "gitId": "LeeYiyuan"
        },
        "content": "        requireNonNull(monthOffset);"
      },
      {
        "lineNumber": 300,
        "author": {
          "gitId": "LeeYiyuan"
        },
        "content": "        String trimmedMonthOffset \u003d monthOffset.trim();"
      },
      {
        "lineNumber": 301,
        "author": {
          "gitId": "LeeYiyuan"
        },
        "content": "        if (!MonthOffset.isValidMonthOffset(trimmedMonthOffset)) {"
      },
      {
        "lineNumber": 302,
        "author": {
          "gitId": "LeeYiyuan"
        },
        "content": "            throw new ParseException(MonthOffset.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 303,
        "author": {
          "gitId": "LeeYiyuan"
        },
        "content": "        }"
      },
      {
        "lineNumber": 304,
        "author": {
          "gitId": "LeeYiyuan"
        },
        "content": "        return new MonthOffset(trimmedMonthOffset);"
      },
      {
        "lineNumber": 305,
        "author": {
          "gitId": "LeeYiyuan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 306,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "LeeYiyuan": 16,
      "nexolute": 9,
      "weiyang13": 166,
      "-": 115
    }
  },
  {
    "path": "src/main/java/seedu/ichifund/logic/parser/Prefix.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "nexolute"
        },
        "content": "package seedu.ichifund.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": " * A prefix that marks the beginning of an argument in an arguments string."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": " * E.g. \u0027t/\u0027 in \u0027add James t/ friend\u0027."
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "public class Prefix {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "    private final String prefix;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "    public Prefix(String prefix) {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "        this.prefix \u003d prefix;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    public String getPrefix() {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "        return prefix;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "        return getPrefix();"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "        return prefix \u003d\u003d null ? 0 : prefix.hashCode();"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object obj) {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!(obj instanceof Prefix)) {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        if (obj \u003d\u003d this) {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        Prefix otherPrefix \u003d (Prefix) obj;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        return otherPrefix.getPrefix().equals(getPrefix());"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "nexolute": 1,
      "-": 38
    }
  },
  {
    "path": "src/main/java/seedu/ichifund/logic/parser/analytics/AnalyticsFeatureParser.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "package seedu.ichifund.logic.parser.analytics;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "weiyang13"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "import static seedu.ichifund.commons.core.Messages.MESSAGE_UNKNOWN_COMMAND;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "weiyang13"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "import seedu.ichifund.logic.commands.Command;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Alaete"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Alaete"
        },
        "content": "import seedu.ichifund.logic.commands.analytics.BalanceTrendCommand;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Alaete"
        },
        "content": "import seedu.ichifund.logic.commands.analytics.BreakdownCommand;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Alaete"
        },
        "content": "import seedu.ichifund.logic.commands.analytics.CategoryRankingCommand;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Alaete"
        },
        "content": "import seedu.ichifund.logic.commands.analytics.ExpenditureRankingCommand;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Alaete"
        },
        "content": "import seedu.ichifund.logic.commands.analytics.ExpenditureTrendCommand;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Alaete"
        },
        "content": "import seedu.ichifund.logic.commands.analytics.IncomeTrendCommand;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Alaete"
        },
        "content": "import seedu.ichifund.logic.commands.analytics.MonthlyExpenditureRankingCommand;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "import seedu.ichifund.logic.parser.FeatureParser;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "import seedu.ichifund.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "weiyang13"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "/**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "weiyang13"
        },
        "content": " * Passes user input to the appropriate Parser for commands related to the analytics feature."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "weiyang13"
        },
        "content": " */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "public class AnalyticsFeatureParser implements FeatureParser {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "weiyang13"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "    private final int tabIndex \u003d 4;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "weiyang13"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "    public String getTabSwitchCommandWord() {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "        return \"analytics\";"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "weiyang13"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "    public int getTabIndex() {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "        return tabIndex;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "weiyang13"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "    public Command parseCommand(String commandWord, String arguments) throws ParseException {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "        switch(commandWord) {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Alaete"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Alaete"
        },
        "content": "        case ExpenditureTrendCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Alaete"
        },
        "content": "            return new ExpenditureTrendCommandParser().parse(arguments);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Alaete"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Alaete"
        },
        "content": "        case IncomeTrendCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Alaete"
        },
        "content": "            return new IncomeTrendCommandParser().parse(arguments);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Alaete"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Alaete"
        },
        "content": "        case BalanceTrendCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Alaete"
        },
        "content": "            return new BalanceTrendCommandParser().parse(arguments);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Alaete"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Alaete"
        },
        "content": "        case BreakdownCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Alaete"
        },
        "content": "            return new BreakdownCommandParser().parse(arguments);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Alaete"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Alaete"
        },
        "content": "        case CategoryRankingCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Alaete"
        },
        "content": "            return new CategoryRankingCommandParser().parse(arguments);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Alaete"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Alaete"
        },
        "content": "        case ExpenditureRankingCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "Alaete"
        },
        "content": "            return new ExpenditureRankingCommandParser().parse(arguments);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "Alaete"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "Alaete"
        },
        "content": "        case MonthlyExpenditureRankingCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "Alaete"
        },
        "content": "            return new MonthlyExpenditureRankingCommandParser().parse(arguments);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "Alaete"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "        default:"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "            throw new ParseException(MESSAGE_UNKNOWN_COMMAND);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "        }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "    }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Alaete": 30,
      "weiyang13": 33
    }
  },
  {
    "path": "src/main/java/seedu/ichifund/logic/parser/analytics/BalanceTrendCommandParser.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Alaete"
        },
        "content": "package seedu.ichifund.logic.parser.analytics;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Alaete"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Alaete"
        },
        "content": "import static seedu.ichifund.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Alaete"
        },
        "content": "import static seedu.ichifund.logic.parser.CliSyntax.PREFIX_YEAR;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Alaete"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Alaete"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Alaete"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Alaete"
        },
        "content": "import seedu.ichifund.logic.commands.analytics.BalanceTrendCommand;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Alaete"
        },
        "content": "import seedu.ichifund.logic.parser.ArgumentMultimap;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Alaete"
        },
        "content": "import seedu.ichifund.logic.parser.ArgumentTokenizer;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Alaete"
        },
        "content": "import seedu.ichifund.logic.parser.Parser;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Alaete"
        },
        "content": "import seedu.ichifund.logic.parser.ParserUtil;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Alaete"
        },
        "content": "import seedu.ichifund.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Alaete"
        },
        "content": "import seedu.ichifund.model.date.Year;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Alaete"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Alaete"
        },
        "content": "/**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Alaete"
        },
        "content": " * Parses input arguments and creates a new ExpenditureTrendCommand object"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Alaete"
        },
        "content": " */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Alaete"
        },
        "content": "public class BalanceTrendCommandParser implements Parser\u003cBalanceTrendCommand\u003e {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Alaete"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Alaete"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Alaete"
        },
        "content": "     * Parses the given {@code String} of arguments in the context of the ExpenditureTrendCommand"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Alaete"
        },
        "content": "     * and returns an ExpenditureTrendCommand object for execution."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Alaete"
        },
        "content": "     * @throws ParseException if the user input does not conform the expected format"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Alaete"
        },
        "content": "     */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Alaete"
        },
        "content": "    public BalanceTrendCommand parse(String args) throws ParseException {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Alaete"
        },
        "content": "        ArgumentMultimap argMultimap \u003d"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Alaete"
        },
        "content": "                ArgumentTokenizer.tokenize(args, PREFIX_YEAR);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Alaete"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Alaete"
        },
        "content": "        if (!argMultimap.getPreamble().isEmpty()) {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Alaete"
        },
        "content": "            throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT, BalanceTrendCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Alaete"
        },
        "content": "        }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Alaete"
        },
        "content": "        Year year \u003d null;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Alaete"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Alaete"
        },
        "content": "        if (argMultimap.getValue(PREFIX_YEAR).isPresent()) {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Alaete"
        },
        "content": "            year \u003d ParserUtil.parseYear(argMultimap.getValue(PREFIX_YEAR).get());"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Alaete"
        },
        "content": "        }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Alaete"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Alaete"
        },
        "content": "        Optional\u003cYear\u003e optionalYear \u003d Optional.ofNullable(year);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Alaete"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Alaete"
        },
        "content": "        return new BalanceTrendCommand(optionalYear);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Alaete"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Alaete"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Alaete": 43
    }
  },
  {
    "path": "src/main/java/seedu/ichifund/logic/parser/analytics/BreakdownCommandParser.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Alaete"
        },
        "content": "package seedu.ichifund.logic.parser.analytics;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Alaete"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Alaete"
        },
        "content": "import static seedu.ichifund.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Alaete"
        },
        "content": "import static seedu.ichifund.logic.parser.CliSyntax.PREFIX_MONTH;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Alaete"
        },
        "content": "import static seedu.ichifund.logic.parser.CliSyntax.PREFIX_YEAR;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Alaete"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Alaete"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Alaete"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Alaete"
        },
        "content": "import seedu.ichifund.logic.commands.analytics.BreakdownCommand;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Alaete"
        },
        "content": "import seedu.ichifund.logic.parser.ArgumentMultimap;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Alaete"
        },
        "content": "import seedu.ichifund.logic.parser.ArgumentTokenizer;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Alaete"
        },
        "content": "import seedu.ichifund.logic.parser.Parser;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Alaete"
        },
        "content": "import seedu.ichifund.logic.parser.ParserUtil;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Alaete"
        },
        "content": "import seedu.ichifund.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Alaete"
        },
        "content": "import seedu.ichifund.model.date.Month;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Alaete"
        },
        "content": "import seedu.ichifund.model.date.Year;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Alaete"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Alaete"
        },
        "content": "/**"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Alaete"
        },
        "content": " * Parses input arguments and creates a new BreakdownCommand object"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Alaete"
        },
        "content": " */"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Alaete"
        },
        "content": "public class BreakdownCommandParser implements Parser\u003cBreakdownCommand\u003e {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Alaete"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Alaete"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Alaete"
        },
        "content": "     * Parses the given {@code String} of arguments in the context of the BreakdownCommand"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Alaete"
        },
        "content": "     * and returns an BreakdownCommand object for execution."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Alaete"
        },
        "content": "     * @throws ParseException if the user input does not conform the expected format"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Alaete"
        },
        "content": "     */"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Alaete"
        },
        "content": "    public BreakdownCommand parse(String args) throws ParseException {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Alaete"
        },
        "content": "        ArgumentMultimap argMultimap \u003d"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Alaete"
        },
        "content": "                ArgumentTokenizer.tokenize(args, PREFIX_MONTH, PREFIX_YEAR);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Alaete"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Alaete"
        },
        "content": "        if (!argMultimap.getPreamble().isEmpty()) {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Alaete"
        },
        "content": "            throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT, BreakdownCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Alaete"
        },
        "content": "        }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Alaete"
        },
        "content": "        Month month \u003d null;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Alaete"
        },
        "content": "        Year year \u003d null;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Alaete"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Alaete"
        },
        "content": "        if (argMultimap.getValue(PREFIX_MONTH).isPresent()) {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Alaete"
        },
        "content": "            month \u003d ParserUtil.parseMonth(argMultimap.getValue(PREFIX_MONTH).get());"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Alaete"
        },
        "content": "        }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Alaete"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Alaete"
        },
        "content": "        if (argMultimap.getValue(PREFIX_YEAR).isPresent()) {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Alaete"
        },
        "content": "            year \u003d ParserUtil.parseYear(argMultimap.getValue(PREFIX_YEAR).get());"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Alaete"
        },
        "content": "        }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Alaete"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Alaete"
        },
        "content": "        Optional\u003cMonth\u003e optionalMonth \u003d Optional.ofNullable(month);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Alaete"
        },
        "content": "        Optional\u003cYear\u003e optionalYear \u003d Optional.ofNullable(year);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Alaete"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Alaete"
        },
        "content": "        return new BreakdownCommand(optionalMonth, optionalYear);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Alaete"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Alaete"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Alaete": 51
    }
  },
  {
    "path": "src/main/java/seedu/ichifund/logic/parser/analytics/CategoryRankingCommandParser.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Alaete"
        },
        "content": "package seedu.ichifund.logic.parser.analytics;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Alaete"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Alaete"
        },
        "content": "import static seedu.ichifund.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Alaete"
        },
        "content": "import static seedu.ichifund.logic.parser.CliSyntax.PREFIX_MONTH;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Alaete"
        },
        "content": "import static seedu.ichifund.logic.parser.CliSyntax.PREFIX_YEAR;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Alaete"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Alaete"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Alaete"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Alaete"
        },
        "content": "import seedu.ichifund.logic.commands.analytics.CategoryRankingCommand;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Alaete"
        },
        "content": "import seedu.ichifund.logic.parser.ArgumentMultimap;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Alaete"
        },
        "content": "import seedu.ichifund.logic.parser.ArgumentTokenizer;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Alaete"
        },
        "content": "import seedu.ichifund.logic.parser.Parser;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Alaete"
        },
        "content": "import seedu.ichifund.logic.parser.ParserUtil;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Alaete"
        },
        "content": "import seedu.ichifund.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Alaete"
        },
        "content": "import seedu.ichifund.model.date.Month;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Alaete"
        },
        "content": "import seedu.ichifund.model.date.Year;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Alaete"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Alaete"
        },
        "content": "/**"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Alaete"
        },
        "content": " * Parses input arguments and creates a new CategoryRankingCommand object"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Alaete"
        },
        "content": " */"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Alaete"
        },
        "content": "public class CategoryRankingCommandParser implements Parser\u003cCategoryRankingCommand\u003e {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Alaete"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Alaete"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Alaete"
        },
        "content": "     * Parses the given {@code String} of arguments in the context of the CategoryRankingCommand"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Alaete"
        },
        "content": "     * and returns an CategoryRankingCommand object for execution."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Alaete"
        },
        "content": "     * @throws ParseException if the user input does not conform the expected format"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Alaete"
        },
        "content": "     */"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Alaete"
        },
        "content": "    public CategoryRankingCommand parse(String args) throws ParseException {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Alaete"
        },
        "content": "        ArgumentMultimap argMultimap \u003d"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Alaete"
        },
        "content": "                ArgumentTokenizer.tokenize(args, PREFIX_MONTH, PREFIX_YEAR);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Alaete"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Alaete"
        },
        "content": "        if (!argMultimap.getPreamble().isEmpty()) {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Alaete"
        },
        "content": "            throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT,"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Alaete"
        },
        "content": "                    CategoryRankingCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Alaete"
        },
        "content": "        }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Alaete"
        },
        "content": "        Month month \u003d null;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Alaete"
        },
        "content": "        Year year \u003d null;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Alaete"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Alaete"
        },
        "content": "        if (argMultimap.getValue(PREFIX_MONTH).isPresent()) {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Alaete"
        },
        "content": "            month \u003d ParserUtil.parseMonth(argMultimap.getValue(PREFIX_MONTH).get());"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Alaete"
        },
        "content": "        }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Alaete"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Alaete"
        },
        "content": "        if (argMultimap.getValue(PREFIX_YEAR).isPresent()) {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Alaete"
        },
        "content": "            year \u003d ParserUtil.parseYear(argMultimap.getValue(PREFIX_YEAR).get());"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Alaete"
        },
        "content": "        }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Alaete"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Alaete"
        },
        "content": "        Optional\u003cMonth\u003e optionalMonth \u003d Optional.ofNullable(month);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Alaete"
        },
        "content": "        Optional\u003cYear\u003e optionalYear \u003d Optional.ofNullable(year);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Alaete"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Alaete"
        },
        "content": "        return new CategoryRankingCommand(optionalMonth, optionalYear);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Alaete"
        },
        "content": "    }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Alaete"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Alaete": 52
    }
  },
  {
    "path": "src/main/java/seedu/ichifund/logic/parser/analytics/ExpenditureRankingCommandParser.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Alaete"
        },
        "content": "package seedu.ichifund.logic.parser.analytics;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Alaete"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Alaete"
        },
        "content": "import static seedu.ichifund.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Alaete"
        },
        "content": "import static seedu.ichifund.logic.parser.CliSyntax.PREFIX_MONTH;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Alaete"
        },
        "content": "import static seedu.ichifund.logic.parser.CliSyntax.PREFIX_YEAR;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Alaete"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Alaete"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Alaete"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Alaete"
        },
        "content": "import seedu.ichifund.logic.commands.analytics.CategoryRankingCommand;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Alaete"
        },
        "content": "import seedu.ichifund.logic.commands.analytics.ExpenditureRankingCommand;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Alaete"
        },
        "content": "import seedu.ichifund.logic.parser.ArgumentMultimap;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Alaete"
        },
        "content": "import seedu.ichifund.logic.parser.ArgumentTokenizer;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Alaete"
        },
        "content": "import seedu.ichifund.logic.parser.Parser;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Alaete"
        },
        "content": "import seedu.ichifund.logic.parser.ParserUtil;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Alaete"
        },
        "content": "import seedu.ichifund.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Alaete"
        },
        "content": "import seedu.ichifund.model.date.Month;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Alaete"
        },
        "content": "import seedu.ichifund.model.date.Year;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Alaete"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Alaete"
        },
        "content": "/**"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Alaete"
        },
        "content": " * Parses input arguments and creates a new ExpenditureRankingCommand object"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Alaete"
        },
        "content": " */"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Alaete"
        },
        "content": "public class ExpenditureRankingCommandParser implements Parser\u003cExpenditureRankingCommand\u003e {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Alaete"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Alaete"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Alaete"
        },
        "content": "     * Parses the given {@code String} of arguments in the context of the ExpenditureRankingCommand"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Alaete"
        },
        "content": "     * and returns an ExpenditureRankingCommand object for execution."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Alaete"
        },
        "content": "     * @throws ParseException if the user input does not conform the expected format"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Alaete"
        },
        "content": "     */"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Alaete"
        },
        "content": "    public ExpenditureRankingCommand parse(String args) throws ParseException {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Alaete"
        },
        "content": "        ArgumentMultimap argMultimap \u003d"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Alaete"
        },
        "content": "                ArgumentTokenizer.tokenize(args, PREFIX_MONTH, PREFIX_YEAR);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Alaete"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Alaete"
        },
        "content": "        if (!argMultimap.getPreamble().isEmpty()) {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Alaete"
        },
        "content": "            throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT,"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Alaete"
        },
        "content": "                    CategoryRankingCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Alaete"
        },
        "content": "        }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Alaete"
        },
        "content": "        Month month \u003d null;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Alaete"
        },
        "content": "        Year year \u003d null;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Alaete"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Alaete"
        },
        "content": "        if (argMultimap.getValue(PREFIX_MONTH).isPresent()) {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Alaete"
        },
        "content": "            month \u003d ParserUtil.parseMonth(argMultimap.getValue(PREFIX_MONTH).get());"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Alaete"
        },
        "content": "        }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Alaete"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Alaete"
        },
        "content": "        if (argMultimap.getValue(PREFIX_YEAR).isPresent()) {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Alaete"
        },
        "content": "            year \u003d ParserUtil.parseYear(argMultimap.getValue(PREFIX_YEAR).get());"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Alaete"
        },
        "content": "        }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Alaete"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Alaete"
        },
        "content": "        Optional\u003cMonth\u003e optionalMonth \u003d Optional.ofNullable(month);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Alaete"
        },
        "content": "        Optional\u003cYear\u003e optionalYear \u003d Optional.ofNullable(year);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Alaete"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Alaete"
        },
        "content": "        return new ExpenditureRankingCommand(optionalMonth, optionalYear);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Alaete"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Alaete"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Alaete": 53
    }
  },
  {
    "path": "src/main/java/seedu/ichifund/logic/parser/analytics/ExpenditureTrendCommandParser.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Alaete"
        },
        "content": "package seedu.ichifund.logic.parser.analytics;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Alaete"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Alaete"
        },
        "content": "import static seedu.ichifund.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Alaete"
        },
        "content": "import static seedu.ichifund.logic.parser.CliSyntax.PREFIX_YEAR;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Alaete"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Alaete"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Alaete"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Alaete"
        },
        "content": "import seedu.ichifund.logic.commands.analytics.ExpenditureTrendCommand;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Alaete"
        },
        "content": "import seedu.ichifund.logic.parser.ArgumentMultimap;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Alaete"
        },
        "content": "import seedu.ichifund.logic.parser.ArgumentTokenizer;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Alaete"
        },
        "content": "import seedu.ichifund.logic.parser.Parser;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Alaete"
        },
        "content": "import seedu.ichifund.logic.parser.ParserUtil;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Alaete"
        },
        "content": "import seedu.ichifund.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Alaete"
        },
        "content": "import seedu.ichifund.model.date.Year;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Alaete"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Alaete"
        },
        "content": "/**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Alaete"
        },
        "content": " * Parses input arguments and creates a new ExpenditureTrendCommand object"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Alaete"
        },
        "content": " */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Alaete"
        },
        "content": "public class ExpenditureTrendCommandParser implements Parser\u003cExpenditureTrendCommand\u003e {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Alaete"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Alaete"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Alaete"
        },
        "content": "     * Parses the given {@code String} of arguments in the context of the ExpenditureTrendCommand"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Alaete"
        },
        "content": "     * and returns an ExpenditureTrendCommand object for execution."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Alaete"
        },
        "content": "     * @throws ParseException if the user input does not conform the expected format"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Alaete"
        },
        "content": "     */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Alaete"
        },
        "content": "    public ExpenditureTrendCommand parse(String args) throws ParseException {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Alaete"
        },
        "content": "        ArgumentMultimap argMultimap \u003d"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Alaete"
        },
        "content": "                ArgumentTokenizer.tokenize(args, PREFIX_YEAR);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Alaete"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Alaete"
        },
        "content": "        if (!argMultimap.getPreamble().isEmpty()) {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Alaete"
        },
        "content": "            throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT,"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Alaete"
        },
        "content": "                    ExpenditureTrendCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Alaete"
        },
        "content": "        }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Alaete"
        },
        "content": "        Year year \u003d null;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Alaete"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Alaete"
        },
        "content": "        if (argMultimap.getValue(PREFIX_YEAR).isPresent()) {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Alaete"
        },
        "content": "            year \u003d ParserUtil.parseYear(argMultimap.getValue(PREFIX_YEAR).get());"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Alaete"
        },
        "content": "        }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Alaete"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Alaete"
        },
        "content": "        Optional\u003cYear\u003e optionalYear \u003d Optional.ofNullable(year);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Alaete"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Alaete"
        },
        "content": "        return new ExpenditureTrendCommand(optionalYear);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Alaete"
        },
        "content": "    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Alaete"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Alaete": 44
    }
  },
  {
    "path": "src/main/java/seedu/ichifund/logic/parser/analytics/IncomeTrendCommandParser.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Alaete"
        },
        "content": "package seedu.ichifund.logic.parser.analytics;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Alaete"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Alaete"
        },
        "content": "import static seedu.ichifund.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Alaete"
        },
        "content": "import static seedu.ichifund.logic.parser.CliSyntax.PREFIX_YEAR;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Alaete"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Alaete"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Alaete"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Alaete"
        },
        "content": "import seedu.ichifund.logic.commands.analytics.IncomeTrendCommand;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Alaete"
        },
        "content": "import seedu.ichifund.logic.parser.ArgumentMultimap;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Alaete"
        },
        "content": "import seedu.ichifund.logic.parser.ArgumentTokenizer;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Alaete"
        },
        "content": "import seedu.ichifund.logic.parser.Parser;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Alaete"
        },
        "content": "import seedu.ichifund.logic.parser.ParserUtil;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Alaete"
        },
        "content": "import seedu.ichifund.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Alaete"
        },
        "content": "import seedu.ichifund.model.date.Year;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Alaete"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Alaete"
        },
        "content": "/**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Alaete"
        },
        "content": " * Parses input arguments and creates a new ExpenditureTrendCommand object"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Alaete"
        },
        "content": " */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Alaete"
        },
        "content": "public class IncomeTrendCommandParser implements Parser\u003cIncomeTrendCommand\u003e {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Alaete"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Alaete"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Alaete"
        },
        "content": "     * Parses the given {@code String} of arguments in the context of the ExpenditureTrendCommand"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Alaete"
        },
        "content": "     * and returns an ExpenditureTrendCommand object for execution."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Alaete"
        },
        "content": "     * @throws ParseException if the user input does not conform the expected format"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Alaete"
        },
        "content": "     */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Alaete"
        },
        "content": "    public IncomeTrendCommand parse(String args) throws ParseException {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Alaete"
        },
        "content": "        ArgumentMultimap argMultimap \u003d"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Alaete"
        },
        "content": "                ArgumentTokenizer.tokenize(args, PREFIX_YEAR);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Alaete"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Alaete"
        },
        "content": "        if (!argMultimap.getPreamble().isEmpty()) {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Alaete"
        },
        "content": "            throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT, IncomeTrendCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Alaete"
        },
        "content": "        }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Alaete"
        },
        "content": "        Year year \u003d null;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Alaete"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Alaete"
        },
        "content": "        if (argMultimap.getValue(PREFIX_YEAR).isPresent()) {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Alaete"
        },
        "content": "            year \u003d ParserUtil.parseYear(argMultimap.getValue(PREFIX_YEAR).get());"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Alaete"
        },
        "content": "        }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Alaete"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Alaete"
        },
        "content": "        Optional\u003cYear\u003e optionalYear \u003d Optional.ofNullable(year);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Alaete"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Alaete"
        },
        "content": "        return new IncomeTrendCommand(optionalYear);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Alaete"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Alaete"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Alaete": 43
    }
  },
  {
    "path": "src/main/java/seedu/ichifund/logic/parser/analytics/MonthlyExpenditureRankingCommandParser.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Alaete"
        },
        "content": "package seedu.ichifund.logic.parser.analytics;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Alaete"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Alaete"
        },
        "content": "import static seedu.ichifund.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Alaete"
        },
        "content": "import static seedu.ichifund.logic.parser.CliSyntax.PREFIX_YEAR;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Alaete"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Alaete"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Alaete"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Alaete"
        },
        "content": "import seedu.ichifund.logic.commands.analytics.MonthlyExpenditureRankingCommand;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Alaete"
        },
        "content": "import seedu.ichifund.logic.parser.ArgumentMultimap;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Alaete"
        },
        "content": "import seedu.ichifund.logic.parser.ArgumentTokenizer;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Alaete"
        },
        "content": "import seedu.ichifund.logic.parser.Parser;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Alaete"
        },
        "content": "import seedu.ichifund.logic.parser.ParserUtil;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Alaete"
        },
        "content": "import seedu.ichifund.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Alaete"
        },
        "content": "import seedu.ichifund.model.date.Year;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Alaete"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Alaete"
        },
        "content": "/**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Alaete"
        },
        "content": " * Parses input arguments and creates a new MonthlyExpenditureRankingCommand object"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Alaete"
        },
        "content": " */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Alaete"
        },
        "content": "public class MonthlyExpenditureRankingCommandParser implements Parser\u003cMonthlyExpenditureRankingCommand\u003e {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Alaete"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Alaete"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Alaete"
        },
        "content": "     * Parses the given {@code String} of arguments in the context of the MonthlyExpenditureRankingCommand"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Alaete"
        },
        "content": "     * and returns an MonthlyExpenditureRankingCommand object for execution."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Alaete"
        },
        "content": "     * @throws ParseException if the user input does not conform the expected format"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Alaete"
        },
        "content": "     */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Alaete"
        },
        "content": "    public MonthlyExpenditureRankingCommand parse(String args) throws ParseException {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Alaete"
        },
        "content": "        ArgumentMultimap argMultimap \u003d"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Alaete"
        },
        "content": "                ArgumentTokenizer.tokenize(args, PREFIX_YEAR);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Alaete"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Alaete"
        },
        "content": "        if (!argMultimap.getPreamble().isEmpty()) {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Alaete"
        },
        "content": "            throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT,"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Alaete"
        },
        "content": "                    MonthlyExpenditureRankingCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Alaete"
        },
        "content": "        }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Alaete"
        },
        "content": "        Year year \u003d null;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Alaete"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Alaete"
        },
        "content": "        if (argMultimap.getValue(PREFIX_YEAR).isPresent()) {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Alaete"
        },
        "content": "            year \u003d ParserUtil.parseYear(argMultimap.getValue(PREFIX_YEAR).get());"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Alaete"
        },
        "content": "        }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Alaete"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Alaete"
        },
        "content": "        Optional\u003cYear\u003e optionalYear \u003d Optional.ofNullable(year);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Alaete"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Alaete"
        },
        "content": "        return new MonthlyExpenditureRankingCommand(optionalYear);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Alaete"
        },
        "content": "    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Alaete"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Alaete": 44
    }
  },
  {
    "path": "src/main/java/seedu/ichifund/logic/parser/budget/AddBudgetCommandParser.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "nexolute"
        },
        "content": "package seedu.ichifund.logic.parser.budget;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "nexolute"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "nexolute"
        },
        "content": "import static seedu.ichifund.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "nexolute"
        },
        "content": "import static seedu.ichifund.logic.parser.CliSyntax.PREFIX_AMOUNT;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "nexolute"
        },
        "content": "import static seedu.ichifund.logic.parser.CliSyntax.PREFIX_CATEGORY;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "nexolute"
        },
        "content": "import static seedu.ichifund.logic.parser.CliSyntax.PREFIX_DESCRIPTION;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "nexolute"
        },
        "content": "import static seedu.ichifund.logic.parser.CliSyntax.PREFIX_MONTH;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "nexolute"
        },
        "content": "import static seedu.ichifund.logic.parser.CliSyntax.PREFIX_YEAR;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "nexolute"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "nexolute"
        },
        "content": "import java.util.stream.Stream;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "nexolute"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "nexolute"
        },
        "content": "import seedu.ichifund.logic.commands.budget.AddBudgetCommand;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "nexolute"
        },
        "content": "import seedu.ichifund.logic.parser.ArgumentMultimap;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "nexolute"
        },
        "content": "import seedu.ichifund.logic.parser.ArgumentTokenizer;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "nexolute"
        },
        "content": "import seedu.ichifund.logic.parser.Parser;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "nexolute"
        },
        "content": "import seedu.ichifund.logic.parser.ParserUtil;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "nexolute"
        },
        "content": "import seedu.ichifund.logic.parser.Prefix;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "nexolute"
        },
        "content": "import seedu.ichifund.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "import seedu.ichifund.model.Description;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "import seedu.ichifund.model.amount.Amount;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "nexolute"
        },
        "content": "import seedu.ichifund.model.budget.Budget;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "nexolute"
        },
        "content": "import seedu.ichifund.model.date.Month;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "nexolute"
        },
        "content": "import seedu.ichifund.model.date.Year;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "nexolute"
        },
        "content": "import seedu.ichifund.model.transaction.Category;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "nexolute"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "nexolute"
        },
        "content": "/**"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "nexolute"
        },
        "content": " * Parses input arguments and creates a new AddBudgetCommand object"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "nexolute"
        },
        "content": " */"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "nexolute"
        },
        "content": "public class AddBudgetCommandParser implements Parser\u003cAddBudgetCommand\u003e {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "nexolute"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "nexolute"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "nexolute"
        },
        "content": "     * Parses the given {@code String} of arguments in the context of the AddBudgetCommand"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "nexolute"
        },
        "content": "     * and returns an AddBudgetCommand object for execution."
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "nexolute"
        },
        "content": "     * @throws ParseException if the user input does not conform the expected format"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "nexolute"
        },
        "content": "     */"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "nexolute"
        },
        "content": "    public AddBudgetCommand parse(String args) throws ParseException {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "nexolute"
        },
        "content": "        ArgumentMultimap argMultimap \u003d"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "nexolute"
        },
        "content": "                ArgumentTokenizer.tokenize(args, PREFIX_DESCRIPTION, PREFIX_AMOUNT,"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "nexolute"
        },
        "content": "                        PREFIX_MONTH, PREFIX_YEAR, PREFIX_CATEGORY);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "nexolute"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "nexolute"
        },
        "content": "        if (!arePrefixesPresent(argMultimap, PREFIX_DESCRIPTION, PREFIX_AMOUNT)"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "nexolute"
        },
        "content": "                || !argMultimap.getPreamble().isEmpty()) {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "nexolute"
        },
        "content": "            throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT, AddBudgetCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "nexolute"
        },
        "content": "        }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "nexolute"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "nexolute"
        },
        "content": "        Description description \u003d ParserUtil.parseDescription(argMultimap.getValue(PREFIX_DESCRIPTION).get());"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "        Amount amount \u003d ParserUtil.parsePositiveAmount(argMultimap.getValue(PREFIX_AMOUNT).get());"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "nexolute"
        },
        "content": "        Month month \u003d null;"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "nexolute"
        },
        "content": "        Year year \u003d null;"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "nexolute"
        },
        "content": "        Category category \u003d null;"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "nexolute"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "nexolute"
        },
        "content": "        if (argMultimap.getValue(PREFIX_MONTH).isPresent() \u0026\u0026 argMultimap.getValue(PREFIX_YEAR).isPresent()) {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "nexolute"
        },
        "content": "            month \u003d ParserUtil.parseMonth(argMultimap.getValue(PREFIX_MONTH).get());"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "nexolute"
        },
        "content": "            year \u003d ParserUtil.parseYear(argMultimap.getValue(PREFIX_YEAR).get());"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "nexolute"
        },
        "content": "        }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "nexolute"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "nexolute"
        },
        "content": "        if (argMultimap.getValue(PREFIX_CATEGORY).isPresent()) {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "nexolute"
        },
        "content": "            category \u003d ParserUtil.parseCategory(argMultimap.getValue(PREFIX_CATEGORY).get());"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "nexolute"
        },
        "content": "        }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "nexolute"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "nexolute"
        },
        "content": "        Budget budget \u003d new Budget(description, amount, month, year, category);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "nexolute"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "nexolute"
        },
        "content": "        return new AddBudgetCommand(budget);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "nexolute"
        },
        "content": "    }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "nexolute"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "nexolute"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "nexolute"
        },
        "content": "     * Returns true if none of the prefixes contains empty {@code Optional} values in the given"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "nexolute"
        },
        "content": "     * {@code ArgumentMultimap}."
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "nexolute"
        },
        "content": "     */"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "nexolute"
        },
        "content": "    private static boolean arePrefixesPresent(ArgumentMultimap argumentMultimap, Prefix... prefixes) {"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "nexolute"
        },
        "content": "        return Stream.of(prefixes).allMatch(prefix -\u003e argumentMultimap.getValue(prefix).isPresent());"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "nexolute"
        },
        "content": "    }"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "nexolute"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "nexolute"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "nexolute": 71,
      "weiyang13": 3
    }
  },
  {
    "path": "src/main/java/seedu/ichifund/logic/parser/budget/BudgetFeatureParser.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "package seedu.ichifund.logic.parser.budget;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "weiyang13"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "import static seedu.ichifund.commons.core.Messages.MESSAGE_UNKNOWN_COMMAND;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "weiyang13"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "import seedu.ichifund.logic.commands.Command;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "import seedu.ichifund.logic.commands.budget.AddBudgetCommand;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "import seedu.ichifund.logic.commands.budget.DeleteBudgetCommand;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "nexolute"
        },
        "content": "import seedu.ichifund.logic.commands.budget.FindBudgetCommand;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "import seedu.ichifund.logic.parser.FeatureParser;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "import seedu.ichifund.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "weiyang13"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "/**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "weiyang13"
        },
        "content": " * Passes user input to the appropriate Parser for commands related to the budget feature."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "weiyang13"
        },
        "content": " */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "public class BudgetFeatureParser implements FeatureParser {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "weiyang13"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "    private final int tabIndex \u003d 2;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "weiyang13"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "    public String getTabSwitchCommandWord() {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "        return \"budget\";"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "    }"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "weiyang13"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "    public int getTabIndex() {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "        return tabIndex;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "weiyang13"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "    public Command parseCommand(String commandWord, String arguments) throws ParseException {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "        switch(commandWord) {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "        case AddBudgetCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "            return new AddBudgetCommandParser().parse(arguments);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "weiyang13"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "        case DeleteBudgetCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "            return new DeleteBudgetCommandParser().parse(arguments);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "weiyang13"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "nexolute"
        },
        "content": "        case FindBudgetCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "nexolute"
        },
        "content": "            return new FindBudgetCommandParser().parse(arguments);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "nexolute"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "        default:"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "            throw new ParseException(MESSAGE_UNKNOWN_COMMAND);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "        }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "nexolute": 4,
      "weiyang13": 41
    }
  },
  {
    "path": "src/main/java/seedu/ichifund/logic/parser/budget/DeleteBudgetCommandParser.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "nexolute"
        },
        "content": "package seedu.ichifund.logic.parser.budget;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "nexolute"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "nexolute"
        },
        "content": "import static seedu.ichifund.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "nexolute"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "nexolute"
        },
        "content": "import seedu.ichifund.commons.core.index.Index;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "nexolute"
        },
        "content": "import seedu.ichifund.logic.commands.budget.DeleteBudgetCommand;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "nexolute"
        },
        "content": "import seedu.ichifund.logic.parser.Parser;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "nexolute"
        },
        "content": "import seedu.ichifund.logic.parser.ParserUtil;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "nexolute"
        },
        "content": "import seedu.ichifund.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "nexolute"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "nexolute"
        },
        "content": "/**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "nexolute"
        },
        "content": " * Parses input arguments and creates a new DeleteBudgetCommand object"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "nexolute"
        },
        "content": " */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "nexolute"
        },
        "content": "public class DeleteBudgetCommandParser implements Parser\u003cDeleteBudgetCommand\u003e {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "nexolute"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "nexolute"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "nexolute"
        },
        "content": "     * Parses the given {@code String} of arguments in the context of the DeleteBudgetCommand"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "nexolute"
        },
        "content": "     * and returns a DeleteBudgetCommand object for execution."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "nexolute"
        },
        "content": "     * @throws ParseException if the user input does not conform the expected format"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "nexolute"
        },
        "content": "     */"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "nexolute"
        },
        "content": "    public DeleteBudgetCommand parse(String args) throws ParseException {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "nexolute"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "nexolute"
        },
        "content": "            Index index \u003d ParserUtil.parseIndex(args);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "nexolute"
        },
        "content": "            return new DeleteBudgetCommand(index);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "nexolute"
        },
        "content": "        } catch (ParseException pe) {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "nexolute"
        },
        "content": "            throw new ParseException("
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "nexolute"
        },
        "content": "                    String.format(MESSAGE_INVALID_COMMAND_FORMAT, DeleteBudgetCommand.MESSAGE_USAGE), pe);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "nexolute"
        },
        "content": "        }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "nexolute"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "nexolute"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "nexolute"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "nexolute": 31
    }
  },
  {
    "path": "src/main/java/seedu/ichifund/logic/parser/budget/FindBudgetCommandParser.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "nexolute"
        },
        "content": "package seedu.ichifund.logic.parser.budget;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "nexolute"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "nexolute"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "nexolute"
        },
        "content": "import java.util.Collections;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "nexolute"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "nexolute"
        },
        "content": "import seedu.ichifund.logic.commands.budget.FindBudgetCommand;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "nexolute"
        },
        "content": "import seedu.ichifund.logic.parser.Parser;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "nexolute"
        },
        "content": "import seedu.ichifund.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "nexolute"
        },
        "content": "import seedu.ichifund.model.budget.BudgetDescriptionPredicate;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "nexolute"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "nexolute"
        },
        "content": "/**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "nexolute"
        },
        "content": " * Parses input arguments and creates a new FindBudgetCommand object"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "nexolute"
        },
        "content": " */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "nexolute"
        },
        "content": "public class FindBudgetCommandParser implements Parser\u003cFindBudgetCommand\u003e {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "nexolute"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "nexolute"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "nexolute"
        },
        "content": "     * Parses the given {@code String} of arguments in the context of the FindBudgetCommand"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "nexolute"
        },
        "content": "     * and returns a FindBudgetCommand object for execution."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "nexolute"
        },
        "content": "     * @throws ParseException if the user input does not conform the expected format"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "nexolute"
        },
        "content": "     */"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "nexolute"
        },
        "content": "    public FindBudgetCommand parse(String args) throws ParseException {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "nexolute"
        },
        "content": "        String trimmedArgs \u003d args.trim();"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "nexolute"
        },
        "content": "        if (trimmedArgs.isEmpty()) {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "nexolute"
        },
        "content": "            return new FindBudgetCommand(new BudgetDescriptionPredicate(Collections.emptyList()));"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "nexolute"
        },
        "content": "        }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "nexolute"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "nexolute"
        },
        "content": "        String[] nameKeywords \u003d trimmedArgs.split(\"\\\\s+\");"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "nexolute"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "nexolute"
        },
        "content": "        return new FindBudgetCommand(new BudgetDescriptionPredicate(Arrays.asList(nameKeywords)));"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "nexolute"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "nexolute"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "nexolute"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "nexolute": 32
    }
  },
  {
    "path": "src/main/java/seedu/ichifund/logic/parser/exceptions/ParseException.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "nexolute"
        },
        "content": "package seedu.ichifund.logic.parser.exceptions;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "nexolute"
        },
        "content": "import seedu.ichifund.commons.exceptions.IllegalValueException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": " * Represents a parse error encountered by a parser."
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "public class ParseException extends IllegalValueException {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "    public ParseException(String message) {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "        super(message);"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    public ParseException(String message, Throwable cause) {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "        super(message, cause);"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "nexolute": 2,
      "-": 15
    }
  },
  {
    "path": "src/main/java/seedu/ichifund/logic/parser/loan/LoanFeatureParser.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "package seedu.ichifund.logic.parser.loan;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "weiyang13"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "import static seedu.ichifund.commons.core.Messages.MESSAGE_UNKNOWN_COMMAND;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "weiyang13"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "import seedu.ichifund.logic.commands.Command;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "import seedu.ichifund.logic.parser.FeatureParser;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "import seedu.ichifund.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "weiyang13"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "/**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "weiyang13"
        },
        "content": " * Passes user input to the appropriate Parser for commands related to the loan feature."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "weiyang13"
        },
        "content": " */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "public class LoanFeatureParser implements FeatureParser {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "weiyang13"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "    private final int tabIndex \u003d 3;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "weiyang13"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "    public String getTabSwitchCommandWord() {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "        return \"loan\";"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "    }"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "weiyang13"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "    public int getTabIndex() {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "        return tabIndex;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "    }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "weiyang13"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "    public Command parseCommand(String commandWord, String arguments) throws ParseException {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "        switch(commandWord) {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "        default:"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "            throw new ParseException(MESSAGE_UNKNOWN_COMMAND);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "        }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "weiyang13": 33
    }
  },
  {
    "path": "src/main/java/seedu/ichifund/logic/parser/repeater/AddRepeaterCommandParser.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "LeeYiyuan"
        },
        "content": "package seedu.ichifund.logic.parser.repeater;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "LeeYiyuan"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "LeeYiyuan"
        },
        "content": "import static seedu.ichifund.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "LeeYiyuan"
        },
        "content": "import static seedu.ichifund.logic.parser.CliSyntax.PREFIX_AMOUNT;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "LeeYiyuan"
        },
        "content": "import static seedu.ichifund.logic.parser.CliSyntax.PREFIX_CATEGORY;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "LeeYiyuan"
        },
        "content": "import static seedu.ichifund.logic.parser.CliSyntax.PREFIX_DESCRIPTION;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "LeeYiyuan"
        },
        "content": "import static seedu.ichifund.logic.parser.CliSyntax.PREFIX_END_MONTH;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "LeeYiyuan"
        },
        "content": "import static seedu.ichifund.logic.parser.CliSyntax.PREFIX_END_YEAR;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "LeeYiyuan"
        },
        "content": "import static seedu.ichifund.logic.parser.CliSyntax.PREFIX_MONTH_END_OFFSET;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "LeeYiyuan"
        },
        "content": "import static seedu.ichifund.logic.parser.CliSyntax.PREFIX_MONTH_START_OFFSET;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "LeeYiyuan"
        },
        "content": "import static seedu.ichifund.logic.parser.CliSyntax.PREFIX_START_MONTH;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "LeeYiyuan"
        },
        "content": "import static seedu.ichifund.logic.parser.CliSyntax.PREFIX_START_YEAR;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "LeeYiyuan"
        },
        "content": "import static seedu.ichifund.logic.parser.CliSyntax.PREFIX_TRANSACTION_TYPE;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "LeeYiyuan"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "LeeYiyuan"
        },
        "content": "import java.util.stream.Stream;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "LeeYiyuan"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "LeeYiyuan"
        },
        "content": "import seedu.ichifund.logic.commands.repeater.AddRepeaterCommand;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "LeeYiyuan"
        },
        "content": "import seedu.ichifund.logic.parser.ArgumentMultimap;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "LeeYiyuan"
        },
        "content": "import seedu.ichifund.logic.parser.ArgumentTokenizer;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "LeeYiyuan"
        },
        "content": "import seedu.ichifund.logic.parser.Parser;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "LeeYiyuan"
        },
        "content": "import seedu.ichifund.logic.parser.ParserUtil;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "LeeYiyuan"
        },
        "content": "import seedu.ichifund.logic.parser.Prefix;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "LeeYiyuan"
        },
        "content": "import seedu.ichifund.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "LeeYiyuan"
        },
        "content": "import seedu.ichifund.model.Description;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "LeeYiyuan"
        },
        "content": "import seedu.ichifund.model.amount.Amount;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "LeeYiyuan"
        },
        "content": "import seedu.ichifund.model.date.Date;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "LeeYiyuan"
        },
        "content": "import seedu.ichifund.model.date.Day;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "LeeYiyuan"
        },
        "content": "import seedu.ichifund.model.date.Month;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "LeeYiyuan"
        },
        "content": "import seedu.ichifund.model.date.Year;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "LeeYiyuan"
        },
        "content": "import seedu.ichifund.model.repeater.MonthOffset;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "LeeYiyuan"
        },
        "content": "import seedu.ichifund.model.repeater.Repeater;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "LeeYiyuan"
        },
        "content": "import seedu.ichifund.model.repeater.RepeaterUniqueId;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "LeeYiyuan"
        },
        "content": "import seedu.ichifund.model.transaction.Category;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "LeeYiyuan"
        },
        "content": "import seedu.ichifund.model.transaction.TransactionType;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "LeeYiyuan"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "LeeYiyuan"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "LeeYiyuan"
        },
        "content": "/**"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "LeeYiyuan"
        },
        "content": " * Parses input arguments and creates a new AddRepeaterCommand object."
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "LeeYiyuan"
        },
        "content": " */"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "LeeYiyuan"
        },
        "content": "public class AddRepeaterCommandParser implements Parser\u003cAddRepeaterCommand\u003e {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "LeeYiyuan"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "LeeYiyuan"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "LeeYiyuan"
        },
        "content": "     * Parses the given {@code String} of arguments in the context of the AddCommand"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "LeeYiyuan"
        },
        "content": "     * and returns an AddRepeaterCommand object for execution."
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "LeeYiyuan"
        },
        "content": "     * @throws ParseException if the user input does not conform the expected format"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "LeeYiyuan"
        },
        "content": "     */"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "LeeYiyuan"
        },
        "content": "    public AddRepeaterCommand parse(String args) throws ParseException {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "LeeYiyuan"
        },
        "content": "        ArgumentMultimap argMultimap \u003d"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "LeeYiyuan"
        },
        "content": "                ArgumentTokenizer.tokenize(args, PREFIX_DESCRIPTION, PREFIX_AMOUNT, PREFIX_CATEGORY,"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "LeeYiyuan"
        },
        "content": "                        PREFIX_TRANSACTION_TYPE, PREFIX_MONTH_START_OFFSET, PREFIX_MONTH_END_OFFSET,"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "LeeYiyuan"
        },
        "content": "                        PREFIX_START_MONTH, PREFIX_START_YEAR,"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "LeeYiyuan"
        },
        "content": "                        PREFIX_END_MONTH, PREFIX_END_YEAR);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "LeeYiyuan"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "LeeYiyuan"
        },
        "content": "        if (!arePrefixesPresent(argMultimap, PREFIX_DESCRIPTION, PREFIX_AMOUNT, PREFIX_CATEGORY,"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "LeeYiyuan"
        },
        "content": "                        PREFIX_TRANSACTION_TYPE, PREFIX_MONTH_START_OFFSET, PREFIX_MONTH_END_OFFSET,"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "LeeYiyuan"
        },
        "content": "                        PREFIX_START_MONTH, PREFIX_START_YEAR,"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "LeeYiyuan"
        },
        "content": "                        PREFIX_END_MONTH, PREFIX_END_YEAR)"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "LeeYiyuan"
        },
        "content": "                || !argMultimap.getPreamble().isEmpty()) {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "LeeYiyuan"
        },
        "content": "            throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT,"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "LeeYiyuan"
        },
        "content": "                    AddRepeaterCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "LeeYiyuan"
        },
        "content": "        }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "LeeYiyuan"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "LeeYiyuan"
        },
        "content": "        RepeaterUniqueId uniqueId \u003d new RepeaterUniqueId(\"\"); // Delegate assignment to command execution."
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "LeeYiyuan"
        },
        "content": "        Description description \u003d ParserUtil.parseDescription(argMultimap.getValue(PREFIX_DESCRIPTION).get());"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "LeeYiyuan"
        },
        "content": "        Amount amount \u003d ParserUtil.parsePositiveAmount(argMultimap.getValue(PREFIX_AMOUNT).get());"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "LeeYiyuan"
        },
        "content": "        Category category \u003d ParserUtil.parseCategory(argMultimap.getValue(PREFIX_CATEGORY).get());"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "LeeYiyuan"
        },
        "content": "        TransactionType transactionType \u003d ParserUtil.parseTransactionType(argMultimap"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "LeeYiyuan"
        },
        "content": "                .getValue(PREFIX_TRANSACTION_TYPE).get());"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "LeeYiyuan"
        },
        "content": "        MonthOffset monthStartOffset \u003d ParserUtil.parseMonthOffset(argMultimap"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "LeeYiyuan"
        },
        "content": "                .getValue(PREFIX_MONTH_START_OFFSET).get());"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "LeeYiyuan"
        },
        "content": "        MonthOffset monthEndOffset \u003d ParserUtil.parseMonthOffset(argMultimap"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "LeeYiyuan"
        },
        "content": "                .getValue(PREFIX_MONTH_END_OFFSET).get());"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "LeeYiyuan"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "LeeYiyuan"
        },
        "content": "        Month startMonth \u003d ParserUtil.parseMonth(argMultimap.getValue(PREFIX_START_MONTH).get());"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "LeeYiyuan"
        },
        "content": "        Year startYear \u003d ParserUtil.parseYear(argMultimap.getValue(PREFIX_START_YEAR).get());"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "LeeYiyuan"
        },
        "content": "        Date startDate \u003d constructDate(new Day(\"1\"), startMonth, startYear);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "LeeYiyuan"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "LeeYiyuan"
        },
        "content": "        Month endMonth \u003d ParserUtil.parseMonth(argMultimap.getValue(PREFIX_END_MONTH).get());"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "LeeYiyuan"
        },
        "content": "        Year endYear \u003d ParserUtil.parseYear(argMultimap.getValue(PREFIX_END_YEAR).get());"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "LeeYiyuan"
        },
        "content": "        Date endDate \u003d constructDate(new Day(\"1\"), endMonth, endYear);"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "LeeYiyuan"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "LeeYiyuan"
        },
        "content": "        Repeater repeater \u003d new Repeater(uniqueId, description, amount, category, transactionType,"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "LeeYiyuan"
        },
        "content": "                monthStartOffset, monthEndOffset, startDate, endDate);"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "LeeYiyuan"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "LeeYiyuan"
        },
        "content": "        return new AddRepeaterCommand(repeater);"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "LeeYiyuan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "LeeYiyuan"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "LeeYiyuan"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "LeeYiyuan"
        },
        "content": "     * Returns a {@code Date} object from the {@code day}, {@code month} and {@code year}."
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "LeeYiyuan"
        },
        "content": "     *"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "LeeYiyuan"
        },
        "content": "     * @param day The {@code Day} of the year to be returned."
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "LeeYiyuan"
        },
        "content": "     * @param month The {@code Month} of the year to be returned."
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "LeeYiyuan"
        },
        "content": "     * @param year The {@code Year} of the year to be returned."
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "LeeYiyuan"
        },
        "content": "     * @return A {@code Date} object composed of {@code day}, {@code month} and {@code year}"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "LeeYiyuan"
        },
        "content": "     * @throws ParseException If day does not match month and year."
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "LeeYiyuan"
        },
        "content": "     */"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "LeeYiyuan"
        },
        "content": "    private static Date constructDate(Day day, Month month, Year year) throws ParseException {"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "LeeYiyuan"
        },
        "content": "        if (Date.isValidDate(day, month, year)) {"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "LeeYiyuan"
        },
        "content": "            return new Date(day, month, year);"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "LeeYiyuan"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "LeeYiyuan"
        },
        "content": "            throw new ParseException(Date.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "LeeYiyuan"
        },
        "content": "        }"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "LeeYiyuan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "LeeYiyuan"
        },
        "content": ""
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "LeeYiyuan"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "LeeYiyuan"
        },
        "content": "     * Returns true if none of the prefixes contains empty {@code Optional} values in the given"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "LeeYiyuan"
        },
        "content": "     * {@code ArgumentMultimap}."
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "LeeYiyuan"
        },
        "content": "     */"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "LeeYiyuan"
        },
        "content": "    private static boolean arePrefixesPresent(ArgumentMultimap argumentMultimap, Prefix... prefixes) {"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "LeeYiyuan"
        },
        "content": "        return Stream.of(prefixes).allMatch(prefix -\u003e argumentMultimap.getValue(prefix).isPresent());"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "LeeYiyuan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "LeeYiyuan"
        },
        "content": ""
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "LeeYiyuan"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "LeeYiyuan": 113
    }
  },
  {
    "path": "src/main/java/seedu/ichifund/logic/parser/repeater/DeleteRepeaterCommandParser.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "LeeYiyuan"
        },
        "content": "package seedu.ichifund.logic.parser.repeater;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "LeeYiyuan"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "LeeYiyuan"
        },
        "content": "import static seedu.ichifund.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "LeeYiyuan"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "LeeYiyuan"
        },
        "content": "import seedu.ichifund.commons.core.index.Index;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "LeeYiyuan"
        },
        "content": "import seedu.ichifund.logic.commands.repeater.DeleteRepeaterCommand;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "LeeYiyuan"
        },
        "content": "import seedu.ichifund.logic.parser.Parser;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "LeeYiyuan"
        },
        "content": "import seedu.ichifund.logic.parser.ParserUtil;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "LeeYiyuan"
        },
        "content": "import seedu.ichifund.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "LeeYiyuan"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "LeeYiyuan"
        },
        "content": "/**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "LeeYiyuan"
        },
        "content": " * Parses input arguments and creates a new DeleteRepeaterCommand object"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "LeeYiyuan"
        },
        "content": " */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "LeeYiyuan"
        },
        "content": "public class DeleteRepeaterCommandParser implements Parser\u003cDeleteRepeaterCommand\u003e {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "LeeYiyuan"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "LeeYiyuan"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "LeeYiyuan"
        },
        "content": "     * Parses the given {@code String} of arguments in the context of the DeleteRepeaterCommand"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "LeeYiyuan"
        },
        "content": "     * and returns a DeleteRepeaterCommand object for execution."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "LeeYiyuan"
        },
        "content": "     * @throws ParseException if the user input does not conform the expected format"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "LeeYiyuan"
        },
        "content": "     */"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "LeeYiyuan"
        },
        "content": "    public DeleteRepeaterCommand parse(String args) throws ParseException {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "LeeYiyuan"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "LeeYiyuan"
        },
        "content": "            Index index \u003d ParserUtil.parseIndex(args);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "LeeYiyuan"
        },
        "content": "            return new DeleteRepeaterCommand(index);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "LeeYiyuan"
        },
        "content": "        } catch (ParseException pe) {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "LeeYiyuan"
        },
        "content": "            throw new ParseException("
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "LeeYiyuan"
        },
        "content": "                    String.format(MESSAGE_INVALID_COMMAND_FORMAT, DeleteRepeaterCommand.MESSAGE_USAGE), pe);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "LeeYiyuan"
        },
        "content": "        }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "LeeYiyuan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "LeeYiyuan"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "LeeYiyuan"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "LeeYiyuan": 31
    }
  },
  {
    "path": "src/main/java/seedu/ichifund/logic/parser/repeater/EditRepeaterCommandParser.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "LeeYiyuan"
        },
        "content": "package seedu.ichifund.logic.parser.repeater;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "LeeYiyuan"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "LeeYiyuan"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "LeeYiyuan"
        },
        "content": "import static seedu.ichifund.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "LeeYiyuan"
        },
        "content": "import static seedu.ichifund.logic.parser.CliSyntax.PREFIX_AMOUNT;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "LeeYiyuan"
        },
        "content": "import static seedu.ichifund.logic.parser.CliSyntax.PREFIX_CATEGORY;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "LeeYiyuan"
        },
        "content": "import static seedu.ichifund.logic.parser.CliSyntax.PREFIX_DESCRIPTION;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "LeeYiyuan"
        },
        "content": "import static seedu.ichifund.logic.parser.CliSyntax.PREFIX_END_MONTH;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "LeeYiyuan"
        },
        "content": "import static seedu.ichifund.logic.parser.CliSyntax.PREFIX_END_YEAR;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "LeeYiyuan"
        },
        "content": "import static seedu.ichifund.logic.parser.CliSyntax.PREFIX_MONTH_END_OFFSET;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "LeeYiyuan"
        },
        "content": "import static seedu.ichifund.logic.parser.CliSyntax.PREFIX_MONTH_START_OFFSET;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "LeeYiyuan"
        },
        "content": "import static seedu.ichifund.logic.parser.CliSyntax.PREFIX_START_MONTH;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "LeeYiyuan"
        },
        "content": "import static seedu.ichifund.logic.parser.CliSyntax.PREFIX_START_YEAR;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "LeeYiyuan"
        },
        "content": "import static seedu.ichifund.logic.parser.CliSyntax.PREFIX_TRANSACTION_TYPE;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "LeeYiyuan"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "LeeYiyuan"
        },
        "content": "import seedu.ichifund.commons.core.index.Index;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "LeeYiyuan"
        },
        "content": "import seedu.ichifund.logic.commands.repeater.EditRepeaterCommand;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "LeeYiyuan"
        },
        "content": "import seedu.ichifund.logic.commands.repeater.EditRepeaterCommand.EditRepeaterDescriptor;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "LeeYiyuan"
        },
        "content": "import seedu.ichifund.logic.parser.ArgumentMultimap;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "LeeYiyuan"
        },
        "content": "import seedu.ichifund.logic.parser.ArgumentTokenizer;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "LeeYiyuan"
        },
        "content": "import seedu.ichifund.logic.parser.Parser;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "LeeYiyuan"
        },
        "content": "import seedu.ichifund.logic.parser.ParserUtil;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "LeeYiyuan"
        },
        "content": "import seedu.ichifund.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "LeeYiyuan"
        },
        "content": "import seedu.ichifund.model.date.Date;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "LeeYiyuan"
        },
        "content": "import seedu.ichifund.model.date.Day;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "LeeYiyuan"
        },
        "content": "import seedu.ichifund.model.date.Month;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "LeeYiyuan"
        },
        "content": "import seedu.ichifund.model.date.Year;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "LeeYiyuan"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "LeeYiyuan"
        },
        "content": "/**"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "LeeYiyuan"
        },
        "content": " * Parses input arguments and creates a new EditRepeaterCommand object"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "LeeYiyuan"
        },
        "content": " */"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "LeeYiyuan"
        },
        "content": "public class EditRepeaterCommandParser implements Parser\u003cEditRepeaterCommand\u003e {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "LeeYiyuan"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "LeeYiyuan"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "LeeYiyuan"
        },
        "content": "     * Parses the given {@code String} of arguments in the context of the EditRepeaterCommand"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "LeeYiyuan"
        },
        "content": "     * and returns an EditRepeaterCommand object for execution."
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "LeeYiyuan"
        },
        "content": "     * @throws ParseException if the user input does not conform the expected format"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "LeeYiyuan"
        },
        "content": "     */"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "LeeYiyuan"
        },
        "content": "    public EditRepeaterCommand parse(String args) throws ParseException {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "LeeYiyuan"
        },
        "content": "        requireNonNull(args);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "LeeYiyuan"
        },
        "content": "        ArgumentMultimap argMultimap \u003d ArgumentTokenizer.tokenize(args,"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "LeeYiyuan"
        },
        "content": "                PREFIX_DESCRIPTION, PREFIX_AMOUNT, PREFIX_CATEGORY, PREFIX_TRANSACTION_TYPE,"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "LeeYiyuan"
        },
        "content": "                PREFIX_MONTH_START_OFFSET, PREFIX_MONTH_END_OFFSET, PREFIX_START_MONTH, PREFIX_START_YEAR,"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "LeeYiyuan"
        },
        "content": "                PREFIX_END_MONTH, PREFIX_END_YEAR);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "LeeYiyuan"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "LeeYiyuan"
        },
        "content": "        Index index;"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "LeeYiyuan"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "LeeYiyuan"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "LeeYiyuan"
        },
        "content": "            index \u003d ParserUtil.parseIndex(argMultimap.getPreamble());"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "LeeYiyuan"
        },
        "content": "        } catch (ParseException pe) {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "LeeYiyuan"
        },
        "content": "            throw new ParseException("
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "LeeYiyuan"
        },
        "content": "                    String.format(MESSAGE_INVALID_COMMAND_FORMAT, EditRepeaterCommand.MESSAGE_USAGE),"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "LeeYiyuan"
        },
        "content": "                    pe);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "LeeYiyuan"
        },
        "content": "        }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "LeeYiyuan"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "LeeYiyuan"
        },
        "content": "        EditRepeaterDescriptor editRepeaterDescriptor \u003d new EditRepeaterDescriptor();"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "LeeYiyuan"
        },
        "content": "        if (argMultimap.getValue(PREFIX_DESCRIPTION).isPresent()) {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "LeeYiyuan"
        },
        "content": "            editRepeaterDescriptor.setDescription(ParserUtil.parseDescription("
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "LeeYiyuan"
        },
        "content": "                        argMultimap.getValue(PREFIX_DESCRIPTION).get()));"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "LeeYiyuan"
        },
        "content": "        }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "LeeYiyuan"
        },
        "content": "        if (argMultimap.getValue(PREFIX_AMOUNT).isPresent()) {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "LeeYiyuan"
        },
        "content": "            editRepeaterDescriptor.setAmount(ParserUtil.parseAmount("
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "LeeYiyuan"
        },
        "content": "                        argMultimap.getValue(PREFIX_AMOUNT).get()));"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "LeeYiyuan"
        },
        "content": "        }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "LeeYiyuan"
        },
        "content": "        if (argMultimap.getValue(PREFIX_CATEGORY).isPresent()) {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "LeeYiyuan"
        },
        "content": "            editRepeaterDescriptor.setCategory(ParserUtil.parseCategory("
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "LeeYiyuan"
        },
        "content": "                        argMultimap.getValue(PREFIX_CATEGORY).get()));"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "LeeYiyuan"
        },
        "content": "        }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "LeeYiyuan"
        },
        "content": "        if (argMultimap.getValue(PREFIX_TRANSACTION_TYPE).isPresent()) {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "LeeYiyuan"
        },
        "content": "            editRepeaterDescriptor.setTransactionType(ParserUtil.parseTransactionType("
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "LeeYiyuan"
        },
        "content": "                        argMultimap.getValue(PREFIX_TRANSACTION_TYPE).get()));"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "LeeYiyuan"
        },
        "content": "        }"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "LeeYiyuan"
        },
        "content": "        if (argMultimap.getValue(PREFIX_MONTH_START_OFFSET).isPresent()) {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "LeeYiyuan"
        },
        "content": "            editRepeaterDescriptor.setMonthStartOffset(ParserUtil.parseMonthOffset("
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "LeeYiyuan"
        },
        "content": "                        argMultimap.getValue(PREFIX_MONTH_START_OFFSET).get()));"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "LeeYiyuan"
        },
        "content": "        }"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "LeeYiyuan"
        },
        "content": "        if (argMultimap.getValue(PREFIX_MONTH_END_OFFSET).isPresent()) {"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "LeeYiyuan"
        },
        "content": "            editRepeaterDescriptor.setMonthEndOffset(ParserUtil.parseMonthOffset("
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "LeeYiyuan"
        },
        "content": "                        argMultimap.getValue(PREFIX_MONTH_END_OFFSET).get()));"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "LeeYiyuan"
        },
        "content": "        }"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "LeeYiyuan"
        },
        "content": "        if (argMultimap.getValue(PREFIX_START_MONTH).isPresent()) {"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "LeeYiyuan"
        },
        "content": "            if (argMultimap.getValue(PREFIX_START_YEAR).isPresent()) {"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "LeeYiyuan"
        },
        "content": "                Month startMonth \u003d ParserUtil.parseMonth(argMultimap.getValue(PREFIX_START_MONTH).get());"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "LeeYiyuan"
        },
        "content": "                Year startYear \u003d ParserUtil.parseYear(argMultimap.getValue(PREFIX_START_YEAR).get());"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "LeeYiyuan"
        },
        "content": "                Date startDate \u003d constructDate(new Day(\"1\"), startMonth, startYear);"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "LeeYiyuan"
        },
        "content": "                editRepeaterDescriptor.setStartDate(startDate);"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "LeeYiyuan"
        },
        "content": "            }"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "LeeYiyuan"
        },
        "content": "        }"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "LeeYiyuan"
        },
        "content": "        if (argMultimap.getValue(PREFIX_END_MONTH).isPresent()) {"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "LeeYiyuan"
        },
        "content": "            if (argMultimap.getValue(PREFIX_END_YEAR).isPresent()) {"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "LeeYiyuan"
        },
        "content": "                Month endMonth \u003d ParserUtil.parseMonth(argMultimap.getValue(PREFIX_END_MONTH).get());"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "LeeYiyuan"
        },
        "content": "                Year endYear \u003d ParserUtil.parseYear(argMultimap.getValue(PREFIX_END_YEAR).get());"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "LeeYiyuan"
        },
        "content": "                Date endDate \u003d constructDate(new Day(\"1\"), endMonth, endYear);"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "LeeYiyuan"
        },
        "content": "                editRepeaterDescriptor.setEndDate(endDate);"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "LeeYiyuan"
        },
        "content": "            }"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "LeeYiyuan"
        },
        "content": "        }"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "LeeYiyuan"
        },
        "content": ""
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "LeeYiyuan"
        },
        "content": "        if (!editRepeaterDescriptor.isAnyFieldEdited()) {"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "LeeYiyuan"
        },
        "content": "            throw new ParseException(EditRepeaterCommand.MESSAGE_NOT_EDITED);"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "LeeYiyuan"
        },
        "content": "        }"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "LeeYiyuan"
        },
        "content": ""
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "LeeYiyuan"
        },
        "content": "        return new EditRepeaterCommand(index, editRepeaterDescriptor);"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "LeeYiyuan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "LeeYiyuan"
        },
        "content": ""
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "LeeYiyuan"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "LeeYiyuan"
        },
        "content": "     * Returns a {@code Date} object from the {@code day}, {@code month} and {@code year}."
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "LeeYiyuan"
        },
        "content": "     *"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "LeeYiyuan"
        },
        "content": "     * @param day The {@code Day} of the year to be returned."
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "LeeYiyuan"
        },
        "content": "     * @param month The {@code Month} of the year to be returned."
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "LeeYiyuan"
        },
        "content": "     * @param year The {@code Year} of the year to be returned."
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "LeeYiyuan"
        },
        "content": "     * @return A {@code Date} object composed of {@code day}, {@code month} and {@code year}"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "LeeYiyuan"
        },
        "content": "     * @throws ParseException If day does not match month and year."
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "LeeYiyuan"
        },
        "content": "     */"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "LeeYiyuan"
        },
        "content": "    private static Date constructDate(Day day, Month month, Year year) throws ParseException {"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "LeeYiyuan"
        },
        "content": "        if (Date.isValidDate(day, month, year)) {"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "LeeYiyuan"
        },
        "content": "            return new Date(day, month, year);"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "LeeYiyuan"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "LeeYiyuan"
        },
        "content": "            throw new ParseException(Date.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "LeeYiyuan"
        },
        "content": "        }"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "LeeYiyuan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "LeeYiyuan"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "LeeYiyuan": 121
    }
  },
  {
    "path": "src/main/java/seedu/ichifund/logic/parser/repeater/RepeaterFeatureParser.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "package seedu.ichifund.logic.parser.repeater;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "weiyang13"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "import static seedu.ichifund.commons.core.Messages.MESSAGE_UNKNOWN_COMMAND;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "weiyang13"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "import seedu.ichifund.logic.commands.Command;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "import seedu.ichifund.logic.commands.repeater.AddRepeaterCommand;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "LeeYiyuan"
        },
        "content": "import seedu.ichifund.logic.commands.repeater.DeleteRepeaterCommand;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "LeeYiyuan"
        },
        "content": "import seedu.ichifund.logic.commands.repeater.EditRepeaterCommand;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "import seedu.ichifund.logic.parser.FeatureParser;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "import seedu.ichifund.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "weiyang13"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "/**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "weiyang13"
        },
        "content": " * Passes user input to the appropriate Parser for commands related to the repeater feature."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "weiyang13"
        },
        "content": " */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "public class RepeaterFeatureParser implements FeatureParser {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "weiyang13"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "    private final int tabIndex \u003d 1;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "weiyang13"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "    public String getTabSwitchCommandWord() {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "        return \"rep\";"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "    }"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "weiyang13"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "    public int getTabIndex() {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "        return tabIndex;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "weiyang13"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "    public Command parseCommand(String commandWord, String arguments) throws ParseException {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "        switch(commandWord) {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "weiyang13"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "        case AddRepeaterCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "            return new AddRepeaterCommandParser().parse(arguments);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "weiyang13"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "LeeYiyuan"
        },
        "content": "        case DeleteRepeaterCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "LeeYiyuan"
        },
        "content": "            return new DeleteRepeaterCommandParser().parse(arguments);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "LeeYiyuan"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "LeeYiyuan"
        },
        "content": "        case EditRepeaterCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "LeeYiyuan"
        },
        "content": "            return new EditRepeaterCommandParser().parse(arguments);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "LeeYiyuan"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "        default:"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "            throw new ParseException(MESSAGE_UNKNOWN_COMMAND);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "        }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "LeeYiyuan": 8,
      "weiyang13": 38
    }
  },
  {
    "path": "src/main/java/seedu/ichifund/logic/parser/transaction/AddTransactionCommandParser.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "package seedu.ichifund.logic.parser.transaction;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "weiyang13"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "import static seedu.ichifund.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "import static seedu.ichifund.logic.parser.CliSyntax.PREFIX_AMOUNT;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "import static seedu.ichifund.logic.parser.CliSyntax.PREFIX_CATEGORY;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "import static seedu.ichifund.logic.parser.CliSyntax.PREFIX_DAY;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "import static seedu.ichifund.logic.parser.CliSyntax.PREFIX_DESCRIPTION;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "import static seedu.ichifund.logic.parser.CliSyntax.PREFIX_MONTH;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "import static seedu.ichifund.logic.parser.CliSyntax.PREFIX_TRANSACTION_TYPE;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "import static seedu.ichifund.logic.parser.CliSyntax.PREFIX_YEAR;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "weiyang13"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "import java.util.stream.Stream;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "weiyang13"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "import seedu.ichifund.logic.commands.transaction.AddTransactionCommand;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "import seedu.ichifund.logic.parser.ArgumentMultimap;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "import seedu.ichifund.logic.parser.ArgumentTokenizer;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "import seedu.ichifund.logic.parser.Parser;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "import seedu.ichifund.logic.parser.ParserUtil;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "import seedu.ichifund.logic.parser.Prefix;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "import seedu.ichifund.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "import seedu.ichifund.model.Description;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "import seedu.ichifund.model.amount.Amount;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "import seedu.ichifund.model.date.Day;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "import seedu.ichifund.model.date.Month;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "import seedu.ichifund.model.date.Year;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "import seedu.ichifund.model.transaction.Category;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "import seedu.ichifund.model.transaction.TransactionType;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "weiyang13"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "weiyang13"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "/**"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "weiyang13"
        },
        "content": " * Parses input arguments and creates a new AddTransactionCommand object."
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "weiyang13"
        },
        "content": " */"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "public class AddTransactionCommandParser implements Parser\u003cAddTransactionCommand\u003e {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "weiyang13"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "     * Parses the given {@code String} of arguments in the context of the AddCommand"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "     * and returns an AddTransactionCommand object for execution."
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "     * @throws ParseException if the user input does not conform the expected format"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "     */"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "    public AddTransactionCommand parse(String args) throws ParseException {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "        ArgumentMultimap argMultimap \u003d"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "                ArgumentTokenizer.tokenize(args, PREFIX_DESCRIPTION, PREFIX_AMOUNT, PREFIX_CATEGORY, PREFIX_DAY,"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "                        PREFIX_MONTH, PREFIX_YEAR, PREFIX_TRANSACTION_TYPE);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "weiyang13"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "        if (!arePrefixesPresent(argMultimap, PREFIX_DESCRIPTION, PREFIX_AMOUNT)"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "                || !argMultimap.getPreamble().isEmpty()) {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "            throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT,"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "                    AddTransactionCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "        }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "weiyang13"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "        Description description \u003d ParserUtil.parseDescription(argMultimap.getValue(PREFIX_DESCRIPTION).get());"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "        Amount amount \u003d ParserUtil.parsePositiveAmount(argMultimap.getValue(PREFIX_AMOUNT).get());"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "        Optional\u003cCategory\u003e category \u003d parseCategory(argMultimap);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "        Optional\u003cDay\u003e day \u003d parseDay(argMultimap);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "        Optional\u003cMonth\u003e month \u003d parseMonth(argMultimap);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "        Optional\u003cYear\u003e year \u003d parseYear(argMultimap);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "        Optional\u003cTransactionType\u003e transactionType \u003d parseTransactionType(argMultimap);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "weiyang13"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "        AddTransactionCommand.AddTransactionCommandBuilder builder \u003d"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "                new AddTransactionCommand.AddTransactionCommandBuilder();"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "        builder.setDescription(description);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "        builder.setAmount(amount);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "        builder.setCategory(category);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "        builder.setDay(day);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "        builder.setMonth(month);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "        builder.setYear(year);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "        builder.setTransactionType(transactionType);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "weiyang13"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "        return builder.build();"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "    }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "weiyang13"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "     * Parses the {@code Month} field in an {@code ArgumentMultimap}, if present, into"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "     * a {@code Month} object, and wraps it in a {@code Optional} object"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "     * Else, an empty {@code Optional} object is returned."
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "     *"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "     * @throws ParseException if the string in {@code argMultimap} is invalid."
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "     */"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "    private Optional\u003cDay\u003e parseDay(ArgumentMultimap argMultimap) throws ParseException {"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "        Optional\u003cString\u003e dayString \u003d argMultimap.getValue(PREFIX_DAY);"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "        if (dayString.isEmpty()) {"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "            return Optional.empty();"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "            return Optional.of(ParserUtil.parseDay(dayString.get()));"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "        }"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "    }"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "weiyang13"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "     * Parses the {@code Month} field in an {@code ArgumentMultimap}, if present, into"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "     * a {@code Month} object, and wraps it in a {@code Optional} object"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "     * Else, an empty {@code Optional} object is returned."
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "     *"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "     * @throws ParseException if the string in {@code argMultimap} is invalid."
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "     */"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "    private Optional\u003cMonth\u003e parseMonth(ArgumentMultimap argMultimap) throws ParseException {"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "        Optional\u003cString\u003e monthString \u003d argMultimap.getValue(PREFIX_MONTH);"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "        if (monthString.isEmpty()) {"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "            return Optional.empty();"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "            return Optional.of(ParserUtil.parseMonth(monthString.get()));"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "        }"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "    }"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "weiyang13"
        },
        "content": ""
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "     * Parses the {@code Year} field in an {@code ArgumentMultimap}, if present, into"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "     * a {@code Year} object, and wraps it in a {@code Optional} object"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "     * Else, an empty {@code Optional} object is returned."
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "     *"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "     * @throws ParseException if the string in {@code argMultimap} is invalid."
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "     */"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "    private Optional\u003cYear\u003e parseYear(ArgumentMultimap argMultimap) throws ParseException {"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "        Optional\u003cString\u003e yearString \u003d argMultimap.getValue(PREFIX_YEAR);"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "        if (yearString.isEmpty()) {"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "            return Optional.empty();"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "            return Optional.of(ParserUtil.parseYear(yearString.get()));"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "        }"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "    }"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "weiyang13"
        },
        "content": ""
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "     * Parses the {@code Category} field in an {@code ArgumentMultimap}, if present, into"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "     * a {@code Category} object, and wraps it into an {@code Optional} object."
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "     * Else, an empty {@code Optional} object is returned."
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "     *"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "     * @throws ParseException if the string in {@code argMultimap} is invalid."
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "     */"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "    private Optional\u003cCategory\u003e parseCategory(ArgumentMultimap argMultimap) throws ParseException {"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "        Optional\u003cString\u003e categoryString \u003d argMultimap.getValue(PREFIX_CATEGORY);"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "        if (categoryString.isEmpty()) {"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "            return Optional.empty();"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "            return Optional.of(ParserUtil.parseCategory(categoryString.get()));"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "        }"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "    }"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "weiyang13"
        },
        "content": ""
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "     * Parses the {@code TransactionType} field in an {@code ArgumentMultimap}, if present, into"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "     * a {@code TransactionType} object, and wraps it into an {@code Optional} object."
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "     * Else, an empty {@code Optional} object is returned."
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "     *"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "     * @throws ParseException if the string in {@code argMultimap} is invalid."
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "     */"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "    private Optional\u003cTransactionType\u003e parseTransactionType(ArgumentMultimap argMultimap) throws ParseException {"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "        Optional\u003cString\u003e typeString \u003d argMultimap.getValue(PREFIX_TRANSACTION_TYPE);"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "        if (typeString.isEmpty()) {"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "            return Optional.empty();"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "            return Optional.of(ParserUtil.parseTransactionType(typeString.get()));"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "        }"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "    }"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "weiyang13"
        },
        "content": ""
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "weiyang13"
        },
        "content": ""
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "weiyang13"
        },
        "content": ""
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "     * Returns true if none of the prefixes contains empty {@code Optional} values in the given"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "     * {@code ArgumentMultimap}."
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "     */"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "    private static boolean arePrefixesPresent(ArgumentMultimap argumentMultimap, Prefix... prefixes) {"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "        return Stream.of(prefixes).allMatch(prefix -\u003e argumentMultimap.getValue(prefix).isPresent());"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "    }"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "weiyang13"
        },
        "content": ""
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "weiyang13": 163
    }
  },
  {
    "path": "src/main/java/seedu/ichifund/logic/parser/transaction/DeleteTransactionCommandParser.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "package seedu.ichifund.logic.parser.transaction;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "weiyang13"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "import static seedu.ichifund.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "weiyang13"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "import seedu.ichifund.commons.core.index.Index;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "import seedu.ichifund.logic.commands.transaction.DeleteTransactionCommand;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "import seedu.ichifund.logic.parser.Parser;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "import seedu.ichifund.logic.parser.ParserUtil;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "import seedu.ichifund.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "weiyang13"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "/**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "weiyang13"
        },
        "content": " * Parses input arguments and creates a new DeleteTransactionCommand object"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "weiyang13"
        },
        "content": " */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "public class DeleteTransactionCommandParser implements Parser\u003cDeleteTransactionCommand\u003e {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "weiyang13"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "     * Parses the given {@code String} of arguments in the context of the DeleteTransactionCommand"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "     * and returns a DeleteTransactionCommand object for execution."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "     * @throws ParseException if the user input does not conform the expected format"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "     */"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "    public DeleteTransactionCommand parse(String args) throws ParseException {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "            Index index \u003d ParserUtil.parseIndex(args);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "            return new DeleteTransactionCommand(index);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "        } catch (ParseException pe) {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "            throw new ParseException("
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "                    String.format(MESSAGE_INVALID_COMMAND_FORMAT, DeleteTransactionCommand.MESSAGE_USAGE), pe);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "        }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "weiyang13"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "weiyang13": 31
    }
  },
  {
    "path": "src/main/java/seedu/ichifund/logic/parser/transaction/EditTransactionCommandParser.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "package seedu.ichifund.logic.parser.transaction;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "weiyang13"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "import static seedu.ichifund.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "import static seedu.ichifund.logic.parser.CliSyntax.PREFIX_AMOUNT;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "import static seedu.ichifund.logic.parser.CliSyntax.PREFIX_CATEGORY;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "import static seedu.ichifund.logic.parser.CliSyntax.PREFIX_DAY;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "import static seedu.ichifund.logic.parser.CliSyntax.PREFIX_DESCRIPTION;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "import static seedu.ichifund.logic.parser.CliSyntax.PREFIX_MONTH;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "import static seedu.ichifund.logic.parser.CliSyntax.PREFIX_TRANSACTION_TYPE;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "import static seedu.ichifund.logic.parser.CliSyntax.PREFIX_YEAR;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "weiyang13"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "import seedu.ichifund.commons.core.index.Index;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "import seedu.ichifund.logic.commands.transaction.EditTransactionCommand;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "import seedu.ichifund.logic.commands.transaction.EditTransactionCommand.EditTransactionDescriptor;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "import seedu.ichifund.logic.parser.ArgumentMultimap;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "import seedu.ichifund.logic.parser.ArgumentTokenizer;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "import seedu.ichifund.logic.parser.Parser;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "import seedu.ichifund.logic.parser.ParserUtil;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "import seedu.ichifund.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "weiyang13"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "/**"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "weiyang13"
        },
        "content": " * Parses input arguments and creates a new EditTransactionCommand object"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "weiyang13"
        },
        "content": " */"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "public class EditTransactionCommandParser implements Parser\u003cEditTransactionCommand\u003e {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "weiyang13"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "     * Parses the given {@code String} of arguments in the context of the EditTransactionCommand"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "     * and returns an EditTransactionCommand object for execution."
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "     * @throws ParseException if the user input does not conform the expected format"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "     */"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "    public EditTransactionCommand parse(String args) throws ParseException {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "        requireNonNull(args);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "        ArgumentMultimap argMultimap \u003d"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "                ArgumentTokenizer.tokenize(args, PREFIX_DESCRIPTION, PREFIX_AMOUNT, PREFIX_CATEGORY, PREFIX_DAY,"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "                        PREFIX_MONTH, PREFIX_YEAR, PREFIX_TRANSACTION_TYPE);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "        Index index;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "weiyang13"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "            index \u003d ParserUtil.parseIndex(argMultimap.getPreamble());"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "        } catch (ParseException pe) {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "            throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT,"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "                    EditTransactionCommand.MESSAGE_USAGE), pe);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "        }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "weiyang13"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "        EditTransactionDescriptor editTransactionDescriptor \u003d new EditTransactionDescriptor();"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "        if (argMultimap.getValue(PREFIX_DESCRIPTION).isPresent()) {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "            editTransactionDescriptor.setDescription(ParserUtil"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "                    .parseDescription(argMultimap.getValue(PREFIX_DESCRIPTION).get()));"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "        }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "        if (argMultimap.getValue(PREFIX_AMOUNT).isPresent()) {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "            editTransactionDescriptor.setAmount(ParserUtil.parseAmount(argMultimap.getValue(PREFIX_AMOUNT).get()));"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "        }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "        if (argMultimap.getValue(PREFIX_CATEGORY).isPresent()) {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "            editTransactionDescriptor.setCategory(ParserUtil"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "                    .parseCategory(argMultimap.getValue(PREFIX_CATEGORY).get()));"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "        }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "        if (argMultimap.getValue(PREFIX_DAY).isPresent()) {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "            editTransactionDescriptor.setDay(ParserUtil.parseDay(argMultimap.getValue(PREFIX_DAY).get()));"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "        }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "        if (argMultimap.getValue(PREFIX_MONTH).isPresent()) {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "            editTransactionDescriptor.setMonth(ParserUtil.parseMonth(argMultimap.getValue(PREFIX_MONTH).get()));"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "        }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "        if (argMultimap.getValue(PREFIX_YEAR).isPresent()) {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "            editTransactionDescriptor.setYear(ParserUtil.parseYear(argMultimap.getValue(PREFIX_YEAR).get()));"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "        }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "        if (argMultimap.getValue(PREFIX_TRANSACTION_TYPE).isPresent()) {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "            editTransactionDescriptor.setTransactionType(ParserUtil"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "                    .parseTransactionType(argMultimap.getValue(PREFIX_TRANSACTION_TYPE).get()));"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "        }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "weiyang13"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "        if (!editTransactionDescriptor.isAnyFieldEdited()) {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "            throw new ParseException(EditTransactionCommand.MESSAGE_NOT_EDITED);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "        }"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "weiyang13"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "        return new EditTransactionCommand(index, editTransactionDescriptor);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "    }"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "weiyang13": 78
    }
  },
  {
    "path": "src/main/java/seedu/ichifund/logic/parser/transaction/FilterTransactionCommandParser.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "package seedu.ichifund.logic.parser.transaction;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "weiyang13"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "import static seedu.ichifund.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "import static seedu.ichifund.logic.parser.CliSyntax.PREFIX_CATEGORY;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "import static seedu.ichifund.logic.parser.CliSyntax.PREFIX_MONTH;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "import static seedu.ichifund.logic.parser.CliSyntax.PREFIX_TRANSACTION_TYPE;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "import static seedu.ichifund.logic.parser.CliSyntax.PREFIX_YEAR;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "weiyang13"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "import java.util.stream.Stream;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "weiyang13"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "import seedu.ichifund.logic.commands.transaction.FilterTransactionCommand;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "import seedu.ichifund.logic.parser.ArgumentMultimap;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "import seedu.ichifund.logic.parser.ArgumentTokenizer;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "import seedu.ichifund.logic.parser.Parser;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "import seedu.ichifund.logic.parser.ParserUtil;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "import seedu.ichifund.logic.parser.Prefix;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "import seedu.ichifund.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "import seedu.ichifund.model.date.Month;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "import seedu.ichifund.model.date.Year;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "import seedu.ichifund.model.transaction.Category;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "import seedu.ichifund.model.transaction.TransactionType;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "weiyang13"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "/**"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "weiyang13"
        },
        "content": " * Parses input arguments and creates a new FilterTransactionCommand object."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "weiyang13"
        },
        "content": " */"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "public class FilterTransactionCommandParser implements Parser\u003cFilterTransactionCommand\u003e {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "    public FilterTransactionCommand parse(String args) throws ParseException {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "        ArgumentMultimap argMultimap \u003d"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "                ArgumentTokenizer.tokenize(args, PREFIX_MONTH, PREFIX_YEAR, PREFIX_CATEGORY, PREFIX_TRANSACTION_TYPE);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "weiyang13"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "        if (!areAnyPrefixesPresent(argMultimap, PREFIX_MONTH, PREFIX_YEAR, PREFIX_CATEGORY, PREFIX_TRANSACTION_TYPE)"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "                || !argMultimap.getPreamble().isEmpty()) {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "            throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT,"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "                    FilterTransactionCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "        }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "weiyang13"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "        Optional\u003cMonth\u003e month \u003d parseMonth(argMultimap);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "        Optional\u003cYear\u003e year \u003d parseYear(argMultimap);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "        Optional\u003cCategory\u003e category \u003d parseCategory(argMultimap);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "        Optional\u003cTransactionType\u003e transactionType \u003d parseType(argMultimap);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "weiyang13"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "        return buildCommand(month, year, category, transactionType);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "weiyang13"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "     * Builds the FilterTransactionCommand from data fields."
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "     */"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "    private FilterTransactionCommand buildCommand(Optional\u003cMonth\u003e month, Optional\u003cYear\u003e year,"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "                                                  Optional\u003cCategory\u003e category,"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "                                                  Optional\u003cTransactionType\u003e transactionType) {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "        FilterTransactionCommand.FilterTransactionCommandBuilder builder \u003d"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "                new FilterTransactionCommand.FilterTransactionCommandBuilder();"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "weiyang13"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "        builder.setMonth(month);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "        builder.setYear(year);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "        builder.setCategory(category);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "        builder.setType(transactionType);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "weiyang13"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "        return builder.build();"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "    }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "weiyang13"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "     * Parses the {@code Month} field in an {@code ArgumentMultimap}, if present, into"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "     * a {@code Month} object, and wraps it in a {@code Optional} object"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "     * Else, an empty {@code Optional} object is returned."
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "     *"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "     * @throws ParseException if the string in {@code argMultimap} is invalid."
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "     */"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "    private Optional\u003cMonth\u003e parseMonth(ArgumentMultimap argMultimap) throws ParseException {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "        Optional\u003cString\u003e monthString \u003d argMultimap.getValue(PREFIX_MONTH);"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "        if (monthString.isEmpty()) {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "            return Optional.empty();"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "            return Optional.of(ParserUtil.parseMonth(monthString.get()));"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "        }"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "    }"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "weiyang13"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "     * Parses the {@code Year} field in an {@code ArgumentMultimap}, if present, into"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "     * a {@code Year} object, and wraps it in a {@code Optional} object"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "     * Else, an empty {@code Optional} object is returned."
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "     *"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "     * @throws ParseException if the string in {@code argMultimap} is invalid."
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "     */"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "    private Optional\u003cYear\u003e parseYear(ArgumentMultimap argMultimap) throws ParseException {"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "        Optional\u003cString\u003e yearString \u003d argMultimap.getValue(PREFIX_YEAR);"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "        if (yearString.isEmpty()) {"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "            return Optional.empty();"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "            return Optional.of(ParserUtil.parseYear(yearString.get()));"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "        }"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "    }"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "weiyang13"
        },
        "content": ""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "     * Parses the {@code Category} field in an {@code ArgumentMultimap}, if present, into"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "     * a {@code Category} object, including a {@code Category.CATEGORY_ALL} object, and wraps"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "     * it into an {@code Optional} object."
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "     * Else, an empty {@code Optional} object is returned."
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "     *"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "     * @throws ParseException if the string in {@code argMultimap} is invalid."
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "     */"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "    private Optional\u003cCategory\u003e parseCategory(ArgumentMultimap argMultimap) throws ParseException {"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "        Optional\u003cString\u003e categoryString \u003d argMultimap.getValue(PREFIX_CATEGORY);"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "        if (categoryString.isEmpty()) {"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "            return Optional.empty();"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "            return Optional.of(ParserUtil.parseCategoryWithAll(categoryString.get()));"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "        }"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "    }"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "weiyang13"
        },
        "content": ""
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "     * Parses the {@code TransactionType} field in an {@code ArgumentMultimap}, if present, into"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "     * a {@code TransactionType} object, including a {@code TransactionType.TRANSACTION_TYPE_ALL} object, and wraps"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "     * it into an {@code Optional} object."
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "     * Else, an empty {@code Optional} object is returned."
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "     *"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "     * @throws ParseException if the string in {@code argMultimap} is invalid."
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "     */"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "    private Optional\u003cTransactionType\u003e parseType(ArgumentMultimap argMultimap) throws ParseException {"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "        Optional\u003cString\u003e typeString \u003d argMultimap.getValue(PREFIX_TRANSACTION_TYPE);"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "        if (typeString.isEmpty()) {"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "            return Optional.empty();"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "            return Optional.of(ParserUtil.parseTransactionTypeWithAll(typeString.get()));"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "        }"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "    }"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "weiyang13"
        },
        "content": ""
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "     * Returns true if at least one of the prefixes contains empty {@code Optional} values in the given"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "     * {@code ArgumentMultimap}."
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "     */"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "    private static boolean areAnyPrefixesPresent(ArgumentMultimap argumentMultimap, Prefix... prefixes) {"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "        return Stream.of(prefixes).anyMatch(prefix -\u003e argumentMultimap.getValue(prefix).isPresent());"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "    }"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "weiyang13": 137
    }
  },
  {
    "path": "src/main/java/seedu/ichifund/logic/parser/transaction/TransactionFeatureParser.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "package seedu.ichifund.logic.parser.transaction;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "weiyang13"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "import static seedu.ichifund.commons.core.Messages.MESSAGE_UNKNOWN_COMMAND;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "weiyang13"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "import seedu.ichifund.logic.commands.Command;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "import seedu.ichifund.logic.commands.transaction.AddTransactionCommand;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "import seedu.ichifund.logic.commands.transaction.DeleteTransactionCommand;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "import seedu.ichifund.logic.commands.transaction.EditTransactionCommand;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "import seedu.ichifund.logic.commands.transaction.FilterTransactionCommand;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "import seedu.ichifund.logic.parser.FeatureParser;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "import seedu.ichifund.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "weiyang13"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "/**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "weiyang13"
        },
        "content": " * Passes user input to the appropriate Parser for commands related to the transaction feature."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "weiyang13"
        },
        "content": " */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "public class TransactionFeatureParser implements FeatureParser {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "weiyang13"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "    private final int tabIndex \u003d 0;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "weiyang13"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "    public String getTabSwitchCommandWord() {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "        return \"tx\";"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "    }"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "weiyang13"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "    public int getTabIndex() {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "        return tabIndex;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "weiyang13"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "    public Command parseCommand(String commandWord, String arguments) throws ParseException {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "        switch (commandWord) {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "        case AddTransactionCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "            return new AddTransactionCommandParser().parse(arguments);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "weiyang13"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "        case FilterTransactionCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "            return new FilterTransactionCommandParser().parse(arguments);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "weiyang13"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "        case DeleteTransactionCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "            return new DeleteTransactionCommandParser().parse(arguments);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "weiyang13"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "        case EditTransactionCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "            return new EditTransactionCommandParser().parse(arguments);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "weiyang13"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "        default:"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "            throw new ParseException(MESSAGE_UNKNOWN_COMMAND);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "        }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "weiyang13": 49
    }
  },
  {
    "path": "src/main/java/seedu/ichifund/logic/tasks/Task.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "nexolute"
        },
        "content": "package seedu.ichifund.logic.tasks;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "nexolute"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "nexolute"
        },
        "content": "import seedu.ichifund.model.Model;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "nexolute"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "nexolute"
        },
        "content": "/**"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "nexolute"
        },
        "content": " * Represents a task with hidden internal logic and the ability to be executed."
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "nexolute"
        },
        "content": " *"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "nexolute"
        },
        "content": " * Note that {@code Task} is different from {@code Command} in that task are not"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "nexolute"
        },
        "content": " * immediately triggered by user interaction."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "nexolute"
        },
        "content": " *"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "nexolute"
        },
        "content": " * For instance, when a transaction is added, a task would be triggered to refresh"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "nexolute"
        },
        "content": " * the budget information."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "nexolute"
        },
        "content": " */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "nexolute"
        },
        "content": "public abstract class Task {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "nexolute"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "nexolute"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "nexolute"
        },
        "content": "     * Executes the task."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "nexolute"
        },
        "content": "     *"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "nexolute"
        },
        "content": "     * @param model {@code Model} which the task should operate on."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "nexolute"
        },
        "content": "     */"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "nexolute"
        },
        "content": "    public abstract void execute(Model model);"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "nexolute"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "nexolute"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "nexolute": 23
    }
  },
  {
    "path": "src/main/java/seedu/ichifund/logic/tasks/TaskManager.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "nexolute"
        },
        "content": "package seedu.ichifund.logic.tasks;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "nexolute"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "nexolute"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "nexolute"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "nexolute"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "nexolute"
        },
        "content": "import seedu.ichifund.logic.tasks.budget.ComputeBudgetTask;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "nexolute"
        },
        "content": "import seedu.ichifund.model.Model;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "nexolute"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "nexolute"
        },
        "content": "/**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "nexolute"
        },
        "content": " * Manages all the task to be executed."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "nexolute"
        },
        "content": " */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "nexolute"
        },
        "content": "public class TaskManager {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "nexolute"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "nexolute"
        },
        "content": "    private final List\u003cTask\u003e tasks;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "nexolute"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "nexolute"
        },
        "content": "    public TaskManager() {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "nexolute"
        },
        "content": "        tasks \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "nexolute"
        },
        "content": "        tasks.add(new ComputeBudgetTask());"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "nexolute"
        },
        "content": "    }"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "nexolute"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "nexolute"
        },
        "content": "    public void executeAll(Model model) {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "nexolute"
        },
        "content": "        tasks.forEach(task -\u003e task.execute(model));"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "nexolute"
        },
        "content": "    }"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "nexolute"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "nexolute"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "nexolute": 25
    }
  },
  {
    "path": "src/main/java/seedu/ichifund/logic/tasks/analytics/UpdateReportTask.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Alaete"
        },
        "content": "package seedu.ichifund.logic.tasks.analytics;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Alaete"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Alaete"
        },
        "content": "import seedu.ichifund.logic.tasks.Task;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Alaete"
        },
        "content": "import seedu.ichifund.model.Model;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Alaete"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Alaete"
        },
        "content": "/**"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Alaete"
        },
        "content": " * Update the generated report."
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Alaete"
        },
        "content": " */"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Alaete"
        },
        "content": "public class UpdateReportTask extends Task {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Alaete"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Alaete"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Alaete"
        },
        "content": "    public void execute(Model model) {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Alaete"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Alaete"
        },
        "content": "    }"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Alaete"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Alaete": 15
    }
  },
  {
    "path": "src/main/java/seedu/ichifund/logic/tasks/budget/ComputeBudgetTask.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "nexolute"
        },
        "content": "package seedu.ichifund.logic.tasks.budget;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "nexolute"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "nexolute"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "nexolute"
        },
        "content": "import java.util.function.Predicate;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "nexolute"
        },
        "content": "import java.util.stream.Collectors;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "nexolute"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "nexolute"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "nexolute"
        },
        "content": "import seedu.ichifund.logic.tasks.Task;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "nexolute"
        },
        "content": "import seedu.ichifund.model.Model;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "nexolute"
        },
        "content": "import seedu.ichifund.model.amount.Amount;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "nexolute"
        },
        "content": "import seedu.ichifund.model.budget.Budget;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "nexolute"
        },
        "content": "import seedu.ichifund.model.budget.ComputedBudget;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "nexolute"
        },
        "content": "import seedu.ichifund.model.transaction.Transaction;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "nexolute"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "nexolute"
        },
        "content": "/**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "nexolute"
        },
        "content": " * Compute all the budget spending."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "nexolute"
        },
        "content": " */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "nexolute"
        },
        "content": "public class ComputeBudgetTask extends Task {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "nexolute"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "nexolute"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "nexolute"
        },
        "content": "    public void execute(Model model) {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "nexolute"
        },
        "content": "        ObservableList\u003cBudget\u003e budgetList \u003d model.getFundBook().getBudgetList();"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "nexolute"
        },
        "content": "        for (Budget budget : budgetList) {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "nexolute"
        },
        "content": "            List\u003cAmount\u003e filteredAmounts \u003d model.getFundBook().getTransactionList()"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "nexolute"
        },
        "content": "                    .filtered(createPredicateForBudget(budget))"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "nexolute"
        },
        "content": "                    .stream()"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "nexolute"
        },
        "content": "                    .map(Transaction::getAmount)"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "nexolute"
        },
        "content": "                    .collect(Collectors.toList());"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "nexolute"
        },
        "content": "            Amount spending \u003d Amount.addAll(filteredAmounts);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "nexolute"
        },
        "content": "            model.setBudget(budget, new ComputedBudget(budget, spending));"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "nexolute"
        },
        "content": "        }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "nexolute"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "nexolute"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "nexolute"
        },
        "content": "    /***"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "nexolute"
        },
        "content": "     * Create a predicate according to the criteria set within the budget."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "nexolute"
        },
        "content": "     *"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "nexolute"
        },
        "content": "     * @param budget The budget that will serve as a context to create the predicate."
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "nexolute"
        },
        "content": "     * @return A predicate according to the budget criteria."
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "nexolute"
        },
        "content": "     */"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "nexolute"
        },
        "content": "    private Predicate\u003cTransaction\u003e createPredicateForBudget(Budget budget) {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "nexolute"
        },
        "content": "        Predicate\u003cTransaction\u003e predicate \u003d Transaction::isExpenditure;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "nexolute"
        },
        "content": "        if (budget.getCategory() !\u003d null) {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "nexolute"
        },
        "content": "            predicate \u003d predicate.and(transaction -\u003e transaction.isIn(budget.getCategory()));"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "nexolute"
        },
        "content": "        }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "nexolute"
        },
        "content": "        if (budget.getMonth() !\u003d null \u0026\u0026 budget.getYear() !\u003d null) {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "nexolute"
        },
        "content": "            predicate \u003d predicate.and(transaction -\u003e transaction.isIn(budget.getMonth()));"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "nexolute"
        },
        "content": "            predicate \u003d predicate.and(transaction -\u003e transaction.isIn(budget.getYear()));"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "nexolute"
        },
        "content": "        }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "nexolute"
        },
        "content": "        return predicate;"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "nexolute"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "nexolute"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "nexolute"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "nexolute": 52
    }
  },
  {
    "path": "src/main/java/seedu/ichifund/model/Description.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "nexolute"
        },
        "content": "package seedu.ichifund.model;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "weiyang13"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "nexolute"
        },
        "content": "import static seedu.ichifund.commons.util.AppUtil.checkArgument;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "weiyang13"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "/**"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "weiyang13"
        },
        "content": " * Represents a Transaction\u0027s description in the transaction recorder."
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "weiyang13"
        },
        "content": " * Guarantees: immutable; is valid as declared in {@link #isValidDescription(String)}"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "weiyang13"
        },
        "content": " */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "public class Description implements Comparable\u003cDescription\u003e {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "weiyang13"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "    public static final String MESSAGE_CONSTRAINTS \u003d"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "            \"Description should only contain alphanumeric characters and spaces, and it should not be blank\";"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "weiyang13"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "    /*"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "nexolute"
        },
        "content": "     * The first character of the description must not be a whitespace,"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "     * otherwise \" \" (a blank string) becomes a valid input."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "     */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "    public static final String VALIDATION_REGEX \u003d \"[\\\\p{Alnum}][\\\\p{Alnum} ]*\";"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "weiyang13"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "    public final String description;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "weiyang13"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "     * Constructs a {@code Description}."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "     *"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "     * @param description A valid description."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "     */"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "    public Description(String description) {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "        requireNonNull(description);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "        checkArgument(isValidDescription(description), MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "        this.description \u003d description;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "weiyang13"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "     * Returns true if a given string is a valid description."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "     */"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "    public static boolean isValidDescription(String test) {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "        return test.matches(VALIDATION_REGEX);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "weiyang13"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "weiyang13"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "        return description;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "weiyang13"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "                || (other instanceof Description // instanceof handles nulls"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "                \u0026\u0026 description.equals(((Description) other).description)); // state check"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "weiyang13"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "        return description.hashCode();"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "    }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "weiyang13"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "    public int compareTo(Description other) {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "        return toString().compareTo(other.toString());"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "    }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "nexolute": 3,
      "weiyang13": 60
    }
  },
  {
    "path": "src/main/java/seedu/ichifund/model/FundBook.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "nexolute"
        },
        "content": "package seedu.ichifund.model;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "nexolute"
        },
        "content": "import java.util.Objects;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Alaete"
        },
        "content": "import seedu.ichifund.model.analytics.Data;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Alaete"
        },
        "content": "import seedu.ichifund.model.analytics.DataList;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "nexolute"
        },
        "content": "import seedu.ichifund.model.budget.Budget;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "nexolute"
        },
        "content": "import seedu.ichifund.model.budget.UniqueBudgetList;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "nexolute"
        },
        "content": "import seedu.ichifund.model.person.Person;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "nexolute"
        },
        "content": "import seedu.ichifund.model.person.UniquePersonList;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "LeeYiyuan"
        },
        "content": "import seedu.ichifund.model.repeater.Repeater;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "LeeYiyuan"
        },
        "content": "import seedu.ichifund.model.repeater.RepeaterUniqueId;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "LeeYiyuan"
        },
        "content": "import seedu.ichifund.model.repeater.UniqueRepeaterList;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "import seedu.ichifund.model.transaction.Transaction;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "import seedu.ichifund.model.transaction.TransactionList;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "nexolute"
        },
        "content": " * Wraps all data at the fund book level"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "nexolute"
        },
        "content": " * Duplicates are not allowed (by .isSamePerson and .isSameBudget comparison)"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "nexolute"
        },
        "content": "public class FundBook implements ReadOnlyFundBook {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "LeeYiyuan"
        },
        "content": "    private RepeaterUniqueId currentRepeaterUniqueId;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    private final UniquePersonList persons;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "LeeYiyuan"
        },
        "content": "    private final UniqueRepeaterList repeaters;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "nexolute"
        },
        "content": "    private final UniqueBudgetList budgets;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "    private final TransactionList transactions;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Alaete"
        },
        "content": "    private final DataList datas;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    /*"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "     * The \u0027unusual\u0027 code block below is a non-static initialization block, sometimes used to avoid duplication"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "     * between constructors. See https://docs.oracle.com/javase/tutorial/java/javaOO/initial.html"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "     * Note that non-static init blocks are not recommended to use. There are other ways to avoid duplication"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "     *   among constructors."
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "LeeYiyuan"
        },
        "content": "        currentRepeaterUniqueId \u003d new RepeaterUniqueId(\"0\");"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        persons \u003d new UniquePersonList();"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "LeeYiyuan"
        },
        "content": "        repeaters \u003d new UniqueRepeaterList();"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "nexolute"
        },
        "content": "        budgets \u003d new UniqueBudgetList();"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "        transactions \u003d new TransactionList();"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Alaete"
        },
        "content": "        datas \u003d new DataList();"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "nexolute"
        },
        "content": "    public FundBook() {}"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "nexolute"
        },
        "content": "     * Creates an FundBook using the Persons in the {@code toBeCopied}"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "nexolute"
        },
        "content": "    public FundBook(ReadOnlyFundBook toBeCopied) {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "        this();"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "        resetData(toBeCopied);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "LeeYiyuan"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "LeeYiyuan"
        },
        "content": "     * Replaces the current unique id with {@code uniqueId}."
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "LeeYiyuan"
        },
        "content": "     */"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "LeeYiyuan"
        },
        "content": "    public void setCurrentRepeaterUniqueId(RepeaterUniqueId uniqueId) {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "LeeYiyuan"
        },
        "content": "        requireNonNull(uniqueId);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "LeeYiyuan"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "LeeYiyuan"
        },
        "content": "        this.currentRepeaterUniqueId \u003d uniqueId;"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "LeeYiyuan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "LeeYiyuan"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "    //// list overwrite operations"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "     * Replaces the contents of the person list with {@code persons}."
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "     * {@code persons} must not contain duplicate persons."
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setPersons(List\u003cPerson\u003e persons) {"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "        this.persons.setPersons(persons);"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "LeeYiyuan"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "LeeYiyuan"
        },
        "content": "     * Replaces the contents of the repeater list with {@code repeaters}."
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "LeeYiyuan"
        },
        "content": "     * {@code repeaters} must not contain duplicate repeaters."
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "LeeYiyuan"
        },
        "content": "     */"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "LeeYiyuan"
        },
        "content": "    public void setRepeaters(List\u003cRepeater\u003e repeaters) {"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "LeeYiyuan"
        },
        "content": "        this.repeaters.setRepeaters(repeaters);"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "LeeYiyuan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "LeeYiyuan"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "nexolute"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "nexolute"
        },
        "content": "     * Replaces the contents of the budget list with {@code budgets}."
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "nexolute"
        },
        "content": "     * {@code budgets} must not contain duplicate budgets."
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "nexolute"
        },
        "content": "     */"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "nexolute"
        },
        "content": "    public void setBudgets(List\u003cBudget\u003e budgets) {"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "nexolute"
        },
        "content": "        this.budgets.setBudgets(budgets);"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "nexolute"
        },
        "content": "    }"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "nexolute"
        },
        "content": ""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "     * Replaces the contents of the transaction list with {@code transactions}."
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "     */"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "    public void setTransactions(List\u003cTransaction\u003e transactions) {"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "        this.transactions.setTransactions(transactions);"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "    }"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "weiyang13"
        },
        "content": ""
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "Alaete"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "Alaete"
        },
        "content": "     * Replaces the contents of the data list with {@code data}."
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "Alaete"
        },
        "content": "     */"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "Alaete"
        },
        "content": "    public void setData(List\u003cData\u003e data) {"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "Alaete"
        },
        "content": "        datas.setData(data);"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "Alaete"
        },
        "content": "    }"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "Alaete"
        },
        "content": ""
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "nexolute"
        },
        "content": "     * Resets the existing data of this {@code FundBook} with {@code newData}."
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "nexolute"
        },
        "content": "    public void resetData(ReadOnlyFundBook newData) {"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(newData);"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "        setPersons(newData.getPersonList());"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "LeeYiyuan"
        },
        "content": "        setRepeaters(newData.getRepeaterList());"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "nexolute"
        },
        "content": "        setBudgets(newData.getBudgetList());"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "        setTransactions(newData.getTransactionList());"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "Alaete"
        },
        "content": "        setData(newData.getDataList());"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "    //// person-level operations"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "nexolute"
        },
        "content": "     * Returns true if a person with the same identity as {@code person} exists in the fund book."
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean hasPerson(Person person) {"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(person);"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "        return persons.contains(person);"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "nexolute"
        },
        "content": "     * Adds a person to the fund book."
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "nexolute"
        },
        "content": "     * The person must not already exist in the fund book."
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": "    public void addPerson(Person p) {"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": "        persons.add(p);"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": "     * Replaces the given person {@code target} in the list with {@code editedPerson}."
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "nexolute"
        },
        "content": "     * {@code target} must exist in the fund book."
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "nexolute"
        },
        "content": "     * The person identity of {@code editedPerson} must not be the same as another existing person in the fund book."
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setPerson(Person target, Person editedPerson) {"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(editedPerson);"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": "        persons.setPerson(target, editedPerson);"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "nexolute"
        },
        "content": "     * Removes {@code key} from this {@code FundBook}."
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "nexolute"
        },
        "content": "     * {@code key} must exist in the fund book."
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "-"
        },
        "content": "    public void removePerson(Person key) {"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "-"
        },
        "content": "        persons.remove(key);"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "    //// transaction-level operations"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "weiyang13"
        },
        "content": ""
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "     * Adds a transaction to the fund book."
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "     */"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "    public void addTransaction(Transaction transaction) {"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "        transactions.add(transaction);"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "    }"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "weiyang13"
        },
        "content": ""
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "     * Replaces the given transaction {@code target} in the list with {@code editedTransaction}."
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "     * {@code target} must exist in the fund book."
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "     */"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "    public void setTransaction(Transaction target, Transaction editedTransaction) {"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "        requireNonNull(editedTransaction);"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "weiyang13"
        },
        "content": ""
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "        transactions.setTransaction(target, editedTransaction);"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "    }"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "weiyang13"
        },
        "content": ""
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "     * Removes transaction {@code key} from this {@code FundBook}."
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "     * {@code key} must exist in the fund book."
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "     */"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "    public void removeTransaction(Transaction key) {"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "        transactions.remove(key);"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "    }"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "weiyang13"
        },
        "content": ""
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "    public Optional\u003cTransaction\u003e getLatestTransaction() {"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "        return transactions.getLatestTransaction();"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "    }"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "weiyang13"
        },
        "content": ""
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "LeeYiyuan"
        },
        "content": "    //// repeater-level operations"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "LeeYiyuan"
        },
        "content": ""
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "LeeYiyuan"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "LeeYiyuan"
        },
        "content": "     * Returns true if a repeater with the same identity as {@code repeater} exists in the fund book."
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "LeeYiyuan"
        },
        "content": "     */"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "LeeYiyuan"
        },
        "content": "    public boolean hasRepeater(Repeater repeater) {"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "LeeYiyuan"
        },
        "content": "        requireNonNull(repeater);"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "LeeYiyuan"
        },
        "content": "        return repeaters.contains(repeater);"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "LeeYiyuan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "LeeYiyuan"
        },
        "content": ""
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "LeeYiyuan"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "LeeYiyuan"
        },
        "content": "     * Adds a repeater to the fund book."
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "LeeYiyuan"
        },
        "content": "     * The repeater must not already exist in the fund book."
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "LeeYiyuan"
        },
        "content": "     */"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "LeeYiyuan"
        },
        "content": "    public void addRepeater(Repeater repeater) {"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "LeeYiyuan"
        },
        "content": "        repeaters.add(repeater);"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "LeeYiyuan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "LeeYiyuan"
        },
        "content": ""
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "LeeYiyuan"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "LeeYiyuan"
        },
        "content": "     * Replaces the given repeater {@code target} in the list with {@code editedRepeater}."
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "LeeYiyuan"
        },
        "content": "     * {@code target} must exist in the fund book."
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "LeeYiyuan"
        },
        "content": "     * The repeater identity of {@code editedRepeater} must not be the same as another existing repeater in the fund"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "LeeYiyuan"
        },
        "content": "     * book."
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "LeeYiyuan"
        },
        "content": "     */"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "LeeYiyuan"
        },
        "content": "    public void setRepeater(Repeater target, Repeater editedRepeater) {"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "LeeYiyuan"
        },
        "content": "        requireNonNull(editedRepeater);"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "LeeYiyuan"
        },
        "content": ""
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "LeeYiyuan"
        },
        "content": "        repeaters.setRepeater(target, editedRepeater);"
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "LeeYiyuan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "LeeYiyuan"
        },
        "content": ""
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "LeeYiyuan"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "LeeYiyuan"
        },
        "content": "     * Removes repeater {@code key} from this {@code FundBook}."
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "LeeYiyuan"
        },
        "content": "     * {@code key} must exist in the fund book."
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "LeeYiyuan"
        },
        "content": "     */"
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "LeeYiyuan"
        },
        "content": "    public void removeRepeater(Repeater key) {"
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "LeeYiyuan"
        },
        "content": "        repeaters.remove(key);"
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "LeeYiyuan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "LeeYiyuan"
        },
        "content": ""
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "nexolute"
        },
        "content": "    //// budget-level operations"
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "nexolute"
        },
        "content": ""
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "nexolute"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "nexolute"
        },
        "content": "     * Returns true if a budget with the same identity as {@code budget} exists in the fund book."
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "nexolute"
        },
        "content": "     */"
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "nexolute"
        },
        "content": "    public boolean hasBudget(Budget budget) {"
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "nexolute"
        },
        "content": "        requireNonNull(budget);"
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "nexolute"
        },
        "content": "        return budgets.contains(budget);"
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "nexolute"
        },
        "content": "    }"
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "nexolute"
        },
        "content": ""
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "nexolute"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "nexolute"
        },
        "content": "     * Adds a budget to the fund book."
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "nexolute"
        },
        "content": "     * The budget must not already exist in the fund book."
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "nexolute"
        },
        "content": "     */"
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "nexolute"
        },
        "content": "    public void addBudget(Budget budget) {"
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "nexolute"
        },
        "content": "        budgets.add(budget);"
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "nexolute"
        },
        "content": "    }"
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "nexolute"
        },
        "content": ""
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "nexolute"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 248,
        "author": {
          "gitId": "nexolute"
        },
        "content": "     * Replaces the given budget {@code target} in the list with {@code editedBudget}."
      },
      {
        "lineNumber": 249,
        "author": {
          "gitId": "nexolute"
        },
        "content": "     * {@code target} must exist in the fund book."
      },
      {
        "lineNumber": 250,
        "author": {
          "gitId": "nexolute"
        },
        "content": "     * The budget identity of {@code editedBudget} must not be the same as another existing budget in the fund book."
      },
      {
        "lineNumber": 251,
        "author": {
          "gitId": "nexolute"
        },
        "content": "     */"
      },
      {
        "lineNumber": 252,
        "author": {
          "gitId": "nexolute"
        },
        "content": "    public void setBudget(Budget target, Budget editedBudget) {"
      },
      {
        "lineNumber": 253,
        "author": {
          "gitId": "nexolute"
        },
        "content": "        requireNonNull(editedBudget);"
      },
      {
        "lineNumber": 254,
        "author": {
          "gitId": "nexolute"
        },
        "content": ""
      },
      {
        "lineNumber": 255,
        "author": {
          "gitId": "nexolute"
        },
        "content": "        budgets.setBudget(target, editedBudget);"
      },
      {
        "lineNumber": 256,
        "author": {
          "gitId": "nexolute"
        },
        "content": "    }"
      },
      {
        "lineNumber": 257,
        "author": {
          "gitId": "nexolute"
        },
        "content": ""
      },
      {
        "lineNumber": 258,
        "author": {
          "gitId": "nexolute"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 259,
        "author": {
          "gitId": "nexolute"
        },
        "content": "     * Removes budget {@code key} from this {@code FundBook}."
      },
      {
        "lineNumber": 260,
        "author": {
          "gitId": "nexolute"
        },
        "content": "     * {@code key} must exist in the fund book."
      },
      {
        "lineNumber": 261,
        "author": {
          "gitId": "nexolute"
        },
        "content": "     */"
      },
      {
        "lineNumber": 262,
        "author": {
          "gitId": "nexolute"
        },
        "content": "    public void removeBudget(Budget key) {"
      },
      {
        "lineNumber": 263,
        "author": {
          "gitId": "nexolute"
        },
        "content": "        budgets.remove(key);"
      },
      {
        "lineNumber": 264,
        "author": {
          "gitId": "nexolute"
        },
        "content": "    }"
      },
      {
        "lineNumber": 265,
        "author": {
          "gitId": "nexolute"
        },
        "content": ""
      },
      {
        "lineNumber": 266,
        "author": {
          "gitId": "-"
        },
        "content": "    //// util methods"
      },
      {
        "lineNumber": 267,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 268,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 269,
        "author": {
          "gitId": "-"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 270,
        "author": {
          "gitId": "-"
        },
        "content": "        return persons.asUnmodifiableObservableList().size() + \" persons\";"
      },
      {
        "lineNumber": 271,
        "author": {
          "gitId": "-"
        },
        "content": "        // TODO: refine later"
      },
      {
        "lineNumber": 272,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 273,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 274,
        "author": {
          "gitId": "LeeYiyuan"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 275,
        "author": {
          "gitId": "LeeYiyuan"
        },
        "content": "    public RepeaterUniqueId getCurrentRepeaterUniqueId() {"
      },
      {
        "lineNumber": 276,
        "author": {
          "gitId": "LeeYiyuan"
        },
        "content": "        return currentRepeaterUniqueId;"
      },
      {
        "lineNumber": 277,
        "author": {
          "gitId": "LeeYiyuan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 278,
        "author": {
          "gitId": "LeeYiyuan"
        },
        "content": ""
      },
      {
        "lineNumber": 279,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 280,
        "author": {
          "gitId": "-"
        },
        "content": "    public ObservableList\u003cPerson\u003e getPersonList() {"
      },
      {
        "lineNumber": 281,
        "author": {
          "gitId": "-"
        },
        "content": "        return persons.asUnmodifiableObservableList();"
      },
      {
        "lineNumber": 282,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 283,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 284,
        "author": {
          "gitId": "LeeYiyuan"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 285,
        "author": {
          "gitId": "LeeYiyuan"
        },
        "content": "    public ObservableList\u003cRepeater\u003e getRepeaterList() {"
      },
      {
        "lineNumber": 286,
        "author": {
          "gitId": "LeeYiyuan"
        },
        "content": "        return repeaters.asUnmodifiableObservableList();"
      },
      {
        "lineNumber": 287,
        "author": {
          "gitId": "LeeYiyuan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 288,
        "author": {
          "gitId": "LeeYiyuan"
        },
        "content": ""
      },
      {
        "lineNumber": 289,
        "author": {
          "gitId": "nexolute"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 290,
        "author": {
          "gitId": "nexolute"
        },
        "content": "    public ObservableList\u003cBudget\u003e getBudgetList() {"
      },
      {
        "lineNumber": 291,
        "author": {
          "gitId": "nexolute"
        },
        "content": "        return budgets.asUnmodifiableObservableList();"
      },
      {
        "lineNumber": 292,
        "author": {
          "gitId": "nexolute"
        },
        "content": "    }"
      },
      {
        "lineNumber": 293,
        "author": {
          "gitId": "nexolute"
        },
        "content": ""
      },
      {
        "lineNumber": 294,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 295,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "    public ObservableList\u003cTransaction\u003e getTransactionList() {"
      },
      {
        "lineNumber": 296,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "        return transactions.asUnmodifiableObservableList();"
      },
      {
        "lineNumber": 297,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "    }"
      },
      {
        "lineNumber": 298,
        "author": {
          "gitId": "weiyang13"
        },
        "content": ""
      },
      {
        "lineNumber": 299,
        "author": {
          "gitId": "Alaete"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 300,
        "author": {
          "gitId": "Alaete"
        },
        "content": "    public ObservableList\u003cData\u003e getDataList() {"
      },
      {
        "lineNumber": 301,
        "author": {
          "gitId": "Alaete"
        },
        "content": "        return datas.asUnmodifiableObservableList();"
      },
      {
        "lineNumber": 302,
        "author": {
          "gitId": "Alaete"
        },
        "content": "    }"
      },
      {
        "lineNumber": 303,
        "author": {
          "gitId": "Alaete"
        },
        "content": ""
      },
      {
        "lineNumber": 304,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 305,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 306,
        "author": {
          "gitId": "-"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 307,
        "author": {
          "gitId": "nexolute"
        },
        "content": "                || (other instanceof FundBook // instanceof handles nulls"
      },
      {
        "lineNumber": 308,
        "author": {
          "gitId": "LeeYiyuan"
        },
        "content": "                \u0026\u0026 currentRepeaterUniqueId.equals(((FundBook) other).currentRepeaterUniqueId)"
      },
      {
        "lineNumber": 309,
        "author": {
          "gitId": "nexolute"
        },
        "content": "                \u0026\u0026 persons.equals(((FundBook) other).persons)"
      },
      {
        "lineNumber": 310,
        "author": {
          "gitId": "LeeYiyuan"
        },
        "content": "                \u0026\u0026 transactions.equals(((FundBook) other).transactions)"
      },
      {
        "lineNumber": 311,
        "author": {
          "gitId": "LeeYiyuan"
        },
        "content": "                \u0026\u0026 repeaters.equals(((FundBook) other).repeaters)"
      },
      {
        "lineNumber": 312,
        "author": {
          "gitId": "nexolute"
        },
        "content": "                \u0026\u0026 budgets.equals(((FundBook) other).budgets));"
      },
      {
        "lineNumber": 313,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 314,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 315,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 316,
        "author": {
          "gitId": "-"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 317,
        "author": {
          "gitId": "nexolute"
        },
        "content": "        return Objects.hash(persons, budgets);"
      },
      {
        "lineNumber": 318,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 319,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "LeeYiyuan": 76,
      "nexolute": 78,
      "Alaete": 17,
      "weiyang13": 49,
      "-": 99
    }
  },
  {
    "path": "src/main/java/seedu/ichifund/model/Model.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "nexolute"
        },
        "content": "package seedu.ichifund.model;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Alaete"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.function.Predicate;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "import javafx.beans.value.ObservableValue;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "nexolute"
        },
        "content": "import seedu.ichifund.commons.core.GuiSettings;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Alaete"
        },
        "content": "import seedu.ichifund.model.analytics.Data;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "nexolute"
        },
        "content": "import seedu.ichifund.model.budget.Budget;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "import seedu.ichifund.model.context.TransactionContext;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "nexolute"
        },
        "content": "import seedu.ichifund.model.person.Person;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "LeeYiyuan"
        },
        "content": "import seedu.ichifund.model.repeater.Repeater;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "LeeYiyuan"
        },
        "content": "import seedu.ichifund.model.repeater.RepeaterUniqueId;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "import seedu.ichifund.model.transaction.Transaction;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": " * The API of the Model component."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "public interface Model {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    /** {@code Predicate} that always evaluate to true */"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    Predicate\u003cPerson\u003e PREDICATE_SHOW_ALL_PERSONS \u003d unused -\u003e true;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "LeeYiyuan"
        },
        "content": "    Predicate\u003cRepeater\u003e PREDICATE_SHOW_ALL_REPEATERS \u003d unused -\u003e true;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "nexolute"
        },
        "content": "    Predicate\u003cBudget\u003e PREDICATE_SHOW_ALL_BUDGETS \u003d unused -\u003e true;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "     * Replaces user prefs data with the data in {@code userPrefs}."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    void setUserPrefs(ReadOnlyUserPrefs userPrefs);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns the user prefs."
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    ReadOnlyUserPrefs getUserPrefs();"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns the user prefs\u0027 GUI settings."
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    GuiSettings getGuiSettings();"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "     * Sets the user prefs\u0027 GUI settings."
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    void setGuiSettings(GuiSettings guiSettings);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "nexolute"
        },
        "content": "     * Returns the user prefs\u0027 fund book file path."
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "nexolute"
        },
        "content": "    Path getFundBookFilePath();"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "nexolute"
        },
        "content": "     * Sets the user prefs\u0027 fund book file path."
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "nexolute"
        },
        "content": "    void setFundBookFilePath(Path fundBookFilePath);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "nexolute"
        },
        "content": "     * Replaces fund book data with the data in {@code fundBook}."
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "nexolute"
        },
        "content": "    void setFundBook(ReadOnlyFundBook fundBook);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "nexolute"
        },
        "content": "    /** Returns the FundBook */"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "nexolute"
        },
        "content": "    ReadOnlyFundBook getFundBook();"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "LeeYiyuan"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "LeeYiyuan"
        },
        "content": "     * Gets the current repeeater unique id."
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "LeeYiyuan"
        },
        "content": "     */"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "LeeYiyuan"
        },
        "content": "    RepeaterUniqueId getCurrentRepeaterUniqueId();"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "LeeYiyuan"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "LeeYiyuan"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "LeeYiyuan"
        },
        "content": "     * Sets current repeater unique id to {@code uniqueId}."
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "LeeYiyuan"
        },
        "content": "     */"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "LeeYiyuan"
        },
        "content": "    void setCurrentRepeaterUniqueId(RepeaterUniqueId uniqueId);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "LeeYiyuan"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "nexolute"
        },
        "content": "     * Returns true if a person with the same identity as {@code person} exists in the fund book."
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "    boolean hasPerson(Person person);"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "     * Deletes the given person."
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "nexolute"
        },
        "content": "     * The person must exist in the fund book."
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "    void deletePerson(Person target);"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "     * Adds the given person."
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "nexolute"
        },
        "content": "     * {@code person} must not already exist in the fund book."
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "    void addPerson(Person person);"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "     * Replaces the given person {@code target} with {@code editedPerson}."
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "nexolute"
        },
        "content": "     * {@code target} must exist in the fund book."
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "nexolute"
        },
        "content": "     * The person identity of {@code editedPerson} must not be the same as another existing person in the fund book."
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "    void setPerson(Person target, Person editedPerson);"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "    /** Returns an unmodifiable view of the filtered person list */"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "    ObservableList\u003cPerson\u003e getFilteredPersonList();"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "     * Updates the filter of the filtered person list to filter by the given {@code predicate}."
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws NullPointerException if {@code predicate} is null."
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "    void updateFilteredPersonList(Predicate\u003cPerson\u003e predicate);"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "nexolute"
        },
        "content": ""
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "nexolute"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "     * Adds the given transaction. Changes the view of the list to show the new transaction."
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "nexolute"
        },
        "content": "     */"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "nexolute"
        },
        "content": "    void addTransaction(Transaction transaction);"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "nexolute"
        },
        "content": ""
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "     * Deletes the given transaction."
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "     * The repeater must exist in the fund book."
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "     */"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "    void deleteTransaction(Transaction target);"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "weiyang13"
        },
        "content": ""
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "     * Replaces the given transaction {@code target} with {@code editedTransaction}."
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "     * {@code target} must exist in the fund book."
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "     */"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "    void setTransaction(Transaction target, Transaction editedTransaction);"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "weiyang13"
        },
        "content": ""
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "    /** Returns an unmodifiable view of the filtered transaction list. */"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "    ObservableList\u003cTransaction\u003e getFilteredTransactionList();"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "weiyang13"
        },
        "content": ""
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "    TransactionContext getTransactionContext();"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "weiyang13"
        },
        "content": ""
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "    /** Sets the transactionContext and updates the filtered transaction list accordingly */"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "    void setTransactionContext(TransactionContext transactionContext);"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "weiyang13"
        },
        "content": ""
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "    /** Updates transactionContext to show a transaction.  */"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "    void updateTransactionContext(Transaction transaction);"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "weiyang13"
        },
        "content": ""
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "LeeYiyuan"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "LeeYiyuan"
        },
        "content": "     * Returns an unmodifiable view of the transactions associated with {@code repeaterUniqueId}."
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "LeeYiyuan"
        },
        "content": "     */"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "LeeYiyuan"
        },
        "content": "    ObservableList\u003cTransaction\u003e getAssociatedTransactions(RepeaterUniqueId repeaterUniqueId);"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "LeeYiyuan"
        },
        "content": ""
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "LeeYiyuan"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "LeeYiyuan"
        },
        "content": "     * Returns true if a repeater with the same identity as {@code repeater} exists in the fund book."
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "LeeYiyuan"
        },
        "content": "     */"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "LeeYiyuan"
        },
        "content": "    boolean hasRepeater(Repeater repeater);"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "LeeYiyuan"
        },
        "content": ""
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "LeeYiyuan"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "LeeYiyuan"
        },
        "content": "     * Deletes the given repeater."
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "LeeYiyuan"
        },
        "content": "     * The repeater must exist in the fund book."
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "LeeYiyuan"
        },
        "content": "     */"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "LeeYiyuan"
        },
        "content": "    void deleteRepeater(Repeater target);"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "LeeYiyuan"
        },
        "content": ""
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "LeeYiyuan"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "LeeYiyuan"
        },
        "content": "     * Adds the given repeater."
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "LeeYiyuan"
        },
        "content": "     * {@code repeater} must not already exist in the fund book."
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "LeeYiyuan"
        },
        "content": "     */"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "LeeYiyuan"
        },
        "content": "    void addRepeater(Repeater repeater);"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "LeeYiyuan"
        },
        "content": ""
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "LeeYiyuan"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "LeeYiyuan"
        },
        "content": "     * Replaces the given repeater {@code target} with {@code editedRepeater}."
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "LeeYiyuan"
        },
        "content": "     * {@code target} must exist in the fund book."
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "LeeYiyuan"
        },
        "content": "     * The repeater identity of {@code editedRepeater} must not be the same as another existing repeater in the fund"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "LeeYiyuan"
        },
        "content": "     * book."
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "LeeYiyuan"
        },
        "content": "     */"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "LeeYiyuan"
        },
        "content": "    void setRepeater(Repeater target, Repeater editedRepeater);"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "LeeYiyuan"
        },
        "content": ""
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "LeeYiyuan"
        },
        "content": "    /** Returns an unmodifiable view of the filtered repeater list */"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "LeeYiyuan"
        },
        "content": "    ObservableList\u003cRepeater\u003e getFilteredRepeaterList();"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "LeeYiyuan"
        },
        "content": ""
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "LeeYiyuan"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "LeeYiyuan"
        },
        "content": "     * Updates the filter of the filtered repeater list to filter by the given {@code predicate}."
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "LeeYiyuan"
        },
        "content": "     * @throws NullPointerException if {@code predicate} is null."
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "LeeYiyuan"
        },
        "content": "     */"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "LeeYiyuan"
        },
        "content": "    void updateFilteredRepeaterList(Predicate\u003cRepeater\u003e predicate);"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "LeeYiyuan"
        },
        "content": ""
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "nexolute"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "nexolute"
        },
        "content": "     * Returns true if a budget with the same identity as {@code budget} exists in the fund book."
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "nexolute"
        },
        "content": "     */"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "nexolute"
        },
        "content": "    boolean hasBudget(Budget budget);"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "nexolute"
        },
        "content": ""
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "nexolute"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "nexolute"
        },
        "content": "     * Deletes the given budget."
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "nexolute"
        },
        "content": "     * The budget must exist in the fund book."
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "nexolute"
        },
        "content": "     */"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "nexolute"
        },
        "content": "    void deleteBudget(Budget target);"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "nexolute"
        },
        "content": ""
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "nexolute"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "nexolute"
        },
        "content": "     * Adds the given budget."
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "nexolute"
        },
        "content": "     * {@code budget} must not already exist in the fund book."
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "nexolute"
        },
        "content": "     */"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "nexolute"
        },
        "content": "    void addBudget(Budget budget);"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "nexolute"
        },
        "content": ""
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "nexolute"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "nexolute"
        },
        "content": "     * Replaces the given budget {@code target} with {@code editedBudget}."
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "nexolute"
        },
        "content": "     * {@code target} must exist in the fund book."
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "nexolute"
        },
        "content": "     * The budget identity of {@code editedBudget} must not be the same as another existing budget in the fund book."
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "nexolute"
        },
        "content": "     */"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "nexolute"
        },
        "content": "    void setBudget(Budget target, Budget editedBudget);"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "nexolute"
        },
        "content": ""
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "nexolute"
        },
        "content": "    /** Returns an unmodifiable view of the filtered budget list */"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "nexolute"
        },
        "content": "    ObservableList\u003cBudget\u003e getFilteredBudgetList();"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "nexolute"
        },
        "content": ""
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "nexolute"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "nexolute"
        },
        "content": "     * Updates the filter of the filtered budget list to filter by the given {@code predicate}."
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "nexolute"
        },
        "content": "     * @throws NullPointerException if {@code predicate} is null."
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "nexolute"
        },
        "content": "     */"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "nexolute"
        },
        "content": "    void updateFilteredBudgetList(Predicate\u003cBudget\u003e predicate);"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "nexolute"
        },
        "content": ""
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "    ObservableValue\u003cTransactionContext\u003e getTransactionContextProperty();"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "Alaete"
        },
        "content": ""
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "Alaete"
        },
        "content": "    /** Returns the current analytics view */"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "Alaete"
        },
        "content": "    ObservableList\u003cData\u003e getDataList();"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "Alaete"
        },
        "content": ""
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "Alaete"
        },
        "content": "    /** Updates the current analytics view */"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "Alaete"
        },
        "content": "    void updateDataList(List\u003cData\u003e datas);"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "LeeYiyuan": 52,
      "nexolute": 56,
      "Alaete": 8,
      "weiyang13": 28,
      "-": 71
    }
  },
  {
    "path": "src/main/java/seedu/ichifund/model/ModelManager.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "nexolute"
        },
        "content": "package seedu.ichifund.model;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "nexolute"
        },
        "content": "import static seedu.ichifund.commons.util.CollectionUtil.requireAllNonNull;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Alaete"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.function.Predicate;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "import javafx.beans.property.SimpleObjectProperty;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "import javafx.beans.value.ObservableValue;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.collections.transformation.FilteredList;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "nexolute"
        },
        "content": "import seedu.ichifund.commons.core.GuiSettings;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "nexolute"
        },
        "content": "import seedu.ichifund.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Alaete"
        },
        "content": "import seedu.ichifund.model.analytics.Data;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "nexolute"
        },
        "content": "import seedu.ichifund.model.budget.Budget;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "import seedu.ichifund.model.context.TransactionContext;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "nexolute"
        },
        "content": "import seedu.ichifund.model.person.Person;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "LeeYiyuan"
        },
        "content": "import seedu.ichifund.model.repeater.Repeater;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "LeeYiyuan"
        },
        "content": "import seedu.ichifund.model.repeater.RepeaterUniqueId;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "import seedu.ichifund.model.transaction.Transaction;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "LeeYiyuan"
        },
        "content": "import seedu.ichifund.model.transaction.TransactionList;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "nexolute"
        },
        "content": " * Represents the in-memory model of the fund book data."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "public class ModelManager implements Model {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final Logger logger \u003d LogsCenter.getLogger(ModelManager.class);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "nexolute"
        },
        "content": "    private final FundBook fundBook;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    private final UserPrefs userPrefs;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    private final FilteredList\u003cPerson\u003e filteredPersons;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "    private final FilteredList\u003cTransaction\u003e filteredTransactions;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "LeeYiyuan"
        },
        "content": "    private final FilteredList\u003cRepeater\u003e filteredRepeaters;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "nexolute"
        },
        "content": "    private final FilteredList\u003cBudget\u003e filteredBudgets;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Alaete"
        },
        "content": "    private final FilteredList\u003cData\u003e datas;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "    private SimpleObjectProperty\u003cTransactionContext\u003e transactionContext;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "weiyang13"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "nexolute"
        },
        "content": "     * Initializes a ModelManager with the given fundBook and userPrefs."
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "nexolute"
        },
        "content": "    public ModelManager(ReadOnlyFundBook fundBook, ReadOnlyUserPrefs userPrefs) {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        super();"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "nexolute"
        },
        "content": "        requireAllNonNull(fundBook, userPrefs);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "nexolute"
        },
        "content": "        logger.fine(\"Initializing with fund book: \" + fundBook + \" and user prefs \" + userPrefs);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "nexolute"
        },
        "content": "        this.fundBook \u003d new FundBook(fundBook);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        this.userPrefs \u003d new UserPrefs(userPrefs);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "nexolute"
        },
        "content": "        filteredPersons \u003d new FilteredList\u003c\u003e(this.fundBook.getPersonList());"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "        filteredTransactions \u003d new FilteredList\u003c\u003e(this.fundBook.getTransactionList());"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "LeeYiyuan"
        },
        "content": "        filteredRepeaters \u003d new FilteredList\u003c\u003e(this.fundBook.getRepeaterList());"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "nexolute"
        },
        "content": "        filteredBudgets \u003d new FilteredList\u003c\u003e(this.fundBook.getBudgetList());"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "        TransactionContext transactionContext \u003d new TransactionContext(this.fundBook.getLatestTransaction());"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "        updateFilteredTransactionList(transactionContext.getPredicate());"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "        this.transactionContext \u003d new SimpleObjectProperty\u003c\u003e(transactionContext);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "Alaete"
        },
        "content": "        datas \u003d new FilteredList\u003c\u003e(this.fundBook.getDataList());"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "Alaete"
        },
        "content": "        setTransactionContext(new TransactionContext(this.fundBook.getLatestTransaction()));"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "    public ModelManager() {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "nexolute"
        },
        "content": "        this(new FundBook(), new UserPrefs());"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "    //\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d UserPrefs \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setUserPrefs(ReadOnlyUserPrefs userPrefs) {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(userPrefs);"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "        this.userPrefs.resetData(userPrefs);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "    public ReadOnlyUserPrefs getUserPrefs() {"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "        return userPrefs;"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "    public GuiSettings getGuiSettings() {"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "        return userPrefs.getGuiSettings();"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setGuiSettings(GuiSettings guiSettings) {"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(guiSettings);"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "        userPrefs.setGuiSettings(guiSettings);"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "nexolute"
        },
        "content": "    public Path getFundBookFilePath() {"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "nexolute"
        },
        "content": "        return userPrefs.getFundBookFilePath();"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "nexolute"
        },
        "content": "    public void setFundBookFilePath(Path fundBookFilePath) {"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "nexolute"
        },
        "content": "        requireNonNull(fundBookFilePath);"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "nexolute"
        },
        "content": "        userPrefs.setFundBookFilePath(fundBookFilePath);"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "nexolute"
        },
        "content": "    //\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d FundBook \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "nexolute"
        },
        "content": "    public void setFundBook(ReadOnlyFundBook fundBook) {"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "nexolute"
        },
        "content": "        this.fundBook.resetData(fundBook);"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "nexolute"
        },
        "content": "    public ReadOnlyFundBook getFundBook() {"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "nexolute"
        },
        "content": "        return fundBook;"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "LeeYiyuan"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "LeeYiyuan"
        },
        "content": "    public RepeaterUniqueId getCurrentRepeaterUniqueId() {"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "LeeYiyuan"
        },
        "content": "        return fundBook.getCurrentRepeaterUniqueId();"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "LeeYiyuan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "LeeYiyuan"
        },
        "content": ""
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "LeeYiyuan"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "LeeYiyuan"
        },
        "content": "    public void setCurrentRepeaterUniqueId(RepeaterUniqueId uniqueId) {"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "LeeYiyuan"
        },
        "content": "        fundBook.setCurrentRepeaterUniqueId(uniqueId);"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "LeeYiyuan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "LeeYiyuan"
        },
        "content": ""
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean hasPerson(Person person) {"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(person);"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "nexolute"
        },
        "content": "        return fundBook.hasPerson(person);"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "    public void deletePerson(Person target) {"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "nexolute"
        },
        "content": "        fundBook.removePerson(target);"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": "    public void addPerson(Person person) {"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "nexolute"
        },
        "content": "        fundBook.addPerson(person);"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": "        updateFilteredPersonList(PREDICATE_SHOW_ALL_PERSONS);"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "nexolute"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "nexolute"
        },
        "content": "    public void setPerson(Person target, Person editedPerson) {"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "nexolute"
        },
        "content": "        requireAllNonNull(target, editedPerson);"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "nexolute"
        },
        "content": ""
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "nexolute"
        },
        "content": "        fundBook.setPerson(target, editedPerson);"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "nexolute"
        },
        "content": "    }"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "nexolute"
        },
        "content": ""
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "weiyang13"
        },
        "content": ""
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "    public void deleteTransaction(Transaction target) {"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "        fundBook.removeTransaction(target);"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "    }"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "weiyang13"
        },
        "content": ""
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "    public void addTransaction(Transaction transaction) {"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "        fundBook.addTransaction(transaction);"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "    }"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "weiyang13"
        },
        "content": ""
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "    public void setTransaction(Transaction target, Transaction editedTransaction) {"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "        requireAllNonNull(target, editedTransaction);"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "weiyang13"
        },
        "content": ""
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "        fundBook.setTransaction(target, editedTransaction);"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "    }"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "weiyang13"
        },
        "content": ""
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "LeeYiyuan"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "LeeYiyuan"
        },
        "content": "    public ObservableList\u003cTransaction\u003e getAssociatedTransactions(RepeaterUniqueId repeaterUniqueId) {"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "LeeYiyuan"
        },
        "content": "        TransactionList list \u003d new TransactionList();"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "LeeYiyuan"
        },
        "content": "        for (Transaction transaction : fundBook.getTransactionList()) {"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "LeeYiyuan"
        },
        "content": "            if (transaction.getRepeaterUniqueId().equals(repeaterUniqueId)) {"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "LeeYiyuan"
        },
        "content": "                list.add(transaction);"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "LeeYiyuan"
        },
        "content": "            }"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "LeeYiyuan"
        },
        "content": "        }"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "LeeYiyuan"
        },
        "content": "        return list.asUnmodifiableObservableList();"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "LeeYiyuan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "LeeYiyuan"
        },
        "content": ""
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "LeeYiyuan"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "LeeYiyuan"
        },
        "content": "    public boolean hasRepeater(Repeater repeater) {"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "LeeYiyuan"
        },
        "content": "        requireNonNull(repeater);"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "LeeYiyuan"
        },
        "content": "        return fundBook.hasRepeater(repeater);"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "LeeYiyuan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "LeeYiyuan"
        },
        "content": ""
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "LeeYiyuan"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "LeeYiyuan"
        },
        "content": "    public void deleteRepeater(Repeater target) {"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "LeeYiyuan"
        },
        "content": "        fundBook.removeRepeater(target);"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "LeeYiyuan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "LeeYiyuan"
        },
        "content": ""
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "LeeYiyuan"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "LeeYiyuan"
        },
        "content": "    public void addRepeater(Repeater repeater) {"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "LeeYiyuan"
        },
        "content": "        fundBook.addRepeater(repeater);"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "LeeYiyuan"
        },
        "content": "        updateFilteredRepeaterList(PREDICATE_SHOW_ALL_REPEATERS);"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "LeeYiyuan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "LeeYiyuan"
        },
        "content": ""
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "LeeYiyuan"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "LeeYiyuan"
        },
        "content": "    public void setRepeater(Repeater target, Repeater editedRepeater) {"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "LeeYiyuan"
        },
        "content": "        requireAllNonNull(target, editedRepeater);"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "LeeYiyuan"
        },
        "content": ""
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "LeeYiyuan"
        },
        "content": "        fundBook.setRepeater(target, editedRepeater);"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "LeeYiyuan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "LeeYiyuan"
        },
        "content": ""
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "nexolute"
        },
        "content": "    public boolean hasBudget(Budget budget) {"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "nexolute"
        },
        "content": "        requireNonNull(budget);"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "nexolute"
        },
        "content": "        return fundBook.hasBudget(budget);"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "nexolute"
        },
        "content": "    }"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "nexolute"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "nexolute"
        },
        "content": "    public void deleteBudget(Budget target) {"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "nexolute"
        },
        "content": "        fundBook.removeBudget(target);"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "nexolute"
        },
        "content": "    }"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "nexolute"
        },
        "content": ""
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "nexolute"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "nexolute"
        },
        "content": "    public void addBudget(Budget budget) {"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "nexolute"
        },
        "content": "        fundBook.addBudget(budget);"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "nexolute"
        },
        "content": "        updateFilteredBudgetList(PREDICATE_SHOW_ALL_BUDGETS);"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "nexolute"
        },
        "content": "    }"
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "nexolute"
        },
        "content": ""
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "nexolute"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "nexolute"
        },
        "content": "    public void setBudget(Budget target, Budget editedBudget) {"
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "nexolute"
        },
        "content": "        requireAllNonNull(target, editedBudget);"
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "nexolute"
        },
        "content": ""
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "nexolute"
        },
        "content": "        fundBook.setBudget(target, editedBudget);"
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "-"
        },
        "content": "    //\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d Filtered Person List Accessors \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns an unmodifiable view of the list of {@code Person} backed by the internal list of"
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "nexolute"
        },
        "content": "     * {@code versionedFundBook}"
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "-"
        },
        "content": "    public ObservableList\u003cPerson\u003e getFilteredPersonList() {"
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "-"
        },
        "content": "        return filteredPersons;"
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "-"
        },
        "content": "    public void updateFilteredPersonList(Predicate\u003cPerson\u003e predicate) {"
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(predicate);"
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "-"
        },
        "content": "        filteredPersons.setPredicate(predicate);"
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "    //\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d Filtered Transaction List Accessors \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "weiyang13"
        },
        "content": ""
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 248,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "    public ObservableList\u003cTransaction\u003e getFilteredTransactionList() {"
      },
      {
        "lineNumber": 249,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "        return filteredTransactions;"
      },
      {
        "lineNumber": 250,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 251,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 252,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 253,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "    public TransactionContext getTransactionContext() {"
      },
      {
        "lineNumber": 254,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "        return transactionContext.getValue();"
      },
      {
        "lineNumber": 255,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "    }"
      },
      {
        "lineNumber": 256,
        "author": {
          "gitId": "weiyang13"
        },
        "content": ""
      },
      {
        "lineNumber": 257,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 258,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "    public void setTransactionContext(TransactionContext transactionContext) {"
      },
      {
        "lineNumber": 259,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "        this.transactionContext.setValue(transactionContext);"
      },
      {
        "lineNumber": 260,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "        updateFilteredTransactionList(transactionContext.getPredicate());"
      },
      {
        "lineNumber": 261,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "    }"
      },
      {
        "lineNumber": 262,
        "author": {
          "gitId": "weiyang13"
        },
        "content": ""
      },
      {
        "lineNumber": 263,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 264,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "    public void updateTransactionContext(Transaction transaction) {"
      },
      {
        "lineNumber": 265,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "        TransactionContext newContext \u003d getTransactionContext().getAccommodatingContext(transaction);"
      },
      {
        "lineNumber": 266,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "        setTransactionContext(newContext);"
      },
      {
        "lineNumber": 267,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "    }"
      },
      {
        "lineNumber": 268,
        "author": {
          "gitId": "weiyang13"
        },
        "content": ""
      },
      {
        "lineNumber": 269,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 270,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "     * Updates the filter of the filtered transaction list to filter by the given {@code predicate}."
      },
      {
        "lineNumber": 271,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "     * @throws NullPointerException if {@code predicate} is null."
      },
      {
        "lineNumber": 272,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "     */"
      },
      {
        "lineNumber": 273,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "    private void updateFilteredTransactionList(Predicate\u003cTransaction\u003e predicate) {"
      },
      {
        "lineNumber": 274,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "        requireNonNull(predicate);"
      },
      {
        "lineNumber": 275,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "        filteredTransactions.setPredicate(predicate);"
      },
      {
        "lineNumber": 276,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "    }"
      },
      {
        "lineNumber": 277,
        "author": {
          "gitId": "LeeYiyuan"
        },
        "content": ""
      },
      {
        "lineNumber": 278,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "    public ObservableValue\u003cTransactionContext\u003e getTransactionContextProperty() {"
      },
      {
        "lineNumber": 279,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "        return transactionContext;"
      },
      {
        "lineNumber": 280,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "    };"
      },
      {
        "lineNumber": 281,
        "author": {
          "gitId": "weiyang13"
        },
        "content": ""
      },
      {
        "lineNumber": 282,
        "author": {
          "gitId": "LeeYiyuan"
        },
        "content": "    //\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d Filtered Repeater List Accessors \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 283,
        "author": {
          "gitId": "LeeYiyuan"
        },
        "content": ""
      },
      {
        "lineNumber": 284,
        "author": {
          "gitId": "LeeYiyuan"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 285,
        "author": {
          "gitId": "LeeYiyuan"
        },
        "content": "    public ObservableList\u003cRepeater\u003e getFilteredRepeaterList() {"
      },
      {
        "lineNumber": 286,
        "author": {
          "gitId": "LeeYiyuan"
        },
        "content": "        return filteredRepeaters;"
      },
      {
        "lineNumber": 287,
        "author": {
          "gitId": "LeeYiyuan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 288,
        "author": {
          "gitId": "LeeYiyuan"
        },
        "content": ""
      },
      {
        "lineNumber": 289,
        "author": {
          "gitId": "LeeYiyuan"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 290,
        "author": {
          "gitId": "LeeYiyuan"
        },
        "content": "    public void updateFilteredRepeaterList(Predicate\u003cRepeater\u003e predicate) {"
      },
      {
        "lineNumber": 291,
        "author": {
          "gitId": "LeeYiyuan"
        },
        "content": "        requireNonNull(predicate);"
      },
      {
        "lineNumber": 292,
        "author": {
          "gitId": "LeeYiyuan"
        },
        "content": "        filteredRepeaters.setPredicate(predicate);"
      },
      {
        "lineNumber": 293,
        "author": {
          "gitId": "LeeYiyuan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 294,
        "author": {
          "gitId": "LeeYiyuan"
        },
        "content": ""
      },
      {
        "lineNumber": 295,
        "author": {
          "gitId": "nexolute"
        },
        "content": "    //\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d Filtered Budget List Accessors \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 296,
        "author": {
          "gitId": "nexolute"
        },
        "content": ""
      },
      {
        "lineNumber": 297,
        "author": {
          "gitId": "nexolute"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 298,
        "author": {
          "gitId": "nexolute"
        },
        "content": "    public ObservableList\u003cBudget\u003e getFilteredBudgetList() {"
      },
      {
        "lineNumber": 299,
        "author": {
          "gitId": "nexolute"
        },
        "content": "        return filteredBudgets;"
      },
      {
        "lineNumber": 300,
        "author": {
          "gitId": "nexolute"
        },
        "content": "    }"
      },
      {
        "lineNumber": 301,
        "author": {
          "gitId": "nexolute"
        },
        "content": ""
      },
      {
        "lineNumber": 302,
        "author": {
          "gitId": "nexolute"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 303,
        "author": {
          "gitId": "nexolute"
        },
        "content": "    public void updateFilteredBudgetList(Predicate\u003cBudget\u003e predicate) {"
      },
      {
        "lineNumber": 304,
        "author": {
          "gitId": "nexolute"
        },
        "content": "        requireNonNull(predicate);"
      },
      {
        "lineNumber": 305,
        "author": {
          "gitId": "nexolute"
        },
        "content": "        filteredBudgets.setPredicate(predicate);"
      },
      {
        "lineNumber": 306,
        "author": {
          "gitId": "nexolute"
        },
        "content": "    }"
      },
      {
        "lineNumber": 307,
        "author": {
          "gitId": "nexolute"
        },
        "content": ""
      },
      {
        "lineNumber": 308,
        "author": {
          "gitId": "Alaete"
        },
        "content": "    //\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d Analytics Accessors \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 309,
        "author": {
          "gitId": "Alaete"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 310,
        "author": {
          "gitId": "Alaete"
        },
        "content": "    public ObservableList\u003cData\u003e getDataList() {"
      },
      {
        "lineNumber": 311,
        "author": {
          "gitId": "Alaete"
        },
        "content": "        return datas;"
      },
      {
        "lineNumber": 312,
        "author": {
          "gitId": "Alaete"
        },
        "content": "    }"
      },
      {
        "lineNumber": 313,
        "author": {
          "gitId": "Alaete"
        },
        "content": ""
      },
      {
        "lineNumber": 314,
        "author": {
          "gitId": "Alaete"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 315,
        "author": {
          "gitId": "Alaete"
        },
        "content": "    public void updateDataList(List\u003cData\u003e datas) {"
      },
      {
        "lineNumber": 316,
        "author": {
          "gitId": "Alaete"
        },
        "content": "        requireNonNull(datas);"
      },
      {
        "lineNumber": 317,
        "author": {
          "gitId": "Alaete"
        },
        "content": "        fundBook.setData(datas);"
      },
      {
        "lineNumber": 318,
        "author": {
          "gitId": "Alaete"
        },
        "content": "    }"
      },
      {
        "lineNumber": 319,
        "author": {
          "gitId": "Alaete"
        },
        "content": ""
      },
      {
        "lineNumber": 320,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 321,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "    public boolean equals(Object obj) {"
      },
      {
        "lineNumber": 322,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "        // short circuit if same object"
      },
      {
        "lineNumber": 323,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "        if (obj \u003d\u003d this) {"
      },
      {
        "lineNumber": 324,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 325,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "        }"
      },
      {
        "lineNumber": 326,
        "author": {
          "gitId": "weiyang13"
        },
        "content": ""
      },
      {
        "lineNumber": 327,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "        // instanceof handles nulls"
      },
      {
        "lineNumber": 328,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "        if (!(obj instanceof ModelManager)) {"
      },
      {
        "lineNumber": 329,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 330,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "        }"
      },
      {
        "lineNumber": 331,
        "author": {
          "gitId": "weiyang13"
        },
        "content": ""
      },
      {
        "lineNumber": 332,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "        // state check"
      },
      {
        "lineNumber": 333,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "        ModelManager other \u003d (ModelManager) obj;"
      },
      {
        "lineNumber": 334,
        "author": {
          "gitId": "weiyang13"
        },
        "content": ""
      },
      {
        "lineNumber": 335,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "        return fundBook.equals(other.fundBook)"
      },
      {
        "lineNumber": 336,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "                \u0026\u0026 userPrefs.equals(other.userPrefs)"
      },
      {
        "lineNumber": 337,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "                \u0026\u0026 filteredPersons.equals(other.filteredPersons)"
      },
      {
        "lineNumber": 338,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "                \u0026\u0026 filteredTransactions.equals(other.filteredTransactions)"
      },
      {
        "lineNumber": 339,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "                \u0026\u0026 filteredRepeaters.equals(other.filteredRepeaters)"
      },
      {
        "lineNumber": 340,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "                \u0026\u0026 filteredBudgets.equals(other.filteredBudgets)"
      },
      {
        "lineNumber": 341,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "                \u0026\u0026 datas.equals(other.datas)"
      },
      {
        "lineNumber": 342,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "                \u0026\u0026 transactionContext.getValue().equals(other.transactionContext.getValue());"
      },
      {
        "lineNumber": 343,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "    }"
      },
      {
        "lineNumber": 344,
        "author": {
          "gitId": "weiyang13"
        },
        "content": ""
      },
      {
        "lineNumber": 345,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "LeeYiyuan": 64,
      "nexolute": 71,
      "Alaete": 17,
      "weiyang13": 88,
      "-": 105
    }
  },
  {
    "path": "src/main/java/seedu/ichifund/model/ReadOnlyFundBook.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "nexolute"
        },
        "content": "package seedu.ichifund.model;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Alaete"
        },
        "content": "import seedu.ichifund.model.analytics.Data;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "nexolute"
        },
        "content": "import seedu.ichifund.model.budget.Budget;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "nexolute"
        },
        "content": "import seedu.ichifund.model.person.Person;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "LeeYiyuan"
        },
        "content": "import seedu.ichifund.model.repeater.Repeater;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "LeeYiyuan"
        },
        "content": "import seedu.ichifund.model.repeater.RepeaterUniqueId;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "import seedu.ichifund.model.transaction.Transaction;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "nexolute"
        },
        "content": " * Unmodifiable view of an fund book"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "nexolute"
        },
        "content": "public interface ReadOnlyFundBook {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "LeeYiyuan"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "LeeYiyuan"
        },
        "content": "     * Returns an unmodifiable view of the current repeater unique id."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "LeeYiyuan"
        },
        "content": "     */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "LeeYiyuan"
        },
        "content": "    RepeaterUniqueId getCurrentRepeaterUniqueId();"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "LeeYiyuan"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns an unmodifiable view of the persons list."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "     * This list will not contain any duplicate persons."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    ObservableList\u003cPerson\u003e getPersonList();"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "LeeYiyuan"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "LeeYiyuan"
        },
        "content": "     * Returns an unmodifiable view of the repeaters list."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "LeeYiyuan"
        },
        "content": "     * This list will not contain any duplicate repeaters."
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "LeeYiyuan"
        },
        "content": "     */"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "LeeYiyuan"
        },
        "content": "    ObservableList\u003cRepeater\u003e getRepeaterList();"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "LeeYiyuan"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "nexolute"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "nexolute"
        },
        "content": "     * Returns an unmodifiable view of the budgets list."
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "nexolute"
        },
        "content": "     * This list will not contain any duplicate budgets."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "nexolute"
        },
        "content": "     */"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "nexolute"
        },
        "content": "    ObservableList\u003cBudget\u003e getBudgetList();"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "nexolute"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "     * Returns an unmodifiable view of the transactions list."
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "     */"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "    ObservableList\u003cTransaction\u003e getTransactionList();"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "weiyang13"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Alaete"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Alaete"
        },
        "content": "     * Returns an unmodifiable view of the data list."
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Alaete"
        },
        "content": "     */"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Alaete"
        },
        "content": "    ObservableList\u003cData\u003e getDataList();"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Alaete"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "LeeYiyuan": 13,
      "nexolute": 11,
      "Alaete": 6,
      "weiyang13": 6,
      "-": 13
    }
  },
  {
    "path": "src/main/java/seedu/ichifund/model/ReadOnlyUserPrefs.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "nexolute"
        },
        "content": "package seedu.ichifund.model;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "nexolute"
        },
        "content": "import seedu.ichifund.commons.core.GuiSettings;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": " * Unmodifiable view of user prefs."
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "public interface ReadOnlyUserPrefs {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    GuiSettings getGuiSettings();"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "nexolute"
        },
        "content": "    Path getFundBookFilePath();"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "nexolute": 3,
      "-": 13
    }
  },
  {
    "path": "src/main/java/seedu/ichifund/model/UserPrefs.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "nexolute"
        },
        "content": "package seedu.ichifund.model;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Paths;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Objects;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "nexolute"
        },
        "content": "import seedu.ichifund.commons.core.GuiSettings;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": " * Represents User\u0027s preferences."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "public class UserPrefs implements ReadOnlyUserPrefs {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    private GuiSettings guiSettings \u003d new GuiSettings();"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "nexolute"
        },
        "content": "    private Path fundBookFilePath \u003d Paths.get(\"data\" , \"fundbook.json\");"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "     * Creates a {@code UserPrefs} with default values."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    public UserPrefs() {}"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "     * Creates a {@code UserPrefs} with the prefs in {@code userPrefs}."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    public UserPrefs(ReadOnlyUserPrefs userPrefs) {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        this();"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        resetData(userPrefs);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "     * Resets the existing data of this {@code UserPrefs} with {@code newUserPrefs}."
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    public void resetData(ReadOnlyUserPrefs newUserPrefs) {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(newUserPrefs);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        setGuiSettings(newUserPrefs.getGuiSettings());"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "nexolute"
        },
        "content": "        setFundBookFilePath(newUserPrefs.getFundBookFilePath());"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    public GuiSettings getGuiSettings() {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "        return guiSettings;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setGuiSettings(GuiSettings guiSettings) {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(guiSettings);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        this.guiSettings \u003d guiSettings;"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "nexolute"
        },
        "content": "    public Path getFundBookFilePath() {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "nexolute"
        },
        "content": "        return fundBookFilePath;"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "nexolute"
        },
        "content": "    public void setFundBookFilePath(Path fundBookFilePath) {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "nexolute"
        },
        "content": "        requireNonNull(fundBookFilePath);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "nexolute"
        },
        "content": "        this.fundBookFilePath \u003d fundBookFilePath;"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "        if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!(other instanceof UserPrefs)) { //this handles null as well."
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs o \u003d (UserPrefs) other;"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "        return guiSettings.equals(o.guiSettings)"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "nexolute"
        },
        "content": "                \u0026\u0026 fundBookFilePath.equals(o.fundBookFilePath);"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "nexolute"
        },
        "content": "        return Objects.hash(guiSettings, fundBookFilePath);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "        StringBuilder sb \u003d new StringBuilder();"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "        sb.append(\"Gui Settings : \" + guiSettings);"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "nexolute"
        },
        "content": "        sb.append(\"\\nLocal data file location : \" + fundBookFilePath);"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "        return sb.toString();"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "nexolute": 12,
      "-": 75
    }
  },
  {
    "path": "src/main/java/seedu/ichifund/model/amount/Amount.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "package seedu.ichifund.model.amount;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "weiyang13"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "nexolute"
        },
        "content": "import static seedu.ichifund.commons.util.AppUtil.checkArgument;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "weiyang13"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "weiyang13"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "/**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "weiyang13"
        },
        "content": " * Represents a Transaction\u0027s amount in the transaction recorder."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "weiyang13"
        },
        "content": " * Guarantees: immutable; is valid as declared in {@link #isValidAmount(String)}"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "weiyang13"
        },
        "content": " */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "public class Amount implements Comparable\u003cAmount\u003e {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "weiyang13"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "    public static final String MESSAGE_CONSTRAINTS \u003d"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "            \"Amount should be in the format \u0027\u003cdollars\u003e.\u003ccents\u003e\u0027 or \u0027\u003cdollars\u003e\u0027.\\n\""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "                    + \"\u003cdollars\u003e consists of numbers with no leading zeroes, unless it is \u00270\u0027.\\n\""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "                    + \"\u003ccents\u003e consists of numbers, and is exactly 2 digits long.\";"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "    public static final String NEGATIVE_AMOUNT_CONSTRAINT \u003d"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "            \"Amount should not be negative for transactions, repeatables, budgets, and loan.\\n\";"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "    public static final String CENTS_REGEX \u003d \"(\\\\.\\\\d\\\\d)\"; // \u0027.\u0027 followed by exactly two numerical digits"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "    public static final String DOLLARS_REGEX \u003d \"\\\\-?([1-9]\\\\d*|0)\"; // \u00270\u0027, or number without leading zeroes"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "    public static final String VALIDATION_REGEX \u003d DOLLARS_REGEX + CENTS_REGEX + \"?\"; // Dollars, with cents optionally"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "    public final int valueInCents;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "weiyang13"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "     * Constructs a {@code Amount}."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "     *"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "     * @param amount A valid amount."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "     */"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "    public Amount(String amount) {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "        requireNonNull(amount);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "        checkArgument(isValidAmount(amount), MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "nexolute"
        },
        "content": "        String[] amounts \u003d amount.split(\"\\\\.\");"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "        if (amounts.length \u003d\u003d 1) { // String contains only dollar and no cents"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "            valueInCents \u003d Integer.parseInt(amount) * 100;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "        } else { // String contains only cents"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "            valueInCents \u003d getValueFromDollarAndCents(amounts[0], amounts[1]);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "        }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "weiyang13"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "    private Amount(int valueInCents) {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "        this.valueInCents \u003d valueInCents;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "weiyang13"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "     * Returns integer representing value from a {@code String dollar} and a {@code String cents}"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "     *"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "     * @param dollar String representing value in dollars, can have negative sign."
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "     * @param cents String representing value in cents."
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "     * @return Combined value in cents"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "     */"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Alaete"
        },
        "content": "    private static int getValueFromDollarAndCents(String dollar, String cents) {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "        int dollarValue \u003d Integer.parseInt(dollar);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "        int centsValue \u003d Integer.parseInt(cents);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "        if (dollar.charAt(0) \u003d\u003d \u0027-\u0027) {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "            return dollarValue * 100 - centsValue;"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "            return dollarValue * 100 + centsValue;"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "        }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "    }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "weiyang13"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "weiyang13"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "     * Returns true if a given string is a valid amount."
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "     */"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "    public static boolean isValidAmount(String test) {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "        return test.matches(VALIDATION_REGEX);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "    }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "weiyang13"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "     * Returns true if a given string is a negative amount."
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "     * String must first correspond to a valid amount."
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "     */"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "    public static boolean isNegative(String test) {"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "        return test.substring(0, 1).equals(\"-\");"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "    }"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "weiyang13"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "        int dollars \u003d valueInCents / 100;"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "        int cents \u003d java.lang.Math.abs(valueInCents) % 100; // Absolute value required due to behaviour of %"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "        String centsString \u003d convertCentsToString(cents);"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "weiyang13"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "        if (dollars \u003d\u003d 0 \u0026\u0026 valueInCents \u003c 0) {"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "            return \"-0.\" + centsString;"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "            return dollars + \".\" + centsString;"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "        }"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "    }"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "weiyang13"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "     * Converts a value in cents to a two character {@code String}."
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "     * Precondition: The input must be positive and less than 100."
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "     *"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "     * @param cents The number of cents in an {@code Amount} that is less than 100."
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "     * @return A two character {@code String}."
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "     */"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "Alaete"
        },
        "content": "    private static String convertCentsToString(int cents) {"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "        if (cents \u003d\u003d 0) {"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "            return \"00\";"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "        } else if (cents \u003c 10) {"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "            return \"0\" + cents;"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "            return \"\" + cents;"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "        }"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "    }"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "weiyang13"
        },
        "content": ""
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "    public int getValueInCents() {"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "        return valueInCents;"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "    }"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "weiyang13"
        },
        "content": ""
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "     * Returns an {@code Amount} object obtained from the summation a {@code List} of {@code Amount} objects."
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "     *"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "     * @param amounts List of {@code Amount} to be added."
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "     * @return An {@code Amount} obtained from summation."
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "     */"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "Alaete"
        },
        "content": "    public static Amount addAll(List\u003cAmount\u003e amounts) {"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "        int valueInCents \u003d 0;"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "        for (Amount amount : amounts) {"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "            valueInCents +\u003d amount.getValueInCents();"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "        }"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "        return new Amount(valueInCents);"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "    }"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "weiyang13"
        },
        "content": ""
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "     * Returns an {@code Amount} object obtained from adding two {@code Amount} objects."
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "     *"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "     * @param operand1 First operand to be added."
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "     * @param operand2 Second operand to be added."
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "     * @return An {@code Amount} obtained from addition."
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "     */"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "Alaete"
        },
        "content": "    public static Amount add(Amount operand1, Amount operand2) {"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "        return new Amount(operand1.getValueInCents() + operand2.getValueInCents());"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "    }"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "weiyang13"
        },
        "content": ""
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "     * Returns an {@code Amount} object obtained from the subtraction of two {@code Amount} objects."
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "     *"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "     * @param operand1 First operand to be subtracted."
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "     * @param operand2 Second operand to be subtracted from first operand."
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "     * @return An {@code Amount} obtained from subtraction."
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "     */"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "Alaete"
        },
        "content": "    public static Amount subtract(Amount operand1, Amount operand2) {"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "        return new Amount(operand1.getValueInCents() - operand2.getValueInCents());"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "    }"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "weiyang13"
        },
        "content": ""
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "     * Returns the negative of an {@code Amount}."
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "     *"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "     * @param amount {@code Amount} object to be negated."
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "     * @return The negative of an {@code Amount}."
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "     */"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "Alaete"
        },
        "content": "    public static Amount negate(Amount amount) {"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "        return new Amount(-amount.getValueInCents());"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "    }"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "weiyang13"
        },
        "content": ""
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "                || (other instanceof Amount // instanceof handles nulls"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "                \u0026\u0026 valueInCents \u003d\u003d (((Amount) other).valueInCents)); // state check"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "    }"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "weiyang13"
        },
        "content": ""
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "    public int compareTo(Amount other) {"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "        return valueInCents - other.valueInCents;"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "    }"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "weiyang13"
        },
        "content": ""
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "        return toString().hashCode();"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "    }"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "weiyang13"
        },
        "content": ""
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "}"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "weiyang13"
        },
        "content": ""
      }
    ],
    "authorContributionMap": {
      "nexolute": 2,
      "Alaete": 6,
      "weiyang13": 168
    }
  },
  {
    "path": "src/main/java/seedu/ichifund/model/amount/exceptions/NegativeAmountException.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "package seedu.ichifund.model.amount.exceptions;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "weiyang13"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "weiyang13"
        },
        "content": " * Signals that the operation is expected to create a positive {@code Amount} but will create a negative {@code Amount}."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "weiyang13"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "public class NegativeAmountException extends RuntimeException {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "weiyang13": 7
    }
  },
  {
    "path": "src/main/java/seedu/ichifund/model/analytics/BreakdownReport.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Alaete"
        },
        "content": "package seedu.ichifund.model.analytics;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Alaete"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Alaete"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Alaete"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Alaete"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Alaete"
        },
        "content": "import java.util.Collections;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Alaete"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Alaete"
        },
        "content": "import java.util.Objects;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Alaete"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Alaete"
        },
        "content": "import seedu.ichifund.model.date.Month;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Alaete"
        },
        "content": "import seedu.ichifund.model.date.Year;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Alaete"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Alaete"
        },
        "content": "/**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Alaete"
        },
        "content": " * Represents a report for expenditure breakdown by category, with the ability to be generated."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Alaete"
        },
        "content": " */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Alaete"
        },
        "content": "public class BreakdownReport extends Report {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Alaete"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Alaete"
        },
        "content": "    private final Month month;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Alaete"
        },
        "content": "    private final Year year;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Alaete"
        },
        "content": "    private List\u003cData\u003e breakdown;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Alaete"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Alaete"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Alaete"
        },
        "content": "     * Constructs a {@code BreakdownReport}."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Alaete"
        },
        "content": "     *"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Alaete"
        },
        "content": "     * @param year A year."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Alaete"
        },
        "content": "     */"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Alaete"
        },
        "content": "    public BreakdownReport(Month month, Year year) {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Alaete"
        },
        "content": "        requireNonNull(month);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Alaete"
        },
        "content": "        requireNonNull(year);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Alaete"
        },
        "content": "        this.month \u003d month;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Alaete"
        },
        "content": "        this.year \u003d year;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Alaete"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Alaete"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Alaete"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Alaete"
        },
        "content": "     * Fills the {@code BreakdownReport}."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Alaete"
        },
        "content": "     *"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Alaete"
        },
        "content": "     * @param breakdownList Data to fill the report."
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Alaete"
        },
        "content": "     */"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Alaete"
        },
        "content": "    public void fillReport(List\u003cData\u003e breakdownList) {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Alaete"
        },
        "content": "        requireNonNull(breakdownList);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Alaete"
        },
        "content": "        this.breakdown \u003d breakdownList;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Alaete"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Alaete"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Alaete"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Alaete"
        },
        "content": "     * Retrieves the month."
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Alaete"
        },
        "content": "     */"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Alaete"
        },
        "content": "    public Month getMonth() {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Alaete"
        },
        "content": "        return month;"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Alaete"
        },
        "content": "    }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Alaete"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Alaete"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Alaete"
        },
        "content": "     * Retrieves the year."
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Alaete"
        },
        "content": "     */"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "Alaete"
        },
        "content": "    public Year getYear() {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "Alaete"
        },
        "content": "        return year;"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "Alaete"
        },
        "content": "    }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "Alaete"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "Alaete"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "Alaete"
        },
        "content": "     * Retrieves the data list."
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "Alaete"
        },
        "content": "     */"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "Alaete"
        },
        "content": "    public List\u003cData\u003e getBreakdownList() {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "Alaete"
        },
        "content": "        return breakdown;"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "Alaete"
        },
        "content": "    }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "Alaete"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "Alaete"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "Alaete"
        },
        "content": "     * Retrieves the sorted data list."
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "Alaete"
        },
        "content": "     */"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "Alaete"
        },
        "content": "    public List\u003cData\u003e getSortedBreakdownList() {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "Alaete"
        },
        "content": "        List\u003cData\u003e sortedBreakdownList \u003d new ArrayList\u003c\u003e(breakdown);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "Alaete"
        },
        "content": "        Collections.sort(sortedBreakdownList);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "Alaete"
        },
        "content": "        return sortedBreakdownList;"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "Alaete"
        },
        "content": "    }"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "Alaete"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "Alaete"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "Alaete"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "Alaete"
        },
        "content": "     * Returns true if both trend reports contain the same month, year and data."
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "Alaete"
        },
        "content": "     * This defines a stronger notion of equality between two breakdown reports."
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "Alaete"
        },
        "content": "     */"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "Alaete"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "Alaete"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "Alaete"
        },
        "content": "        if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "Alaete"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "Alaete"
        },
        "content": "        }"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "Alaete"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "Alaete"
        },
        "content": "        if (!(other instanceof BreakdownReport)) {"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "Alaete"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "Alaete"
        },
        "content": "        }"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "Alaete"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "Alaete"
        },
        "content": "        BreakdownReport otherReport \u003d (BreakdownReport) other;"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "Alaete"
        },
        "content": "        return otherReport.getMonth().equals(getMonth())"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "Alaete"
        },
        "content": "                \u0026\u0026 otherReport.getYear().equals(getYear())"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "Alaete"
        },
        "content": "                \u0026\u0026 otherReport.getBreakdownList().equals(getBreakdownList());"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "Alaete"
        },
        "content": "    }"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "Alaete"
        },
        "content": ""
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "Alaete"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "Alaete"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "Alaete"
        },
        "content": "        return Objects.hash(month, year, breakdown);"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "Alaete"
        },
        "content": "    }"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "Alaete"
        },
        "content": ""
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "Alaete"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "Alaete"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "Alaete"
        },
        "content": "        final StringBuilder builder \u003d new StringBuilder();"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "Alaete"
        },
        "content": "        builder.append(\" Month: \")"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "Alaete"
        },
        "content": "                .append(getYear());"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "Alaete"
        },
        "content": ""
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "Alaete"
        },
        "content": "        builder.append(\" Year: \")"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "Alaete"
        },
        "content": "                .append(getYear());"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "Alaete"
        },
        "content": ""
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "Alaete"
        },
        "content": "        for (Data data : breakdown) {"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "Alaete"
        },
        "content": "            builder.append(data);"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "Alaete"
        },
        "content": "        }"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "Alaete"
        },
        "content": ""
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "Alaete"
        },
        "content": "        return builder.toString();"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "Alaete"
        },
        "content": "    }"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "Alaete"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Alaete": 115
    }
  },
  {
    "path": "src/main/java/seedu/ichifund/model/analytics/Data.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Alaete"
        },
        "content": "package seedu.ichifund.model.analytics;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Alaete"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Alaete"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Alaete"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Alaete"
        },
        "content": "import java.util.Objects;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Alaete"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Alaete"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Alaete"
        },
        "content": "import seedu.ichifund.model.amount.Amount;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Alaete"
        },
        "content": "import seedu.ichifund.model.analytics.exceptions.FieldNotFoundException;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Alaete"
        },
        "content": "import seedu.ichifund.model.date.Day;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Alaete"
        },
        "content": "import seedu.ichifund.model.date.Month;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Alaete"
        },
        "content": "import seedu.ichifund.model.date.Year;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Alaete"
        },
        "content": "import seedu.ichifund.model.transaction.Category;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Alaete"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Alaete"
        },
        "content": "/**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Alaete"
        },
        "content": " * Represents a data field in an analytics report."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Alaete"
        },
        "content": " * Guarantees: immutable"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Alaete"
        },
        "content": " */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Alaete"
        },
        "content": "public class Data implements Comparable\u003cData\u003e {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Alaete"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Alaete"
        },
        "content": "    private final String description;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Alaete"
        },
        "content": "    private final Amount amount;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Alaete"
        },
        "content": "    private final Optional\u003cYear\u003e year;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Alaete"
        },
        "content": "    private final Optional\u003cMonth\u003e month;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Alaete"
        },
        "content": "    private final Optional\u003cDay\u003e day;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Alaete"
        },
        "content": "    private final Optional\u003cCategory\u003e category;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Alaete"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Alaete"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Alaete"
        },
        "content": "     * Constructs a {@code Data}."
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Alaete"
        },
        "content": "     */"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Alaete"
        },
        "content": "    public Data(String description, Amount amount, Optional\u003cYear\u003e year, Optional\u003cMonth\u003e month, Optional\u003cDay\u003e day,"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Alaete"
        },
        "content": "                Optional\u003cCategory\u003e category) {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Alaete"
        },
        "content": "        requireNonNull(amount);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Alaete"
        },
        "content": "        this.description \u003d description;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Alaete"
        },
        "content": "        this.amount \u003d amount;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Alaete"
        },
        "content": "        this.year \u003d year;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Alaete"
        },
        "content": "        this.month \u003d month;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Alaete"
        },
        "content": "        this.day \u003d day;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Alaete"
        },
        "content": "        this.category \u003d category;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Alaete"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Alaete"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Alaete"
        },
        "content": "    public String getDescription() {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Alaete"
        },
        "content": "        return description;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Alaete"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Alaete"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Alaete"
        },
        "content": "    public Amount getAmount() {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Alaete"
        },
        "content": "        return amount;"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Alaete"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Alaete"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Alaete"
        },
        "content": "    public Year getYear() {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Alaete"
        },
        "content": "        return year.orElseThrow(FieldNotFoundException::new);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Alaete"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Alaete"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "Alaete"
        },
        "content": "    public Month getMonth() {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "Alaete"
        },
        "content": "        return month.orElseThrow(FieldNotFoundException::new);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "Alaete"
        },
        "content": "    }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "Alaete"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "Alaete"
        },
        "content": "    public Day getDay() {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "Alaete"
        },
        "content": "        return day.orElseThrow(FieldNotFoundException::new);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "Alaete"
        },
        "content": "    }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "Alaete"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "Alaete"
        },
        "content": "    public Category getCategory() {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "Alaete"
        },
        "content": "        return category.orElseThrow(FieldNotFoundException::new);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "Alaete"
        },
        "content": "    }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "Alaete"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "Alaete"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "Alaete"
        },
        "content": "     * Returns true if both data objects contain the same data fields."
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "Alaete"
        },
        "content": "     * This defines a stronger notion of equality between two data objects."
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "Alaete"
        },
        "content": "     */"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "Alaete"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "Alaete"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "Alaete"
        },
        "content": "        if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "Alaete"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "Alaete"
        },
        "content": "        }"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "Alaete"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "Alaete"
        },
        "content": "        if (!(other instanceof Data)) {"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "Alaete"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "Alaete"
        },
        "content": "        }"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "Alaete"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "Alaete"
        },
        "content": "        Data otherData \u003d (Data) other;"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "Alaete"
        },
        "content": "        return otherData.getDescription().equals(getDescription())"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "Alaete"
        },
        "content": "                \u0026\u0026 otherData.getAmount().equals(getAmount())"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "Alaete"
        },
        "content": "                \u0026\u0026 otherData.getYear().equals(getYear())"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "Alaete"
        },
        "content": "                \u0026\u0026 otherData.getMonth().equals(getMonth())"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "Alaete"
        },
        "content": "                \u0026\u0026 otherData.getDay().equals(getDay())"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "Alaete"
        },
        "content": "                \u0026\u0026 otherData.getCategory().equals(getCategory());"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "Alaete"
        },
        "content": "    }"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "Alaete"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "Alaete"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "Alaete"
        },
        "content": "    public int compareTo(Data other) {"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "Alaete"
        },
        "content": "        return other.getAmount().compareTo(getAmount());"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "Alaete"
        },
        "content": "    }"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "Alaete"
        },
        "content": ""
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "Alaete"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "Alaete"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "Alaete"
        },
        "content": "        return Objects.hash(description, amount, year, month, day, category);"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "Alaete"
        },
        "content": "    }"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "Alaete"
        },
        "content": ""
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "Alaete"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "Alaete"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "Alaete"
        },
        "content": "        final StringBuilder builder \u003d new StringBuilder();"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "Alaete"
        },
        "content": "        builder.append(\" Description: \")"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "Alaete"
        },
        "content": "                .append(getDescription());"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "Alaete"
        },
        "content": ""
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "Alaete"
        },
        "content": "        builder.append(\" Amount: \")"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "Alaete"
        },
        "content": "                .append(getAmount());"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "Alaete"
        },
        "content": ""
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "Alaete"
        },
        "content": "        if (year.isPresent()) {"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "Alaete"
        },
        "content": "            builder.append(\" Year: \")"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "Alaete"
        },
        "content": "                    .append(getYear());"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "Alaete"
        },
        "content": "        }"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "Alaete"
        },
        "content": ""
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "Alaete"
        },
        "content": "        if (month.isPresent()) {"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "Alaete"
        },
        "content": "            builder.append(\" Month: \")"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "Alaete"
        },
        "content": "                    .append(getMonth());"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "Alaete"
        },
        "content": "        }"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "Alaete"
        },
        "content": ""
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "Alaete"
        },
        "content": "        if (day.isPresent()) {"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "Alaete"
        },
        "content": "            builder.append(\" Day: \")"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "Alaete"
        },
        "content": "                    .append(getDay());"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "Alaete"
        },
        "content": "        }"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "Alaete"
        },
        "content": ""
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "Alaete"
        },
        "content": "        if (category.isPresent()) {"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "Alaete"
        },
        "content": "            builder.append(\" Category: \")"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "Alaete"
        },
        "content": "                    .append(getCategory());"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "Alaete"
        },
        "content": "        }"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "Alaete"
        },
        "content": ""
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "Alaete"
        },
        "content": "        return builder.toString();"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "Alaete"
        },
        "content": "    }"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "Alaete"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Alaete": 130
    }
  },
  {
    "path": "src/main/java/seedu/ichifund/model/analytics/DataList.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Alaete"
        },
        "content": "package seedu.ichifund.model.analytics;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Alaete"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Alaete"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Alaete"
        },
        "content": "import static seedu.ichifund.commons.util.CollectionUtil.requireAllNonNull;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Alaete"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Alaete"
        },
        "content": "import java.util.Iterator;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Alaete"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Alaete"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Alaete"
        },
        "content": "import javafx.collections.FXCollections;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Alaete"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Alaete"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Alaete"
        },
        "content": "/**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Alaete"
        },
        "content": " * A list of data objects that does not allow nulls."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Alaete"
        },
        "content": " *"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Alaete"
        },
        "content": " * Supports a minimal set of list operations."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Alaete"
        },
        "content": " */"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Alaete"
        },
        "content": "public class DataList implements Iterable\u003cData\u003e {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Alaete"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Alaete"
        },
        "content": "    private final ObservableList\u003cData\u003e internalList \u003d FXCollections.observableArrayList();"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Alaete"
        },
        "content": "    private final ObservableList\u003cData\u003e internalUnmodifiableList \u003d"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Alaete"
        },
        "content": "            FXCollections.unmodifiableObservableList(internalList);"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Alaete"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Alaete"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Alaete"
        },
        "content": "     * Adds a data object to the list."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Alaete"
        },
        "content": "     */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Alaete"
        },
        "content": "    public void add(Data toAdd) {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Alaete"
        },
        "content": "        requireNonNull(toAdd);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Alaete"
        },
        "content": "        internalList.add(toAdd);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Alaete"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Alaete"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Alaete"
        },
        "content": "    public void setData(DataList replacement) {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Alaete"
        },
        "content": "        requireNonNull(replacement);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Alaete"
        },
        "content": "        internalList.setAll(replacement.internalList);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Alaete"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Alaete"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Alaete"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Alaete"
        },
        "content": "     * Replaces the contents of this list with {@code replacement}."
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Alaete"
        },
        "content": "     */"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Alaete"
        },
        "content": "    public void setData(List\u003cData\u003e replacement) {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Alaete"
        },
        "content": "        requireAllNonNull(replacement);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Alaete"
        },
        "content": "        internalList.setAll(replacement);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Alaete"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Alaete"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Alaete"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Alaete"
        },
        "content": "     * Returns the backing list as an unmodifiable {@code ObservableList}."
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Alaete"
        },
        "content": "     */"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Alaete"
        },
        "content": "    public ObservableList\u003cData\u003e asUnmodifiableObservableList() {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Alaete"
        },
        "content": "        return internalUnmodifiableList;"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Alaete"
        },
        "content": "    }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Alaete"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Alaete"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Alaete"
        },
        "content": "    public Iterator\u003cData\u003e iterator() {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Alaete"
        },
        "content": "        return internalList.iterator();"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "Alaete"
        },
        "content": "    }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "Alaete"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "Alaete"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "Alaete"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "Alaete"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "Alaete"
        },
        "content": "                || (other instanceof DataList // instanceof handles nulls"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "Alaete"
        },
        "content": "                \u0026\u0026 internalList.equals(((DataList) other).internalList));"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "Alaete"
        },
        "content": "    }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "Alaete"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "Alaete"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "Alaete"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "Alaete"
        },
        "content": "        return internalList.hashCode();"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "Alaete"
        },
        "content": "    }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "Alaete"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Alaete": 67
    }
  },
  {
    "path": "src/main/java/seedu/ichifund/model/analytics/Report.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Alaete"
        },
        "content": "package seedu.ichifund.model.analytics;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Alaete"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Alaete"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Alaete"
        },
        "content": " * Represents a generic report, with the ability to be generated."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Alaete"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Alaete"
        },
        "content": "public class Report {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Alaete"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Alaete": 7
    }
  },
  {
    "path": "src/main/java/seedu/ichifund/model/analytics/TrendReport.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Alaete"
        },
        "content": "package seedu.ichifund.model.analytics;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Alaete"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Alaete"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Alaete"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Alaete"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Alaete"
        },
        "content": "import java.util.Collections;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Alaete"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Alaete"
        },
        "content": "import java.util.Objects;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Alaete"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Alaete"
        },
        "content": "import seedu.ichifund.model.date.Year;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Alaete"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Alaete"
        },
        "content": "/**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Alaete"
        },
        "content": " * Represents a report for expenditure, income or balance trends, with the ability to be generated."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Alaete"
        },
        "content": " */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Alaete"
        },
        "content": "public class TrendReport extends Report {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Alaete"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Alaete"
        },
        "content": "    private final Year year;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Alaete"
        },
        "content": "    private List\u003cData\u003e trend;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Alaete"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Alaete"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Alaete"
        },
        "content": "     * Constructs a {@code TrendReport}."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Alaete"
        },
        "content": "     *"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Alaete"
        },
        "content": "     * @param year A year."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Alaete"
        },
        "content": "     */"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Alaete"
        },
        "content": "    public TrendReport(Year year) {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Alaete"
        },
        "content": "        requireNonNull(year);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Alaete"
        },
        "content": "        this.year \u003d year;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Alaete"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Alaete"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Alaete"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Alaete"
        },
        "content": "     * Fills the {@code TrendReport}."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Alaete"
        },
        "content": "     *"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Alaete"
        },
        "content": "     * @param trendList Trends to fill the report."
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Alaete"
        },
        "content": "     */"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Alaete"
        },
        "content": "    public void fillReport(List\u003cData\u003e trendList) {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Alaete"
        },
        "content": "        requireNonNull(trendList);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Alaete"
        },
        "content": "        this.trend \u003d trendList;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Alaete"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Alaete"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Alaete"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Alaete"
        },
        "content": "     * Retrieves the year."
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Alaete"
        },
        "content": "     */"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Alaete"
        },
        "content": "    public Year getYear() {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Alaete"
        },
        "content": "        return year;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Alaete"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Alaete"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Alaete"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Alaete"
        },
        "content": "     * Retrieves the trend list."
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Alaete"
        },
        "content": "     */"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Alaete"
        },
        "content": "    public List\u003cData\u003e getTrendList() {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Alaete"
        },
        "content": "        return trend;"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Alaete"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Alaete"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "Alaete"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "Alaete"
        },
        "content": "     * Retrieves the sorted trend list."
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "Alaete"
        },
        "content": "     */"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "Alaete"
        },
        "content": "    public List\u003cData\u003e getSortedTrendList() {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "Alaete"
        },
        "content": "        List\u003cData\u003e sortedTrendList \u003d new ArrayList\u003c\u003e(trend);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "Alaete"
        },
        "content": "        Collections.sort(sortedTrendList);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "Alaete"
        },
        "content": "        return sortedTrendList;"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "Alaete"
        },
        "content": "    }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "Alaete"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "Alaete"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "Alaete"
        },
        "content": "     * Returns true if both trend reports contain the same year and data."
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "Alaete"
        },
        "content": "     * This defines a stronger notion of equality between two trend reports."
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "Alaete"
        },
        "content": "     */"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "Alaete"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "Alaete"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "Alaete"
        },
        "content": "        if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "Alaete"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "Alaete"
        },
        "content": "        }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "Alaete"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "Alaete"
        },
        "content": "        if (!(other instanceof TrendReport)) {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "Alaete"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "Alaete"
        },
        "content": "        }"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "Alaete"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "Alaete"
        },
        "content": "        TrendReport otherReport \u003d (TrendReport) other;"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "Alaete"
        },
        "content": "        return otherReport.getYear().equals(getYear())"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "Alaete"
        },
        "content": "                \u0026\u0026 otherReport.getTrendList().equals(getTrendList());"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "Alaete"
        },
        "content": "    }"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "Alaete"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "Alaete"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "Alaete"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "Alaete"
        },
        "content": "        return Objects.hash(year, trend);"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "Alaete"
        },
        "content": "    }"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "Alaete"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "Alaete"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "Alaete"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "Alaete"
        },
        "content": "        final StringBuilder builder \u003d new StringBuilder();"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "Alaete"
        },
        "content": "        builder.append(\" Year: \")"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "Alaete"
        },
        "content": "                .append(getYear());"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "Alaete"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "Alaete"
        },
        "content": "        for (Data data : trend) {"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "Alaete"
        },
        "content": "            builder.append(data);"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "Alaete"
        },
        "content": "        }"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "Alaete"
        },
        "content": ""
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "Alaete"
        },
        "content": "        return builder.toString();"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "Alaete"
        },
        "content": "    }"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "Alaete"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Alaete": 99
    }
  },
  {
    "path": "src/main/java/seedu/ichifund/model/analytics/exceptions/FieldNotFoundException.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Alaete"
        },
        "content": "package seedu.ichifund.model.analytics.exceptions;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Alaete"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Alaete"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Alaete"
        },
        "content": " * Signals that the operation is unable to find a field."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Alaete"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Alaete"
        },
        "content": "public class FieldNotFoundException extends RuntimeException {}"
      }
    ],
    "authorContributionMap": {
      "Alaete": 6
    }
  },
  {
    "path": "src/main/java/seedu/ichifund/model/budget/Budget.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "nexolute"
        },
        "content": "package seedu.ichifund.model.budget;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "nexolute"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "nexolute"
        },
        "content": "import static seedu.ichifund.commons.util.CollectionUtil.requireAllNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "nexolute"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "nexolute"
        },
        "content": "import java.util.Objects;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "nexolute"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "import seedu.ichifund.model.Description;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "import seedu.ichifund.model.amount.Amount;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "nexolute"
        },
        "content": "import seedu.ichifund.model.date.Month;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "nexolute"
        },
        "content": "import seedu.ichifund.model.date.Year;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "nexolute"
        },
        "content": "import seedu.ichifund.model.transaction.Category;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "nexolute"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "nexolute"
        },
        "content": "/**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "nexolute"
        },
        "content": " * Represents a Budget in the fund book."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "nexolute"
        },
        "content": " * Guarantees: details are present and not null, field values are validated, immutable."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "nexolute"
        },
        "content": " */"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "nexolute"
        },
        "content": "public class Budget {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "nexolute"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "nexolute"
        },
        "content": "    // Identity fields"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "nexolute"
        },
        "content": "    private final Description description;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "nexolute"
        },
        "content": "    private final Amount amount;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "nexolute"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "nexolute"
        },
        "content": "    // Constraints fields"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "nexolute"
        },
        "content": "    private final Month month;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "nexolute"
        },
        "content": "    private final Year year;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "nexolute"
        },
        "content": "    private final Category category;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "nexolute"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "nexolute"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "nexolute"
        },
        "content": "     * Description and amount must be present and not null."
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "nexolute"
        },
        "content": "     */"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "nexolute"
        },
        "content": "    public Budget(Description description, Amount amount, Month month, Year year, Category category) {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "nexolute"
        },
        "content": "        requireAllNonNull(description, amount);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "nexolute"
        },
        "content": "        this.description \u003d description;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "nexolute"
        },
        "content": "        this.amount \u003d amount;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "nexolute"
        },
        "content": "        this.month \u003d month;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "nexolute"
        },
        "content": "        this.year \u003d year;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "nexolute"
        },
        "content": "        this.category \u003d category;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "nexolute"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "nexolute"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "nexolute"
        },
        "content": "    public Description getDescription() {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "nexolute"
        },
        "content": "        return description;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "nexolute"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "nexolute"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "nexolute"
        },
        "content": "    public Amount getAmount() {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "nexolute"
        },
        "content": "        return amount;"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "nexolute"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "nexolute"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "nexolute"
        },
        "content": "    public Month getMonth() {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "nexolute"
        },
        "content": "        return month;"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "nexolute"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "nexolute"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "nexolute"
        },
        "content": "    public Year getYear() {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "nexolute"
        },
        "content": "        return year;"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "nexolute"
        },
        "content": "    }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "nexolute"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "nexolute"
        },
        "content": "    public Category getCategory() {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "nexolute"
        },
        "content": "        return category;"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "nexolute"
        },
        "content": "    }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "nexolute"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "nexolute"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "nexolute"
        },
        "content": "     * Returns true if both budgets have the same description."
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "nexolute"
        },
        "content": "     * This defines a weaker notion of equality between two budgets."
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "nexolute"
        },
        "content": "     */"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "nexolute"
        },
        "content": "    public boolean isSameBudget(Budget otherBudget) {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "nexolute"
        },
        "content": "        if (otherBudget \u003d\u003d this) {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "nexolute"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "nexolute"
        },
        "content": "        }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "nexolute"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "nexolute"
        },
        "content": "        return otherBudget !\u003d null \u0026\u0026 otherBudget.getDescription().equals(getDescription());"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "nexolute"
        },
        "content": "    }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "nexolute"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "nexolute"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "nexolute"
        },
        "content": "     * Returns a string describing the criterion of the budget."
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "nexolute"
        },
        "content": "     */"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "nexolute"
        },
        "content": "    public String toCriterionString() {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "nexolute"
        },
        "content": "        final StringBuilder builder \u003d new StringBuilder();"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "nexolute"
        },
        "content": "        builder.append(\"Applicable to all transactions\");"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "nexolute"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "nexolute"
        },
        "content": "        if (category !\u003d null) {"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "nexolute"
        },
        "content": "            builder.append(\" under \")"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "nexolute"
        },
        "content": "                    .append(getCategory());"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "nexolute"
        },
        "content": "        }"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "nexolute"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "nexolute"
        },
        "content": "        if (month !\u003d null \u0026\u0026 year !\u003d null) {"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "nexolute"
        },
        "content": "            builder.append(\" in \")"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "nexolute"
        },
        "content": "                    .append(getMonth().wordString())"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "nexolute"
        },
        "content": "                    .append(\" \")"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "nexolute"
        },
        "content": "                    .append(getYear());"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "nexolute"
        },
        "content": "        }"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "nexolute"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "nexolute"
        },
        "content": "        builder.append(\".\");"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "nexolute"
        },
        "content": "        return builder.toString();"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "nexolute"
        },
        "content": "    }"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "nexolute"
        },
        "content": ""
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "nexolute"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "nexolute"
        },
        "content": "     * Returns true if both budgets have the same identity and data fields."
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "nexolute"
        },
        "content": "     * This defines a stronger notion of equality between two budgets."
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "nexolute"
        },
        "content": "     */"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "nexolute"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "nexolute"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "nexolute"
        },
        "content": "        if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "nexolute"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "nexolute"
        },
        "content": "        }"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "nexolute"
        },
        "content": ""
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "nexolute"
        },
        "content": "        if (!(other instanceof Budget)) {"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "nexolute"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "nexolute"
        },
        "content": "        }"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "nexolute"
        },
        "content": ""
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "nexolute"
        },
        "content": "        Budget otherBudget \u003d (Budget) other;"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "nexolute"
        },
        "content": "        return otherBudget.getDescription().equals(getDescription())"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "nexolute"
        },
        "content": "                \u0026\u0026 otherBudget.getAmount().equals(getAmount())"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "nexolute"
        },
        "content": "                \u0026\u0026 ((otherBudget.getMonth() \u003d\u003d null \u0026\u0026 getMonth() \u003d\u003d null)"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "nexolute"
        },
        "content": "                || otherBudget.getMonth().equals(getMonth()))"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "nexolute"
        },
        "content": "                \u0026\u0026 ((otherBudget.getYear() \u003d\u003d null \u0026\u0026 getMonth() \u003d\u003d null)"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "nexolute"
        },
        "content": "                || otherBudget.getYear().equals(getYear()))"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "nexolute"
        },
        "content": "                \u0026\u0026 ((otherBudget.getCategory() \u003d\u003d null \u0026\u0026 getCategory() \u003d\u003d null)"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "nexolute"
        },
        "content": "                || otherBudget.getCategory().equals(getCategory()));"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "nexolute"
        },
        "content": "    }"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "nexolute"
        },
        "content": ""
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "nexolute"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "nexolute"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "nexolute"
        },
        "content": "        // use this method for custom fields hashing instead of implementing your own"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "nexolute"
        },
        "content": "        return Objects.hash(description, amount, month, year, category);"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "nexolute"
        },
        "content": "    }"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "nexolute"
        },
        "content": ""
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "nexolute"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "nexolute"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "nexolute"
        },
        "content": "        final StringBuilder builder \u003d new StringBuilder();"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "nexolute"
        },
        "content": "        builder.append(getDescription())"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "nexolute"
        },
        "content": "                .append(\" Amount: \")"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "nexolute"
        },
        "content": "                .append(getAmount());"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "nexolute"
        },
        "content": ""
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "nexolute"
        },
        "content": "        if (month !\u003d null \u0026\u0026 year !\u003d null) {"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "nexolute"
        },
        "content": "            builder.append(\" Month: \")"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "nexolute"
        },
        "content": "                    .append(getMonth())"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "nexolute"
        },
        "content": "                    .append(\" Year: \")"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "nexolute"
        },
        "content": "                    .append(getYear());"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "nexolute"
        },
        "content": "        }"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "nexolute"
        },
        "content": ""
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "nexolute"
        },
        "content": "        if (category !\u003d null) {"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "nexolute"
        },
        "content": "            builder.append(\" Categories: \")"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "nexolute"
        },
        "content": "                    .append(getCategory());"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "nexolute"
        },
        "content": "        }"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "nexolute"
        },
        "content": ""
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "nexolute"
        },
        "content": "        return builder.toString();"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "nexolute"
        },
        "content": "    }"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "nexolute"
        },
        "content": ""
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "nexolute"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "nexolute": 146,
      "weiyang13": 2
    }
  },
  {
    "path": "src/main/java/seedu/ichifund/model/budget/BudgetDescriptionPredicate.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "nexolute"
        },
        "content": "package seedu.ichifund.model.budget;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "nexolute"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "nexolute"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "nexolute"
        },
        "content": "import java.util.function.Predicate;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "nexolute"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "nexolute"
        },
        "content": "import seedu.ichifund.commons.util.StringUtil;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "nexolute"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "nexolute"
        },
        "content": "/**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "nexolute"
        },
        "content": " * Tests that a {@code Budget}\u0027s {@code Description} matches any of the keywords given."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "nexolute"
        },
        "content": " */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "nexolute"
        },
        "content": "public class BudgetDescriptionPredicate implements Predicate\u003cBudget\u003e {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "nexolute"
        },
        "content": "    private final List\u003cString\u003e keywords;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "nexolute"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "nexolute"
        },
        "content": "    public BudgetDescriptionPredicate(List\u003cString\u003e keywords) {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "nexolute"
        },
        "content": "        this.keywords \u003d keywords;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "nexolute"
        },
        "content": "    }"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "nexolute"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "nexolute"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "nexolute"
        },
        "content": "    public boolean test(Budget budget) {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "nexolute"
        },
        "content": "        if (keywords.isEmpty()) {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "nexolute"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "nexolute"
        },
        "content": "        }"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "nexolute"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "nexolute"
        },
        "content": "        return keywords.stream()"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "nexolute"
        },
        "content": "                .anyMatch(keyword -\u003e StringUtil.containsWordIgnoreCase(budget.getDescription().description, keyword));"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "nexolute"
        },
        "content": "    }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "nexolute"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "nexolute"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "nexolute"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "nexolute"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "nexolute"
        },
        "content": "                || (other instanceof BudgetDescriptionPredicate // instanceof handles nulls"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "nexolute"
        },
        "content": "                \u0026\u0026 keywords.equals(((BudgetDescriptionPredicate) other).keywords)); // state check"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "nexolute"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "nexolute"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "nexolute"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "nexolute": 35
    }
  },
  {
    "path": "src/main/java/seedu/ichifund/model/budget/ComputedBudget.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "nexolute"
        },
        "content": "package seedu.ichifund.model.budget;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "nexolute"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "nexolute"
        },
        "content": "import static seedu.ichifund.commons.util.CollectionUtil.requireAllNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "nexolute"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "nexolute"
        },
        "content": "import java.util.Objects;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "nexolute"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "nexolute"
        },
        "content": "import seedu.ichifund.model.Description;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "nexolute"
        },
        "content": "import seedu.ichifund.model.amount.Amount;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "nexolute"
        },
        "content": "import seedu.ichifund.model.date.Month;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "nexolute"
        },
        "content": "import seedu.ichifund.model.date.Year;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "nexolute"
        },
        "content": "import seedu.ichifund.model.transaction.Category;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "nexolute"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "nexolute"
        },
        "content": "/**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "nexolute"
        },
        "content": " * Represents a Budget that has been computed in the fund book."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "nexolute"
        },
        "content": " * Guarantees: details are present and not null, field values are validated, immutable."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "nexolute"
        },
        "content": " */"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "nexolute"
        },
        "content": "public class ComputedBudget extends Budget {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "nexolute"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "nexolute"
        },
        "content": "    // Identity fields"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "nexolute"
        },
        "content": "    private final Amount spending;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "nexolute"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "nexolute"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "nexolute"
        },
        "content": "     * Description, amount, and spending must be present and not null."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "nexolute"
        },
        "content": "     */"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "nexolute"
        },
        "content": "    public ComputedBudget(Description description, Amount amount, Month month,"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "nexolute"
        },
        "content": "                          Year year, Category category, Amount spending) {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "nexolute"
        },
        "content": "        super(description, amount, month, year, category);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "nexolute"
        },
        "content": "        requireAllNonNull(spending);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "nexolute"
        },
        "content": "        this.spending \u003d spending;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "nexolute"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "nexolute"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "nexolute"
        },
        "content": "    public ComputedBudget(Budget budget, Amount spending) {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "nexolute"
        },
        "content": "        super(budget.getDescription(), budget.getAmount(), budget.getMonth(),"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "nexolute"
        },
        "content": "                budget.getYear(), budget.getCategory());"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "nexolute"
        },
        "content": "        requireAllNonNull(spending);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "nexolute"
        },
        "content": "        this.spending \u003d spending;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "nexolute"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "nexolute"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "nexolute"
        },
        "content": "    public Amount getSpending() {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "nexolute"
        },
        "content": "        return spending;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "nexolute"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "nexolute"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "nexolute"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "nexolute"
        },
        "content": "     * Returns true if both budgets have the same description and spending."
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "nexolute"
        },
        "content": "     * This defines a weaker notion of equality between two computed budgets."
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "nexolute"
        },
        "content": "     */"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "nexolute"
        },
        "content": "    public boolean isSameComputedBudget(ComputedBudget otherBudget) {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "nexolute"
        },
        "content": "        if (otherBudget \u003d\u003d this) {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "nexolute"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "nexolute"
        },
        "content": "        }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "nexolute"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "nexolute"
        },
        "content": "        return otherBudget !\u003d null \u0026\u0026 otherBudget.isSameBudget(otherBudget)"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "nexolute"
        },
        "content": "                \u0026\u0026 otherBudget.getSpending().equals(getSpending());"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "nexolute"
        },
        "content": "    }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "nexolute"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "nexolute"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "nexolute"
        },
        "content": "     * Returns true if both budgets have the same identity and data fields."
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "nexolute"
        },
        "content": "     * This defines a stronger notion of equality between two budgets."
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "nexolute"
        },
        "content": "     */"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "nexolute"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "nexolute"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "nexolute"
        },
        "content": "        if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "nexolute"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "nexolute"
        },
        "content": "        }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "nexolute"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "nexolute"
        },
        "content": "        if (!(other instanceof ComputedBudget)) {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "nexolute"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "nexolute"
        },
        "content": "        }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "nexolute"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "nexolute"
        },
        "content": "        ComputedBudget otherBudget \u003d (ComputedBudget) other;"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "nexolute"
        },
        "content": "        return super.equals(otherBudget) \u0026\u0026 otherBudget.getSpending().equals(getSpending());"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "nexolute"
        },
        "content": "    }"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "nexolute"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "nexolute"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "nexolute"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "nexolute"
        },
        "content": "        // use this method for custom fields hashing instead of implementing your own"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "nexolute"
        },
        "content": "        return Objects.hash(getDescription(), getAmount(), getMonth(), getYear(), getCategory(), getSpending());"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "nexolute"
        },
        "content": "    }"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "nexolute"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "nexolute"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "nexolute"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "nexolute"
        },
        "content": "        return super.toString() + \" Spending: \" + getSpending();"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "nexolute"
        },
        "content": "    }"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "nexolute"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "nexolute"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "nexolute": 85
    }
  },
  {
    "path": "src/main/java/seedu/ichifund/model/budget/UniqueBudgetList.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "nexolute"
        },
        "content": "package seedu.ichifund.model.budget;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "nexolute"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "nexolute"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "nexolute"
        },
        "content": "import static seedu.ichifund.commons.util.CollectionUtil.requireAllNonNull;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "nexolute"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "nexolute"
        },
        "content": "import java.util.Iterator;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "nexolute"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "nexolute"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "nexolute"
        },
        "content": "import javafx.collections.FXCollections;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "nexolute"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "nexolute"
        },
        "content": "import seedu.ichifund.model.budget.exceptions.BudgetNotFoundException;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "nexolute"
        },
        "content": "import seedu.ichifund.model.budget.exceptions.DuplicateBudgetException;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "nexolute"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "nexolute"
        },
        "content": "/**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "nexolute"
        },
        "content": " * A list of budgets that enforces uniqueness between its elements and does not allow nulls."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "nexolute"
        },
        "content": " * A budget is considered unique by comparing using {@code Budget#isSameBudget(Budget)}. As such, adding and updating of"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "nexolute"
        },
        "content": " * budgets uses Budget#isSameBudget(Budget) for equality so as to ensure that the budget being added or updated is"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "nexolute"
        },
        "content": " * unique in terms of identity in the UniqueBudgetList. However, the removal of a budget uses Budget#equals(Object) so"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "nexolute"
        },
        "content": " * as to ensure that the budget with exactly the same fields will be removed."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "nexolute"
        },
        "content": " *"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "nexolute"
        },
        "content": " * Supports a minimal set of list operations."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "nexolute"
        },
        "content": " *"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "nexolute"
        },
        "content": " * @see Budget#isSameBudget(Budget)"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "nexolute"
        },
        "content": " */"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "nexolute"
        },
        "content": "public class UniqueBudgetList implements Iterable\u003cBudget\u003e {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "nexolute"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "nexolute"
        },
        "content": "    private final ObservableList\u003cBudget\u003e internalList \u003d FXCollections.observableArrayList();"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "nexolute"
        },
        "content": "    private final ObservableList\u003cBudget\u003e internalUnmodifiableList \u003d"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "nexolute"
        },
        "content": "            FXCollections.unmodifiableObservableList(internalList);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "nexolute"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "nexolute"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "nexolute"
        },
        "content": "     * Returns true if the list contains an equivalent budget as the given argument."
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "nexolute"
        },
        "content": "     */"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "nexolute"
        },
        "content": "    public boolean contains(Budget toCheck) {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "nexolute"
        },
        "content": "        requireNonNull(toCheck);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "nexolute"
        },
        "content": "        return internalList.stream().anyMatch(toCheck::isSameBudget);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "nexolute"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "nexolute"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "nexolute"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "nexolute"
        },
        "content": "     * Adds a budget to the list."
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "nexolute"
        },
        "content": "     * The budget must not already exist in the list."
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "nexolute"
        },
        "content": "     */"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "nexolute"
        },
        "content": "    public void add(Budget toAdd) {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "nexolute"
        },
        "content": "        requireNonNull(toAdd);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "nexolute"
        },
        "content": "        if (contains(toAdd)) {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "nexolute"
        },
        "content": "            throw new DuplicateBudgetException();"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "nexolute"
        },
        "content": "        }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "nexolute"
        },
        "content": "        internalList.add(toAdd);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "nexolute"
        },
        "content": "    }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "nexolute"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "nexolute"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "nexolute"
        },
        "content": "     * Replaces the budget {@code target} in the list with {@code editedBudget}."
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "nexolute"
        },
        "content": "     * {@code target} must exist in the list."
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "nexolute"
        },
        "content": "     * The budget identity of {@code editedBudget} must not be the same as another existing budget in the list."
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "nexolute"
        },
        "content": "     */"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "nexolute"
        },
        "content": "    public void setBudget(Budget target, Budget editedBudget) {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "nexolute"
        },
        "content": "        requireAllNonNull(target, editedBudget);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "nexolute"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "nexolute"
        },
        "content": "        int index \u003d internalList.indexOf(target);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "nexolute"
        },
        "content": "        if (index \u003d\u003d -1) {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "nexolute"
        },
        "content": "            throw new BudgetNotFoundException();"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "nexolute"
        },
        "content": "        }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "nexolute"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "nexolute"
        },
        "content": "        if (!target.isSameBudget(editedBudget) \u0026\u0026 contains(editedBudget)) {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "nexolute"
        },
        "content": "            throw new DuplicateBudgetException();"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "nexolute"
        },
        "content": "        }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "nexolute"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "nexolute"
        },
        "content": "        internalList.set(index, editedBudget);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "nexolute"
        },
        "content": "    }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "nexolute"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "nexolute"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "nexolute"
        },
        "content": "     * Removes the equivalent budget from the list."
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "nexolute"
        },
        "content": "     * The budget must exist in the list."
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "nexolute"
        },
        "content": "     */"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "nexolute"
        },
        "content": "    public void remove(Budget toRemove) {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "nexolute"
        },
        "content": "        requireNonNull(toRemove);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "nexolute"
        },
        "content": "        if (!internalList.remove(toRemove)) {"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "nexolute"
        },
        "content": "            throw new BudgetNotFoundException();"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "nexolute"
        },
        "content": "        }"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "nexolute"
        },
        "content": "    }"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "nexolute"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "nexolute"
        },
        "content": "    public void setBudgets(UniqueBudgetList replacement) {"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "nexolute"
        },
        "content": "        requireNonNull(replacement);"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "nexolute"
        },
        "content": "        internalList.setAll(replacement.internalList);"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "nexolute"
        },
        "content": "    }"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "nexolute"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "nexolute"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "nexolute"
        },
        "content": "     * Replaces the contents of this list with {@code budgets}."
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "nexolute"
        },
        "content": "     * {@code budgets} must not contain duplicate budgets."
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "nexolute"
        },
        "content": "     */"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "nexolute"
        },
        "content": "    public void setBudgets(List\u003cBudget\u003e budgets) {"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "nexolute"
        },
        "content": "        requireAllNonNull(budgets);"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "nexolute"
        },
        "content": "        if (!budgetsAreUnique(budgets)) {"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "nexolute"
        },
        "content": "            throw new DuplicateBudgetException();"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "nexolute"
        },
        "content": "        }"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "nexolute"
        },
        "content": ""
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "nexolute"
        },
        "content": "        internalList.setAll(budgets);"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "nexolute"
        },
        "content": "    }"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "nexolute"
        },
        "content": ""
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "nexolute"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "nexolute"
        },
        "content": "     * Returns the backing list as an unmodifiable {@code ObservableList}."
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "nexolute"
        },
        "content": "     */"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "nexolute"
        },
        "content": "    public ObservableList\u003cBudget\u003e asUnmodifiableObservableList() {"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "nexolute"
        },
        "content": "        return internalUnmodifiableList;"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "nexolute"
        },
        "content": "    }"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "nexolute"
        },
        "content": ""
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "nexolute"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "nexolute"
        },
        "content": "    public Iterator\u003cBudget\u003e iterator() {"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "nexolute"
        },
        "content": "        return internalList.iterator();"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "nexolute"
        },
        "content": "    }"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "nexolute"
        },
        "content": ""
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "nexolute"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "nexolute"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "nexolute"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "nexolute"
        },
        "content": "                || (other instanceof UniqueBudgetList // instanceof handles nulls"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "nexolute"
        },
        "content": "                        \u0026\u0026 internalList.equals(((UniqueBudgetList) other).internalList));"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "nexolute"
        },
        "content": "    }"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "nexolute"
        },
        "content": ""
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "nexolute"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "nexolute"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "nexolute"
        },
        "content": "        return internalList.hashCode();"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "nexolute"
        },
        "content": "    }"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "nexolute"
        },
        "content": ""
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "nexolute"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "nexolute"
        },
        "content": "     * Returns true if {@code budgets} contains only unique budgets."
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "nexolute"
        },
        "content": "     */"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "nexolute"
        },
        "content": "    private boolean budgetsAreUnique(List\u003cBudget\u003e budgets) {"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "nexolute"
        },
        "content": "        for (int i \u003d 0; i \u003c budgets.size() - 1; i++) {"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "nexolute"
        },
        "content": "            for (int j \u003d i + 1; j \u003c budgets.size(); j++) {"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "nexolute"
        },
        "content": "                if (budgets.get(i).isSameBudget(budgets.get(j))) {"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "nexolute"
        },
        "content": "                    return false;"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "nexolute"
        },
        "content": "                }"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "nexolute"
        },
        "content": "            }"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "nexolute"
        },
        "content": "        }"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "nexolute"
        },
        "content": "        return true;"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "nexolute"
        },
        "content": "    }"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "nexolute"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "nexolute": 137
    }
  },
  {
    "path": "src/main/java/seedu/ichifund/model/budget/exceptions/BudgetNotFoundException.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "nexolute"
        },
        "content": "package seedu.ichifund.model.budget.exceptions;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "nexolute"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "nexolute"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "nexolute"
        },
        "content": " * Signals that the operation is unable to find the specified budget."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "nexolute"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "nexolute"
        },
        "content": "public class BudgetNotFoundException extends RuntimeException {}"
      }
    ],
    "authorContributionMap": {
      "nexolute": 6
    }
  },
  {
    "path": "src/main/java/seedu/ichifund/model/budget/exceptions/DuplicateBudgetException.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "nexolute"
        },
        "content": "package seedu.ichifund.model.budget.exceptions;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "nexolute"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "nexolute"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "nexolute"
        },
        "content": " * Signals that the operation will result in duplicate Budgets (Budgets are considered duplicates if they have the same"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "nexolute"
        },
        "content": " * identity)."
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "nexolute"
        },
        "content": " */"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "nexolute"
        },
        "content": "public class DuplicateBudgetException extends RuntimeException {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "nexolute"
        },
        "content": "    public DuplicateBudgetException() {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "nexolute"
        },
        "content": "        super(\"Operation would result in duplicate budgets\");"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "nexolute"
        },
        "content": "    }"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "nexolute"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "nexolute": 11
    }
  },
  {
    "path": "src/main/java/seedu/ichifund/model/context/Context.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "package seedu.ichifund.model.context;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "weiyang13"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "import java.util.function.Predicate;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "weiyang13"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "/**"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "weiyang13"
        },
        "content": " * Context that determines how a class should be filtered."
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "weiyang13"
        },
        "content": " *"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "weiyang13"
        },
        "content": " * @param \u003cT\u003e Class of items to be filtered."
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "weiyang13"
        },
        "content": " */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "public interface Context\u003cT\u003e {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "    /** Returns a predicate corresponding to the context. */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "    Predicate\u003cT\u003e getPredicate();"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "weiyang13"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "    /** Returns a suitably modified context that shows the given object."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "     *"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "     * @param object Object to be accommodated."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "     */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "    Context\u003cT\u003e getAccommodatingContext(T object);"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "weiyang13": 19
    }
  },
  {
    "path": "src/main/java/seedu/ichifund/model/context/TransactionContext.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "package seedu.ichifund.model.context;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "weiyang13"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "import static seedu.ichifund.commons.util.CollectionUtil.requireAllNonNull;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "weiyang13"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "import java.util.Objects;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "import java.util.function.Predicate;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "weiyang13"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "import seedu.ichifund.model.date.Month;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "import seedu.ichifund.model.date.Year;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "import seedu.ichifund.model.transaction.Category;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "import seedu.ichifund.model.transaction.Transaction;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "import seedu.ichifund.model.transaction.TransactionCategoryPredicate;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "import seedu.ichifund.model.transaction.TransactionDatePredicate;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "import seedu.ichifund.model.transaction.TransactionType;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "import seedu.ichifund.model.transaction.TransactionTypePredicate;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "weiyang13"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "/**"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "weiyang13"
        },
        "content": " * Unmodifiable context for filtering a list of transactions."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "weiyang13"
        },
        "content": " */"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "public class TransactionContext implements Context\u003cTransaction\u003e {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "weiyang13"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "    private final Month month;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "    private final Year year;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "    private final Optional\u003cCategory\u003e category;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "    private final Optional\u003cTransactionType\u003e transactionType;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "weiyang13"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "     * Public constructor for initialization of context."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "     * @param transaction"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "     */"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "    public TransactionContext(Optional\u003cTransaction\u003e transaction) {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "        requireNonNull(transaction);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "        if (transaction.isEmpty()) {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "            this.month \u003d Month.getCurrent();"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "            this.year \u003d Year.getCurrent();"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "            this.month \u003d transaction.get().getDate().getMonth();"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "            this.year \u003d transaction.get().getDate().getYear();"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "        }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "weiyang13"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "        this.category \u003d Optional.empty();"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "        this.transactionType \u003d Optional.empty();"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "weiyang13"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "    public TransactionContext(Month month, Year year, Optional\u003cCategory\u003e category,"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "                               Optional\u003cTransactionType\u003e transactionType) {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "        requireAllNonNull(month, year, category, transactionType);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "        this.month \u003d month;"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "        this.year \u003d year;"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "        this.category \u003d category;"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "        this.transactionType \u003d transactionType;"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "    }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "weiyang13"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "    public boolean hasCategory() {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "        return category.isPresent();"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "    }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "weiyang13"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "    public boolean hasTransactionType() {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "        return transactionType.isPresent();"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "    }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "weiyang13"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "    public Category getCategory() {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "        return category.orElse(Category.CATEGORY_DEFAULT);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "    }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "weiyang13"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "    public TransactionType getTransactionType() {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "        return transactionType.orElse(TransactionType.TRANSACTION_TYPE_DEFAULT);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "    }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "weiyang13"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "    public Month getMonth() {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "        return month;"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "    }"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "weiyang13"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "    public Year getYear() {"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "        return year;"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "    }"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "weiyang13"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "     * Returns a new {@code TransitionContext} updated with the input month."
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "     * Returns the same object if there is no month."
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "     */"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "    public TransactionContext withMonth(Optional\u003cMonth\u003e month) {"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "        if (month.isEmpty()) {"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "            return this;"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "            return new TransactionContext(month.get(), this.year, this.category, this.transactionType);"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "        }"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "    }"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "weiyang13"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "     * Returns a new {@code TransitionContext} updated with the input year."
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "     * Returns the same object if there is no year."
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "     */"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "    public TransactionContext withYear(Optional\u003cYear\u003e year) {"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "        if (year.isEmpty()) {"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "            return this;"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "            return new TransactionContext(this.month, year.get(), this.category, this.transactionType);"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "        }"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "    }"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "weiyang13"
        },
        "content": ""
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "     * Returns a new {@code TransitionContext} updated with the input category."
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "     * Returns the same object if there is no category."
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "     */"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "    public TransactionContext withCategory(Optional\u003cCategory\u003e category) {"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "        if (category.isEmpty()) {"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "            return this;"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "        } else if (category.get() \u003d\u003d Category.CATEGORY_ALL) {"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "            return new TransactionContext(this.month, this.year, Optional.empty(), this.transactionType);"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "            return new TransactionContext(this.month, this.year, category, this.transactionType);"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "        }"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "    }"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "weiyang13"
        },
        "content": ""
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "     * Returns a new {@code TransitionContext} updated with the input transaction type."
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "     * Returns the same object if there is no transaction type."
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "     */"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "    public TransactionContext withType(Optional\u003cTransactionType\u003e transactionType) {"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "        if (transactionType.isEmpty()) {"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "            return this;"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "        } else if (transactionType.get() \u003d\u003d TransactionType.TRANSACTION_TYPE_ALL) {"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "            return new TransactionContext(this.month, this.year, this.category, Optional.empty());"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "            return new TransactionContext(this.month, this.year, this.category, transactionType);"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "        }"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "    }"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "weiyang13"
        },
        "content": ""
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "    private boolean categoryMatches(Transaction transaction) {"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "        return category.isEmpty()"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "                || category.get().equals(transaction.getCategory());"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "    }"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "weiyang13"
        },
        "content": ""
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "    private boolean transactionTypeMatches(Transaction transaction) {"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "        return transactionType.isEmpty()"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "                || transactionType.get().equals(transaction.getTransactionType());"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "    }"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "weiyang13"
        },
        "content": ""
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "    public Predicate\u003cTransaction\u003e getPredicate() {"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "        Predicate\u003cTransaction\u003e predicate \u003d new TransactionDatePredicate(month, year);"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "        if (category.isPresent() \u0026\u0026 category.get() !\u003d Category.CATEGORY_ALL) {"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "            predicate \u003d predicate"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "                    .and(new TransactionCategoryPredicate(category.get()));"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "        }"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "weiyang13"
        },
        "content": ""
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "        if (transactionType.isPresent() \u0026\u0026 transactionType.get() !\u003d TransactionType.TRANSACTION_TYPE_ALL) {"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "            predicate \u003d predicate"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "                    .and(new TransactionTypePredicate(transactionType.get()));"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "        }"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "weiyang13"
        },
        "content": ""
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "        return predicate;"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "    }"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "weiyang13"
        },
        "content": ""
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "    public TransactionContext getAccommodatingContext(Transaction transaction) {"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "        Optional\u003cCategory\u003e category \u003d this.category;"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "        Optional\u003cTransactionType\u003e transactionType \u003d this.transactionType;"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "weiyang13"
        },
        "content": ""
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "        if (!categoryMatches(transaction)) {"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "            category \u003d Optional.empty();"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "        }"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "weiyang13"
        },
        "content": ""
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "        if (!transactionTypeMatches(transaction)) {"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "            transactionType \u003d Optional.empty();"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "        }"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "weiyang13"
        },
        "content": ""
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "        return new TransactionContext("
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "                transaction.getDate().getMonth(),"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "                transaction.getDate().getYear(),"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "                category,"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "                transactionType);"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "    }"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "weiyang13"
        },
        "content": ""
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "        String string \u003d getMonth().wordString().toUpperCase() + \" \" + getYear().toString();"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "        if (transactionType.isPresent()) {"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "            string +\u003d \" \" + transactionType.get().toExtendedString().toUpperCase();"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "        }"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "weiyang13"
        },
        "content": ""
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "        if (category.isPresent()) {"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "            string +\u003d \" - \" + category.get().toString().toUpperCase();"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "        }"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "weiyang13"
        },
        "content": ""
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "        return string;"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "    }"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "weiyang13"
        },
        "content": ""
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "        if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "        }"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "weiyang13"
        },
        "content": ""
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "        if (!(other instanceof TransactionContext)) {"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "        }"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "weiyang13"
        },
        "content": ""
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "        TransactionContext otherContext \u003d (TransactionContext) other;"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "weiyang13"
        },
        "content": ""
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "        return otherContext.month.equals(month)"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "                \u0026\u0026 otherContext.year.equals(year)"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "                \u0026\u0026 otherContext.category.equals(category)"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "                \u0026\u0026 otherContext.transactionType.equals(transactionType);"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "    }"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "weiyang13"
        },
        "content": ""
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "        return Objects.hash(month, year, category);"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "    }"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "weiyang13": 214
    }
  },
  {
    "path": "src/main/java/seedu/ichifund/model/date/Date.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "package seedu.ichifund.model.date;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "weiyang13"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "import static seedu.ichifund.commons.util.CollectionUtil.requireAllNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "weiyang13"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "import java.util.Objects;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "weiyang13"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "/**"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "weiyang13"
        },
        "content": " * Represents a Date in IchiFund."
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "weiyang13"
        },
        "content": " * Guarantees: details are present and not null, field values are validated, immutable."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "weiyang13"
        },
        "content": " */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "public class Date implements Comparable\u003cDate\u003e {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "    public static final String MESSAGE_CONSTRAINTS \u003d"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "            \"Day should match with month and year.\";"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "weiyang13"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "    private Day day;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "    private Month month;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "    private Year year;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "weiyang13"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "     * Constructs a {@code Date}."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "     *"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "     * @param day A valid day."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "     * @param month A valid month."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "     * @param year A valid year."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "     */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "    public Date(Day day, Month month, Year year) {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "        requireAllNonNull(day, month, year);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "        this.day \u003d day;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "        this.month \u003d month;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "        this.year \u003d year;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "weiyang13"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "    public static Date getCurrent() {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "        return new Date(Day.getCurrent(), Month.getCurrent(), Year.getCurrent());"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "    }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "weiyang13"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "    public Month getMonth() {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "        return month;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "weiyang13"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "    public Year getYear() {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "        return year;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "weiyang13"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "    public Day getDay() {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "        return day;"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "weiyang13"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "     * Returns true if the {@code Date} constructed from a {@code Day}, {@code Month} and {@code Year} is a valid date."
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "     */"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "    public static boolean isValidDate(Day day, Month month, Year year) {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "        int dayNumber \u003d day.getDayNumber();"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "        if (month.has30Days()) {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "            return dayNumber \u003c\u003d 30;"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "        } else if (month.has31Days()) {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "            return dayNumber \u003c\u003d 31;"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "        } else if (year.isLeapYear()) {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "            return dayNumber \u003c\u003d 29;"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "            return dayNumber \u003c\u003d 28;"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "        }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "    }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "weiyang13"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "     * Returns true if a given {@code Date} is a valid date."
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "     */"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "    public static boolean isValidDate(Date date) {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "        return isValidDate(date.getDay(), date.getMonth(), date.getYear());"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "    }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "weiyang13"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "    public boolean isIn(Month month) {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "        return getMonth().equals(month);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "    }"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "weiyang13"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "    public boolean isIn(Year year) {"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "        return getYear().equals(year);"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "    }"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "weiyang13"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "    public String toFullString() {"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "        return day.toString() + \" \" + month.wordString() + \" \" + year.toString();"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "    }"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "weiyang13"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "    public int compareTo(Date other) {"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "        if (getYear().equals(other.getYear()) \u0026\u0026 getMonth().equals(other.getMonth())) {"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "            return getDay().compareTo(other.getDay());"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "        } else if (getYear().equals(other.getYear())) {"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "            return getMonth().compareTo(other.getMonth());"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "            return getYear().compareTo(other.getYear());"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "        }"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "    }"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "weiyang13"
        },
        "content": ""
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "        if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "        }"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "weiyang13"
        },
        "content": ""
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "        if (!(other instanceof Date)) {"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "        }"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "weiyang13"
        },
        "content": ""
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "        Date otherDate \u003d (Date) other;"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "weiyang13"
        },
        "content": ""
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "        return otherDate.getDay().equals(getDay())"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "                \u0026\u0026 otherDate.getMonth().equals(getMonth())"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "                \u0026\u0026 otherDate.getYear().equals(getYear());"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "    }"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "weiyang13"
        },
        "content": ""
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "        return day + \"/\" + month + \"/\" + year;"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "    }"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "weiyang13"
        },
        "content": ""
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "        return Objects.hash(day, month, year);"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "    }"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "weiyang13": 121
    }
  },
  {
    "path": "src/main/java/seedu/ichifund/model/date/Day.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "package seedu.ichifund.model.date;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "weiyang13"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "import static seedu.ichifund.commons.util.AppUtil.checkArgument;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "weiyang13"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "import java.time.LocalDate;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "weiyang13"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "/**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "weiyang13"
        },
        "content": " * Represents a Day in a Date in IchiFund."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "weiyang13"
        },
        "content": " * Guarantees: details are present and not null, field values are validated, immutable."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "weiyang13"
        },
        "content": " */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "public class Day implements Comparable\u003cDay\u003e {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "    public static final String MESSAGE_CONSTRAINTS \u003d"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "            \"Day should only contain numbers, from 1 to 31\";"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "    public static final String VALIDATION_REGEX \u003d \"[1-9]|[1-2]\\\\d|3[0-1]\";"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "weiyang13"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "    public final int dayNumber;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "weiyang13"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "     * Constructs a {@code Day}."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "     *"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "     * @param day A valid day number."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "     */"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "    public Day(String day) {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "        requireNonNull(day);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "        checkArgument(isValidDay(day), MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "        dayNumber \u003d Integer.parseInt(day);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "weiyang13"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "    public int getDayNumber() {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "        return dayNumber;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "weiyang13"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "     * Returns true if a given string is a valid day."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "     */"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "    public static boolean isValidDay(String test) {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "        return test.matches(VALIDATION_REGEX);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "weiyang13"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "    public static Day getCurrent() {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "        return new Day(Integer.toString(LocalDate.now().getDayOfMonth()));"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "weiyang13"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "        return \"\" + dayNumber;"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "weiyang13"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "                || (other instanceof Day // instanceof handles nulls"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "                \u0026\u0026 dayNumber \u003d\u003d (((Day) other).dayNumber)); // state check"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "    }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "weiyang13"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "        return toString().hashCode();"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "    }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "weiyang13"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "    public int compareTo(Day other) {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "        // Later days are given priority"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "        return other.dayNumber - dayNumber;"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "    }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "}"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "weiyang13"
        },
        "content": ""
      }
    ],
    "authorContributionMap": {
      "weiyang13": 68
    }
  },
  {
    "path": "src/main/java/seedu/ichifund/model/date/Month.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "package seedu.ichifund.model.date;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "weiyang13"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "import static seedu.ichifund.commons.util.AppUtil.checkArgument;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "weiyang13"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "import java.time.LocalDate;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "weiyang13"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "/**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "weiyang13"
        },
        "content": " * Represents a Month in a Date in IchiFund."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "weiyang13"
        },
        "content": " * Guarantees: details are present and not null, field values are validated, immutable."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "weiyang13"
        },
        "content": " */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "public class Month implements Comparable\u003cMonth\u003e {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "    public static final String MESSAGE_CONSTRAINTS \u003d"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "            \"Month should only contain numbers, from 1 to 12\";"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "    public static final String VALIDATION_REGEX \u003d \"[1-9]|1[0-2]\";"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "    public static final int[] MONTHS_30_DAYS \u003d {4, 6, 9, 11};"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "    public static final int[] MONTHS_31_DAYS \u003d {1, 3, 5, 7, 8, 10, 12};"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "    public final int monthNumber;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "weiyang13"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "     * Constructs a {@code Month}."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "     *"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "     * @param month A valid month number."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "     */"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "    public Month(String month) {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "        requireNonNull(month);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "        checkArgument(isValidMonth(month), MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "        monthNumber \u003d Integer.parseInt(month);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "weiyang13"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "     * Returns true if a given string is a valid month."
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "     */"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "    public static boolean isValidMonth(String test) {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "        return test.matches(VALIDATION_REGEX);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "weiyang13"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "    public static Month getCurrent() {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "        return new Month(Integer.toString(LocalDate.now().getMonth().getValue()));"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "weiyang13"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "     * Returns true if the month has 30 days."
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "     */"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "    public boolean has30Days() {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "        for (int i : MONTHS_30_DAYS) {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "            if (i \u003d\u003d monthNumber) {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "                return true;"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "            }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "        }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "weiyang13"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "        return false;"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "    }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "weiyang13"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "     * Returns true if the month has 31 days."
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "     */"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "    public boolean has31Days() {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "        for (int i : MONTHS_31_DAYS) {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "            if (i \u003d\u003d monthNumber) {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "                return true;"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "            }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "        }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "weiyang13"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "        return false;"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "    }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "weiyang13"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "     * Returns the word representation of the {@code Month}."
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "     */"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "    public String wordString() {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "        switch(monthNumber) {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "        case 1:"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "            return \"January\";"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "        case 2:"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "            return \"February\";"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "        case 3:"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "            return \"March\";"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "        case 4:"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "            return \"April\";"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "        case 5:"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "            return \"May\";"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "        case 6:"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "            return \"June\";"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "        case 7:"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "            return \"July\";"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "        case 8:"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "            return \"August\";"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "        case 9:"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "            return \"September\";"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "        case 10:"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "            return \"October\";"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "        case 11:"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "            return \"November\";"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "        case 12:"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "            return \"December\";"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "        default:"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "            return \"!all\";"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "        }"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "    }"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "weiyang13"
        },
        "content": ""
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "        return \"\" + monthNumber;"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "    }"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "weiyang13"
        },
        "content": ""
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "                || (other instanceof Month // instanceof handles nulls"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "                \u0026\u0026 monthNumber \u003d\u003d (((Month) other).monthNumber)); // state check"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "    }"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "weiyang13"
        },
        "content": ""
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "        return toString().hashCode();"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "    }"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "weiyang13"
        },
        "content": ""
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "    public int compareTo(Month other) {"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "        // Later months are given priority"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "        return other.monthNumber - monthNumber;"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "    }"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "weiyang13": 124
    }
  },
  {
    "path": "src/main/java/seedu/ichifund/model/date/Year.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "package seedu.ichifund.model.date;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "weiyang13"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "import static seedu.ichifund.commons.util.AppUtil.checkArgument;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "weiyang13"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "import java.time.LocalDate;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "/**"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "weiyang13"
        },
        "content": " * Represents a Year in a Date in IchiFund."
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "weiyang13"
        },
        "content": " * Guarantees: details are present and not null, field values are validated, immutable."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "weiyang13"
        },
        "content": " */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "public class Year implements Comparable\u003cYear\u003e {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "    public static final String MESSAGE_CONSTRAINTS \u003d"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "            \"Year should only contain years from 2000 to 9999\";"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "nexolute"
        },
        "content": "    public static final String VALIDATION_REGEX \u003d \"[2-9]\\\\d\\\\d\\\\d\";"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "    public final int yearNumber;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "weiyang13"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "     * Constructs a {@code Month}."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "     *"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "     * @param year A valid year number."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "     */"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "    public Year(String year) {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "        requireNonNull(year);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "        checkArgument(isValidYear(year), MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "        yearNumber \u003d Integer.parseInt(year);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "    }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "weiyang13"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "     * Returns true if a given string is a valid phone number."
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "     */"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "    public static boolean isValidYear(String test) {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "        return test.matches(VALIDATION_REGEX);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "weiyang13"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "    public static Year getCurrent() {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "        return new Year(Integer.toString(LocalDate.now().getYear()));"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "weiyang13"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "     * Returns true if the {@code Year} object represents a leap year."
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "     * Leap years occur once every 4 years, except for every year divisible by 100 that is not divisible by 400."
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "     *"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "     * @return true if the {@code Year} is a leap year."
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "     */"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "    public boolean isLeapYear() {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "        return (yearNumber % 4 \u003d\u003d 0) \u0026\u0026 (yearNumber % 100 !\u003d 0 || yearNumber % 400 \u003d\u003d 0);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "weiyang13"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "        return \"\" + yearNumber;"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "weiyang13"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "                || (other instanceof Year // instanceof handles nulls"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "                \u0026\u0026 yearNumber \u003d\u003d (((Year) other).yearNumber)); // state check"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "    }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "weiyang13"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "        return toString().hashCode();"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "    }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "weiyang13"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "    public int compareTo(Year other) {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "        // Later years are given priority"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "        return other.yearNumber - yearNumber;"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "    }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "nexolute": 1,
      "weiyang13": 70
    }
  },
  {
    "path": "src/main/java/seedu/ichifund/model/loans/Loan.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "troomtroom"
        },
        "content": "package seedu.ichifund.model.loans;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "troomtroom"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "troomtroom"
        },
        "content": "import java.util.Date;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "troomtroom"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "import seedu.ichifund.model.Description;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "import seedu.ichifund.model.amount.Amount;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "troomtroom"
        },
        "content": "import seedu.ichifund.model.person.Name;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "troomtroom"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "troomtroom"
        },
        "content": "/**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "troomtroom"
        },
        "content": " * Loan class for storing objects of Loan type."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "troomtroom"
        },
        "content": " */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "troomtroom"
        },
        "content": "public class Loan {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "troomtroom"
        },
        "content": "    private Name name;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "troomtroom"
        },
        "content": "    private Date date;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "troomtroom"
        },
        "content": "    private Integer type;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "troomtroom"
        },
        "content": "    private Amount amount;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "troomtroom"
        },
        "content": "    private Description description;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "troomtroom"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "troomtroom"
        },
        "content": "    public Loan(Amount amount, Name name, Date date, Integer type, Description description) {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "troomtroom"
        },
        "content": "        this.amount \u003d amount;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "troomtroom"
        },
        "content": "        this.name \u003d name;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "troomtroom"
        },
        "content": "        this.date \u003d date;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "troomtroom"
        },
        "content": "        this.type \u003d type;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "troomtroom"
        },
        "content": "        this.description \u003d description;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "troomtroom"
        },
        "content": "    }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "troomtroom"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "troomtroom"
        },
        "content": "    public Name getName() {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "troomtroom"
        },
        "content": "        return name;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "troomtroom"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "troomtroom"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "troomtroom"
        },
        "content": "    public void setName(Name name) {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "troomtroom"
        },
        "content": "        this.name \u003d name;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "troomtroom"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "troomtroom"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "troomtroom"
        },
        "content": "    public Date getDate() {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "troomtroom"
        },
        "content": "        return date;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "troomtroom"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "troomtroom"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "troomtroom"
        },
        "content": "    public void setDate(Date date) {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "troomtroom"
        },
        "content": "        this.date \u003d date;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "troomtroom"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "troomtroom"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "troomtroom"
        },
        "content": "    public Integer getType() {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "troomtroom"
        },
        "content": "        return type;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "troomtroom"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "troomtroom"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "troomtroom"
        },
        "content": "    public void setType(Integer type) {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "troomtroom"
        },
        "content": "        this.type \u003d type;"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "troomtroom"
        },
        "content": "    }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "troomtroom"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "troomtroom"
        },
        "content": "    public Amount getAmount() {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "troomtroom"
        },
        "content": "        return amount;"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "troomtroom"
        },
        "content": "    }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "troomtroom"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "troomtroom"
        },
        "content": "    public void setAmount(Amount amount) {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "troomtroom"
        },
        "content": "        this.amount \u003d amount;"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "troomtroom"
        },
        "content": "    }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "troomtroom"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "troomtroom"
        },
        "content": "    public Description getDescription() {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "troomtroom"
        },
        "content": "        return description;"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "troomtroom"
        },
        "content": "    }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "troomtroom"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "troomtroom"
        },
        "content": "    public void setDescription(Description description) {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "troomtroom"
        },
        "content": "        this.description \u003d description;"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "troomtroom"
        },
        "content": "    }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "troomtroom"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "weiyang13": 2,
      "troomtroom": 64
    }
  },
  {
    "path": "src/main/java/seedu/ichifund/model/loans/Name.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "troomtroom"
        },
        "content": "package seedu.ichifund.model.loans;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "troomtroom"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "troomtroom"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "troomtroom"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "troomtroom"
        },
        "content": "/**"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "troomtroom"
        },
        "content": " * Name type for Loans."
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "troomtroom"
        },
        "content": " */"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "troomtroom"
        },
        "content": "public class Name {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "troomtroom"
        },
        "content": "    public static final String NAMEREGEX \u003d \"()\"; // \u0027.\u0027 followed by exactly two numerical digits"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "troomtroom"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "troomtroom"
        },
        "content": "    public static final String MESSAGE_CONSTRAINTS \u003d"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "troomtroom"
        },
        "content": "            \"Names should only contain alphanumeric characters and spaces, and it should not be blank\";"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "troomtroom"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "troomtroom"
        },
        "content": "    /*"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "troomtroom"
        },
        "content": "     * The first character of the name must not be a whitespace,"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "troomtroom"
        },
        "content": "     * otherwise \" \" (a blank string) becomes a valid input."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "troomtroom"
        },
        "content": "     */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "troomtroom"
        },
        "content": "    public static final String VALIDATION_REGEX \u003d \"[\\\\p{Alnum}][\\\\p{Alnum} ]*\";"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "troomtroom"
        },
        "content": "    public final String fullName;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "troomtroom"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "troomtroom"
        },
        "content": "    public Name(String name) {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "troomtroom"
        },
        "content": "        requireNonNull(name);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "troomtroom"
        },
        "content": "        checkArgument(isValidName(name), MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "troomtroom"
        },
        "content": "        fullName \u003d name;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "troomtroom"
        },
        "content": "    }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "troomtroom"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "troomtroom"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "troomtroom"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "troomtroom"
        },
        "content": "        return fullName;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "troomtroom"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "troomtroom"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "troomtroom"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "troomtroom"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "troomtroom"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "troomtroom"
        },
        "content": "                || (other instanceof seedu.ichifund.model.person.Name // instanceof handles nulls"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "troomtroom"
        },
        "content": "                \u0026\u0026 fullName.equals(((seedu.ichifund.model.person.Name) other).fullName)); // state check"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "troomtroom"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "troomtroom"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "troomtroom"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "troomtroom"
        },
        "content": "     * Returns true if a given string is a valid name."
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "troomtroom"
        },
        "content": "     */"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "troomtroom"
        },
        "content": "    public static boolean isValidName(String test) {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "troomtroom"
        },
        "content": "        return test.matches(VALIDATION_REGEX);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "troomtroom"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "troomtroom"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "troomtroom"
        },
        "content": "    public String getFullName() {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "troomtroom"
        },
        "content": "        return fullName;"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "troomtroom"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "troomtroom"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "troomtroom"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "troomtroom"
        },
        "content": "     * To check if boolean condition is fulfilled."
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "troomtroom"
        },
        "content": "     *"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "troomtroom"
        },
        "content": "     * @param condition"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "troomtroom"
        },
        "content": "     * @param errorMessage"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "troomtroom"
        },
        "content": "     */"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "troomtroom"
        },
        "content": "    public static void checkArgument(Boolean condition, String errorMessage) {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "troomtroom"
        },
        "content": "        if (!condition) {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "troomtroom"
        },
        "content": "            throw new IllegalArgumentException(errorMessage);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "troomtroom"
        },
        "content": "        }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "troomtroom"
        },
        "content": "    }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "troomtroom"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "troomtroom": 61
    }
  },
  {
    "path": "src/main/java/seedu/ichifund/model/person/Address.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "nexolute"
        },
        "content": "package seedu.ichifund.model.person;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "nexolute"
        },
        "content": "import static seedu.ichifund.commons.util.AppUtil.checkArgument;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "nexolute"
        },
        "content": " * Represents a Person\u0027s address in the fund book."
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": " * Guarantees: immutable; is valid as declared in {@link #isValidAddress(String)}"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "public class Address {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_CONSTRAINTS \u003d \"Addresses can take any values, and it should not be blank\";"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    /*"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "     * The first character of the address must not be a whitespace,"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "     * otherwise \" \" (a blank string) becomes a valid input."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String VALIDATION_REGEX \u003d \"[^\\\\s].*\";"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    public final String value;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "     * Constructs an {@code Address}."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param address A valid address."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    public Address(String address) {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(address);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        checkArgument(isValidAddress(address), MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "        value \u003d address;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns true if a given string is a valid email."
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    public static boolean isValidAddress(String test) {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        return test.matches(VALIDATION_REGEX);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "        return value;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "                || (other instanceof Address // instanceof handles nulls"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "                \u0026\u0026 value.equals(((Address) other).value)); // state check"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "        return value.hashCode();"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "nexolute": 3,
      "-": 54
    }
  },
  {
    "path": "src/main/java/seedu/ichifund/model/person/Email.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "nexolute"
        },
        "content": "package seedu.ichifund.model.person;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "nexolute"
        },
        "content": "import static seedu.ichifund.commons.util.AppUtil.checkArgument;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "nexolute"
        },
        "content": " * Represents a Person\u0027s email in the fund book."
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": " * Guarantees: immutable; is valid as declared in {@link #isValidEmail(String)}"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "public class Email {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String SPECIAL_CHARACTERS \u003d \"!#$%\u0026\u0027*+/\u003d?`{|}~^.-\";"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_CONSTRAINTS \u003d \"Emails should be of the format local-part@domain \""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"and adhere to the following constraints:\\n\""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"1. The local-part should only contain alphanumeric characters and these special characters, excluding \""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"the parentheses, (\" + SPECIAL_CHARACTERS + \") .\\n\""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"2. This is followed by a \u0027@\u0027 and then a domain name. \""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"The domain name must:\\n\""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"    - be at least 2 characters long\\n\""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"    - start and end with alphanumeric characters\\n\""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"    - consist of alphanumeric characters, a period or a hyphen for the characters in between, if any.\";"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    // alphanumeric and special characters"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String LOCAL_PART_REGEX \u003d \"^[\\\\w\" + SPECIAL_CHARACTERS + \"]+\";"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String DOMAIN_FIRST_CHARACTER_REGEX \u003d \"[^\\\\W_]\"; // alphanumeric characters except underscore"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String DOMAIN_MIDDLE_REGEX \u003d \"[a-zA-Z0-9.-]*\"; // alphanumeric, period and hyphen"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String DOMAIN_LAST_CHARACTER_REGEX \u003d \"[^\\\\W_]$\";"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String VALIDATION_REGEX \u003d LOCAL_PART_REGEX + \"@\""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "            + DOMAIN_FIRST_CHARACTER_REGEX + DOMAIN_MIDDLE_REGEX + DOMAIN_LAST_CHARACTER_REGEX;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    public final String value;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "     * Constructs an {@code Email}."
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param email A valid email address."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    public Email(String email) {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(email);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        checkArgument(isValidEmail(email), MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "        value \u003d email;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns if a given string is a valid email."
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    public static boolean isValidEmail(String test) {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        return test.matches(VALIDATION_REGEX);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        return value;"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "                || (other instanceof Email // instanceof handles nulls"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "                \u0026\u0026 value.equals(((Email) other).value)); // state check"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "        return value.hashCode();"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "nexolute": 3,
      "-": 64
    }
  },
  {
    "path": "src/main/java/seedu/ichifund/model/person/Name.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "nexolute"
        },
        "content": "package seedu.ichifund.model.person;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "nexolute"
        },
        "content": "import static seedu.ichifund.commons.util.AppUtil.checkArgument;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "nexolute"
        },
        "content": " * Represents a Person\u0027s name in the fund book."
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": " * Guarantees: immutable; is valid as declared in {@link #isValidName(String)}"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "public class Name {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_CONSTRAINTS \u003d"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "            \"Names should only contain alphanumeric characters and spaces, and it should not be blank\";"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    /*"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "nexolute"
        },
        "content": "     * The first character of the name must not be a whitespace,"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "     * otherwise \" \" (a blank string) becomes a valid input."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String VALIDATION_REGEX \u003d \"[\\\\p{Alnum}][\\\\p{Alnum} ]*\";"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    public final String fullName;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "     * Constructs a {@code Name}."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param name A valid name."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    public Name(String name) {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(name);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "        checkArgument(isValidName(name), MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        fullName \u003d name;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns true if a given string is a valid name."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    public static boolean isValidName(String test) {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        return test.matches(VALIDATION_REGEX);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        return fullName;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "                || (other instanceof Name // instanceof handles nulls"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "                \u0026\u0026 fullName.equals(((Name) other).fullName)); // state check"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "        return fullName.hashCode();"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "nexolute": 4,
      "-": 55
    }
  },
  {
    "path": "src/main/java/seedu/ichifund/model/person/NameContainsKeywordsPredicate.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "nexolute"
        },
        "content": "package seedu.ichifund.model.person;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.function.Predicate;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "nexolute"
        },
        "content": "import seedu.ichifund.commons.util.StringUtil;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": " * Tests that a {@code Person}\u0027s {@code Name} matches any of the keywords given."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "public class NameContainsKeywordsPredicate implements Predicate\u003cPerson\u003e {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    private final List\u003cString\u003e keywords;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    public NameContainsKeywordsPredicate(List\u003cString\u003e keywords) {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "        this.keywords \u003d keywords;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean test(Person person) {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "        return keywords.stream()"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "                .anyMatch(keyword -\u003e StringUtil.containsWordIgnoreCase(person.getName().fullName, keyword));"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "                || (other instanceof NameContainsKeywordsPredicate // instanceof handles nulls"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "                \u0026\u0026 keywords.equals(((NameContainsKeywordsPredicate) other).keywords)); // state check"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "nexolute": 2,
      "-": 29
    }
  },
  {
    "path": "src/main/java/seedu/ichifund/model/person/Person.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "nexolute"
        },
        "content": "package seedu.ichifund.model.person;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "nexolute"
        },
        "content": "import static seedu.ichifund.commons.util.CollectionUtil.requireAllNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Collections;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.HashSet;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Objects;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "nexolute"
        },
        "content": "import seedu.ichifund.model.tag.Tag;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "nexolute"
        },
        "content": " * Represents a Person in the fund book."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": " * Guarantees: details are present and not null, field values are validated, immutable."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "public class Person {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    // Identity fields"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    private final Name name;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    private final Phone phone;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    private final Email email;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    // Data fields"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    private final Address address;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    private final Set\u003cTag\u003e tags \u003d new HashSet\u003c\u003e();"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "     * Every field must be present and not null."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    public Person(Name name, Phone phone, Email email, Address address, Set\u003cTag\u003e tags) {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        requireAllNonNull(name, phone, email, address, tags);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        this.name \u003d name;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "        this.phone \u003d phone;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        this.email \u003d email;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "        this.address \u003d address;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        this.tags.addAll(tags);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    public Name getName() {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "        return name;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    public Phone getPhone() {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        return phone;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    public Email getEmail() {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        return email;"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    public Address getAddress() {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        return address;"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns an immutable tag set, which throws {@code UnsupportedOperationException}"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "     * if modification is attempted."
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    public Set\u003cTag\u003e getTags() {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "        return Collections.unmodifiableSet(tags);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns true if both persons of the same name have at least one other identity field that is the same."
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "     * This defines a weaker notion of equality between two persons."
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean isSamePerson(Person otherPerson) {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "        if (otherPerson \u003d\u003d this) {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "        return otherPerson !\u003d null"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "                \u0026\u0026 otherPerson.getName().equals(getName())"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "                \u0026\u0026 (otherPerson.getPhone().equals(getPhone()) || otherPerson.getEmail().equals(getEmail()));"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns true if both persons have the same identity and data fields."
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "     * This defines a stronger notion of equality between two persons."
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "        if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!(other instanceof Person)) {"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "        Person otherPerson \u003d (Person) other;"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "        return otherPerson.getName().equals(getName())"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "                \u0026\u0026 otherPerson.getPhone().equals(getPhone())"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "                \u0026\u0026 otherPerson.getEmail().equals(getEmail())"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "                \u0026\u0026 otherPerson.getAddress().equals(getAddress())"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "                \u0026\u0026 otherPerson.getTags().equals(getTags());"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "        // use this method for custom fields hashing instead of implementing your own"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "        return Objects.hash(name, phone, email, address, tags);"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "        final StringBuilder builder \u003d new StringBuilder();"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "        builder.append(getName())"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "                .append(\" Phone: \")"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "                .append(getPhone())"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "                .append(\" Email: \")"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "                .append(getEmail())"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "                .append(\" Address: \")"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "                .append(getAddress())"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "                .append(\" Tags: \");"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "        getTags().forEach(builder::append);"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "        return builder.toString();"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "nexolute": 4,
      "-": 116
    }
  },
  {
    "path": "src/main/java/seedu/ichifund/model/person/Phone.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "nexolute"
        },
        "content": "package seedu.ichifund.model.person;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "nexolute"
        },
        "content": "import static seedu.ichifund.commons.util.AppUtil.checkArgument;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "nexolute"
        },
        "content": " * Represents a Person\u0027s phone number in the fund book."
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": " * Guarantees: immutable; is valid as declared in {@link #isValidPhone(String)}"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "public class Phone {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_CONSTRAINTS \u003d"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "            \"Phone numbers should only contain numbers, and it should be at least 3 digits long\";"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String VALIDATION_REGEX \u003d \"\\\\d{3,}\";"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    public final String value;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "     * Constructs a {@code Phone}."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param phone A valid phone number."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    public Phone(String phone) {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(phone);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "        checkArgument(isValidPhone(phone), MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "        value \u003d phone;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns true if a given string is a valid phone number."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    public static boolean isValidPhone(String test) {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "        return test.matches(VALIDATION_REGEX);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        return value;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "                || (other instanceof Phone // instanceof handles nulls"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "                \u0026\u0026 value.equals(((Phone) other).value)); // state check"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "        return value.hashCode();"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "nexolute": 3,
      "-": 50
    }
  },
  {
    "path": "src/main/java/seedu/ichifund/model/person/UniquePersonList.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "nexolute"
        },
        "content": "package seedu.ichifund.model.person;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "nexolute"
        },
        "content": "import static seedu.ichifund.commons.util.CollectionUtil.requireAllNonNull;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Iterator;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.collections.FXCollections;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "nexolute"
        },
        "content": "import seedu.ichifund.model.person.exceptions.DuplicatePersonException;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "nexolute"
        },
        "content": "import seedu.ichifund.model.person.exceptions.PersonNotFoundException;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": " * A list of persons that enforces uniqueness between its elements and does not allow nulls."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": " * A person is considered unique by comparing using {@code Person#isSamePerson(Person)}. As such, adding and updating of"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": " * persons uses Person#isSamePerson(Person) for equality so as to ensure that the person being added or updated is"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": " * unique in terms of identity in the UniquePersonList. However, the removal of a person uses Person#equals(Object) so"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": " * as to ensure that the person with exactly the same fields will be removed."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": " *"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": " * Supports a minimal set of list operations."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": " *"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": " * @see Person#isSamePerson(Person)"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "public class UniquePersonList implements Iterable\u003cPerson\u003e {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    private final ObservableList\u003cPerson\u003e internalList \u003d FXCollections.observableArrayList();"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    private final ObservableList\u003cPerson\u003e internalUnmodifiableList \u003d"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "            FXCollections.unmodifiableObservableList(internalList);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns true if the list contains an equivalent person as the given argument."
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean contains(Person toCheck) {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(toCheck);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        return internalList.stream().anyMatch(toCheck::isSamePerson);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "     * Adds a person to the list."
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "     * The person must not already exist in the list."
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    public void add(Person toAdd) {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(toAdd);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        if (contains(toAdd)) {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new DuplicatePersonException();"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        internalList.add(toAdd);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "     * Replaces the person {@code target} in the list with {@code editedPerson}."
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "     * {@code target} must exist in the list."
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "     * The person identity of {@code editedPerson} must not be the same as another existing person in the list."
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setPerson(Person target, Person editedPerson) {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "        requireAllNonNull(target, editedPerson);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "        int index \u003d internalList.indexOf(target);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "        if (index \u003d\u003d -1) {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new PersonNotFoundException();"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!target.isSamePerson(editedPerson) \u0026\u0026 contains(editedPerson)) {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new DuplicatePersonException();"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "        internalList.set(index, editedPerson);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "     * Removes the equivalent person from the list."
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "     * The person must exist in the list."
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "    public void remove(Person toRemove) {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(toRemove);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!internalList.remove(toRemove)) {"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new PersonNotFoundException();"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setPersons(UniquePersonList replacement) {"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(replacement);"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "        internalList.setAll(replacement.internalList);"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "     * Replaces the contents of this list with {@code persons}."
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "     * {@code persons} must not contain duplicate persons."
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setPersons(List\u003cPerson\u003e persons) {"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "        requireAllNonNull(persons);"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!personsAreUnique(persons)) {"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new DuplicatePersonException();"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "        internalList.setAll(persons);"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns the backing list as an unmodifiable {@code ObservableList}."
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "    public ObservableList\u003cPerson\u003e asUnmodifiableObservableList() {"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "        return internalUnmodifiableList;"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "    public Iterator\u003cPerson\u003e iterator() {"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "        return internalList.iterator();"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "                || (other instanceof UniquePersonList // instanceof handles nulls"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "                        \u0026\u0026 internalList.equals(((UniquePersonList) other).internalList));"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "        return internalList.hashCode();"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns true if {@code persons} contains only unique persons."
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "    private boolean personsAreUnique(List\u003cPerson\u003e persons) {"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "        for (int i \u003d 0; i \u003c persons.size() - 1; i++) {"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "            for (int j \u003d i + 1; j \u003c persons.size(); j++) {"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "                if (persons.get(i).isSamePerson(persons.get(j))) {"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "                    return false;"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "                }"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": "        return true;"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "nexolute": 4,
      "-": 133
    }
  },
  {
    "path": "src/main/java/seedu/ichifund/model/person/exceptions/DuplicatePersonException.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "nexolute"
        },
        "content": "package seedu.ichifund.model.person.exceptions;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": " * Signals that the operation will result in duplicate Persons (Persons are considered duplicates if they have the same"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": " * identity)."
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "public class DuplicatePersonException extends RuntimeException {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "    public DuplicatePersonException() {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "        super(\"Operation would result in duplicate persons\");"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "nexolute": 1,
      "-": 10
    }
  },
  {
    "path": "src/main/java/seedu/ichifund/model/person/exceptions/PersonNotFoundException.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "nexolute"
        },
        "content": "package seedu.ichifund.model.person.exceptions;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": " * Signals that the operation is unable to find the specified person."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "public class PersonNotFoundException extends RuntimeException {}"
      }
    ],
    "authorContributionMap": {
      "nexolute": 1,
      "-": 5
    }
  },
  {
    "path": "src/main/java/seedu/ichifund/model/repeater/MonthOffset.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "LeeYiyuan"
        },
        "content": "package seedu.ichifund.model.repeater;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "LeeYiyuan"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "LeeYiyuan"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "LeeYiyuan"
        },
        "content": "import static seedu.ichifund.commons.util.AppUtil.checkArgument;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "LeeYiyuan"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "LeeYiyuan"
        },
        "content": "/**"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "LeeYiyuan"
        },
        "content": " * Represents a Month Offset in IchiFund."
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "LeeYiyuan"
        },
        "content": " * Guarantees: details are present and not null, field values are validated, immutable."
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "LeeYiyuan"
        },
        "content": " */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "LeeYiyuan"
        },
        "content": "public class MonthOffset {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "LeeYiyuan"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "LeeYiyuan"
        },
        "content": "    public static final String MESSAGE_CONSTRAINTS \u003d"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "LeeYiyuan"
        },
        "content": "        \"Month offset should be an integer between 1 and 28 inclusive. A value of -1 indicates that the month \""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "LeeYiyuan"
        },
        "content": "        + \"offset is ignored.\";"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "LeeYiyuan"
        },
        "content": "    public static final String VALIDATION_REGEX \u003d \"^$|(-1|[1-9]|1[0-9]|2[0-8])\";"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "LeeYiyuan"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "LeeYiyuan"
        },
        "content": "    public final Integer value;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "LeeYiyuan"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "LeeYiyuan"
        },
        "content": "    public MonthOffset(String offset) {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "LeeYiyuan"
        },
        "content": "        requireNonNull(offset);"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "LeeYiyuan"
        },
        "content": "        checkArgument(isValidMonthOffset(offset), MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "LeeYiyuan"
        },
        "content": "        if (offset.equals(\"\")) {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "LeeYiyuan"
        },
        "content": "            this.value \u003d null;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "LeeYiyuan"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "LeeYiyuan"
        },
        "content": "            this.value \u003d Integer.parseInt(offset);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "LeeYiyuan"
        },
        "content": "        }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "LeeYiyuan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "LeeYiyuan"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "LeeYiyuan"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "LeeYiyuan"
        },
        "content": "     * Returns true if a given string is a valid offset."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "LeeYiyuan"
        },
        "content": "     */"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "LeeYiyuan"
        },
        "content": "    public static boolean isValidMonthOffset(String test) {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "LeeYiyuan"
        },
        "content": "        return test.matches(VALIDATION_REGEX);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "LeeYiyuan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "LeeYiyuan"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "LeeYiyuan"
        },
        "content": "    public boolean isIgnored() {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "LeeYiyuan"
        },
        "content": "        return value \u003d\u003d -1;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "LeeYiyuan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "LeeYiyuan"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "LeeYiyuan"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "LeeYiyuan"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "LeeYiyuan"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "LeeYiyuan"
        },
        "content": "                || (other instanceof MonthOffset // instanceof handles nulls"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "LeeYiyuan"
        },
        "content": "                \u0026\u0026 value.equals(((MonthOffset) other).value)); // state check"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "LeeYiyuan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "LeeYiyuan"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "LeeYiyuan"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "LeeYiyuan"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "LeeYiyuan"
        },
        "content": "        return value.hashCode();"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "LeeYiyuan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "LeeYiyuan"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "LeeYiyuan"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "LeeYiyuan"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "LeeYiyuan"
        },
        "content": "        if (this.value \u003d\u003d null) {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "LeeYiyuan"
        },
        "content": "            return \"\";"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "LeeYiyuan"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "LeeYiyuan"
        },
        "content": "            return this.value.toString();"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "LeeYiyuan"
        },
        "content": "        }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "LeeYiyuan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "LeeYiyuan"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "LeeYiyuan"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "LeeYiyuan": 61
    }
  },
  {
    "path": "src/main/java/seedu/ichifund/model/repeater/Repeater.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "LeeYiyuan"
        },
        "content": "package seedu.ichifund.model.repeater;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "LeeYiyuan"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "LeeYiyuan"
        },
        "content": "import static seedu.ichifund.commons.util.CollectionUtil.requireAllNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "LeeYiyuan"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "LeeYiyuan"
        },
        "content": "import java.util.Objects;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "LeeYiyuan"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "import seedu.ichifund.model.Description;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "import seedu.ichifund.model.amount.Amount;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "LeeYiyuan"
        },
        "content": "import seedu.ichifund.model.date.Date;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "LeeYiyuan"
        },
        "content": "import seedu.ichifund.model.transaction.Category;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "LeeYiyuan"
        },
        "content": "import seedu.ichifund.model.transaction.TransactionType;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "LeeYiyuan"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "LeeYiyuan"
        },
        "content": "/**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "LeeYiyuan"
        },
        "content": " * Represents a Repeater in IchiFund."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "LeeYiyuan"
        },
        "content": " * Guarantees: details are present and not null, field values are validated, immutable."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "LeeYiyuan"
        },
        "content": " */"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "LeeYiyuan"
        },
        "content": "public class Repeater {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "LeeYiyuan"
        },
        "content": "    private final RepeaterUniqueId uniqueId;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "LeeYiyuan"
        },
        "content": "    private final Description description;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "LeeYiyuan"
        },
        "content": "    private final Amount amount;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "LeeYiyuan"
        },
        "content": "    private final Category category;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "LeeYiyuan"
        },
        "content": "    private final TransactionType transactionType;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "LeeYiyuan"
        },
        "content": "    private final MonthOffset monthStartOffset;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "LeeYiyuan"
        },
        "content": "    private final MonthOffset monthEndOffset;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "LeeYiyuan"
        },
        "content": "    private final Date startDate;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "LeeYiyuan"
        },
        "content": "    private final Date endDate;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "LeeYiyuan"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "LeeYiyuan"
        },
        "content": "    public Repeater(RepeaterUniqueId uniqueId, Description description, Amount amount, Category category,"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "LeeYiyuan"
        },
        "content": "            TransactionType transactionType, MonthOffset monthStartOffset, MonthOffset monthEndOffset,"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "LeeYiyuan"
        },
        "content": "            Date startDate, Date endDate) {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "LeeYiyuan"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "LeeYiyuan"
        },
        "content": "        requireAllNonNull(uniqueId, description, amount, category, transactionType, monthStartOffset,"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "LeeYiyuan"
        },
        "content": "                monthEndOffset, startDate, endDate);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "LeeYiyuan"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "LeeYiyuan"
        },
        "content": "        this.uniqueId \u003d uniqueId;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "LeeYiyuan"
        },
        "content": "        this.description \u003d description;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "LeeYiyuan"
        },
        "content": "        this.amount \u003d amount;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "LeeYiyuan"
        },
        "content": "        this.category \u003d category;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "LeeYiyuan"
        },
        "content": "        this.transactionType \u003d transactionType;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "LeeYiyuan"
        },
        "content": "        this.monthStartOffset \u003d monthStartOffset;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "LeeYiyuan"
        },
        "content": "        this.monthEndOffset \u003d monthEndOffset;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "LeeYiyuan"
        },
        "content": "        this.startDate \u003d startDate;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "LeeYiyuan"
        },
        "content": "        this.endDate \u003d endDate;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "LeeYiyuan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "LeeYiyuan"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "LeeYiyuan"
        },
        "content": "    public RepeaterUniqueId getUniqueId() {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "LeeYiyuan"
        },
        "content": "        return this.uniqueId;"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "LeeYiyuan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "LeeYiyuan"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "LeeYiyuan"
        },
        "content": "    public Description getDescription() {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "LeeYiyuan"
        },
        "content": "        return this.description;"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "LeeYiyuan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "LeeYiyuan"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "LeeYiyuan"
        },
        "content": "    public Amount getAmount() {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "LeeYiyuan"
        },
        "content": "        return this.amount;"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "LeeYiyuan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "LeeYiyuan"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "LeeYiyuan"
        },
        "content": "    public Category getCategory() {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "LeeYiyuan"
        },
        "content": "        return this.category;"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "LeeYiyuan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "LeeYiyuan"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "LeeYiyuan"
        },
        "content": "    public TransactionType getTransactionType() {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "LeeYiyuan"
        },
        "content": "        return this.transactionType;"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "LeeYiyuan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "LeeYiyuan"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "LeeYiyuan"
        },
        "content": "    public boolean isExpenditure() {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "LeeYiyuan"
        },
        "content": "        return transactionType.isExpenditure();"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "LeeYiyuan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "LeeYiyuan"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "LeeYiyuan"
        },
        "content": "    public MonthOffset getMonthStartOffset() {"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "LeeYiyuan"
        },
        "content": "        return this.monthStartOffset;"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "LeeYiyuan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "LeeYiyuan"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "LeeYiyuan"
        },
        "content": "    public MonthOffset getMonthEndOffset() {"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "LeeYiyuan"
        },
        "content": "        return this.monthEndOffset;"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "LeeYiyuan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "LeeYiyuan"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "LeeYiyuan"
        },
        "content": "    public Date getStartDate() {"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "LeeYiyuan"
        },
        "content": "        return this.startDate;"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "LeeYiyuan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "LeeYiyuan"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "LeeYiyuan"
        },
        "content": "    public Date getEndDate() {"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "LeeYiyuan"
        },
        "content": "        return this.endDate;"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "LeeYiyuan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "LeeYiyuan"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "LeeYiyuan"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "LeeYiyuan"
        },
        "content": "     * Returns true if both repeaters of the same name have at least one other identity field that is the same."
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "LeeYiyuan"
        },
        "content": "     * This defines a weaker notion of equality between two repeaters."
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "LeeYiyuan"
        },
        "content": "     */"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "LeeYiyuan"
        },
        "content": "    public boolean isSameRepeater(Repeater otherRepeater) {"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "LeeYiyuan"
        },
        "content": "        if (otherRepeater \u003d\u003d this) {"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "LeeYiyuan"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "LeeYiyuan"
        },
        "content": "        }"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "LeeYiyuan"
        },
        "content": ""
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "LeeYiyuan"
        },
        "content": "        return otherRepeater !\u003d null"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "LeeYiyuan"
        },
        "content": "                \u0026\u0026 otherRepeater.getUniqueId().equals(getUniqueId())"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "LeeYiyuan"
        },
        "content": "                \u0026\u0026 otherRepeater.getDescription().equals(getDescription())"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "LeeYiyuan"
        },
        "content": "                \u0026\u0026 otherRepeater.getAmount().equals(getAmount())"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "LeeYiyuan"
        },
        "content": "                \u0026\u0026 otherRepeater.getCategory().equals(getCategory())"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "LeeYiyuan"
        },
        "content": "                \u0026\u0026 otherRepeater.getTransactionType().equals(getTransactionType())"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "LeeYiyuan"
        },
        "content": "                \u0026\u0026 otherRepeater.getMonthStartOffset().equals(getMonthStartOffset())"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "LeeYiyuan"
        },
        "content": "                \u0026\u0026 otherRepeater.getMonthEndOffset().equals(getMonthEndOffset())"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "LeeYiyuan"
        },
        "content": "                \u0026\u0026 otherRepeater.getStartDate().equals(getStartDate())"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "LeeYiyuan"
        },
        "content": "                \u0026\u0026 otherRepeater.getEndDate().equals(getEndDate());"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "LeeYiyuan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "LeeYiyuan"
        },
        "content": ""
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "LeeYiyuan"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "LeeYiyuan"
        },
        "content": "     * Returns true if both repeaters have the same identity and data fields."
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "LeeYiyuan"
        },
        "content": "     * This defines a stronger notion of equality between two repeaters."
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "LeeYiyuan"
        },
        "content": "     */"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "LeeYiyuan"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "LeeYiyuan"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "LeeYiyuan"
        },
        "content": "        if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "LeeYiyuan"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "LeeYiyuan"
        },
        "content": "        }"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "LeeYiyuan"
        },
        "content": ""
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "LeeYiyuan"
        },
        "content": "        if (!(other instanceof Repeater)) {"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "LeeYiyuan"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "LeeYiyuan"
        },
        "content": "        }"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "LeeYiyuan"
        },
        "content": ""
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "LeeYiyuan"
        },
        "content": "        Repeater otherRepeater \u003d (Repeater) other;"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "LeeYiyuan"
        },
        "content": "        return otherRepeater.getUniqueId().equals(getUniqueId())"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "LeeYiyuan"
        },
        "content": "                \u0026\u0026 otherRepeater.getDescription().equals(getDescription())"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "LeeYiyuan"
        },
        "content": "                \u0026\u0026 otherRepeater.getAmount().equals(getAmount())"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "LeeYiyuan"
        },
        "content": "                \u0026\u0026 otherRepeater.getCategory().equals(getCategory())"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "LeeYiyuan"
        },
        "content": "                \u0026\u0026 otherRepeater.getTransactionType().equals(getTransactionType())"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "LeeYiyuan"
        },
        "content": "                \u0026\u0026 otherRepeater.getMonthStartOffset().equals(getMonthStartOffset())"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "LeeYiyuan"
        },
        "content": "                \u0026\u0026 otherRepeater.getMonthEndOffset().equals(getMonthEndOffset())"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "LeeYiyuan"
        },
        "content": "                \u0026\u0026 otherRepeater.getStartDate().equals(getStartDate())"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "LeeYiyuan"
        },
        "content": "                \u0026\u0026 otherRepeater.getEndDate().equals(getEndDate());"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "LeeYiyuan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "LeeYiyuan"
        },
        "content": ""
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "LeeYiyuan"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "LeeYiyuan"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "LeeYiyuan"
        },
        "content": "        return Objects.hash(uniqueId, description, amount, category, transactionType,"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "LeeYiyuan"
        },
        "content": "                monthStartOffset, monthEndOffset, startDate, endDate);"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "LeeYiyuan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "LeeYiyuan"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "LeeYiyuan": 136,
      "weiyang13": 2
    }
  },
  {
    "path": "src/main/java/seedu/ichifund/model/repeater/RepeaterUniqueId.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "LeeYiyuan"
        },
        "content": "package seedu.ichifund.model.repeater;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "LeeYiyuan"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "LeeYiyuan"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "LeeYiyuan"
        },
        "content": "import static seedu.ichifund.commons.util.AppUtil.checkArgument;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "LeeYiyuan"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "LeeYiyuan"
        },
        "content": "/**"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "LeeYiyuan"
        },
        "content": " * Represents a Unique Id for a Repeater in IchiFund."
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "LeeYiyuan"
        },
        "content": " * Guarantees: details are present and not null, field values are validated, immutable."
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "LeeYiyuan"
        },
        "content": " */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "LeeYiyuan"
        },
        "content": "public class RepeaterUniqueId {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "LeeYiyuan"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "LeeYiyuan"
        },
        "content": "    public static final String MESSAGE_CONSTRAINTS \u003d"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "LeeYiyuan"
        },
        "content": "            \"Repeater unique ids should either be empty or only contain numbers\";"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "LeeYiyuan"
        },
        "content": "    public static final String VALIDATION_REGEX \u003d \"[0-9]*\";"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "LeeYiyuan"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "LeeYiyuan"
        },
        "content": "    public final Integer id;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "LeeYiyuan"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "LeeYiyuan"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "LeeYiyuan"
        },
        "content": "     * Constructs a {@code RepeaterUniqueId}."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "LeeYiyuan"
        },
        "content": "     *"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "LeeYiyuan"
        },
        "content": "     * @param id A valid id."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "LeeYiyuan"
        },
        "content": "     */"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "LeeYiyuan"
        },
        "content": "    public RepeaterUniqueId(String id) {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "LeeYiyuan"
        },
        "content": "        requireNonNull(id);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "LeeYiyuan"
        },
        "content": "        checkArgument(isValidRepeaterUniqueId(id), MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "LeeYiyuan"
        },
        "content": "        if (!id.equals(\"\")) {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "LeeYiyuan"
        },
        "content": "            this.id \u003d Integer.parseInt(id);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "LeeYiyuan"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "LeeYiyuan"
        },
        "content": "            this.id \u003d null;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "LeeYiyuan"
        },
        "content": "        }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "LeeYiyuan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "LeeYiyuan"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "LeeYiyuan"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "LeeYiyuan"
        },
        "content": "     * Returns true if a given string is a valid repeater unique id."
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "LeeYiyuan"
        },
        "content": "     */"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "LeeYiyuan"
        },
        "content": "    public static boolean isValidRepeaterUniqueId(String test) {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "LeeYiyuan"
        },
        "content": "        return test.matches(VALIDATION_REGEX);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "LeeYiyuan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "LeeYiyuan"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "LeeYiyuan"
        },
        "content": "    public boolean isEmpty() {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "LeeYiyuan"
        },
        "content": "        return id \u003d\u003d null;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "LeeYiyuan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "LeeYiyuan"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "LeeYiyuan"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "LeeYiyuan"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "LeeYiyuan"
        },
        "content": "        if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "LeeYiyuan"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "LeeYiyuan"
        },
        "content": "        } else if (other instanceof RepeaterUniqueId) {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "LeeYiyuan"
        },
        "content": "            if (id \u003d\u003d null \u0026\u0026 ((RepeaterUniqueId) other).id \u003d\u003d null) {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "LeeYiyuan"
        },
        "content": "                return true;"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "LeeYiyuan"
        },
        "content": "            } else if (id \u003d\u003d null || ((RepeaterUniqueId) other).id \u003d\u003d null) {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "LeeYiyuan"
        },
        "content": "                return false;"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "LeeYiyuan"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "LeeYiyuan"
        },
        "content": "                return id.equals(((RepeaterUniqueId) other).id);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "LeeYiyuan"
        },
        "content": "            }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "LeeYiyuan"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "LeeYiyuan"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "LeeYiyuan"
        },
        "content": "        }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "LeeYiyuan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "LeeYiyuan"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "LeeYiyuan"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "LeeYiyuan"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "LeeYiyuan"
        },
        "content": "        if (id \u003d\u003d null) {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "LeeYiyuan"
        },
        "content": "            return 0;"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "LeeYiyuan"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "LeeYiyuan"
        },
        "content": "            return id.hashCode();"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "LeeYiyuan"
        },
        "content": "        }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "LeeYiyuan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "LeeYiyuan"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "LeeYiyuan"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "LeeYiyuan"
        },
        "content": "     * Format state as text for viewing."
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "LeeYiyuan"
        },
        "content": "     */"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "LeeYiyuan"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "LeeYiyuan"
        },
        "content": "        if (id \u003d\u003d null) {"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "LeeYiyuan"
        },
        "content": "            return \"\";"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "LeeYiyuan"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "LeeYiyuan"
        },
        "content": "            return id.toString();"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "LeeYiyuan"
        },
        "content": "        }"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "LeeYiyuan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "LeeYiyuan"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "LeeYiyuan"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "LeeYiyuan": 81
    }
  },
  {
    "path": "src/main/java/seedu/ichifund/model/repeater/UniqueRepeaterList.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "LeeYiyuan"
        },
        "content": "package seedu.ichifund.model.repeater;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "LeeYiyuan"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "LeeYiyuan"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "LeeYiyuan"
        },
        "content": "import static seedu.ichifund.commons.util.CollectionUtil.requireAllNonNull;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "LeeYiyuan"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "LeeYiyuan"
        },
        "content": "import java.util.Iterator;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "LeeYiyuan"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "LeeYiyuan"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "LeeYiyuan"
        },
        "content": "import javafx.collections.FXCollections;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "LeeYiyuan"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "LeeYiyuan"
        },
        "content": "import seedu.ichifund.model.repeater.exceptions.DuplicateRepeaterException;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "LeeYiyuan"
        },
        "content": "import seedu.ichifund.model.repeater.exceptions.RepeaterNotFoundException;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "LeeYiyuan"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "LeeYiyuan"
        },
        "content": "/**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "LeeYiyuan"
        },
        "content": " * A list of repeaters that enforces uniqueness between its elements and does not allow nulls."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "LeeYiyuan"
        },
        "content": " * A repeater is considered unique by comparing using {@code Repeater#isSameRepeater(Repeater)}. As such, adding and"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "LeeYiyuan"
        },
        "content": " * updating of repeaters uses Repeater#isSameRepeater(Repeater) for equality so as to ensure that the repeater being"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "LeeYiyuan"
        },
        "content": " * added or updated is unique in terms of identity in the UniqueRepeaterList. However, the removal of a repeater uses"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "LeeYiyuan"
        },
        "content": " * Repeater#equals(Object) so as to ensure that the repeater with exactly the same fields will be removed."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "LeeYiyuan"
        },
        "content": " *"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "LeeYiyuan"
        },
        "content": " * Supports a minimal set of list operations."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "LeeYiyuan"
        },
        "content": " *"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "LeeYiyuan"
        },
        "content": " * @see Repeater#isSameRepeater(Repeater)"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "LeeYiyuan"
        },
        "content": " */"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "LeeYiyuan"
        },
        "content": "public class UniqueRepeaterList implements Iterable\u003cRepeater\u003e {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "LeeYiyuan"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "LeeYiyuan"
        },
        "content": "    private final ObservableList\u003cRepeater\u003e internalList \u003d FXCollections.observableArrayList();"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "LeeYiyuan"
        },
        "content": "    private final ObservableList\u003cRepeater\u003e internalUnmodifiableList \u003d"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "LeeYiyuan"
        },
        "content": "            FXCollections.unmodifiableObservableList(internalList);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "LeeYiyuan"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "LeeYiyuan"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "LeeYiyuan"
        },
        "content": "     * Returns true if the list contains an equivalent repeater as the given argument."
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "LeeYiyuan"
        },
        "content": "     */"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "LeeYiyuan"
        },
        "content": "    public boolean contains(Repeater toCheck) {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "LeeYiyuan"
        },
        "content": "        requireNonNull(toCheck);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "LeeYiyuan"
        },
        "content": "        return internalList.stream().anyMatch(toCheck::isSameRepeater);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "LeeYiyuan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "LeeYiyuan"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "LeeYiyuan"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "LeeYiyuan"
        },
        "content": "     * Adds a repeater to the list."
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "LeeYiyuan"
        },
        "content": "     * The repeater must not already exist in the list."
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "LeeYiyuan"
        },
        "content": "     */"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "LeeYiyuan"
        },
        "content": "    public void add(Repeater toAdd) {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "LeeYiyuan"
        },
        "content": "        requireNonNull(toAdd);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "LeeYiyuan"
        },
        "content": "        if (contains(toAdd)) {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "LeeYiyuan"
        },
        "content": "            throw new DuplicateRepeaterException();"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "LeeYiyuan"
        },
        "content": "        }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "LeeYiyuan"
        },
        "content": "        internalList.add(toAdd);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "LeeYiyuan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "LeeYiyuan"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "LeeYiyuan"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "LeeYiyuan"
        },
        "content": "     * Replaces the repeater {@code target} in the list with {@code editedRepeater}."
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "LeeYiyuan"
        },
        "content": "     * {@code target} must exist in the list."
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "LeeYiyuan"
        },
        "content": "     * The repeater identity of {@code editedRepeater} must not be the same as another existing repeater in the list."
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "LeeYiyuan"
        },
        "content": "     */"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "LeeYiyuan"
        },
        "content": "    public void setRepeater(Repeater target, Repeater editedRepeater) {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "LeeYiyuan"
        },
        "content": "        requireAllNonNull(target, editedRepeater);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "LeeYiyuan"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "LeeYiyuan"
        },
        "content": "        int index \u003d internalList.indexOf(target);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "LeeYiyuan"
        },
        "content": "        if (index \u003d\u003d -1) {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "LeeYiyuan"
        },
        "content": "            throw new RepeaterNotFoundException();"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "LeeYiyuan"
        },
        "content": "        }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "LeeYiyuan"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "LeeYiyuan"
        },
        "content": "        if (!target.isSameRepeater(editedRepeater) \u0026\u0026 contains(editedRepeater)) {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "LeeYiyuan"
        },
        "content": "            throw new DuplicateRepeaterException();"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "LeeYiyuan"
        },
        "content": "        }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "LeeYiyuan"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "LeeYiyuan"
        },
        "content": "        internalList.set(index, editedRepeater);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "LeeYiyuan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "LeeYiyuan"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "LeeYiyuan"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "LeeYiyuan"
        },
        "content": "     * Removes the equivalent repeater from the list."
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "LeeYiyuan"
        },
        "content": "     * The repeater must exist in the list."
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "LeeYiyuan"
        },
        "content": "     */"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "LeeYiyuan"
        },
        "content": "    public void remove(Repeater toRemove) {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "LeeYiyuan"
        },
        "content": "        requireNonNull(toRemove);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "LeeYiyuan"
        },
        "content": "        if (!internalList.remove(toRemove)) {"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "LeeYiyuan"
        },
        "content": "            throw new RepeaterNotFoundException();"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "LeeYiyuan"
        },
        "content": "        }"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "LeeYiyuan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "LeeYiyuan"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "LeeYiyuan"
        },
        "content": "    public void setRepeaters(UniqueRepeaterList replacement) {"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "LeeYiyuan"
        },
        "content": "        requireNonNull(replacement);"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "LeeYiyuan"
        },
        "content": "        internalList.setAll(replacement.internalList);"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "LeeYiyuan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "LeeYiyuan"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "LeeYiyuan"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "LeeYiyuan"
        },
        "content": "     * Replaces the contents of this list with {@code repeaters}."
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "LeeYiyuan"
        },
        "content": "     * {@code repeaters} must not contain duplicate repeaters."
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "LeeYiyuan"
        },
        "content": "     */"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "LeeYiyuan"
        },
        "content": "    public void setRepeaters(List\u003cRepeater\u003e repeaters) {"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "LeeYiyuan"
        },
        "content": "        requireAllNonNull(repeaters);"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "LeeYiyuan"
        },
        "content": "        if (!repeatersAreUnique(repeaters)) {"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "LeeYiyuan"
        },
        "content": "            throw new DuplicateRepeaterException();"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "LeeYiyuan"
        },
        "content": "        }"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "LeeYiyuan"
        },
        "content": ""
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "LeeYiyuan"
        },
        "content": "        internalList.setAll(repeaters);"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "LeeYiyuan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "LeeYiyuan"
        },
        "content": ""
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "LeeYiyuan"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "LeeYiyuan"
        },
        "content": "     * Returns the backing list as an unmodifiable {@code ObservableList}."
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "LeeYiyuan"
        },
        "content": "     */"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "LeeYiyuan"
        },
        "content": "    public ObservableList\u003cRepeater\u003e asUnmodifiableObservableList() {"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "LeeYiyuan"
        },
        "content": "        return internalUnmodifiableList;"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "LeeYiyuan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "LeeYiyuan"
        },
        "content": ""
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "LeeYiyuan"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "LeeYiyuan"
        },
        "content": "    public Iterator\u003cRepeater\u003e iterator() {"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "LeeYiyuan"
        },
        "content": "        return internalList.iterator();"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "LeeYiyuan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "LeeYiyuan"
        },
        "content": ""
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "LeeYiyuan"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "LeeYiyuan"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "LeeYiyuan"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "LeeYiyuan"
        },
        "content": "                || (other instanceof UniqueRepeaterList // instanceof handles nulls"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "LeeYiyuan"
        },
        "content": "                        \u0026\u0026 internalList.equals(((UniqueRepeaterList) other).internalList));"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "LeeYiyuan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "LeeYiyuan"
        },
        "content": ""
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "LeeYiyuan"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "LeeYiyuan"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "LeeYiyuan"
        },
        "content": "        return internalList.hashCode();"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "LeeYiyuan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "LeeYiyuan"
        },
        "content": ""
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "LeeYiyuan"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "LeeYiyuan"
        },
        "content": "     * Returns true if {@code repeaters} contains only unique repeaters."
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "LeeYiyuan"
        },
        "content": "     */"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "LeeYiyuan"
        },
        "content": "    private boolean repeatersAreUnique(List\u003cRepeater\u003e repeaters) {"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "LeeYiyuan"
        },
        "content": "        for (int i \u003d 0; i \u003c repeaters.size() - 1; i++) {"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "LeeYiyuan"
        },
        "content": "            for (int j \u003d i + 1; j \u003c repeaters.size(); j++) {"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "LeeYiyuan"
        },
        "content": "                if (repeaters.get(i).isSameRepeater(repeaters.get(j))) {"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "LeeYiyuan"
        },
        "content": "                    return false;"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "LeeYiyuan"
        },
        "content": "                }"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "LeeYiyuan"
        },
        "content": "            }"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "LeeYiyuan"
        },
        "content": "        }"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "LeeYiyuan"
        },
        "content": "        return true;"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "LeeYiyuan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "LeeYiyuan"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "LeeYiyuan": 137
    }
  },
  {
    "path": "src/main/java/seedu/ichifund/model/repeater/exceptions/DuplicateRepeaterException.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "LeeYiyuan"
        },
        "content": "package seedu.ichifund.model.repeater.exceptions;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "LeeYiyuan"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "LeeYiyuan"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "LeeYiyuan"
        },
        "content": " * Signals that the operation will result in duplicate Repeaters (Repeaters are considered duplicates if they have the"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "LeeYiyuan"
        },
        "content": " * same identity)."
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "LeeYiyuan"
        },
        "content": " */"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "LeeYiyuan"
        },
        "content": "public class DuplicateRepeaterException extends RuntimeException {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "LeeYiyuan"
        },
        "content": "    public DuplicateRepeaterException() {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "LeeYiyuan"
        },
        "content": "        super(\"Operation would result in duplicate repeaters\");"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "LeeYiyuan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "LeeYiyuan"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "LeeYiyuan": 11
    }
  },
  {
    "path": "src/main/java/seedu/ichifund/model/repeater/exceptions/RepeaterNotFoundException.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "LeeYiyuan"
        },
        "content": "package seedu.ichifund.model.repeater.exceptions;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "LeeYiyuan"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "LeeYiyuan"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "LeeYiyuan"
        },
        "content": " * Signals that the operation is unable to find the specified repeater."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "LeeYiyuan"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "LeeYiyuan"
        },
        "content": "public class RepeaterNotFoundException extends RuntimeException {}"
      }
    ],
    "authorContributionMap": {
      "LeeYiyuan": 6
    }
  },
  {
    "path": "src/main/java/seedu/ichifund/model/tag/Tag.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "nexolute"
        },
        "content": "package seedu.ichifund.model.tag;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "nexolute"
        },
        "content": "import static seedu.ichifund.commons.util.AppUtil.checkArgument;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "nexolute"
        },
        "content": " * Represents a Tag in the fund book."
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": " * Guarantees: immutable; name is valid as declared in {@link #isValidTagName(String)}"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "public class Tag {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_CONSTRAINTS \u003d \"Tags names should be alphanumeric\";"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String VALIDATION_REGEX \u003d \"\\\\p{Alnum}+\";"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    public final String tagName;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "     * Constructs a {@code Tag}."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param tagName A valid tag name."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    public Tag(String tagName) {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(tagName);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "        checkArgument(isValidTagName(tagName), MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "        this.tagName \u003d tagName;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns true if a given string is a valid tag name."
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    public static boolean isValidTagName(String test) {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        return test.matches(VALIDATION_REGEX);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "                || (other instanceof Tag // instanceof handles nulls"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "                \u0026\u0026 tagName.equals(((Tag) other).tagName)); // state check"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        return tagName.hashCode();"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "     * Format state as text for viewing."
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        return \u0027[\u0027 + tagName + \u0027]\u0027;"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "nexolute": 3,
      "-": 51
    }
  },
  {
    "path": "src/main/java/seedu/ichifund/model/transaction/Category.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "nexolute"
        },
        "content": "package seedu.ichifund.model.transaction;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "weiyang13"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "nexolute"
        },
        "content": "import static seedu.ichifund.commons.util.AppUtil.checkArgument;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "weiyang13"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "/**"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "weiyang13"
        },
        "content": " * Represents a Transaction\u0027s category in the transaction recorder."
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "weiyang13"
        },
        "content": " * Guarantees: immutable; is valid as declared in {@link #isValidCategory(String)}"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "weiyang13"
        },
        "content": " */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "public class Category implements Comparable\u003cCategory\u003e {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "weiyang13"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "    public static final String MESSAGE_CONSTRAINTS \u003d"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "            \"Categories should only contain alphanumeric characters and spaces, and it should not be blank\";"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "weiyang13"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "    /*"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "     * The first character of the address must not be a whitespace,"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "     * otherwise \" \" (a blank string) becomes a valid input."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "     */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "    public static final String VALIDATION_REGEX \u003d \"[\\\\p{Alnum}][\\\\p{Alnum} ]*\";"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "    public static final Category CATEGORY_ALL \u003d new Category();"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "    public static final Category CATEGORY_DEFAULT \u003d new Category(\"Uncategorised\");"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "weiyang13"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "    public final String category;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "weiyang13"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "    private Category() {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "        this.category \u003d \"!all\";"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "weiyang13"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "     * Constructs a {@code Category}."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "     *"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "     * @param category A valid category."
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "     */"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "    public Category(String category) {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "        requireNonNull(category);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "        checkArgument(isValidCategory(category), MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "        this.category \u003d category;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "weiyang13"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "     * Returns true if a given string is a valid category."
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "     */"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "    public static boolean isValidCategory(String test) {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "        return test.matches(VALIDATION_REGEX);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "weiyang13"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "weiyang13"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "        return category;"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "    }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "weiyang13"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "                || (other instanceof Category // instanceof handles nulls"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "                \u0026\u0026 category.toLowerCase() // case-insensitive check"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "                .equals(((Category) other).category.toLowerCase()));"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "    }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "weiyang13"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "        return category.hashCode();"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "    }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "weiyang13"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "    public int compareTo(Category other) {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "        return toString().compareTo(other.toString());"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "    }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "}"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "weiyang13"
        },
        "content": ""
      }
    ],
    "authorContributionMap": {
      "nexolute": 2,
      "weiyang13": 69
    }
  },
  {
    "path": "src/main/java/seedu/ichifund/model/transaction/Transaction.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "package seedu.ichifund.model.transaction;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "weiyang13"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "nexolute"
        },
        "content": "import static seedu.ichifund.commons.util.CollectionUtil.requireAllNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "weiyang13"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "import java.util.Objects;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "weiyang13"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "import seedu.ichifund.model.Description;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "import seedu.ichifund.model.amount.Amount;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "import seedu.ichifund.model.date.Date;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "import seedu.ichifund.model.date.Day;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "import seedu.ichifund.model.date.Month;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "import seedu.ichifund.model.date.Year;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "LeeYiyuan"
        },
        "content": "import seedu.ichifund.model.repeater.RepeaterUniqueId;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "weiyang13"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "/**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "weiyang13"
        },
        "content": " * Represents a Transaction in IchiFund."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "weiyang13"
        },
        "content": " * Guarantees: details are present and not null, field values are validated, immutable."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "weiyang13"
        },
        "content": " */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "public class Transaction implements Comparable\u003cTransaction\u003e {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "    private final Description description;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "    private final Amount amount;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "    private final Category category;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "    private final Date date;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "    private final TransactionType transactionType;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "LeeYiyuan"
        },
        "content": "    private final RepeaterUniqueId repeaterUniqueId;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "weiyang13"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "     * Every field must be present and not null."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "     */"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "    public Transaction(Description description, Amount amount, Category category, Date date,"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "LeeYiyuan"
        },
        "content": "                       TransactionType transactionType, RepeaterUniqueId repeaterUniqueId) {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "        requireAllNonNull(description, amount, category);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "        this.amount \u003d amount;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "        this.description \u003d description;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "        this.category \u003d category;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "        this.date \u003d date;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "        this.transactionType \u003d transactionType;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "LeeYiyuan"
        },
        "content": "        this.repeaterUniqueId \u003d repeaterUniqueId;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "weiyang13"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "    public Description getDescription() {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "        return description;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "weiyang13"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "    public Amount getAmount() {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "        return amount;"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "weiyang13"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "    public Category getCategory() {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "        return category;"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "    }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "weiyang13"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "    public Date getDate() {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "        return date;"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "    }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "weiyang13"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "    public Day getDay() {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "        return date.getDay();"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "    }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "weiyang13"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "    public Month getMonth() {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "        return date.getMonth();"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "    }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "weiyang13"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "    public Year getYear() {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "        return date.getYear();"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "    }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "weiyang13"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "    public TransactionType getTransactionType() {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "        return transactionType;"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "    }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "weiyang13"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "LeeYiyuan"
        },
        "content": "    public RepeaterUniqueId getRepeaterUniqueId() {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "LeeYiyuan"
        },
        "content": "        return repeaterUniqueId;"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "LeeYiyuan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "LeeYiyuan"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "    public boolean isExpenditure() {"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "        return transactionType.isExpenditure();"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "    }"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "weiyang13"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "    public boolean isIn(Month month) {"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "        return getDate().isIn(month);"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "    }"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "weiyang13"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "    public boolean isIn(Year year) {"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "        return getDate().isIn(year);"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "    }"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "weiyang13"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "    public boolean isIn(Category category) {"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "        return getCategory().equals(category);"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "    }"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "weiyang13"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "LeeYiyuan"
        },
        "content": "    public boolean isFromRepeater() {"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "LeeYiyuan"
        },
        "content": "        return !repeaterUniqueId.isEmpty();"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "LeeYiyuan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "LeeYiyuan"
        },
        "content": ""
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "        if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "        }"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "weiyang13"
        },
        "content": ""
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "        if (!(other instanceof Transaction)) {"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "        }"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "weiyang13"
        },
        "content": ""
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "        Transaction otherTransaction \u003d (Transaction) other;"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "        return otherTransaction.getDescription().equals(getDescription())"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "                \u0026\u0026 otherTransaction.getAmount().equals(getAmount())"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "                \u0026\u0026 otherTransaction.getCategory().equals(getCategory())"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "                \u0026\u0026 otherTransaction.getDate().equals(getDate())"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "LeeYiyuan"
        },
        "content": "                \u0026\u0026 otherTransaction.getTransactionType().equals(getTransactionType())"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "LeeYiyuan"
        },
        "content": "                \u0026\u0026 otherTransaction.getRepeaterUniqueId().equals(getRepeaterUniqueId());"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "    }"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "weiyang13"
        },
        "content": ""
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "        // use this method for custom fields hashing instead of implementing your own"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "LeeYiyuan"
        },
        "content": "        return Objects.hash(description, amount, category, date, transactionType, repeaterUniqueId);"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "    }"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "weiyang13"
        },
        "content": ""
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "        final StringBuilder builder \u003d new StringBuilder();"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "        builder.append(getDescription())"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "                .append(\" Amount: \")"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "                .append(getAmount())"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "                .append(\" Category: \")"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "                .append(getCategory())"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "                .append(\" Date: \")"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "                .append(getDate())"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "                .append(\" Transaction Type: \")"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "LeeYiyuan"
        },
        "content": "                .append(getTransactionType())"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "LeeYiyuan"
        },
        "content": "                .append(\" Repeater Unique Id: \")"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "LeeYiyuan"
        },
        "content": "                .append(getRepeaterUniqueId());"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "        return builder.toString();"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "    }"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "weiyang13"
        },
        "content": ""
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "    public int compareTo(Transaction other) {"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "        int dateComparison \u003d getDate().compareTo(other.getDate());"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "        int categoryComparison \u003d getCategory().compareTo(other.getCategory());"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "        if (dateComparison !\u003d 0) {"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "            return dateComparison;"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "        } else if (categoryComparison !\u003d 0) {"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "            return categoryComparison;"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "            return getDescription().compareTo(other.getDescription());"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "        }"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "    }"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "LeeYiyuan": 18,
      "nexolute": 1,
      "weiyang13": 132
    }
  },
  {
    "path": "src/main/java/seedu/ichifund/model/transaction/TransactionCategoryPredicate.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "package seedu.ichifund.model.transaction;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "weiyang13"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "import java.util.function.Predicate;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "weiyang13"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "/**"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "weiyang13"
        },
        "content": " * Tests that a {@code Transaction}\u0027s {@code Category} matches the given category."
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "weiyang13"
        },
        "content": " */"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "public class TransactionCategoryPredicate implements Predicate\u003cTransaction\u003e {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "weiyang13"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "    private final Category category;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "weiyang13"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "    public TransactionCategoryPredicate(Category category) {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "        this.category \u003d category;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "    }"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "weiyang13"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "    public boolean test(Transaction transaction) {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "        return transaction.isIn(category);"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "    }"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "weiyang13": 20
    }
  },
  {
    "path": "src/main/java/seedu/ichifund/model/transaction/TransactionDatePredicate.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "package seedu.ichifund.model.transaction;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "weiyang13"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "import java.util.function.Predicate;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "weiyang13"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "import seedu.ichifund.model.date.Month;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "import seedu.ichifund.model.date.Year;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "weiyang13"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "/**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "weiyang13"
        },
        "content": " * Tests that a {@code Transaction}\u0027s {@code Date} matches the given month and year."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "weiyang13"
        },
        "content": " */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "public class TransactionDatePredicate implements Predicate\u003cTransaction\u003e {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "    private final Month month;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "    private final Year year;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "weiyang13"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "    public TransactionDatePredicate(Month month, Year year) {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "        this.month \u003d month;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "        this.year \u003d year;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "    }"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "weiyang13"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "    public boolean test(Transaction transaction) {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "        return transaction.isIn(month) \u0026\u0026 transaction.isIn(year);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "    }"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "weiyang13"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "                || (other instanceof TransactionDatePredicate // instanceof handles nulls"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "                \u0026\u0026 month.equals(((TransactionDatePredicate) other).month)"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "                \u0026\u0026 year.equals(((TransactionDatePredicate) other).year)); // state check"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "weiyang13": 32
    }
  },
  {
    "path": "src/main/java/seedu/ichifund/model/transaction/TransactionList.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "package seedu.ichifund.model.transaction;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "weiyang13"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "import static seedu.ichifund.commons.util.CollectionUtil.requireAllNonNull;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "weiyang13"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "import java.util.Comparator;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "import java.util.Iterator;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "weiyang13"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "import javafx.collections.FXCollections;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "import seedu.ichifund.model.date.Date;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "import seedu.ichifund.model.transaction.exceptions.TransactionNotFoundException;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "weiyang13"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "/**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "weiyang13"
        },
        "content": " * A list of transactions that does not allow nulls."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "weiyang13"
        },
        "content": " *"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "weiyang13"
        },
        "content": " * Supports a minimal set of list operations."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "weiyang13"
        },
        "content": " *"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "weiyang13"
        },
        "content": " */"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "public class TransactionList implements Iterable\u003cTransaction\u003e {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "weiyang13"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "    private final ObservableList\u003cTransaction\u003e internalList \u003d FXCollections.observableArrayList();"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "    private final ObservableList\u003cTransaction\u003e internalUnmodifiableList \u003d"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "            FXCollections.unmodifiableObservableList(internalList);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "weiyang13"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "     * Adds a transaction to the list and sorts the list."
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "     */"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "    public void add(Transaction toAdd) {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "        requireNonNull(toAdd);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "        internalList.add(toAdd);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "        internalList.sort(Comparator.naturalOrder());"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "    }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "weiyang13"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "     * Replaces the transaction {@code target} in the list with {@code editedTransaction}."
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "     * {@code target} must exist in the list."
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "     */"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "    public void setTransaction(Transaction target, Transaction editedTransaction) {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "        requireAllNonNull(target, editedTransaction);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "weiyang13"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "        int index \u003d internalList.indexOf(target);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "        if (index \u003d\u003d -1) {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "            throw new TransactionNotFoundException();"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "        }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "weiyang13"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "        internalList.set(index, editedTransaction);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "        internalList.sort(Comparator.naturalOrder());"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "    }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "weiyang13"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "     * Removes the equivalent transaction from the list."
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "     * The transaction must exist in the list."
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "     */"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "    public void remove(Transaction toRemove) {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "        requireNonNull(toRemove);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "        if (!internalList.remove(toRemove)) {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "            throw new TransactionNotFoundException();"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "        }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "    }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "weiyang13"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "    public void setTransactions(TransactionList replacement) {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "        requireNonNull(replacement);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "        internalList.setAll(replacement.internalList);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "        internalList.sort(Comparator.naturalOrder());"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "    }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "weiyang13"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "     * Replaces the contents of this list with {@code transactions}."
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "     */"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "    public void setTransactions(List\u003cTransaction\u003e transactions) {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "        requireAllNonNull(transactions);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "        internalList.setAll(transactions);"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "        internalList.sort(Comparator.naturalOrder());"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "    }"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "weiyang13"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "     * Returns the backing list as an unmodifiable {@code ObservableList}."
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "     */"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "    public ObservableList\u003cTransaction\u003e asUnmodifiableObservableList() {"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "        return internalUnmodifiableList;"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "    }"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "weiyang13"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "    public Iterator\u003cTransaction\u003e iterator() {"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "        return internalList.iterator();"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "    }"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "weiyang13"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "    /** Returns the latest transaction earlier than the current time */"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "    public Optional\u003cTransaction\u003e getLatestTransaction() {"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "        internalList.sort(Comparator.naturalOrder());"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "weiyang13"
        },
        "content": ""
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "        // Searches for first transaction that is earlier than current time"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "        for (Transaction transaction : internalList) {"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "            if (transaction.getDate().compareTo(Date.getCurrent()) \u003e\u003d 0) {"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "                return Optional.of(transaction);"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "            }"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "        }"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "weiyang13"
        },
        "content": ""
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "        return Optional.empty();"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "    }"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "weiyang13"
        },
        "content": ""
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "                || (other instanceof TransactionList // instanceof handles nulls"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "                \u0026\u0026 internalList.equals(((TransactionList) other).internalList));"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "    }"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "weiyang13"
        },
        "content": ""
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "        return internalList.hashCode();"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "    }"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "}"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "weiyang13"
        },
        "content": ""
      }
    ],
    "authorContributionMap": {
      "weiyang13": 117
    }
  },
  {
    "path": "src/main/java/seedu/ichifund/model/transaction/TransactionType.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "package seedu.ichifund.model.transaction;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "weiyang13"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "import static seedu.ichifund.commons.util.AppUtil.checkArgument;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "weiyang13"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "/**"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "weiyang13"
        },
        "content": " * Represents a Transaction\u0027s type in the transaction recorder."
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "weiyang13"
        },
        "content": " * Guarantees: immutable; is valid as declared in {@link #isValidTransactionType(String)}"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "weiyang13"
        },
        "content": " */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "public class TransactionType {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "weiyang13"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "    public static final String MESSAGE_CONSTRAINTS \u003d"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "            \"TransactionType can only be \u0027in\u0027 or \u0027exp\u0027\";"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "weiyang13"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "    /*"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "     * The first character of the address must not be a whitespace,"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "     * otherwise \" \" (a blank string) becomes a valid input."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "     */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "    public static final String VALIDATION_REGEX \u003d \"in|exp\";"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "    public static final TransactionType TRANSACTION_TYPE_ALL \u003d new TransactionType();"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "    public static final TransactionType TRANSACTION_TYPE_DEFAULT \u003d new TransactionType(\"exp\");"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "weiyang13"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "    public final String transactionType;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "weiyang13"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "    private TransactionType() {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "        this.transactionType \u003d \"!all\";"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "weiyang13"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "     * Constructs a {@code Category}."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "     *"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "     * @param transactionType A valid transaction type."
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "     */"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "    public TransactionType(String transactionType) {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "        requireNonNull(transactionType);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "        checkArgument(isValidTransactionType(transactionType), MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "        this.transactionType \u003d transactionType;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "weiyang13"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "     * Returns true if a given string is a valid category."
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "     */"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "    public static boolean isValidTransactionType(String test) {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "        return test.matches(VALIDATION_REGEX);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "weiyang13"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "    public boolean isExpenditure() {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "        return transactionType.equals(\"exp\");"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "    }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "weiyang13"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "        return transactionType;"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "    }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "weiyang13"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "                || (other instanceof TransactionType // instanceof handles nulls"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "                \u0026\u0026 transactionType.equals(((TransactionType) other).transactionType)); // state check"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "    }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "weiyang13"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "        return transactionType.hashCode();"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "    }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "weiyang13"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "     * Returns an extended {@code String} for the {@code TransactionType}."
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "     */"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "    public String toExtendedString() {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "        switch(transactionType) {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "        case \"exp\":"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "            return \"Expenditure\";"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "        case \"in\":"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "            return \"Income\";"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "        default:"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "            return \"!all\";"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "        }"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "    }"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "}"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "weiyang13"
        },
        "content": ""
      }
    ],
    "authorContributionMap": {
      "weiyang13": 82
    }
  },
  {
    "path": "src/main/java/seedu/ichifund/model/transaction/TransactionTypePredicate.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "package seedu.ichifund.model.transaction;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "weiyang13"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "import java.util.function.Predicate;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "weiyang13"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "/**"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "weiyang13"
        },
        "content": " * Tests that a {@code Transaction}\u0027s {@code TransactionType} matches the given transaction type."
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "weiyang13"
        },
        "content": " */"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "public class TransactionTypePredicate implements Predicate\u003cTransaction\u003e {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "    private final TransactionType transactionType;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "weiyang13"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "    public TransactionTypePredicate(TransactionType transactionType) {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "        this.transactionType \u003d transactionType;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "    }"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "weiyang13"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "    public boolean test(Transaction transaction) {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "        return transaction.getTransactionType().equals(transactionType);"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "    }"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "weiyang13": 19
    }
  },
  {
    "path": "src/main/java/seedu/ichifund/model/transaction/exceptions/TransactionNotFoundException.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "package seedu.ichifund.model.transaction.exceptions;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "weiyang13"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "weiyang13"
        },
        "content": " * Signals that the operation is unable to find the specified person."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "weiyang13"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "public class TransactionNotFoundException extends RuntimeException {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "weiyang13": 7
    }
  },
  {
    "path": "src/main/java/seedu/ichifund/model/util/SampleDataUtil.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "nexolute"
        },
        "content": "package seedu.ichifund.model.util;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.stream.Collectors;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "nexolute"
        },
        "content": "import seedu.ichifund.model.FundBook;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "nexolute"
        },
        "content": "import seedu.ichifund.model.ReadOnlyFundBook;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "nexolute"
        },
        "content": "import seedu.ichifund.model.person.Address;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "nexolute"
        },
        "content": "import seedu.ichifund.model.person.Email;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "nexolute"
        },
        "content": "import seedu.ichifund.model.person.Name;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "nexolute"
        },
        "content": "import seedu.ichifund.model.person.Person;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "nexolute"
        },
        "content": "import seedu.ichifund.model.person.Phone;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "nexolute"
        },
        "content": "import seedu.ichifund.model.tag.Tag;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "nexolute"
        },
        "content": " * Contains utility methods for populating {@code FundBook} with sample data."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "public class SampleDataUtil {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    public static Person[] getSamplePersons() {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "        return new Person[] {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "            new Person(new Name(\"Alex Yeoh\"), new Phone(\"87438807\"), new Email(\"alexyeoh@example.com\"),"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "                new Address(\"Blk 30 Geylang Street 29, #06-40\"),"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "                getTagSet(\"friends\")),"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "            new Person(new Name(\"Bernice Yu\"), new Phone(\"99272758\"), new Email(\"berniceyu@example.com\"),"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "                new Address(\"Blk 30 Lorong 3 Serangoon Gardens, #07-18\"),"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "                getTagSet(\"colleagues\", \"friends\")),"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "            new Person(new Name(\"Charlotte Oliveiro\"), new Phone(\"93210283\"), new Email(\"charlotte@example.com\"),"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "                new Address(\"Blk 11 Ang Mo Kio Street 74, #11-04\"),"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "                getTagSet(\"neighbours\")),"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "            new Person(new Name(\"David Li\"), new Phone(\"91031282\"), new Email(\"lidavid@example.com\"),"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "                new Address(\"Blk 436 Serangoon Gardens Street 26, #16-43\"),"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "                getTagSet(\"family\")),"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "            new Person(new Name(\"Irfan Ibrahim\"), new Phone(\"92492021\"), new Email(\"irfan@example.com\"),"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "                new Address(\"Blk 47 Tampines Street 20, #17-35\"),"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "                getTagSet(\"classmates\")),"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "            new Person(new Name(\"Roy Balakrishnan\"), new Phone(\"92624417\"), new Email(\"royb@example.com\"),"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "                new Address(\"Blk 45 Aljunied Street 85, #11-31\"),"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "                getTagSet(\"colleagues\"))"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "        };"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "nexolute"
        },
        "content": "    public static ReadOnlyFundBook getSampleFundBook() {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "nexolute"
        },
        "content": "        FundBook sampleAb \u003d new FundBook();"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        for (Person samplePerson : getSamplePersons()) {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "            sampleAb.addPerson(samplePerson);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        return sampleAb;"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns a tag set containing the list of strings given."
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    public static Set\u003cTag\u003e getTagSet(String... strings) {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "        return Arrays.stream(strings)"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "                .map(Tag::new)"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "                .collect(Collectors.toSet());"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "nexolute": 12,
      "-": 48
    }
  },
  {
    "path": "src/main/java/seedu/ichifund/storage/FundBookStorage.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "nexolute"
        },
        "content": "package seedu.ichifund.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "nexolute"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "nexolute"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "nexolute"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "nexolute"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "nexolute"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "nexolute"
        },
        "content": "import seedu.ichifund.commons.exceptions.DataConversionException;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "nexolute"
        },
        "content": "import seedu.ichifund.model.FundBook;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "nexolute"
        },
        "content": "import seedu.ichifund.model.ReadOnlyFundBook;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "nexolute"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "nexolute"
        },
        "content": "/**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "nexolute"
        },
        "content": " * Represents a storage for {@link FundBook}."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "nexolute"
        },
        "content": " */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "nexolute"
        },
        "content": "public interface FundBookStorage {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "nexolute"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "nexolute"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "nexolute"
        },
        "content": "     * Returns the file path of the data file."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "nexolute"
        },
        "content": "     */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "nexolute"
        },
        "content": "    Path getFundBookFilePath();"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "nexolute"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "nexolute"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "nexolute"
        },
        "content": "     * Returns AddressBook data as a {@link ReadOnlyFundBook}."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "nexolute"
        },
        "content": "     *   Returns {@code Optional.empty()} if storage file is not found."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "nexolute"
        },
        "content": "     * @throws DataConversionException if the data in storage is not in the expected format."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "nexolute"
        },
        "content": "     * @throws IOException if there was any problem when reading from the storage."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "nexolute"
        },
        "content": "     */"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "nexolute"
        },
        "content": "    Optional\u003cReadOnlyFundBook\u003e readFundBook() throws DataConversionException, IOException;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "nexolute"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "nexolute"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "nexolute"
        },
        "content": "     * @see #getFundBookFilePath()"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "nexolute"
        },
        "content": "     */"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "nexolute"
        },
        "content": "    Optional\u003cReadOnlyFundBook\u003e readFundBook(Path filePath) throws DataConversionException, IOException;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "nexolute"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "nexolute"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "nexolute"
        },
        "content": "     * Saves the given {@link ReadOnlyFundBook} to the storage."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "nexolute"
        },
        "content": "     * @param addressBook cannot be null."
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "nexolute"
        },
        "content": "     * @throws IOException if there was any problem writing to the file."
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "nexolute"
        },
        "content": "     */"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "nexolute"
        },
        "content": "    void saveFundBook(ReadOnlyFundBook addressBook) throws IOException;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "nexolute"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "nexolute"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "nexolute"
        },
        "content": "     * @see #saveFundBook(ReadOnlyFundBook)"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "nexolute"
        },
        "content": "     */"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "nexolute"
        },
        "content": "    void saveFundBook(ReadOnlyFundBook addressBook, Path filePath) throws IOException;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "nexolute"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "nexolute"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "nexolute": 46
    }
  },
  {
    "path": "src/main/java/seedu/ichifund/storage/JsonAdaptedBudget.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "nexolute"
        },
        "content": "package seedu.ichifund.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "nexolute"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "nexolute"
        },
        "content": "import com.fasterxml.jackson.annotation.JsonCreator;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "nexolute"
        },
        "content": "import com.fasterxml.jackson.annotation.JsonProperty;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "nexolute"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "nexolute"
        },
        "content": "import seedu.ichifund.commons.exceptions.IllegalValueException;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "import seedu.ichifund.model.Description;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "import seedu.ichifund.model.amount.Amount;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "nexolute"
        },
        "content": "import seedu.ichifund.model.budget.Budget;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "nexolute"
        },
        "content": "import seedu.ichifund.model.date.Month;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "nexolute"
        },
        "content": "import seedu.ichifund.model.date.Year;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "nexolute"
        },
        "content": "import seedu.ichifund.model.transaction.Category;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "nexolute"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "nexolute"
        },
        "content": "/**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "nexolute"
        },
        "content": " * Jackson-friendly version of {@link Budget}."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "nexolute"
        },
        "content": " */"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "nexolute"
        },
        "content": "class JsonAdaptedBudget {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "nexolute"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "nexolute"
        },
        "content": "    public static final String MISSING_FIELD_MESSAGE_FORMAT \u003d \"Budget\u0027s %s field is missing!\";"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "nexolute"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "nexolute"
        },
        "content": "    private final String description;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "nexolute"
        },
        "content": "    private final String amount;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "nexolute"
        },
        "content": "    private final String month;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "nexolute"
        },
        "content": "    private final String year;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "nexolute"
        },
        "content": "    private final String category;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "nexolute"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "nexolute"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "nexolute"
        },
        "content": "     * Constructs a {@code JsonAdaptedBudget} with the given budget details."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "nexolute"
        },
        "content": "     */"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "nexolute"
        },
        "content": "    @JsonCreator"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "nexolute"
        },
        "content": "    public JsonAdaptedBudget(@JsonProperty(\"description\") String description,"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "nexolute"
        },
        "content": "                             @JsonProperty(\"amount\") String amount,"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "nexolute"
        },
        "content": "                             @JsonProperty(\"month\") String month,"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "nexolute"
        },
        "content": "                             @JsonProperty(\"year\") String year,"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "nexolute"
        },
        "content": "                             @JsonProperty(\"category\") String category) {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "nexolute"
        },
        "content": "        this.description \u003d description;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "nexolute"
        },
        "content": "        this.amount \u003d amount;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "nexolute"
        },
        "content": "        this.month \u003d month;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "nexolute"
        },
        "content": "        this.year \u003d year;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "nexolute"
        },
        "content": "        this.category \u003d category;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "nexolute"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "nexolute"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "nexolute"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "nexolute"
        },
        "content": "     * Converts a given {@code Budget} into this class for Jackson use."
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "nexolute"
        },
        "content": "     */"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "nexolute"
        },
        "content": "    public JsonAdaptedBudget(Budget source) {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "nexolute"
        },
        "content": "        description \u003d source.getDescription().toString();"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "        amount \u003d source.getAmount().toString();"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "nexolute"
        },
        "content": "        month \u003d source.getMonth() !\u003d null ? source.getMonth().toString() : null;"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "nexolute"
        },
        "content": "        year \u003d source.getYear() !\u003d null ? source.getYear().toString() : null;"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "nexolute"
        },
        "content": "        category \u003d source.getCategory() !\u003d null ? source.getCategory().toString() : null;"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "nexolute"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "nexolute"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "nexolute"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "nexolute"
        },
        "content": "     * Converts this Jackson-friendly adapted budget object into the model\u0027s {@code Budget} object."
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "nexolute"
        },
        "content": "     *"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "nexolute"
        },
        "content": "     * @throws IllegalValueException if there were any data constraints violated in the adapted budget."
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "nexolute"
        },
        "content": "     */"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "nexolute"
        },
        "content": "    public Budget toModelType() throws IllegalValueException {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "nexolute"
        },
        "content": "        if (description \u003d\u003d null) {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "nexolute"
        },
        "content": "            throw new IllegalValueException(String.format(MISSING_FIELD_MESSAGE_FORMAT,"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "nexolute"
        },
        "content": "                    Description.class.getSimpleName()));"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "nexolute"
        },
        "content": "        }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "nexolute"
        },
        "content": "        if (!Description.isValidDescription(description)) {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "nexolute"
        },
        "content": "            throw new IllegalValueException(Description.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "nexolute"
        },
        "content": "        }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "nexolute"
        },
        "content": "        final Description modelDescription \u003d new Description(description);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "nexolute"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "nexolute"
        },
        "content": "        if (amount \u003d\u003d null) {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "nexolute"
        },
        "content": "            throw new IllegalValueException(String.format(MISSING_FIELD_MESSAGE_FORMAT,"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "nexolute"
        },
        "content": "                    Amount.class.getSimpleName()));"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "nexolute"
        },
        "content": "        }"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "nexolute"
        },
        "content": "        if (!Amount.isValidAmount(amount)) {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "nexolute"
        },
        "content": "            throw new IllegalValueException(Amount.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "        } else if (Amount.isNegative(amount)) {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "            throw new IllegalValueException(Amount.NEGATIVE_AMOUNT_CONSTRAINT);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "nexolute"
        },
        "content": "        }"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "nexolute"
        },
        "content": "        final Amount modelAmount \u003d new Amount(amount);"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "nexolute"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "nexolute"
        },
        "content": "        final Month modelMonth \u003d month !\u003d null ? new Month(month) : null;"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "nexolute"
        },
        "content": "        final Year modelYear \u003d year !\u003d null ? new Year(year) : null;"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "nexolute"
        },
        "content": "        final Category modelCategory \u003d category !\u003d null ? new Category(category) : null;"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "nexolute"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "nexolute"
        },
        "content": "        return new Budget(modelDescription, modelAmount, modelMonth, modelYear, modelCategory);"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "nexolute"
        },
        "content": "    }"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "nexolute"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "nexolute"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "nexolute": 82,
      "weiyang13": 5
    }
  },
  {
    "path": "src/main/java/seedu/ichifund/storage/JsonAdaptedDate.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "package seedu.ichifund.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "weiyang13"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "import com.fasterxml.jackson.annotation.JsonCreator;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "import com.fasterxml.jackson.annotation.JsonProperty;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "weiyang13"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "import seedu.ichifund.commons.exceptions.IllegalValueException;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "import seedu.ichifund.model.date.Date;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "import seedu.ichifund.model.date.Day;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "import seedu.ichifund.model.date.Month;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "import seedu.ichifund.model.date.Year;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "weiyang13"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "/**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "weiyang13"
        },
        "content": " * Jackson-friendly version of {@link Date}."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "weiyang13"
        },
        "content": " */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "public class JsonAdaptedDate {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "    public static final String MISSING_FIELD_MESSAGE_FORMAT \u003d \"Date\u0027s %s field is missing!\";"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "weiyang13"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "    private final String day;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "    private final String month;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "    private final String year;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "weiyang13"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "     * Constructs a {@code JsonAdaptedDate} with the given date details."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "     */"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "    @JsonCreator"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "    public JsonAdaptedDate(@JsonProperty(\"day\") String day, @JsonProperty(\"month\") String month,"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "                           @JsonProperty(\"year\") String year) {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "        this.day \u003d day;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "        this.month \u003d month;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "        this.year \u003d year;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "weiyang13"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "     * Converts a given {@code Date} into this class for Jackson use."
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "     */"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "    public JsonAdaptedDate(Date source) {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "        day \u003d source.getDay().toString();"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "        month \u003d source.getMonth().toString();"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "        year \u003d source.getYear().toString();"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "weiyang13"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "     * Converts this Jackson-friendly adapted date object into the model\u0027s {@code Date} object."
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "     *"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "     * @throws IllegalValueException if there were any data constraints violated in the adapted date."
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "     */"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "    public Date toModelType() throws IllegalValueException {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "        if (day \u003d\u003d null) {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "            throw new IllegalValueException(String.format(MISSING_FIELD_MESSAGE_FORMAT, Day.class.getSimpleName()));"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "        }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "        if (!Day.isValidDay(day)) {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "            throw new IllegalValueException(Day.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "        }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "        final Day modelDay \u003d new Day(day);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "weiyang13"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "        if (month \u003d\u003d null) {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "            throw new IllegalValueException(String.format(MISSING_FIELD_MESSAGE_FORMAT, Month.class.getSimpleName()));"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "        }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "        if (!Month.isValidMonth(month)) {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "            throw new IllegalValueException(Month.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "        }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "        final Month modelMonth \u003d new Month(month);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "weiyang13"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "        if (year \u003d\u003d null) {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "            throw new IllegalValueException(String.format(MISSING_FIELD_MESSAGE_FORMAT, Year.class.getSimpleName()));"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "        }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "        if (!Year.isValidYear(year)) {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "            throw new IllegalValueException(Year.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "        }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "        final Year modelYear \u003d new Year(year);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "weiyang13"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "        if (!Date.isValidDate(modelDay, modelMonth, modelYear)) {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "            throw new IllegalValueException(Date.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "        }"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "weiyang13"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "        return new Date(modelDay, modelMonth, modelYear);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "    }"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "weiyang13": 78
    }
  },
  {
    "path": "src/main/java/seedu/ichifund/storage/JsonAdaptedPerson.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "nexolute"
        },
        "content": "package seedu.ichifund.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.HashSet;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.stream.Collectors;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import com.fasterxml.jackson.annotation.JsonCreator;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import com.fasterxml.jackson.annotation.JsonProperty;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "nexolute"
        },
        "content": "import seedu.ichifund.commons.exceptions.IllegalValueException;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "nexolute"
        },
        "content": "import seedu.ichifund.model.person.Address;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "nexolute"
        },
        "content": "import seedu.ichifund.model.person.Email;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "nexolute"
        },
        "content": "import seedu.ichifund.model.person.Name;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "nexolute"
        },
        "content": "import seedu.ichifund.model.person.Person;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "nexolute"
        },
        "content": "import seedu.ichifund.model.person.Phone;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "nexolute"
        },
        "content": "import seedu.ichifund.model.tag.Tag;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": " * Jackson-friendly version of {@link Person}."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "class JsonAdaptedPerson {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MISSING_FIELD_MESSAGE_FORMAT \u003d \"Person\u0027s %s field is missing!\";"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    private final String name;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    private final String phone;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    private final String email;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    private final String address;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    private final List\u003cJsonAdaptedTag\u003e tagged \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "     * Constructs a {@code JsonAdaptedPerson} with the given person details."
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    @JsonCreator"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    public JsonAdaptedPerson(@JsonProperty(\"name\") String name, @JsonProperty(\"phone\") String phone,"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "            @JsonProperty(\"email\") String email, @JsonProperty(\"address\") String address,"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "            @JsonProperty(\"tagged\") List\u003cJsonAdaptedTag\u003e tagged) {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "        this.name \u003d name;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "        this.phone \u003d phone;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "        this.email \u003d email;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        this.address \u003d address;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        if (tagged !\u003d null) {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "            this.tagged.addAll(tagged);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "     * Converts a given {@code Person} into this class for Jackson use."
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    public JsonAdaptedPerson(Person source) {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "        name \u003d source.getName().fullName;"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "        phone \u003d source.getPhone().value;"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "        email \u003d source.getEmail().value;"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "        address \u003d source.getAddress().value;"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "        tagged.addAll(source.getTags().stream()"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "                .map(JsonAdaptedTag::new)"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "                .collect(Collectors.toList()));"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "     * Converts this Jackson-friendly adapted person object into the model\u0027s {@code Person} object."
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws IllegalValueException if there were any data constraints violated in the adapted person."
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "    public Person toModelType() throws IllegalValueException {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "        final List\u003cTag\u003e personTags \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "        for (JsonAdaptedTag tag : tagged) {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "            personTags.add(tag.toModelType());"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "        if (name \u003d\u003d null) {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new IllegalValueException(String.format(MISSING_FIELD_MESSAGE_FORMAT, Name.class.getSimpleName()));"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!Name.isValidName(name)) {"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new IllegalValueException(Name.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "        final Name modelName \u003d new Name(name);"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "        if (phone \u003d\u003d null) {"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new IllegalValueException(String.format(MISSING_FIELD_MESSAGE_FORMAT, Phone.class.getSimpleName()));"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!Phone.isValidPhone(phone)) {"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new IllegalValueException(Phone.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "        final Phone modelPhone \u003d new Phone(phone);"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "        if (email \u003d\u003d null) {"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new IllegalValueException(String.format(MISSING_FIELD_MESSAGE_FORMAT, Email.class.getSimpleName()));"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!Email.isValidEmail(email)) {"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new IllegalValueException(Email.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "        final Email modelEmail \u003d new Email(email);"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "        if (address \u003d\u003d null) {"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new IllegalValueException(String.format(MISSING_FIELD_MESSAGE_FORMAT, Address.class.getSimpleName()));"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!Address.isValidAddress(address)) {"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new IllegalValueException(Address.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "        final Address modelAddress \u003d new Address(address);"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "        final Set\u003cTag\u003e modelTags \u003d new HashSet\u003c\u003e(personTags);"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "        return new Person(modelName, modelPhone, modelEmail, modelAddress, modelTags);"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "nexolute": 8,
      "-": 101
    }
  },
  {
    "path": "src/main/java/seedu/ichifund/storage/JsonAdaptedRepeater.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "LeeYiyuan"
        },
        "content": "package seedu.ichifund.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "LeeYiyuan"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "LeeYiyuan"
        },
        "content": "import com.fasterxml.jackson.annotation.JsonCreator;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "LeeYiyuan"
        },
        "content": "import com.fasterxml.jackson.annotation.JsonProperty;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "LeeYiyuan"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "LeeYiyuan"
        },
        "content": "import seedu.ichifund.commons.exceptions.IllegalValueException;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "import seedu.ichifund.model.Description;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "import seedu.ichifund.model.amount.Amount;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "LeeYiyuan"
        },
        "content": "import seedu.ichifund.model.date.Date;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "LeeYiyuan"
        },
        "content": "import seedu.ichifund.model.repeater.MonthOffset;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "LeeYiyuan"
        },
        "content": "import seedu.ichifund.model.repeater.Repeater;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "LeeYiyuan"
        },
        "content": "import seedu.ichifund.model.repeater.RepeaterUniqueId;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "LeeYiyuan"
        },
        "content": "import seedu.ichifund.model.transaction.Category;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "LeeYiyuan"
        },
        "content": "import seedu.ichifund.model.transaction.TransactionType;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "LeeYiyuan"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "LeeYiyuan"
        },
        "content": "/**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "LeeYiyuan"
        },
        "content": " * Jackson-friendly version of {@link Repeater}."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "LeeYiyuan"
        },
        "content": " */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "LeeYiyuan"
        },
        "content": "class JsonAdaptedRepeater {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "LeeYiyuan"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "LeeYiyuan"
        },
        "content": "    public static final String MISSING_FIELD_MESSAGE_FORMAT \u003d \"Repeater\u0027s %s field is missing!\";"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "LeeYiyuan"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "LeeYiyuan"
        },
        "content": "    private final String uniqueId;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "LeeYiyuan"
        },
        "content": "    private final String description;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "LeeYiyuan"
        },
        "content": "    private final String amount;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "LeeYiyuan"
        },
        "content": "    private final String category;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "LeeYiyuan"
        },
        "content": "    private final String transactionType;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "LeeYiyuan"
        },
        "content": "    private final String monthStartOffset;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "LeeYiyuan"
        },
        "content": "    private final String monthEndOffset;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "LeeYiyuan"
        },
        "content": "    private final JsonAdaptedDate startDate;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "LeeYiyuan"
        },
        "content": "    private final JsonAdaptedDate endDate;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "LeeYiyuan"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "LeeYiyuan"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "LeeYiyuan"
        },
        "content": "     * Constructs a {@code JsonAdaptedRepeater} with the given repeater details."
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "LeeYiyuan"
        },
        "content": "     */"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "LeeYiyuan"
        },
        "content": "    @JsonCreator"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "LeeYiyuan"
        },
        "content": "    public JsonAdaptedRepeater(@JsonProperty(\"uniqueId\") String uniqueId,"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "LeeYiyuan"
        },
        "content": "            @JsonProperty(\"description\") String description,"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "LeeYiyuan"
        },
        "content": "            @JsonProperty(\"amount\") String amount,"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "LeeYiyuan"
        },
        "content": "            @JsonProperty(\"category\") String category,"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "LeeYiyuan"
        },
        "content": "            @JsonProperty(\"transactionType\") String transactionType,"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "LeeYiyuan"
        },
        "content": "            @JsonProperty(\"monthStartOffset\") String monthStartOffset,"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "LeeYiyuan"
        },
        "content": "            @JsonProperty(\"monthEndOffset\") String monthEndOffset,"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "LeeYiyuan"
        },
        "content": "            @JsonProperty(\"startDate\") JsonAdaptedDate startDate,"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "LeeYiyuan"
        },
        "content": "            @JsonProperty(\"endDate\") JsonAdaptedDate endDate) {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "LeeYiyuan"
        },
        "content": "        this.uniqueId \u003d uniqueId;"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "LeeYiyuan"
        },
        "content": "        this.description \u003d description;"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "LeeYiyuan"
        },
        "content": "        this.amount \u003d amount;"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "LeeYiyuan"
        },
        "content": "        this.category \u003d category;"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "LeeYiyuan"
        },
        "content": "        this.transactionType \u003d transactionType;"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "LeeYiyuan"
        },
        "content": "        this.monthStartOffset \u003d monthStartOffset;"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "LeeYiyuan"
        },
        "content": "        this.monthEndOffset \u003d monthEndOffset;"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "LeeYiyuan"
        },
        "content": "        this.startDate \u003d startDate;"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "LeeYiyuan"
        },
        "content": "        this.endDate \u003d endDate;"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "LeeYiyuan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "LeeYiyuan"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "LeeYiyuan"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "LeeYiyuan"
        },
        "content": "     * Converts a given {@code Repeater} into this class for Jackson use."
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "LeeYiyuan"
        },
        "content": "     */"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "LeeYiyuan"
        },
        "content": "    public JsonAdaptedRepeater(Repeater source) {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "LeeYiyuan"
        },
        "content": "        this.uniqueId \u003d source.getUniqueId().toString();"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "LeeYiyuan"
        },
        "content": "        this.description \u003d source.getDescription().toString();"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "        this.amount \u003d source.getAmount().toString();"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "LeeYiyuan"
        },
        "content": "        this.category \u003d source.getDescription().toString();"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "LeeYiyuan"
        },
        "content": "        this.transactionType \u003d source.getTransactionType().toString();"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "LeeYiyuan"
        },
        "content": "        this.monthStartOffset \u003d source.getMonthStartOffset().toString();"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "LeeYiyuan"
        },
        "content": "        this.monthEndOffset \u003d source.getMonthEndOffset().toString();"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "LeeYiyuan"
        },
        "content": "        this.startDate \u003d new JsonAdaptedDate(source.getStartDate());"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "LeeYiyuan"
        },
        "content": "        this.endDate \u003d new JsonAdaptedDate(source.getEndDate());"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "LeeYiyuan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "LeeYiyuan"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "LeeYiyuan"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "LeeYiyuan"
        },
        "content": "     * Converts this Jackson-friendly adapted repeater object into the model\u0027s {@code Person} object."
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "LeeYiyuan"
        },
        "content": "     *"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "LeeYiyuan"
        },
        "content": "     * @throws IllegalValueException if there were any data constraints violated in the adapted repeater."
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "LeeYiyuan"
        },
        "content": "     */"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "LeeYiyuan"
        },
        "content": "    public Repeater toModelType() throws IllegalValueException {"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "LeeYiyuan"
        },
        "content": "        if (this.uniqueId \u003d\u003d null) {"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "LeeYiyuan"
        },
        "content": "            throw new IllegalValueException(String.format("
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "LeeYiyuan"
        },
        "content": "                        MISSING_FIELD_MESSAGE_FORMAT, RepeaterUniqueId.class.getSimpleName()));"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "LeeYiyuan"
        },
        "content": "        }"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "LeeYiyuan"
        },
        "content": "        if (!RepeaterUniqueId.isValidRepeaterUniqueId(this.uniqueId)) {"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "LeeYiyuan"
        },
        "content": "            throw new IllegalValueException(RepeaterUniqueId.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "LeeYiyuan"
        },
        "content": "        }"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "LeeYiyuan"
        },
        "content": "        final RepeaterUniqueId modelUniqueId \u003d new RepeaterUniqueId(this.uniqueId);"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "LeeYiyuan"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "LeeYiyuan"
        },
        "content": "        if (this.description \u003d\u003d null) {"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "LeeYiyuan"
        },
        "content": "            throw new IllegalValueException(String.format("
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "LeeYiyuan"
        },
        "content": "                        MISSING_FIELD_MESSAGE_FORMAT, Description.class.getSimpleName()));"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "LeeYiyuan"
        },
        "content": "        }"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "LeeYiyuan"
        },
        "content": "        if (!Description.isValidDescription(this.description)) {"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "LeeYiyuan"
        },
        "content": "            throw new IllegalValueException(Description.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "LeeYiyuan"
        },
        "content": "        }"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "LeeYiyuan"
        },
        "content": "        final Description modelDescription \u003d new Description(this.description);"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "LeeYiyuan"
        },
        "content": ""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "LeeYiyuan"
        },
        "content": "        if (this.amount \u003d\u003d null) {"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "LeeYiyuan"
        },
        "content": "            throw new IllegalValueException(String.format("
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "LeeYiyuan"
        },
        "content": "                        MISSING_FIELD_MESSAGE_FORMAT, Amount.class.getSimpleName()));"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "LeeYiyuan"
        },
        "content": "        }"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "LeeYiyuan"
        },
        "content": "        if (!Amount.isValidAmount(this.amount)) {"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "LeeYiyuan"
        },
        "content": "            throw new IllegalValueException(Amount.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "        } else if (Amount.isNegative(this.amount)) {"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "            throw new IllegalValueException(Amount.NEGATIVE_AMOUNT_CONSTRAINT);"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "LeeYiyuan"
        },
        "content": "        }"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "LeeYiyuan"
        },
        "content": "        final Amount modelAmount \u003d new Amount(this.amount);"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "LeeYiyuan"
        },
        "content": ""
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "LeeYiyuan"
        },
        "content": "        if (this.category \u003d\u003d null) {"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "LeeYiyuan"
        },
        "content": "            throw new IllegalValueException(String.format("
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "LeeYiyuan"
        },
        "content": "                        MISSING_FIELD_MESSAGE_FORMAT, Category.class.getSimpleName()));"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "LeeYiyuan"
        },
        "content": "        }"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "LeeYiyuan"
        },
        "content": "        if (!Category.isValidCategory(this.category)) {"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "LeeYiyuan"
        },
        "content": "            throw new IllegalValueException(Category.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "LeeYiyuan"
        },
        "content": "        }"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "LeeYiyuan"
        },
        "content": "        final Category modelCategory \u003d new Category(this.category);"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "LeeYiyuan"
        },
        "content": ""
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "LeeYiyuan"
        },
        "content": "        if (this.transactionType \u003d\u003d null) {"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "LeeYiyuan"
        },
        "content": "            throw new IllegalValueException(String.format("
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "LeeYiyuan"
        },
        "content": "                        MISSING_FIELD_MESSAGE_FORMAT, TransactionType.class.getSimpleName()));"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "LeeYiyuan"
        },
        "content": "        }"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "LeeYiyuan"
        },
        "content": "        if (!TransactionType.isValidTransactionType(this.transactionType)) {"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "LeeYiyuan"
        },
        "content": "            throw new IllegalValueException(TransactionType.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "LeeYiyuan"
        },
        "content": "        }"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "LeeYiyuan"
        },
        "content": "        final TransactionType modelTransactionType \u003d new TransactionType(this.transactionType);"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "LeeYiyuan"
        },
        "content": ""
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "LeeYiyuan"
        },
        "content": "        if (this.monthStartOffset \u003d\u003d null) {"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "LeeYiyuan"
        },
        "content": "            throw new IllegalValueException(String.format("
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "LeeYiyuan"
        },
        "content": "                        MISSING_FIELD_MESSAGE_FORMAT, MonthOffset.class.getSimpleName()));"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "LeeYiyuan"
        },
        "content": "        }"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "LeeYiyuan"
        },
        "content": "        if (!MonthOffset.isValidMonthOffset(this.monthStartOffset)) {"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "LeeYiyuan"
        },
        "content": "            throw new IllegalValueException(MonthOffset.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "LeeYiyuan"
        },
        "content": "        }"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "LeeYiyuan"
        },
        "content": "        final MonthOffset modelMonthStartOffset \u003d new MonthOffset(this.monthStartOffset);"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "LeeYiyuan"
        },
        "content": ""
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "LeeYiyuan"
        },
        "content": "        if (this.monthEndOffset \u003d\u003d null) {"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "LeeYiyuan"
        },
        "content": "            throw new IllegalValueException(String.format("
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "LeeYiyuan"
        },
        "content": "                        MISSING_FIELD_MESSAGE_FORMAT, MonthOffset.class.getSimpleName()));"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "LeeYiyuan"
        },
        "content": "        }"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "LeeYiyuan"
        },
        "content": "        if (!MonthOffset.isValidMonthOffset(this.monthEndOffset)) {"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "LeeYiyuan"
        },
        "content": "            throw new IllegalValueException(MonthOffset.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "LeeYiyuan"
        },
        "content": "        }"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "LeeYiyuan"
        },
        "content": "        final MonthOffset modelMonthEndOffset \u003d new MonthOffset(this.monthEndOffset);"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "LeeYiyuan"
        },
        "content": ""
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "LeeYiyuan"
        },
        "content": "        final Date modelStartDate \u003d this.startDate.toModelType();"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "LeeYiyuan"
        },
        "content": ""
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "LeeYiyuan"
        },
        "content": "        final Date modelEndDate \u003d this.endDate.toModelType();"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "LeeYiyuan"
        },
        "content": ""
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "LeeYiyuan"
        },
        "content": "        return new Repeater(modelUniqueId, modelDescription, modelAmount, modelCategory, modelTransactionType,"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "LeeYiyuan"
        },
        "content": "                modelMonthStartOffset, modelMonthEndOffset, modelStartDate, modelEndDate);"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "LeeYiyuan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "LeeYiyuan"
        },
        "content": ""
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "LeeYiyuan"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "LeeYiyuan": 146,
      "weiyang13": 5
    }
  },
  {
    "path": "src/main/java/seedu/ichifund/storage/JsonAdaptedTag.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "nexolute"
        },
        "content": "package seedu.ichifund.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import com.fasterxml.jackson.annotation.JsonCreator;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import com.fasterxml.jackson.annotation.JsonValue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "nexolute"
        },
        "content": "import seedu.ichifund.commons.exceptions.IllegalValueException;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "nexolute"
        },
        "content": "import seedu.ichifund.model.tag.Tag;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": " * Jackson-friendly version of {@link Tag}."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "class JsonAdaptedTag {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    private final String tagName;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "     * Constructs a {@code JsonAdaptedTag} with the given {@code tagName}."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    @JsonCreator"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    public JsonAdaptedTag(String tagName) {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "        this.tagName \u003d tagName;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "     * Converts a given {@code Tag} into this class for Jackson use."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    public JsonAdaptedTag(Tag source) {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        tagName \u003d source.tagName;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    @JsonValue"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    public String getTagName() {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "        return tagName;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "     * Converts this Jackson-friendly adapted tag object into the model\u0027s {@code Tag} object."
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws IllegalValueException if there were any data constraints violated in the adapted tag."
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    public Tag toModelType() throws IllegalValueException {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!Tag.isValidTagName(tagName)) {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new IllegalValueException(Tag.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        return new Tag(tagName);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "nexolute": 3,
      "-": 45
    }
  },
  {
    "path": "src/main/java/seedu/ichifund/storage/JsonAdaptedTransaction.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "package seedu.ichifund.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "weiyang13"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "import com.fasterxml.jackson.annotation.JsonCreator;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "import com.fasterxml.jackson.annotation.JsonProperty;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "weiyang13"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "import seedu.ichifund.commons.exceptions.IllegalValueException;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "import seedu.ichifund.model.Description;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "import seedu.ichifund.model.amount.Amount;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "import seedu.ichifund.model.date.Date;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "LeeYiyuan"
        },
        "content": "import seedu.ichifund.model.repeater.RepeaterUniqueId;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "import seedu.ichifund.model.transaction.Category;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "import seedu.ichifund.model.transaction.Transaction;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "import seedu.ichifund.model.transaction.TransactionType;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "weiyang13"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "/**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "weiyang13"
        },
        "content": " * Jackson-friendly version of {@link Transaction}."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "weiyang13"
        },
        "content": " */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "public class JsonAdaptedTransaction {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "    public static final String MISSING_FIELD_MESSAGE_FORMAT \u003d \"Transaction\u0027s %s field is missing!\";"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "weiyang13"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "    private final String description;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "    private final String amount;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "    private final String category;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "    private final JsonAdaptedDate date;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "    private final String transactionType;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "LeeYiyuan"
        },
        "content": "    private final String repeaterUniqueId;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "weiyang13"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "     * Constructs a {@code JsonAdaptedTransaction} with the given transaction details."
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "     */"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "    @JsonCreator"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "    public JsonAdaptedTransaction(@JsonProperty(\"description\") String description,"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "                                  @JsonProperty(\"amount\") String amount, @JsonProperty(\"category\") String category,"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "                                  @JsonProperty(\"date\") JsonAdaptedDate date,"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "LeeYiyuan"
        },
        "content": "                                  @JsonProperty(\"transactionType\") String transactionType,"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "LeeYiyuan"
        },
        "content": "                                  @JsonProperty(\"repeaterUniqueId\") String repeaterUniqueId) {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "        this.description \u003d description;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "        this.amount \u003d amount;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "        this.category \u003d category;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "        this.date \u003d date;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "        this.transactionType \u003d transactionType;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "LeeYiyuan"
        },
        "content": "        this.repeaterUniqueId \u003d repeaterUniqueId;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "weiyang13"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "     * Converts a given {@code Transaction} into this class for Jackson use."
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "     */"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "    public JsonAdaptedTransaction(Transaction source) {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "        this.description \u003d source.getDescription().toString();"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "        this.amount \u003d source.getAmount().toString();"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "        this.category \u003d source.getCategory().toString();"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "        this.date \u003d new JsonAdaptedDate(source.getDate());"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "        this.transactionType \u003d source.getTransactionType().toString();"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "LeeYiyuan"
        },
        "content": "        this.repeaterUniqueId \u003d source.getRepeaterUniqueId().toString();"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "    }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "weiyang13"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "     * Converts this Jackson-friendly adapted person object into the model\u0027s {@code Transaction} object."
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "     *"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "     * @throws IllegalValueException if there were any data constraints violated in the adapted transaction."
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "     */"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "    public Transaction toModelType() throws IllegalValueException {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "        final Date modelDate \u003d date.toModelType();"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "weiyang13"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "        if (description \u003d\u003d null) {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "            throw new IllegalValueException(String.format(MISSING_FIELD_MESSAGE_FORMAT,"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "                    Description.class.getSimpleName()));"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "        }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "        if (!Description.isValidDescription(description)) {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "            throw new IllegalValueException(Description.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "        }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "        final Description modelDescription \u003d new Description(description);"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "weiyang13"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "        if (amount \u003d\u003d null) {"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "            throw new IllegalValueException(String.format(MISSING_FIELD_MESSAGE_FORMAT, Amount.class.getSimpleName()));"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "        }"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "        if (!Amount.isValidAmount(amount)) {"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "            throw new IllegalValueException(Amount.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "        } else if (Amount.isNegative(amount)) {"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "            throw new IllegalValueException(Amount.NEGATIVE_AMOUNT_CONSTRAINT);"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "        }"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "        final Amount modelAmount \u003d new Amount(amount);"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "weiyang13"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "        if (category \u003d\u003d null) {"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "            throw new IllegalValueException(String.format(MISSING_FIELD_MESSAGE_FORMAT,"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "                    Category.class.getSimpleName()));"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "        }"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "        if (!Category.isValidCategory(category)) {"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "            throw new IllegalValueException(Category.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "        }"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "        final Category modelCategory \u003d new Category(category);"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "weiyang13"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "        if (transactionType \u003d\u003d null) {"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "            throw new IllegalValueException(String.format(MISSING_FIELD_MESSAGE_FORMAT,"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "                    TransactionType.class.getSimpleName()));"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "        }"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "        if (!TransactionType.isValidTransactionType(transactionType)) {"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "            throw new IllegalValueException(TransactionType.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "        }"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "        final TransactionType modelTransactionType \u003d new TransactionType(transactionType);"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "weiyang13"
        },
        "content": ""
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "LeeYiyuan"
        },
        "content": "        if (repeaterUniqueId \u003d\u003d null) {"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "LeeYiyuan"
        },
        "content": "            throw new IllegalValueException(String.format(MISSING_FIELD_MESSAGE_FORMAT,"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "LeeYiyuan"
        },
        "content": "                    RepeaterUniqueId.class.getSimpleName()));"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "LeeYiyuan"
        },
        "content": "        }"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "LeeYiyuan"
        },
        "content": "        if (!RepeaterUniqueId.isValidRepeaterUniqueId(repeaterUniqueId)) {"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "LeeYiyuan"
        },
        "content": "            throw new IllegalValueException(RepeaterUniqueId.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "LeeYiyuan"
        },
        "content": "        }"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "LeeYiyuan"
        },
        "content": "        final RepeaterUniqueId modelRepeaterUniqueId \u003d new RepeaterUniqueId(repeaterUniqueId);"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "LeeYiyuan"
        },
        "content": ""
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "LeeYiyuan"
        },
        "content": "        return new Transaction(modelDescription, modelAmount, modelCategory, modelDate, modelTransactionType,"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "LeeYiyuan"
        },
        "content": "                modelRepeaterUniqueId);"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "    }"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "LeeYiyuan": 17,
      "weiyang13": 97
    }
  },
  {
    "path": "src/main/java/seedu/ichifund/storage/JsonFundBookStorage.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "nexolute"
        },
        "content": "package seedu.ichifund.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "nexolute"
        },
        "content": "import seedu.ichifund.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "nexolute"
        },
        "content": "import seedu.ichifund.commons.exceptions.DataConversionException;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "nexolute"
        },
        "content": "import seedu.ichifund.commons.exceptions.IllegalValueException;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "nexolute"
        },
        "content": "import seedu.ichifund.commons.util.FileUtil;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "nexolute"
        },
        "content": "import seedu.ichifund.commons.util.JsonUtil;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "nexolute"
        },
        "content": "import seedu.ichifund.model.ReadOnlyFundBook;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": " * A class to access AddressBook data stored as a json file on the hard disk."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "nexolute"
        },
        "content": "public class JsonFundBookStorage implements FundBookStorage {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "nexolute"
        },
        "content": "    private static final Logger logger \u003d LogsCenter.getLogger(JsonFundBookStorage.class);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    private Path filePath;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "nexolute"
        },
        "content": "    public JsonFundBookStorage(Path filePath) {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        this.filePath \u003d filePath;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "nexolute"
        },
        "content": "    public Path getFundBookFilePath() {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        return filePath;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "nexolute"
        },
        "content": "    public Optional\u003cReadOnlyFundBook\u003e readFundBook() throws DataConversionException {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "nexolute"
        },
        "content": "        return readFundBook(filePath);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "nexolute"
        },
        "content": "     * Similar to {@link #readFundBook()}."
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param filePath location of the data. Cannot be null."
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws DataConversionException if the file is not in the correct format."
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "nexolute"
        },
        "content": "    public Optional\u003cReadOnlyFundBook\u003e readFundBook(Path filePath) throws DataConversionException {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(filePath);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "nexolute"
        },
        "content": "        Optional\u003cJsonSerializableFundBook\u003e jsonAddressBook \u003d JsonUtil.readJsonFile("
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "nexolute"
        },
        "content": "                filePath, JsonSerializableFundBook.class);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!jsonAddressBook.isPresent()) {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "            return Optional.empty();"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "            return Optional.of(jsonAddressBook.get().toModelType());"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (IllegalValueException ive) {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "            logger.info(\"Illegal values found in \" + filePath + \": \" + ive.getMessage());"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new DataConversionException(ive);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "nexolute"
        },
        "content": "    public void saveFundBook(ReadOnlyFundBook addressBook) throws IOException {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "nexolute"
        },
        "content": "        saveFundBook(addressBook, filePath);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "nexolute"
        },
        "content": "     * Similar to {@link #saveFundBook(ReadOnlyFundBook)}."
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param filePath location of the data. Cannot be null."
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "nexolute"
        },
        "content": "    public void saveFundBook(ReadOnlyFundBook addressBook, Path filePath) throws IOException {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(addressBook);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(filePath);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "        FileUtil.createIfMissing(filePath);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "nexolute"
        },
        "content": "        JsonUtil.saveJsonFile(new JsonSerializableFundBook(addressBook), filePath);"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "nexolute": 22,
      "-": 58
    }
  },
  {
    "path": "src/main/java/seedu/ichifund/storage/JsonSerializableFundBook.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "nexolute"
        },
        "content": "package seedu.ichifund.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.stream.Collectors;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import com.fasterxml.jackson.annotation.JsonCreator;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import com.fasterxml.jackson.annotation.JsonProperty;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import com.fasterxml.jackson.annotation.JsonRootName;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "nexolute"
        },
        "content": "import seedu.ichifund.commons.exceptions.IllegalValueException;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "nexolute"
        },
        "content": "import seedu.ichifund.model.FundBook;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "nexolute"
        },
        "content": "import seedu.ichifund.model.ReadOnlyFundBook;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "nexolute"
        },
        "content": "import seedu.ichifund.model.budget.Budget;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "nexolute"
        },
        "content": "import seedu.ichifund.model.person.Person;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "LeeYiyuan"
        },
        "content": "import seedu.ichifund.model.repeater.Repeater;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "LeeYiyuan"
        },
        "content": "import seedu.ichifund.model.repeater.RepeaterUniqueId;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "import seedu.ichifund.model.transaction.Transaction;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "nexolute"
        },
        "content": " * An Immutable FundBook that is serializable to JSON format."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "nexolute"
        },
        "content": "@JsonRootName(value \u003d \"fundbook\")"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "nexolute"
        },
        "content": "class JsonSerializableFundBook {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "LeeYiyuan"
        },
        "content": "    public static final String MISSING_FIELD_MESSAGE_FORMAT \u003d \"Repeater\u0027s %s field is missing!\";"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_DUPLICATE_PERSON \u003d \"Persons list contains duplicate person(s).\";"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "LeeYiyuan"
        },
        "content": "    public static final String MESSAGE_DUPLICATE_REPEATER \u003d \"Repeaters list contains duplicate repeater(s).\";"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "nexolute"
        },
        "content": "    public static final String MESSAGE_DUPLICATE_BUDGET \u003d \"Budgets list contains duplicate budget(s).\";"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "LeeYiyuan"
        },
        "content": "    private final String currentRepeaterUniqueId;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    private final List\u003cJsonAdaptedPerson\u003e persons \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "    private final List\u003cJsonAdaptedTransaction\u003e transactions \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "LeeYiyuan"
        },
        "content": "    private final List\u003cJsonAdaptedRepeater\u003e repeaters \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "nexolute"
        },
        "content": "    private final List\u003cJsonAdaptedBudget\u003e budgets \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "nexolute"
        },
        "content": "     * Constructs a {@code JsonSerializableFundBook} with the given person and budget."
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    @JsonCreator"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "LeeYiyuan"
        },
        "content": "    public JsonSerializableFundBook("
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "LeeYiyuan"
        },
        "content": "            @JsonProperty(\"currentRepeaterUniqueId\") String currentRepeaterUniqueId,"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "LeeYiyuan"
        },
        "content": "            @JsonProperty(\"persons\") List\u003cJsonAdaptedPerson\u003e persons,"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "            @JsonProperty(\"transactions\") List\u003cJsonAdaptedTransaction\u003e transactions,"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "LeeYiyuan"
        },
        "content": "            @JsonProperty(\"repeaters\") List\u003cJsonAdaptedRepeater\u003e repeaters,"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "nexolute"
        },
        "content": "            @JsonProperty(\"budgets\") List\u003cJsonAdaptedBudget\u003e budgets) {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "LeeYiyuan"
        },
        "content": "        this.currentRepeaterUniqueId \u003d currentRepeaterUniqueId;"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        this.persons.addAll(persons);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "        this.transactions.addAll(transactions);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "LeeYiyuan"
        },
        "content": "        this.repeaters.addAll(repeaters);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "nexolute"
        },
        "content": "        this.budgets.addAll(budgets);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "nexolute"
        },
        "content": "     * Converts a given {@code ReadOnlyFundBook} into this class for Jackson use."
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "nexolute"
        },
        "content": "     * @param source future changes to this will not affect the created {@code JsonSerializableFundBook}."
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "nexolute"
        },
        "content": "    public JsonSerializableFundBook(ReadOnlyFundBook source) {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "LeeYiyuan"
        },
        "content": "        currentRepeaterUniqueId \u003d source.getCurrentRepeaterUniqueId().toString();"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "        persons.addAll(source.getPersonList().stream().map(JsonAdaptedPerson::new).collect(Collectors.toList()));"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "        transactions.addAll(source.getTransactionList().stream().map(JsonAdaptedTransaction::new)"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "                .collect(Collectors.toList()));"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "LeeYiyuan"
        },
        "content": "        repeaters.addAll(source.getRepeaterList().stream().map(JsonAdaptedRepeater::new).collect(Collectors.toList()));"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "nexolute"
        },
        "content": "        budgets.addAll(source.getBudgetList().stream().map(JsonAdaptedBudget::new).collect(Collectors.toList()));"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "nexolute"
        },
        "content": "     * Converts this fund book into the model\u0027s {@code FundBook} object."
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws IllegalValueException if there were any data constraints violated."
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "nexolute"
        },
        "content": "    public FundBook toModelType() throws IllegalValueException {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "nexolute"
        },
        "content": "        FundBook fundBook \u003d new FundBook();"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "LeeYiyuan"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "LeeYiyuan"
        },
        "content": "        if (currentRepeaterUniqueId \u003d\u003d null) {"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "LeeYiyuan"
        },
        "content": "            throw new IllegalValueException(String.format(MISSING_FIELD_MESSAGE_FORMAT,"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "LeeYiyuan"
        },
        "content": "                    RepeaterUniqueId.class.getSimpleName()));"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "LeeYiyuan"
        },
        "content": "        }"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "LeeYiyuan"
        },
        "content": "        if (!RepeaterUniqueId.isValidRepeaterUniqueId(currentRepeaterUniqueId)) {"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "LeeYiyuan"
        },
        "content": "            throw new IllegalValueException(RepeaterUniqueId.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "LeeYiyuan"
        },
        "content": "        }"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "LeeYiyuan"
        },
        "content": "        final RepeaterUniqueId modelCurrentRepeaterUniqueId \u003d new RepeaterUniqueId(currentRepeaterUniqueId);"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "LeeYiyuan"
        },
        "content": "        fundBook.setCurrentRepeaterUniqueId(modelCurrentRepeaterUniqueId);"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "LeeYiyuan"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "        for (JsonAdaptedPerson jsonAdaptedPerson : persons) {"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "            Person person \u003d jsonAdaptedPerson.toModelType();"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "nexolute"
        },
        "content": "            if (fundBook.hasPerson(person)) {"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "                throw new IllegalValueException(MESSAGE_DUPLICATE_PERSON);"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "nexolute"
        },
        "content": "            fundBook.addPerson(person);"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "nexolute"
        },
        "content": ""
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "        for (JsonAdaptedTransaction jsonAdaptedTransaction : transactions) {"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "            Transaction transaction \u003d jsonAdaptedTransaction.toModelType();"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "            fundBook.addTransaction(transaction);"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "        }"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "weiyang13"
        },
        "content": ""
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "LeeYiyuan"
        },
        "content": "        for (JsonAdaptedRepeater jsonAdaptedRepeater : repeaters) {"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "LeeYiyuan"
        },
        "content": "            Repeater repeater \u003d jsonAdaptedRepeater.toModelType();"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "LeeYiyuan"
        },
        "content": "            if (fundBook.hasRepeater(repeater)) {"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "LeeYiyuan"
        },
        "content": "                throw new IllegalValueException(MESSAGE_DUPLICATE_REPEATER);"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "LeeYiyuan"
        },
        "content": "            }"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "LeeYiyuan"
        },
        "content": "            fundBook.addRepeater(repeater);"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "LeeYiyuan"
        },
        "content": "        }"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "LeeYiyuan"
        },
        "content": ""
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "nexolute"
        },
        "content": "        for (JsonAdaptedBudget jsonAdaptedBudget : budgets) {"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "nexolute"
        },
        "content": "            Budget budget \u003d jsonAdaptedBudget.toModelType();"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "nexolute"
        },
        "content": "            if (fundBook.hasBudget(budget)) {"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "nexolute"
        },
        "content": "                throw new IllegalValueException(MESSAGE_DUPLICATE_BUDGET);"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "nexolute"
        },
        "content": "            }"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "nexolute"
        },
        "content": "            fundBook.addBudget(budget);"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "nexolute"
        },
        "content": "        }"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "LeeYiyuan"
        },
        "content": ""
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "nexolute"
        },
        "content": "        return fundBook;"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "LeeYiyuan": 34,
      "nexolute": 32,
      "weiyang13": 11,
      "-": 41
    }
  },
  {
    "path": "src/main/java/seedu/ichifund/storage/JsonUserPrefsStorage.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "nexolute"
        },
        "content": "package seedu.ichifund.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "nexolute"
        },
        "content": "import seedu.ichifund.commons.exceptions.DataConversionException;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "nexolute"
        },
        "content": "import seedu.ichifund.commons.util.JsonUtil;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "nexolute"
        },
        "content": "import seedu.ichifund.model.ReadOnlyUserPrefs;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "nexolute"
        },
        "content": "import seedu.ichifund.model.UserPrefs;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": " * A class to access UserPrefs stored in the hard disk as a json file"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "public class JsonUserPrefsStorage implements UserPrefsStorage {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    private Path filePath;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    public JsonUserPrefsStorage(Path filePath) {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "        this.filePath \u003d filePath;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    public Path getUserPrefsFilePath() {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "        return filePath;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    public Optional\u003cUserPrefs\u003e readUserPrefs() throws DataConversionException {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "        return readUserPrefs(filePath);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "     * Similar to {@link #readUserPrefs()}"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param prefsFilePath location of the data. Cannot be null."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws DataConversionException if the file format is not as expected."
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    public Optional\u003cUserPrefs\u003e readUserPrefs(Path prefsFilePath) throws DataConversionException {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        return JsonUtil.readJsonFile(prefsFilePath, UserPrefs.class);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    public void saveUserPrefs(ReadOnlyUserPrefs userPrefs) throws IOException {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        JsonUtil.saveJsonFile(userPrefs, filePath);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "nexolute": 5,
      "-": 42
    }
  },
  {
    "path": "src/main/java/seedu/ichifund/storage/Storage.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "nexolute"
        },
        "content": "package seedu.ichifund.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "nexolute"
        },
        "content": "import seedu.ichifund.commons.exceptions.DataConversionException;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "nexolute"
        },
        "content": "import seedu.ichifund.model.ReadOnlyFundBook;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "nexolute"
        },
        "content": "import seedu.ichifund.model.ReadOnlyUserPrefs;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "nexolute"
        },
        "content": "import seedu.ichifund.model.UserPrefs;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": " * API of the Storage component"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "nexolute"
        },
        "content": "public interface Storage extends FundBookStorage, UserPrefsStorage {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    Optional\u003cUserPrefs\u003e readUserPrefs() throws DataConversionException, IOException;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    void saveUserPrefs(ReadOnlyUserPrefs userPrefs) throws IOException;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "nexolute"
        },
        "content": "    Path getFundBookFilePath();"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "nexolute"
        },
        "content": "    Optional\u003cReadOnlyFundBook\u003e readFundBook() throws DataConversionException, IOException;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "nexolute"
        },
        "content": "    void saveFundBook(ReadOnlyFundBook fundBook) throws IOException;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "nexolute": 9,
      "-": 23
    }
  },
  {
    "path": "src/main/java/seedu/ichifund/storage/StorageManager.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "nexolute"
        },
        "content": "package seedu.ichifund.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "nexolute"
        },
        "content": "import seedu.ichifund.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "nexolute"
        },
        "content": "import seedu.ichifund.commons.exceptions.DataConversionException;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "nexolute"
        },
        "content": "import seedu.ichifund.model.ReadOnlyFundBook;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "nexolute"
        },
        "content": "import seedu.ichifund.model.ReadOnlyUserPrefs;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "nexolute"
        },
        "content": "import seedu.ichifund.model.UserPrefs;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "nexolute"
        },
        "content": " * Manages storage of FundBook data in local storage."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "public class StorageManager implements Storage {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final Logger logger \u003d LogsCenter.getLogger(StorageManager.class);"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "nexolute"
        },
        "content": "    private FundBookStorage fundBookStorage;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    private UserPrefsStorage userPrefsStorage;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "nexolute"
        },
        "content": "    public StorageManager(FundBookStorage fundBookStorage, UserPrefsStorage userPrefsStorage) {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "        super();"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "nexolute"
        },
        "content": "        this.fundBookStorage \u003d fundBookStorage;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        this.userPrefsStorage \u003d userPrefsStorage;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    // \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d UserPrefs methods \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    public Path getUserPrefsFilePath() {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        return userPrefsStorage.getUserPrefsFilePath();"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    public Optional\u003cUserPrefs\u003e readUserPrefs() throws DataConversionException, IOException {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        return userPrefsStorage.readUserPrefs();"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    public void saveUserPrefs(ReadOnlyUserPrefs userPrefs) throws IOException {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        userPrefsStorage.saveUserPrefs(userPrefs);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "nexolute"
        },
        "content": "    // \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d FundBook methods \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "nexolute"
        },
        "content": "    public Path getFundBookFilePath() {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "nexolute"
        },
        "content": "        return fundBookStorage.getFundBookFilePath();"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "nexolute"
        },
        "content": "    public Optional\u003cReadOnlyFundBook\u003e readFundBook() throws DataConversionException, IOException {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "nexolute"
        },
        "content": "        return readFundBook(fundBookStorage.getFundBookFilePath());"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "nexolute"
        },
        "content": "    public Optional\u003cReadOnlyFundBook\u003e readFundBook(Path filePath) throws DataConversionException, IOException {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "        logger.fine(\"Attempting to read data from file: \" + filePath);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "nexolute"
        },
        "content": "        return fundBookStorage.readFundBook(filePath);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "nexolute"
        },
        "content": "    public void saveFundBook(ReadOnlyFundBook fundBook) throws IOException {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "nexolute"
        },
        "content": "        saveFundBook(fundBook, fundBookStorage.getFundBookFilePath());"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "nexolute"
        },
        "content": "    public void saveFundBook(ReadOnlyFundBook fundBook, Path filePath) throws IOException {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "        logger.fine(\"Attempting to write to data file: \" + filePath);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "nexolute"
        },
        "content": "        fundBookStorage.saveFundBook(fundBook, filePath);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "nexolute": 21,
      "-": 56
    }
  },
  {
    "path": "src/main/java/seedu/ichifund/storage/UserPrefsStorage.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "nexolute"
        },
        "content": "package seedu.ichifund.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "nexolute"
        },
        "content": "import seedu.ichifund.commons.exceptions.DataConversionException;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "nexolute"
        },
        "content": "import seedu.ichifund.model.ReadOnlyUserPrefs;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "nexolute"
        },
        "content": "import seedu.ichifund.model.UserPrefs;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "nexolute"
        },
        "content": " * Represents a storage for {@link seedu.ichifund.model.UserPrefs}."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "public interface UserPrefsStorage {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns the file path of the UserPrefs data file."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    Path getUserPrefsFilePath();"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns UserPrefs data from storage."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "     *   Returns {@code Optional.empty()} if storage file is not found."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws DataConversionException if the data in storage is not in the expected format."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws IOException if there was any problem when reading from the storage."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    Optional\u003cUserPrefs\u003e readUserPrefs() throws DataConversionException, IOException;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "nexolute"
        },
        "content": "     * Saves the given {@link seedu.ichifund.model.ReadOnlyUserPrefs} to the storage."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param userPrefs cannot be null."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws IOException if there was any problem writing to the file."
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    void saveUserPrefs(ReadOnlyUserPrefs userPrefs) throws IOException;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "nexolute": 6,
      "-": 30
    }
  },
  {
    "path": "src/main/java/seedu/ichifund/ui/BudgetCard.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "nexolute"
        },
        "content": "package seedu.ichifund.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "nexolute"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "nexolute"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "nexolute"
        },
        "content": "import javafx.scene.control.Label;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "nexolute"
        },
        "content": "import javafx.scene.control.ProgressBar;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "nexolute"
        },
        "content": "import javafx.scene.layout.HBox;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "nexolute"
        },
        "content": "import javafx.scene.layout.Region;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "nexolute"
        },
        "content": "import seedu.ichifund.model.amount.Amount;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "nexolute"
        },
        "content": "import seedu.ichifund.model.budget.Budget;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "nexolute"
        },
        "content": "import seedu.ichifund.model.budget.ComputedBudget;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "nexolute"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "nexolute"
        },
        "content": "/**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "nexolute"
        },
        "content": " * An UI component that displays information of a {@code Budget}."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "nexolute"
        },
        "content": " */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "nexolute"
        },
        "content": "public class BudgetCard extends UiPart\u003cRegion\u003e {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "nexolute"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "nexolute"
        },
        "content": "    private static final String FXML \u003d \"BudgetListCard.fxml\";"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "nexolute"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "nexolute"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "nexolute"
        },
        "content": "     * Note: Certain keywords such as \"location\" and \"resources\" are reserved keywords in JavaFX."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "nexolute"
        },
        "content": "     * As a consequence, UI elements\u0027 variable names cannot be set to such keywords"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "nexolute"
        },
        "content": "     * or an exception will be thrown by JavaFX during runtime."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "nexolute"
        },
        "content": "     *"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "nexolute"
        },
        "content": "     * @see \u003ca href\u003d\"https://github.com/se-edu/addressbook-level4/issues/336\"\u003eThe issue on AddressBook level 4\u003c/a\u003e"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "nexolute"
        },
        "content": "     */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "nexolute"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "nexolute"
        },
        "content": "    public final Budget budget;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "nexolute"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "nexolute"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "nexolute"
        },
        "content": "    private HBox cardPane;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "nexolute"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "nexolute"
        },
        "content": "    private Label id;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "nexolute"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "nexolute"
        },
        "content": "    private Label description;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "nexolute"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "nexolute"
        },
        "content": "    private Label amount;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "nexolute"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "nexolute"
        },
        "content": "    private Label criterion;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "nexolute"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "nexolute"
        },
        "content": "    private ProgressBar budgetProgress;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "nexolute"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "nexolute"
        },
        "content": "    public BudgetCard(Budget budget, int displayedIndex) {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "nexolute"
        },
        "content": "        super(FXML);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "nexolute"
        },
        "content": "        this.budget \u003d budget;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "nexolute"
        },
        "content": "        id.setText(displayedIndex + \". \");"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "nexolute"
        },
        "content": "        description.setText(budget.getDescription().toString());"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "nexolute"
        },
        "content": "        criterion.setText(budget.toCriterionString());"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "nexolute"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "nexolute"
        },
        "content": "        if (budget instanceof ComputedBudget) {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "nexolute"
        },
        "content": "            Amount spending \u003d ((ComputedBudget) budget).getSpending();"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "nexolute"
        },
        "content": "            Amount limit \u003d budget.getAmount();"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "nexolute"
        },
        "content": "            double ratio \u003d (double) spending.valueInCents / limit.valueInCents;"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "nexolute"
        },
        "content": "            amount.setText(\"$\" + spending.toString() + \" / $\" + limit.toString());"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "nexolute"
        },
        "content": "            budgetProgress.setProgress(ratio);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "nexolute"
        },
        "content": "            budgetProgress.setStyle(\"-fx-accent: \" + getBarColor(ratio));"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "nexolute"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "nexolute"
        },
        "content": "            amount.setText(\"$\" + budget.getAmount().toString());"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "nexolute"
        },
        "content": "            budgetProgress.setProgress(0.0);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "nexolute"
        },
        "content": "        }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "nexolute"
        },
        "content": "    }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "nexolute"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "nexolute"
        },
        "content": "    private String getBarColor(double ratio) {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "nexolute"
        },
        "content": "        return ratio \u003e 0.8 ? \"#ef5350\" : \"#4caf50\";"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "nexolute"
        },
        "content": "    }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "nexolute"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "nexolute"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "nexolute"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "nexolute"
        },
        "content": "        // short circuit if same object"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "nexolute"
        },
        "content": "        if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "nexolute"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "nexolute"
        },
        "content": "        }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "nexolute"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "nexolute"
        },
        "content": "        // instanceof handles nulls"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "nexolute"
        },
        "content": "        if (!(other instanceof BudgetCard)) {"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "nexolute"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "nexolute"
        },
        "content": "        }"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "nexolute"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "nexolute"
        },
        "content": "        // state check"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "nexolute"
        },
        "content": "        BudgetCard card \u003d (BudgetCard) other;"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "nexolute"
        },
        "content": "        return id.getText().equals(card.id.getText())"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "nexolute"
        },
        "content": "                \u0026\u0026 budget.equals(card.budget);"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "nexolute"
        },
        "content": "    }"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "nexolute"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "nexolute": 83
    }
  },
  {
    "path": "src/main/java/seedu/ichifund/ui/BudgetListPanel.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "nexolute"
        },
        "content": "package seedu.ichifund.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "nexolute"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "nexolute"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "nexolute"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "nexolute"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "nexolute"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "nexolute"
        },
        "content": "import javafx.scene.control.ListCell;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "nexolute"
        },
        "content": "import javafx.scene.control.ListView;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "nexolute"
        },
        "content": "import javafx.scene.layout.Region;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "nexolute"
        },
        "content": "import seedu.ichifund.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "nexolute"
        },
        "content": "import seedu.ichifund.model.budget.Budget;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "nexolute"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "nexolute"
        },
        "content": "/**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "nexolute"
        },
        "content": " * Panel containing the list of budgets."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "nexolute"
        },
        "content": " */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "nexolute"
        },
        "content": "public class BudgetListPanel extends UiPart\u003cRegion\u003e {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "nexolute"
        },
        "content": "    private static final String FXML \u003d \"BudgetListPanel.fxml\";"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "nexolute"
        },
        "content": "    private final Logger logger \u003d LogsCenter.getLogger(BudgetListPanel.class);"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "nexolute"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "nexolute"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "nexolute"
        },
        "content": "    private ListView\u003cBudget\u003e budgetListView;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "nexolute"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "nexolute"
        },
        "content": "    public BudgetListPanel(ObservableList\u003cBudget\u003e budgetList) {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "nexolute"
        },
        "content": "        super(FXML);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "nexolute"
        },
        "content": "        budgetListView.setItems(budgetList);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "nexolute"
        },
        "content": "        budgetListView.setCellFactory(listView -\u003e new BudgetListViewCell());"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "nexolute"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "nexolute"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "nexolute"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "nexolute"
        },
        "content": "     * Custom {@code ListCell} that displays the graphics of a {@code Budget} using a {@code BudgetCard}."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "nexolute"
        },
        "content": "     */"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "nexolute"
        },
        "content": "    class BudgetListViewCell extends ListCell\u003cBudget\u003e {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "nexolute"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "nexolute"
        },
        "content": "        protected void updateItem(Budget budget, boolean empty) {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "nexolute"
        },
        "content": "            super.updateItem(budget, empty);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "nexolute"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "nexolute"
        },
        "content": "            if (empty || budget \u003d\u003d null) {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "nexolute"
        },
        "content": "                setGraphic(null);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "nexolute"
        },
        "content": "                setText(null);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "nexolute"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "nexolute"
        },
        "content": "                setGraphic(new BudgetCard(budget, getIndex() + 1).getRoot());"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "nexolute"
        },
        "content": "            }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "nexolute"
        },
        "content": "        }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "nexolute"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "nexolute"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "nexolute"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "nexolute": 46
    }
  },
  {
    "path": "src/main/java/seedu/ichifund/ui/CommandBox.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "nexolute"
        },
        "content": "package seedu.ichifund.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.control.TextField;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.layout.Region;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "nexolute"
        },
        "content": "import seedu.ichifund.logic.commands.CommandResult;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "nexolute"
        },
        "content": "import seedu.ichifund.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "nexolute"
        },
        "content": "import seedu.ichifund.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": " * The UI component that is responsible for receiving user command inputs."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "public class CommandBox extends UiPart\u003cRegion\u003e {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String ERROR_STYLE_CLASS \u003d \"error\";"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String FXML \u003d \"CommandBox.fxml\";"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    private final CommandExecutor commandExecutor;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    private TextField commandTextField;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    public CommandBox(CommandExecutor commandExecutor) {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "        super(FXML);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "        this.commandExecutor \u003d commandExecutor;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        // calls #setStyleToDefault() whenever there is a change to the text of the command box."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        commandTextField.textProperty().addListener((unused1, unused2, unused3) -\u003e setStyleToDefault());"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "     * Handles the Enter button pressed event."
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    private void handleCommandEntered() {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "            commandExecutor.execute(commandTextField.getText());"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "            commandTextField.setText(\"\");"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (CommandException | ParseException e) {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "            setStyleToIndicateCommandFailure();"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "     * Sets the command box style to use the default style."
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    private void setStyleToDefault() {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        commandTextField.getStyleClass().remove(ERROR_STYLE_CLASS);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "     * Sets the command box style to indicate a failed command."
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    private void setStyleToIndicateCommandFailure() {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "        ObservableList\u003cString\u003e styleClass \u003d commandTextField.getStyleClass();"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "        if (styleClass.contains(ERROR_STYLE_CLASS)) {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "            return;"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "        styleClass.add(ERROR_STYLE_CLASS);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "     * Represents a function that can execute commands."
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "    @FunctionalInterface"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "    public interface CommandExecutor {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "        /**"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "         * Executes the command and returns the result."
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "         *"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "nexolute"
        },
        "content": "         * @see seedu.ichifund.logic.Logic#execute(String)"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "         */"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "        CommandResult execute(String commandText) throws CommandException, ParseException;"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "nexolute": 5,
      "-": 72
    }
  },
  {
    "path": "src/main/java/seedu/ichifund/ui/DataCard.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Alaete"
        },
        "content": "package seedu.ichifund.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Alaete"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Alaete"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Alaete"
        },
        "content": "import javafx.scene.control.Label;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Alaete"
        },
        "content": "import javafx.scene.layout.HBox;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Alaete"
        },
        "content": "import javafx.scene.layout.Region;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Alaete"
        },
        "content": "import javafx.scene.paint.Paint;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Alaete"
        },
        "content": "import seedu.ichifund.model.analytics.Data;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Alaete"
        },
        "content": "import seedu.ichifund.model.analytics.exceptions.FieldNotFoundException;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Alaete"
        },
        "content": "import seedu.ichifund.model.date.Date;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Alaete"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Alaete"
        },
        "content": "/**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Alaete"
        },
        "content": " * An UI component that displays information of {@code Data}."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Alaete"
        },
        "content": " */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Alaete"
        },
        "content": "public class DataCard extends UiPart\u003cRegion\u003e {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Alaete"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Alaete"
        },
        "content": "    private static final String FXML \u003d \"DataCard.fxml\";"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Alaete"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Alaete"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Alaete"
        },
        "content": "     * Note: Certain keywords such as \"location\" and \"resources\" are reserved keywords in JavaFX."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Alaete"
        },
        "content": "     * As a consequence, UI elements\u0027 variable names cannot be set to such keywords"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Alaete"
        },
        "content": "     * or an exception will be thrown by JavaFX during runtime."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Alaete"
        },
        "content": "     *"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Alaete"
        },
        "content": "     * @see \u003ca href\u003d\"https://github.com/se-edu/addressbook-level4/issues/336\"\u003eThe issue on AddressBook level 4\u003c/a\u003e"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Alaete"
        },
        "content": "     */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Alaete"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Alaete"
        },
        "content": "    public final Data data;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Alaete"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Alaete"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Alaete"
        },
        "content": "    private HBox cardPane;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Alaete"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Alaete"
        },
        "content": "    private Label description;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Alaete"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Alaete"
        },
        "content": "    private Label id;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Alaete"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Alaete"
        },
        "content": "    private Label amount;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Alaete"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Alaete"
        },
        "content": "    private Label date;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Alaete"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Alaete"
        },
        "content": "    private Label category;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Alaete"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Alaete"
        },
        "content": "    public DataCard(Data data, int displayedIndex) {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Alaete"
        },
        "content": "        super(FXML);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Alaete"
        },
        "content": "        this.data \u003d data;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Alaete"
        },
        "content": "        id.setText(displayedIndex + \". \");"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Alaete"
        },
        "content": "        description.setText(data.getDescription());"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Alaete"
        },
        "content": "        amount.setText(data.getAmount().toString());"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Alaete"
        },
        "content": "        amount.setTextFill(Paint.valueOf(\"grey\"));"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Alaete"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Alaete"
        },
        "content": "            category.setText(data.getCategory().toString().toUpperCase());"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Alaete"
        },
        "content": "        } catch (FieldNotFoundException e) {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Alaete"
        },
        "content": "            category.setText(\"ALL CATEGORIES\");"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Alaete"
        },
        "content": "        }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "Alaete"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "Alaete"
        },
        "content": "            Date dataDate \u003d new Date(data.getDay(), data.getMonth(), data.getYear());"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "Alaete"
        },
        "content": "            date.setText(dataDate.toFullString());"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "Alaete"
        },
        "content": "        } catch (FieldNotFoundException e) {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "Alaete"
        },
        "content": "            date.setText(\"\");"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "Alaete"
        },
        "content": "        }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "Alaete"
        },
        "content": "    }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "Alaete"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "Alaete"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "Alaete"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "Alaete"
        },
        "content": "        // short circuit if same object"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "Alaete"
        },
        "content": "        if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "Alaete"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "Alaete"
        },
        "content": "        }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "Alaete"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "Alaete"
        },
        "content": "        // instanceof handles nulls"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "Alaete"
        },
        "content": "        if (!(other instanceof DataCard)) {"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "Alaete"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "Alaete"
        },
        "content": "        }"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "Alaete"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "Alaete"
        },
        "content": "        // state check"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "Alaete"
        },
        "content": "        DataCard card \u003d (DataCard) other;"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "Alaete"
        },
        "content": "        return id.getText().equals(card.id.getText())"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "Alaete"
        },
        "content": "                \u0026\u0026 amount.equals(card.amount)"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "Alaete"
        },
        "content": "                \u0026\u0026 date.equals(card.date)"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "Alaete"
        },
        "content": "                \u0026\u0026 category.equals(card.category);"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "Alaete"
        },
        "content": "    }"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "Alaete"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Alaete": 81
    }
  },
  {
    "path": "src/main/java/seedu/ichifund/ui/DataListPanel.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Alaete"
        },
        "content": "package seedu.ichifund.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Alaete"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Alaete"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Alaete"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Alaete"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Alaete"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Alaete"
        },
        "content": "import javafx.scene.control.ListCell;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Alaete"
        },
        "content": "import javafx.scene.control.ListView;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Alaete"
        },
        "content": "import javafx.scene.layout.Region;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Alaete"
        },
        "content": "import seedu.ichifund.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Alaete"
        },
        "content": "import seedu.ichifund.model.analytics.Data;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Alaete"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Alaete"
        },
        "content": "/**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Alaete"
        },
        "content": " * Panel containing data from a report."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Alaete"
        },
        "content": " */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Alaete"
        },
        "content": "public class DataListPanel extends UiPart\u003cRegion\u003e {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Alaete"
        },
        "content": "    private static final String FXML \u003d \"DataListPanel.fxml\";"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Alaete"
        },
        "content": "    private final Logger logger \u003d LogsCenter.getLogger(DataListPanel.class);"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Alaete"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Alaete"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Alaete"
        },
        "content": "    private ListView\u003cData\u003e dataListView;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Alaete"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Alaete"
        },
        "content": "    public DataListPanel(ObservableList\u003cData\u003e dataList) {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Alaete"
        },
        "content": "        super(FXML);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Alaete"
        },
        "content": "        dataListView.setItems(dataList);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Alaete"
        },
        "content": "        dataListView.setCellFactory(listView -\u003e new DataListViewCell());"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Alaete"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Alaete"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Alaete"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Alaete"
        },
        "content": "     * Custom {@code ListCell} that displays the graphics of a {@code Data} using a {@code AnalyticsCard}."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Alaete"
        },
        "content": "     */"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Alaete"
        },
        "content": "    class DataListViewCell extends ListCell\u003cData\u003e {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Alaete"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Alaete"
        },
        "content": "        protected void updateItem(Data data, boolean empty) {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Alaete"
        },
        "content": "            super.updateItem(data, empty);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Alaete"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Alaete"
        },
        "content": "            if (empty || data \u003d\u003d null) {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Alaete"
        },
        "content": "                setGraphic(null);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Alaete"
        },
        "content": "                setText(null);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Alaete"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Alaete"
        },
        "content": "                setGraphic(new DataCard(data, getIndex() + 1).getRoot());"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Alaete"
        },
        "content": "            }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Alaete"
        },
        "content": "        }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Alaete"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Alaete"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Alaete": 45
    }
  },
  {
    "path": "src/main/java/seedu/ichifund/ui/HelpWindow.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "nexolute"
        },
        "content": "package seedu.ichifund.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.control.Button;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.control.Label;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.input.Clipboard;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.input.ClipboardContent;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.stage.Stage;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "nexolute"
        },
        "content": "import seedu.ichifund.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": " * Controller for a help page"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "public class HelpWindow extends UiPart\u003cStage\u003e {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "nexolute"
        },
        "content": "    public static final String USERGUIDE_URL \u003d \"https://ay1920s1-cs2103t-w12-4.github.io/main/UserGuide.html\";"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String HELP_MESSAGE \u003d \"Refer to the user guide: \" + USERGUIDE_URL;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final Logger logger \u003d LogsCenter.getLogger(HelpWindow.class);"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String FXML \u003d \"HelpWindow.fxml\";"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    private Button copyButton;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    private Label helpMessage;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "     * Creates a new HelpWindow."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param root Stage to use as the root of the HelpWindow."
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    public HelpWindow(Stage root) {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        super(FXML, root);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        helpMessage.setText(HELP_MESSAGE);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "     * Creates a new HelpWindow."
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    public HelpWindow() {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        this(new Stage());"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "     * Shows the help window."
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws IllegalStateException"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "     * \u003cul\u003e"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "     *     \u003cli\u003e"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "     *         if this method is called on a thread other than the JavaFX Application Thread."
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "     *     \u003c/li\u003e"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "     *     \u003cli\u003e"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "     *         if this method is called during animation or layout processing."
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "     *     \u003c/li\u003e"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "     *     \u003cli\u003e"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "     *         if this method is called on the primary stage."
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "     *     \u003c/li\u003e"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "     *     \u003cli\u003e"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "     *         if {@code dialogStage} is already showing."
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "     *     \u003c/li\u003e"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "     * \u003c/ul\u003e"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "    public void show() {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "        logger.fine(\"Showing help page about the application.\");"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "        getRoot().show();"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "        getRoot().centerOnScreen();"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns true if the help window is currently being shown."
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean isShowing() {"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "        return getRoot().isShowing();"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "     * Hides the help window."
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "    public void hide() {"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "        getRoot().hide();"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "     * Focuses on the help window."
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "    public void focus() {"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "        getRoot().requestFocus();"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "     * Copies the URL to the user guide to the clipboard."
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "    private void copyUrl() {"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "        final Clipboard clipboard \u003d Clipboard.getSystemClipboard();"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "        final ClipboardContent url \u003d new ClipboardContent();"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "        url.putString(USERGUIDE_URL);"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "        clipboard.setContent(url);"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "nexolute": 3,
      "-": 99
    }
  },
  {
    "path": "src/main/java/seedu/ichifund/ui/MainWindow.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "nexolute"
        },
        "content": "package seedu.ichifund.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "import javafx.beans.InvalidationListener;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "import javafx.beans.Observable;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "import javafx.beans.value.ObservableValue;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.event.ActionEvent;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.control.MenuItem;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "nexolute"
        },
        "content": "import javafx.scene.control.TabPane;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.control.TextInputControl;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.input.KeyCombination;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.input.KeyEvent;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.layout.StackPane;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.stage.Stage;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "nexolute"
        },
        "content": "import seedu.ichifund.commons.core.GuiSettings;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "nexolute"
        },
        "content": "import seedu.ichifund.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "nexolute"
        },
        "content": "import seedu.ichifund.logic.Logic;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "nexolute"
        },
        "content": "import seedu.ichifund.logic.commands.CommandResult;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "nexolute"
        },
        "content": "import seedu.ichifund.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "nexolute"
        },
        "content": "import seedu.ichifund.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": " * The Main Window. Provides the basic application layout containing"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": " * a menu bar and space where other JavaFX elements can be placed."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "public class MainWindow extends UiPart\u003cStage\u003e {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String FXML \u003d \"MainWindow.fxml\";"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    private final Logger logger \u003d LogsCenter.getLogger(getClass());"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    private Stage primaryStage;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    private Logic logic;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "    private ObservableValue\u003cInteger\u003e currentFeatureParserIndex;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    // Independent Ui parts residing in this Ui container"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    private PersonListPanel personListPanel;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "    private TransactionListPanel transactionListPanel;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "LeeYiyuan"
        },
        "content": "    private RepeaterListPanel repeaterListPanel;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "nexolute"
        },
        "content": "    private BudgetListPanel budgetListPanel;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Alaete"
        },
        "content": "    private DataListPanel dataListPanel;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    private ResultDisplay resultDisplay;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    private HelpWindow helpWindow;"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    private StackPane commandBoxPlaceholder;"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    private MenuItem helpMenuItem;"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "nexolute"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "nexolute"
        },
        "content": "    private MenuItem showTransactionMenuItem;"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "nexolute"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "nexolute"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "nexolute"
        },
        "content": "    private MenuItem showRepeaterMenuItem;"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "nexolute"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "nexolute"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "nexolute"
        },
        "content": "    private MenuItem showBudgetMenuItem;"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "nexolute"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "nexolute"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "nexolute"
        },
        "content": "    private MenuItem showLoanMenuItem;"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "nexolute"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "nexolute"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "nexolute"
        },
        "content": "    private MenuItem showAnalyticsMenuItem;"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "nexolute"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "nexolute"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "nexolute"
        },
        "content": "    private TabPane mainTabPane;"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "nexolute"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "    private StackPane personListPanelPlaceholder;"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "    private StackPane transactionListPanelPlaceholder;"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "weiyang13"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "LeeYiyuan"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "LeeYiyuan"
        },
        "content": "    private StackPane repeaterListPanelPlaceholder;"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "LeeYiyuan"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "nexolute"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "nexolute"
        },
        "content": "    private StackPane budgetListPanelPlaceholder;"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "nexolute"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "Alaete"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "Alaete"
        },
        "content": "    private StackPane dataListPanelPlaceholder;"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "Alaete"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "    private StackPane resultDisplayPlaceholder;"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "    private StackPane statusbarPlaceholder;"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "    public MainWindow(Stage primaryStage, Logic logic) {"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "        super(FXML, primaryStage);"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "        // Set dependencies"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "        this.primaryStage \u003d primaryStage;"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "        this.logic \u003d logic;"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "        this.currentFeatureParserIndex \u003d logic.getCurrentFeatureParserIndex();"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "        setupParserSwitching();"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "        // Configure the UI"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "        setWindowDefaultSize(logic.getGuiSettings());"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "        setAccelerators();"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "        helpWindow \u003d new HelpWindow();"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "    private void setupParserSwitching() {"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "        // Add listener to check when Logic changes currentFeatureParserIndex."
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "        this.currentFeatureParserIndex.addListener(new FeatureParserIndexListener(mainTabPane));"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "weiyang13"
        },
        "content": ""
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "        // When tab switching is done by a mouse click, this we change currentFeatureParserIndex through Logic."
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "        mainTabPane.setOnMouseClicked(event -\u003e {"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "            int selectedIndex \u003d mainTabPane.getSelectionModel().getSelectedIndex();"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "            logic.setFeatureParser(selectedIndex);"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "        });"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "    }"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "weiyang13"
        },
        "content": ""
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "    public Stage getPrimaryStage() {"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "        return primaryStage;"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "    private void setAccelerators() {"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "        setAccelerator(helpMenuItem, KeyCombination.valueOf(\"F1\"));"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "nexolute"
        },
        "content": "        setAccelerator(showTransactionMenuItem, KeyCombination.valueOf(\"Ctrl+1\"));"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "nexolute"
        },
        "content": "        setAccelerator(showRepeaterMenuItem, KeyCombination.valueOf(\"Ctrl+2\"));"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "nexolute"
        },
        "content": "        setAccelerator(showBudgetMenuItem, KeyCombination.valueOf(\"Ctrl+3\"));"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "nexolute"
        },
        "content": "        setAccelerator(showLoanMenuItem, KeyCombination.valueOf(\"Ctrl+4\"));"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "nexolute"
        },
        "content": "        setAccelerator(showAnalyticsMenuItem, KeyCombination.valueOf(\"Ctrl+5\"));"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "     * Sets the accelerator of a MenuItem."
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param keyCombination the KeyCombination value of the accelerator"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": "    private void setAccelerator(MenuItem menuItem, KeyCombination keyCombination) {"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": "        menuItem.setAccelerator(keyCombination);"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": "        /*"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": "         * TODO: the code below can be removed once the bug reported here"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": "         * https://bugs.openjdk.java.net/browse/JDK-8131666"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": "         * is fixed in later version of SDK."
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": "         *"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": "         * According to the bug report, TextInputControl (TextField, TextArea) will"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": "         * consume function-key events. Because CommandBox contains a TextField, and"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": "         * ResultDisplay contains a TextArea, thus some accelerators (e.g F1) will"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": "         * not work when the focus is in them because the key event is consumed by"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": "         * the TextInputControl(s)."
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": "         *"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": "         * For now, we add following event filter to capture such key events and open"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": "         * help window purposely so to support accelerators even when focus is"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": "         * in CommandBox or ResultDisplay."
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "-"
        },
        "content": "         */"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "-"
        },
        "content": "        getRoot().addEventFilter(KeyEvent.KEY_PRESSED, event -\u003e {"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "-"
        },
        "content": "            if (event.getTarget() instanceof TextInputControl \u0026\u0026 keyCombination.match(event)) {"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "-"
        },
        "content": "                menuItem.getOnAction().handle(new ActionEvent());"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "-"
        },
        "content": "                event.consume();"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "-"
        },
        "content": "        });"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "-"
        },
        "content": "     * Fills up all the placeholders of this window."
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "-"
        },
        "content": "    void fillInnerParts() {"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "        transactionListPanel \u003d new TransactionListPanel(logic.getFilteredTransactionList(),"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "                logic.getTransactionContextProperty());"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "        transactionListPanelPlaceholder.getChildren().add(transactionListPanel.getRoot());"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "weiyang13"
        },
        "content": ""
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "LeeYiyuan"
        },
        "content": "        repeaterListPanel \u003d new RepeaterListPanel(logic.getFilteredRepeaterList());"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "LeeYiyuan"
        },
        "content": "        repeaterListPanelPlaceholder.getChildren().add(repeaterListPanel.getRoot());"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "LeeYiyuan"
        },
        "content": ""
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "nexolute"
        },
        "content": "        budgetListPanel \u003d new BudgetListPanel(logic.getFilteredBudgetList());"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "nexolute"
        },
        "content": "        budgetListPanelPlaceholder.getChildren().add(budgetListPanel.getRoot());"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "-"
        },
        "content": "        resultDisplay \u003d new ResultDisplay();"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "-"
        },
        "content": "        resultDisplayPlaceholder.getChildren().add(resultDisplay.getRoot());"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "Alaete"
        },
        "content": "        dataListPanel \u003d new DataListPanel(logic.getDataList());"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "Alaete"
        },
        "content": "        dataListPanelPlaceholder.getChildren().add(dataListPanel.getRoot());"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "Alaete"
        },
        "content": ""
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "nexolute"
        },
        "content": "        StatusBarFooter statusBarFooter \u003d new StatusBarFooter(logic.getFundBookFilePath());"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "-"
        },
        "content": "        statusbarPlaceholder.getChildren().add(statusBarFooter.getRoot());"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "-"
        },
        "content": "        CommandBox commandBox \u003d new CommandBox(this::executeCommand);"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "-"
        },
        "content": "        commandBoxPlaceholder.getChildren().add(commandBox.getRoot());"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "-"
        },
        "content": "     * Sets the default size based on {@code guiSettings}."
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "-"
        },
        "content": "    private void setWindowDefaultSize(GuiSettings guiSettings) {"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "-"
        },
        "content": "        primaryStage.setHeight(guiSettings.getWindowHeight());"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "-"
        },
        "content": "        primaryStage.setWidth(guiSettings.getWindowWidth());"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "-"
        },
        "content": "        if (guiSettings.getWindowCoordinates() !\u003d null) {"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "-"
        },
        "content": "            primaryStage.setX(guiSettings.getWindowCoordinates().getX());"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "-"
        },
        "content": "            primaryStage.setY(guiSettings.getWindowCoordinates().getY());"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "-"
        },
        "content": "     * Opens the help window or focuses on it if it\u0027s already opened."
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "-"
        },
        "content": "    public void handleHelp() {"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!helpWindow.isShowing()) {"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "-"
        },
        "content": "            helpWindow.show();"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "-"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "-"
        },
        "content": "            helpWindow.focus();"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "-"
        },
        "content": "    void show() {"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "-"
        },
        "content": "        primaryStage.show();"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "nexolute"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "     * Switch the tab to show transactions when shortcut key is sued."
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "nexolute"
        },
        "content": "     */"
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "nexolute"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "nexolute"
        },
        "content": "    public void handleShowTransaction() {"
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "        // This triggers an invalidation event in FeatureParserIndexListener, resulting in a tab switch."
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "        logic.setFeatureParser(0);"
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "nexolute"
        },
        "content": "    }"
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "nexolute"
        },
        "content": ""
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "nexolute"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "     * Switch the tab to show repeater when shortcut key is used."
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "nexolute"
        },
        "content": "     */"
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "nexolute"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "nexolute"
        },
        "content": "    public void handleShowRepeater() {"
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "        // This triggers an invalidation event in FeatureParserIndexListener, resulting in a tab switch."
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "        logic.setFeatureParser(1);"
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "nexolute"
        },
        "content": "    }"
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "nexolute"
        },
        "content": ""
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "nexolute"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "     * Switch the tab to show budget when shortcut key is used."
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "nexolute"
        },
        "content": "     */"
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "nexolute"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "nexolute"
        },
        "content": "    public void handleShowBudget() {"
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "        // This triggers an invalidation event in FeatureParserIndexListener, resulting in a tab switch."
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "        logic.setFeatureParser(2);"
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "nexolute"
        },
        "content": "    }"
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "nexolute"
        },
        "content": ""
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "nexolute"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "     * Switch the tab to show loan when shortcut key is used."
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "nexolute"
        },
        "content": "     */"
      },
      {
        "lineNumber": 248,
        "author": {
          "gitId": "nexolute"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 249,
        "author": {
          "gitId": "nexolute"
        },
        "content": "    public void handleShowLoan() {"
      },
      {
        "lineNumber": 250,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "        // This triggers an invalidation event in FeatureParserIndexListener, resulting in a tab switch."
      },
      {
        "lineNumber": 251,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "        logic.setFeatureParser(3);"
      },
      {
        "lineNumber": 252,
        "author": {
          "gitId": "nexolute"
        },
        "content": "    }"
      },
      {
        "lineNumber": 253,
        "author": {
          "gitId": "nexolute"
        },
        "content": ""
      },
      {
        "lineNumber": 254,
        "author": {
          "gitId": "nexolute"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 255,
        "author": {
          "gitId": "nexolute"
        },
        "content": "     * Switch the tab to show analytics."
      },
      {
        "lineNumber": 256,
        "author": {
          "gitId": "nexolute"
        },
        "content": "     */"
      },
      {
        "lineNumber": 257,
        "author": {
          "gitId": "nexolute"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 258,
        "author": {
          "gitId": "nexolute"
        },
        "content": "    public void handleShowAnalytics() {"
      },
      {
        "lineNumber": 259,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "        // This triggers an invalidation event in FeatureParserIndexListener, resulting in a tab switch."
      },
      {
        "lineNumber": 260,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "        logic.setFeatureParser(4);"
      },
      {
        "lineNumber": 261,
        "author": {
          "gitId": "nexolute"
        },
        "content": "    }"
      },
      {
        "lineNumber": 262,
        "author": {
          "gitId": "nexolute"
        },
        "content": ""
      },
      {
        "lineNumber": 263,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 264,
        "author": {
          "gitId": "-"
        },
        "content": "     * Closes the application."
      },
      {
        "lineNumber": 265,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 266,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 267,
        "author": {
          "gitId": "-"
        },
        "content": "    private void handleExit() {"
      },
      {
        "lineNumber": 268,
        "author": {
          "gitId": "-"
        },
        "content": "        GuiSettings guiSettings \u003d new GuiSettings(primaryStage.getWidth(), primaryStage.getHeight(),"
      },
      {
        "lineNumber": 269,
        "author": {
          "gitId": "-"
        },
        "content": "                (int) primaryStage.getX(), (int) primaryStage.getY());"
      },
      {
        "lineNumber": 270,
        "author": {
          "gitId": "-"
        },
        "content": "        logic.setGuiSettings(guiSettings);"
      },
      {
        "lineNumber": 271,
        "author": {
          "gitId": "-"
        },
        "content": "        helpWindow.hide();"
      },
      {
        "lineNumber": 272,
        "author": {
          "gitId": "-"
        },
        "content": "        primaryStage.hide();"
      },
      {
        "lineNumber": 273,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 274,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 275,
        "author": {
          "gitId": "-"
        },
        "content": "    public PersonListPanel getPersonListPanel() {"
      },
      {
        "lineNumber": 276,
        "author": {
          "gitId": "-"
        },
        "content": "        return personListPanel;"
      },
      {
        "lineNumber": 277,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 278,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 279,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "    public TransactionListPanel getTransactionListPanel() {"
      },
      {
        "lineNumber": 280,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "        return transactionListPanel;"
      },
      {
        "lineNumber": 281,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "    }"
      },
      {
        "lineNumber": 282,
        "author": {
          "gitId": "weiyang13"
        },
        "content": ""
      },
      {
        "lineNumber": 283,
        "author": {
          "gitId": "LeeYiyuan"
        },
        "content": "    public RepeaterListPanel getRepeaterListPanel() {"
      },
      {
        "lineNumber": 284,
        "author": {
          "gitId": "LeeYiyuan"
        },
        "content": "        return repeaterListPanel;"
      },
      {
        "lineNumber": 285,
        "author": {
          "gitId": "LeeYiyuan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 286,
        "author": {
          "gitId": "LeeYiyuan"
        },
        "content": ""
      },
      {
        "lineNumber": 287,
        "author": {
          "gitId": "nexolute"
        },
        "content": "    public BudgetListPanel getBudgetListPanel() {"
      },
      {
        "lineNumber": 288,
        "author": {
          "gitId": "nexolute"
        },
        "content": "        return budgetListPanel;"
      },
      {
        "lineNumber": 289,
        "author": {
          "gitId": "nexolute"
        },
        "content": "    }"
      },
      {
        "lineNumber": 290,
        "author": {
          "gitId": "nexolute"
        },
        "content": ""
      },
      {
        "lineNumber": 291,
        "author": {
          "gitId": "Alaete"
        },
        "content": "    public DataListPanel getDataListPanel() {"
      },
      {
        "lineNumber": 292,
        "author": {
          "gitId": "Alaete"
        },
        "content": "        return dataListPanel;"
      },
      {
        "lineNumber": 293,
        "author": {
          "gitId": "Alaete"
        },
        "content": "    }"
      },
      {
        "lineNumber": 294,
        "author": {
          "gitId": "Alaete"
        },
        "content": ""
      },
      {
        "lineNumber": 295,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 296,
        "author": {
          "gitId": "-"
        },
        "content": "     * Executes the command and returns the result."
      },
      {
        "lineNumber": 297,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 298,
        "author": {
          "gitId": "nexolute"
        },
        "content": "     * @see seedu.ichifund.logic.Logic#execute(String)"
      },
      {
        "lineNumber": 299,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 300,
        "author": {
          "gitId": "-"
        },
        "content": "    private CommandResult executeCommand(String commandText) throws CommandException, ParseException {"
      },
      {
        "lineNumber": 301,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 302,
        "author": {
          "gitId": "-"
        },
        "content": "            CommandResult commandResult \u003d logic.execute(commandText);"
      },
      {
        "lineNumber": 303,
        "author": {
          "gitId": "-"
        },
        "content": "            logger.info(\"Result: \" + commandResult.getFeedbackToUser());"
      },
      {
        "lineNumber": 304,
        "author": {
          "gitId": "-"
        },
        "content": "            resultDisplay.setFeedbackToUser(commandResult.getFeedbackToUser());"
      },
      {
        "lineNumber": 305,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 306,
        "author": {
          "gitId": "-"
        },
        "content": "            if (commandResult.isShowHelp()) {"
      },
      {
        "lineNumber": 307,
        "author": {
          "gitId": "-"
        },
        "content": "                handleHelp();"
      },
      {
        "lineNumber": 308,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 309,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 310,
        "author": {
          "gitId": "-"
        },
        "content": "            if (commandResult.isExit()) {"
      },
      {
        "lineNumber": 311,
        "author": {
          "gitId": "-"
        },
        "content": "                handleExit();"
      },
      {
        "lineNumber": 312,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 313,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 314,
        "author": {
          "gitId": "-"
        },
        "content": "            return commandResult;"
      },
      {
        "lineNumber": 315,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (CommandException | ParseException e) {"
      },
      {
        "lineNumber": 316,
        "author": {
          "gitId": "-"
        },
        "content": "            logger.info(\"Invalid command: \" + commandText);"
      },
      {
        "lineNumber": 317,
        "author": {
          "gitId": "-"
        },
        "content": "            resultDisplay.setFeedbackToUser(e.getMessage());"
      },
      {
        "lineNumber": 318,
        "author": {
          "gitId": "-"
        },
        "content": "            throw e;"
      },
      {
        "lineNumber": 319,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 320,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 321,
        "author": {
          "gitId": "weiyang13"
        },
        "content": ""
      },
      {
        "lineNumber": 322,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 323,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "     * Listener for invalidation of currentFeatureParserIndex."
      },
      {
        "lineNumber": 324,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "     */"
      },
      {
        "lineNumber": 325,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "    private class FeatureParserIndexListener implements InvalidationListener {"
      },
      {
        "lineNumber": 326,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "        private TabPane tabPane;"
      },
      {
        "lineNumber": 327,
        "author": {
          "gitId": "weiyang13"
        },
        "content": ""
      },
      {
        "lineNumber": 328,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "        public FeatureParserIndexListener(TabPane tabpane) {"
      },
      {
        "lineNumber": 329,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "            this.tabPane \u003d tabpane;"
      },
      {
        "lineNumber": 330,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "        }"
      },
      {
        "lineNumber": 331,
        "author": {
          "gitId": "weiyang13"
        },
        "content": ""
      },
      {
        "lineNumber": 332,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 333,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "        public void invalidated(Observable observable) {"
      },
      {
        "lineNumber": 334,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "            // Change tabs in TabPane"
      },
      {
        "lineNumber": 335,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "            this.tabPane.getSelectionModel().select(currentFeatureParserIndex.getValue());"
      },
      {
        "lineNumber": 336,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "        }"
      },
      {
        "lineNumber": 337,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "    }"
      },
      {
        "lineNumber": 338,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "LeeYiyuan": 11,
      "nexolute": 74,
      "Alaete": 11,
      "weiyang13": 60,
      "-": 182
    }
  },
  {
    "path": "src/main/java/seedu/ichifund/ui/PersonCard.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "nexolute"
        },
        "content": "package seedu.ichifund.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Comparator;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.control.Label;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.layout.FlowPane;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.layout.HBox;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.layout.Region;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "nexolute"
        },
        "content": "import seedu.ichifund.model.person.Person;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": " * An UI component that displays information of a {@code Person}."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "public class PersonCard extends UiPart\u003cRegion\u003e {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String FXML \u003d \"PersonListCard.fxml\";"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "     * Note: Certain keywords such as \"location\" and \"resources\" are reserved keywords in JavaFX."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "     * As a consequence, UI elements\u0027 variable names cannot be set to such keywords"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "     * or an exception will be thrown by JavaFX during runtime."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "     * @see \u003ca href\u003d\"https://github.com/se-edu/addressbook-level4/issues/336\"\u003eThe issue on AddressBook level 4\u003c/a\u003e"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    public final Person person;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    private HBox cardPane;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    private Label name;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    private Label id;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    private Label phone;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    private Label address;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    private Label email;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    private FlowPane tags;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    public PersonCard(Person person, int displayedIndex) {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        super(FXML);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        this.person \u003d person;"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        id.setText(displayedIndex + \". \");"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        name.setText(person.getName().fullName);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        phone.setText(person.getPhone().value);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "        address.setText(person.getAddress().value);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        email.setText(person.getEmail().value);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        person.getTags().stream()"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "                .sorted(Comparator.comparing(tag -\u003e tag.tagName))"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "                .forEach(tag -\u003e tags.getChildren().add(new Label(tag.tagName)));"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "        // short circuit if same object"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "        if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "        // instanceof handles nulls"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!(other instanceof PersonCard)) {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "        // state check"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "        PersonCard card \u003d (PersonCard) other;"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "        return id.getText().equals(card.id.getText())"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "                \u0026\u0026 person.equals(card.person);"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "nexolute": 2,
      "-": 72
    }
  },
  {
    "path": "src/main/java/seedu/ichifund/ui/PersonListPanel.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "nexolute"
        },
        "content": "package seedu.ichifund.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.control.ListCell;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.control.ListView;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.layout.Region;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "nexolute"
        },
        "content": "import seedu.ichifund.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "nexolute"
        },
        "content": "import seedu.ichifund.model.person.Person;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": " * Panel containing the list of persons."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "public class PersonListPanel extends UiPart\u003cRegion\u003e {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String FXML \u003d \"PersonListPanel.fxml\";"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    private final Logger logger \u003d LogsCenter.getLogger(PersonListPanel.class);"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    private ListView\u003cPerson\u003e personListView;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    public PersonListPanel(ObservableList\u003cPerson\u003e personList) {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "        super(FXML);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "        personListView.setItems(personList);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "        personListView.setCellFactory(listView -\u003e new PersonListViewCell());"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "     * Custom {@code ListCell} that displays the graphics of a {@code Person} using a {@code PersonCard}."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    class PersonListViewCell extends ListCell\u003cPerson\u003e {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        protected void updateItem(Person person, boolean empty) {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "            super.updateItem(person, empty);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "            if (empty || person \u003d\u003d null) {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "                setGraphic(null);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "                setText(null);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "                setGraphic(new PersonCard(person, getIndex() + 1).getRoot());"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "nexolute": 3,
      "-": 43
    }
  },
  {
    "path": "src/main/java/seedu/ichifund/ui/RepeaterCard.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "LeeYiyuan"
        },
        "content": "package seedu.ichifund.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "LeeYiyuan"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "LeeYiyuan"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "LeeYiyuan"
        },
        "content": "import javafx.scene.control.Label;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "LeeYiyuan"
        },
        "content": "import javafx.scene.layout.HBox;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "LeeYiyuan"
        },
        "content": "import javafx.scene.layout.Region;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "LeeYiyuan"
        },
        "content": "import javafx.scene.paint.Paint;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "LeeYiyuan"
        },
        "content": "import seedu.ichifund.model.repeater.Repeater;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "LeeYiyuan"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "LeeYiyuan"
        },
        "content": "/**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "LeeYiyuan"
        },
        "content": " * An UI component that displays information of a {@code Repeater}."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "LeeYiyuan"
        },
        "content": " */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "LeeYiyuan"
        },
        "content": "public class RepeaterCard extends UiPart\u003cRegion\u003e {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "LeeYiyuan"
        },
        "content": "    private static final String FXML \u003d \"RepeaterListCard.fxml\";"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "LeeYiyuan"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "LeeYiyuan"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "LeeYiyuan"
        },
        "content": "     * Note: Certain keywords such as \"location\" and \"resources\" are reserved keywords in JavaFX."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "LeeYiyuan"
        },
        "content": "     * As a consequence, UI elements\u0027 variable names cannot be set to such keywords"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "LeeYiyuan"
        },
        "content": "     * or an exception will be thrown by JavaFX during runtime."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "LeeYiyuan"
        },
        "content": "     *"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "LeeYiyuan"
        },
        "content": "     * @see \u003ca href\u003d\"https://github.com/se-edu/addressbook-level4/issues/336\"\u003eThe issue on AddressBook level 4\u003c/a\u003e"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "LeeYiyuan"
        },
        "content": "     */"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "LeeYiyuan"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "LeeYiyuan"
        },
        "content": "    public final Repeater repeater;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "LeeYiyuan"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "LeeYiyuan"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "LeeYiyuan"
        },
        "content": "    private HBox cardPane;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "LeeYiyuan"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "LeeYiyuan"
        },
        "content": "    private Label id;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "LeeYiyuan"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "LeeYiyuan"
        },
        "content": "    private Label description;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "LeeYiyuan"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "LeeYiyuan"
        },
        "content": "    private Label amount;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "LeeYiyuan"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "LeeYiyuan"
        },
        "content": "    private Label category;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "LeeYiyuan"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "LeeYiyuan"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "LeeYiyuan"
        },
        "content": "    public RepeaterCard(Repeater repeater, int displayedIndex) {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "LeeYiyuan"
        },
        "content": "        super(FXML);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "LeeYiyuan"
        },
        "content": "        this.repeater \u003d repeater;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "LeeYiyuan"
        },
        "content": "        id.setText(displayedIndex + \". \");"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "LeeYiyuan"
        },
        "content": "        description.setText(repeater.getDescription().toString());"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "LeeYiyuan"
        },
        "content": "        amount.setText(\"$\" + repeater.getAmount().toString());"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "LeeYiyuan"
        },
        "content": "        category.setText(repeater.getCategory().toString().toUpperCase());"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "LeeYiyuan"
        },
        "content": "        if (repeater.isExpenditure()) {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "LeeYiyuan"
        },
        "content": "            amount.setTextFill(Paint.valueOf(\"#ef5350\"));"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "LeeYiyuan"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "LeeYiyuan"
        },
        "content": "            amount.setTextFill(Paint.valueOf(\"#4caf50\"));"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "LeeYiyuan"
        },
        "content": "        }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "LeeYiyuan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "LeeYiyuan"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "LeeYiyuan"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "LeeYiyuan"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "LeeYiyuan"
        },
        "content": "        // short circuit if same object"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "LeeYiyuan"
        },
        "content": "        if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "LeeYiyuan"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "LeeYiyuan"
        },
        "content": "        }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "LeeYiyuan"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "LeeYiyuan"
        },
        "content": "        // instanceof handles nulls"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "LeeYiyuan"
        },
        "content": "        if (!(other instanceof RepeaterCard)) {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "LeeYiyuan"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "LeeYiyuan"
        },
        "content": "        }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "LeeYiyuan"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "LeeYiyuan"
        },
        "content": "        // state check"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "LeeYiyuan"
        },
        "content": "        RepeaterCard card \u003d (RepeaterCard) other;"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "LeeYiyuan"
        },
        "content": "        return id.getText().equals(card.id.getText())"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "LeeYiyuan"
        },
        "content": "                \u0026\u0026 repeater.equals(card.repeater);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "LeeYiyuan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "LeeYiyuan"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "LeeYiyuan": 69
    }
  },
  {
    "path": "src/main/java/seedu/ichifund/ui/RepeaterListPanel.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "LeeYiyuan"
        },
        "content": "package seedu.ichifund.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "LeeYiyuan"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "LeeYiyuan"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "LeeYiyuan"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "LeeYiyuan"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "LeeYiyuan"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "LeeYiyuan"
        },
        "content": "import javafx.scene.control.ListCell;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "LeeYiyuan"
        },
        "content": "import javafx.scene.control.ListView;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "LeeYiyuan"
        },
        "content": "import javafx.scene.layout.Region;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "LeeYiyuan"
        },
        "content": "import seedu.ichifund.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "LeeYiyuan"
        },
        "content": "import seedu.ichifund.model.repeater.Repeater;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "LeeYiyuan"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "LeeYiyuan"
        },
        "content": "/**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "LeeYiyuan"
        },
        "content": " * Panel containing the list of repeaters."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "LeeYiyuan"
        },
        "content": " */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "LeeYiyuan"
        },
        "content": "public class RepeaterListPanel extends UiPart\u003cRegion\u003e {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "LeeYiyuan"
        },
        "content": "    private static final String FXML \u003d \"RepeaterListPanel.fxml\";"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "LeeYiyuan"
        },
        "content": "    private final Logger logger \u003d LogsCenter.getLogger(RepeaterListPanel.class);"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "LeeYiyuan"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "LeeYiyuan"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "LeeYiyuan"
        },
        "content": "    private ListView\u003cRepeater\u003e repeaterListView;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "LeeYiyuan"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "LeeYiyuan"
        },
        "content": "    public RepeaterListPanel(ObservableList\u003cRepeater\u003e repeaterList) {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "LeeYiyuan"
        },
        "content": "        super(FXML);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "LeeYiyuan"
        },
        "content": "        repeaterListView.setItems(repeaterList);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "LeeYiyuan"
        },
        "content": "        repeaterListView.setCellFactory(listView -\u003e new RepeaterListViewCell());"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "LeeYiyuan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "LeeYiyuan"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "LeeYiyuan"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "LeeYiyuan"
        },
        "content": "     * Custom {@code ListCell} that displays the graphics of a {@code Repeater} using a {@code RepeaterCard}."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "LeeYiyuan"
        },
        "content": "     */"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "LeeYiyuan"
        },
        "content": "    class RepeaterListViewCell extends ListCell\u003cRepeater\u003e {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "LeeYiyuan"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "LeeYiyuan"
        },
        "content": "        protected void updateItem(Repeater repeater, boolean empty) {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "LeeYiyuan"
        },
        "content": "            super.updateItem(repeater, empty);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "LeeYiyuan"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "LeeYiyuan"
        },
        "content": "            if (empty || repeater \u003d\u003d null) {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "LeeYiyuan"
        },
        "content": "                setGraphic(null);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "LeeYiyuan"
        },
        "content": "                setText(null);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "LeeYiyuan"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "LeeYiyuan"
        },
        "content": "                setGraphic(new RepeaterCard(repeater, getIndex() + 1).getRoot());"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "LeeYiyuan"
        },
        "content": "            }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "LeeYiyuan"
        },
        "content": "        }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "LeeYiyuan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "LeeYiyuan"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "LeeYiyuan"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "LeeYiyuan": 46
    }
  },
  {
    "path": "src/main/java/seedu/ichifund/ui/ResultDisplay.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "nexolute"
        },
        "content": "package seedu.ichifund.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.control.TextArea;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.layout.Region;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": " * A ui for the status bar that is displayed at the header of the application."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "public class ResultDisplay extends UiPart\u003cRegion\u003e {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String FXML \u003d \"ResultDisplay.fxml\";"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    private TextArea resultDisplay;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    public ResultDisplay() {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "        super(FXML);"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setFeedbackToUser(String feedbackToUser) {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(feedbackToUser);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "        resultDisplay.setText(feedbackToUser);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "nexolute": 1,
      "-": 27
    }
  },
  {
    "path": "src/main/java/seedu/ichifund/ui/StatusBarFooter.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "nexolute"
        },
        "content": "package seedu.ichifund.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Paths;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.control.Label;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.layout.Region;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": " * A ui for the status bar that is displayed at the footer of the application."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "public class StatusBarFooter extends UiPart\u003cRegion\u003e {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String FXML \u003d \"StatusBarFooter.fxml\";"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    private Label saveLocationStatus;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    public StatusBarFooter(Path saveLocation) {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "        super(FXML);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "        saveLocationStatus.setText(Paths.get(\".\").resolve(saveLocation).toString());"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "nexolute": 1,
      "-": 25
    }
  },
  {
    "path": "src/main/java/seedu/ichifund/ui/TransactionCard.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "package seedu.ichifund.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "weiyang13"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "import javafx.scene.control.Label;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "import javafx.scene.layout.HBox;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "import javafx.scene.layout.Region;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "import javafx.scene.paint.Paint;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "import seedu.ichifund.model.transaction.Transaction;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "weiyang13"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "/**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "weiyang13"
        },
        "content": " * An UI component that displays information of a {@code Transaction}."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "weiyang13"
        },
        "content": " */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "public class TransactionCard extends UiPart\u003cRegion\u003e {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "    private static final String FXML \u003d \"TransactionListCard.fxml\";"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "weiyang13"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "     * Note: Certain keywords such as \"location\" and \"resources\" are reserved keywords in JavaFX."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "     * As a consequence, UI elements\u0027 variable names cannot be set to such keywords"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "     * or an exception will be thrown by JavaFX during runtime."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "     *"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "     * @see \u003ca href\u003d\"https://github.com/se-edu/addressbook-level4/issues/336\"\u003eThe issue on AddressBook level 4\u003c/a\u003e"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "     */"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "weiyang13"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "    public final Transaction transaction;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "weiyang13"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "    private HBox cardPane;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "    private Label id;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "    private Label description;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "    private Label amount;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "    private Label date;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "    private Label category;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "weiyang13"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "weiyang13"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "    public TransactionCard(Transaction transaction, int displayedIndex) {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "        super(FXML);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "        this.transaction \u003d transaction;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "        id.setText(displayedIndex + \". \");"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "        description.setText(transaction.getDescription().toString());"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "        amount.setText(\"$\" + transaction.getAmount().toString());"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "        date.setText(transaction.getDate().toFullString());"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "        category.setText(transaction.getCategory().toString().toUpperCase());"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "        if (transaction.isExpenditure()) {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "nexolute"
        },
        "content": "            amount.setTextFill(Paint.valueOf(\"#ef5350\"));"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "nexolute"
        },
        "content": "            amount.setTextFill(Paint.valueOf(\"#4caf50\"));"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "        }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "    }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "weiyang13"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "        // short circuit if same object"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "        if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "        }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "weiyang13"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "        // instanceof handles nulls"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "        if (!(other instanceof TransactionCard)) {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "        }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "weiyang13"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "        // state check"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "        TransactionCard card \u003d (TransactionCard) other;"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "        return id.getText().equals(card.id.getText())"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "                \u0026\u0026 transaction.equals(card.transaction);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "    }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "nexolute": 2,
      "weiyang13": 70
    }
  },
  {
    "path": "src/main/java/seedu/ichifund/ui/TransactionListPanel.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "package seedu.ichifund.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "weiyang13"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "weiyang13"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "import javafx.beans.InvalidationListener;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "import javafx.beans.Observable;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "import javafx.beans.property.Property;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "import javafx.beans.value.ObservableValue;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "import javafx.scene.control.Label;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "import javafx.scene.control.ListCell;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "import javafx.scene.control.ListView;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "import javafx.scene.layout.Region;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "import seedu.ichifund.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "import seedu.ichifund.model.context.TransactionContext;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "import seedu.ichifund.model.transaction.Transaction;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "weiyang13"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "/**"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "weiyang13"
        },
        "content": " * Panel containing the list of transactions."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "weiyang13"
        },
        "content": " */"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "public class TransactionListPanel extends UiPart\u003cRegion\u003e {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "    private static final String FXML \u003d \"TransactionListPanel.fxml\";"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "    private final Logger logger \u003d LogsCenter.getLogger(TransactionListPanel.class);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "weiyang13"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "    private ListView\u003cTransaction\u003e transactionListView;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "weiyang13"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "    private Label transactionContextView;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "weiyang13"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "    public TransactionListPanel(ObservableList\u003cTransaction\u003e transactionList,"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "                                ObservableValue\u003cTransactionContext\u003e transactionContext) {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "        super(FXML);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "        transactionListView.setItems(transactionList);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "        transactionListView.setCellFactory(listView -\u003e new TransactionListViewCell());"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "        transactionContextView.setText(transactionContext.getValue().toString());"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "        transactionContext.addListener(new TransactionContextInvalidationListener(transactionContextView));"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "weiyang13"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "     * Listener for invalidation of the transition context."
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "     */"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "    class TransactionContextInvalidationListener implements InvalidationListener {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "        private Label label;"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "weiyang13"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "        public TransactionContextInvalidationListener(Label label) {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "            this.label \u003d label;"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "        }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "weiyang13"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "        public void invalidated(Observable observable) {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "            label.setText(((Property) observable).getValue().toString());"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "        }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "    }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "weiyang13"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "     * Custom {@code ListCell} that displays the graphics of a {@code Transaction} using a {@code TransactionCard}."
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "     */"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "    class TransactionListViewCell extends ListCell\u003cTransaction\u003e {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "        protected void updateItem(Transaction transaction, boolean empty) {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "            super.updateItem(transaction, empty);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "weiyang13"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "            if (empty || transaction \u003d\u003d null) {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "                setGraphic(null);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "                setText(null);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "                setGraphic(new TransactionCard(transaction, getIndex() + 1).getRoot());"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "            }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "        }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "    }"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "weiyang13"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "weiyang13": 74
    }
  },
  {
    "path": "src/main/java/seedu/ichifund/ui/Ui.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "nexolute"
        },
        "content": "package seedu.ichifund.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.stage.Stage;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": " * API of UI component"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "public interface Ui {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "    /** Starts the UI (and the App).  */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "    void start(Stage primaryStage);"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "nexolute": 1,
      "-": 12
    }
  },
  {
    "path": "src/main/java/seedu/ichifund/ui/UiManager.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "nexolute"
        },
        "content": "package seedu.ichifund.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.application.Platform;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.control.Alert;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.control.Alert.AlertType;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.image.Image;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.stage.Stage;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "nexolute"
        },
        "content": "import seedu.ichifund.MainApp;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "nexolute"
        },
        "content": "import seedu.ichifund.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "nexolute"
        },
        "content": "import seedu.ichifund.commons.util.StringUtil;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "nexolute"
        },
        "content": "import seedu.ichifund.logic.Logic;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": " * The manager of the UI component."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "public class UiManager implements Ui {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String ALERT_DIALOG_PANE_FIELD_ID \u003d \"alertDialogPane\";"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final Logger logger \u003d LogsCenter.getLogger(UiManager.class);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "nexolute"
        },
        "content": "    private static final String ICON_APPLICATION \u003d \"/images/fund_book_32.png\";"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    private Logic logic;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    private MainWindow mainWindow;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    public UiManager(Logic logic) {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        super();"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "        this.logic \u003d logic;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    public void start(Stage primaryStage) {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "        logger.info(\"Starting UI...\");"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        //Set the application icon."
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        primaryStage.getIcons().add(getImage(ICON_APPLICATION));"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "            mainWindow \u003d new MainWindow(primaryStage, logic);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "            mainWindow.show(); //This should be called before creating other UI parts"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "            mainWindow.fillInnerParts();"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (Throwable e) {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "            logger.severe(StringUtil.getDetails(e));"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "            showFatalErrorDialogAndShutdown(\"Fatal error during initializing\", e);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    private Image getImage(String imagePath) {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        return new Image(MainApp.class.getResourceAsStream(imagePath));"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    void showAlertDialogAndWait(Alert.AlertType type, String title, String headerText, String contentText) {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "        showAlertDialogAndWait(mainWindow.getPrimaryStage(), type, title, headerText, contentText);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "     * Shows an alert dialog on {@code owner} with the given parameters."
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "     * This method only returns after the user has closed the alert dialog."
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "    private static void showAlertDialogAndWait(Stage owner, AlertType type, String title, String headerText,"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "                                               String contentText) {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "        final Alert alert \u003d new Alert(type);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "nexolute"
        },
        "content": "        alert.getDialogPane().getStylesheets().add(\"view/IchiTheme.css\");"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "        alert.initOwner(owner);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "        alert.setTitle(title);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "        alert.setHeaderText(headerText);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "        alert.setContentText(contentText);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "        alert.getDialogPane().setId(ALERT_DIALOG_PANE_FIELD_ID);"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "        alert.showAndWait();"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "     * Shows an error alert dialog with {@code title} and error message, {@code e},"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "     * and exits the application after the user has closed the alert dialog."
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "    private void showFatalErrorDialogAndShutdown(String title, Throwable e) {"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "        logger.severe(title + \" \" + e.getMessage() + StringUtil.getDetails(e));"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "        showAlertDialogAndWait(Alert.AlertType.ERROR, title, e.getMessage(), e.toString());"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "        Platform.exit();"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "        System.exit(1);"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "nexolute": 7,
      "-": 79
    }
  },
  {
    "path": "src/main/java/seedu/ichifund/ui/UiPart.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "nexolute"
        },
        "content": "package seedu.ichifund.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.net.URL;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.fxml.FXMLLoader;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "nexolute"
        },
        "content": "import seedu.ichifund.MainApp;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": " * Represents a distinct part of the UI. e.g. Windows, dialogs, panels, status bars, etc."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": " * It contains a scene graph with a root node of type {@code T}."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "public abstract class UiPart\u003cT\u003e {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    /** Resource folder where FXML files are stored. */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String FXML_FILE_FOLDER \u003d \"/view/\";"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    private final FXMLLoader fxmlLoader \u003d new FXMLLoader();"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "     * Constructs a UiPart with the specified FXML file URL."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "     * The FXML file must not specify the {@code fx:controller} attribute."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    public UiPart(URL fxmlFileUrl) {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        loadFxmlFile(fxmlFileUrl, null);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "     * Constructs a UiPart using the specified FXML file within {@link #FXML_FILE_FOLDER}."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "     * @see #UiPart(URL)"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    public UiPart(String fxmlFileName) {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "        this(getFxmlFileUrl(fxmlFileName));"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "     * Constructs a UiPart with the specified FXML file URL and root object."
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "     * The FXML file must not specify the {@code fx:controller} attribute."
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    public UiPart(URL fxmlFileUrl, T root) {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        loadFxmlFile(fxmlFileUrl, root);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "     * Constructs a UiPart with the specified FXML file within {@link #FXML_FILE_FOLDER} and root object."
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "     * @see #UiPart(URL, T)"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    public UiPart(String fxmlFileName, T root) {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        this(getFxmlFileUrl(fxmlFileName), root);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns the root object of the scene graph of this UiPart."
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    public T getRoot() {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "        return fxmlLoader.getRoot();"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "     * Loads the object hierarchy from a FXML document."
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param location Location of the FXML document."
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param root Specifies the root of the object hierarchy."
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "    private void loadFxmlFile(URL location, T root) {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(location);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "        fxmlLoader.setLocation(location);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "        fxmlLoader.setController(this);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "        fxmlLoader.setRoot(root);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "            fxmlLoader.load();"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(e);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns the FXML file URL for the specified FXML file name within {@link #FXML_FILE_FOLDER}."
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "    private static URL getFxmlFileUrl(String fxmlFileName) {"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(fxmlFileName);"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "        String fxmlFileNameWithFolder \u003d FXML_FILE_FOLDER + fxmlFileName;"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "        URL fxmlFileUrl \u003d MainApp.class.getResource(fxmlFileNameWithFolder);"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "        return requireNonNull(fxmlFileUrl);"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "nexolute": 2,
      "-": 86
    }
  },
  {
    "path": "src/main/resources/view/BudgetListCard.fxml",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "nexolute"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "nexolute"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "nexolute"
        },
        "content": "\u003c?import javafx.geometry.Insets?\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "nexolute"
        },
        "content": "\u003c?import javafx.scene.control.Label?\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "nexolute"
        },
        "content": "\u003c?import javafx.scene.layout.GridPane?\u003e"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "nexolute"
        },
        "content": "\u003c?import javafx.scene.layout.HBox?\u003e"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "nexolute"
        },
        "content": "\u003c?import javafx.scene.layout.Region?\u003e"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "nexolute"
        },
        "content": "\u003c?import javafx.scene.layout.VBox?\u003e"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "nexolute"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "nexolute"
        },
        "content": "\u003c?import javafx.scene.control.ProgressBar?\u003e"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "nexolute"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "nexolute"
        },
        "content": "\u003c?import javafx.scene.layout.ColumnConstraints?\u003e"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "nexolute"
        },
        "content": "\u003cHBox id\u003d\"cardPane\" fx:id\u003d\"cardPane\" xmlns\u003d\"http://javafx.com/javafx/8\" xmlns:fx\u003d\"http://javafx.com/fxml/1\"\u003e"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "nexolute"
        },
        "content": "    \u003cGridPane HBox.hgrow\u003d\"ALWAYS\"\u003e"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "nexolute"
        },
        "content": "        \u003ccolumnConstraints\u003e"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "nexolute"
        },
        "content": "            \u003cColumnConstraints hgrow\u003d\"SOMETIMES\" minWidth\u003d\"10\" prefWidth\u003d\"150\" /\u003e"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "nexolute"
        },
        "content": "        \u003c/columnConstraints\u003e"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "nexolute"
        },
        "content": "        \u003cHBox GridPane.columnIndex\u003d\"0\"\u003e"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "nexolute"
        },
        "content": "            \u003cVBox alignment\u003d\"CENTER_LEFT\"\u003e"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "nexolute"
        },
        "content": "                \u003cHBox alignment\u003d\"CENTER_LEFT\"\u003e"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "nexolute"
        },
        "content": "                    \u003cLabel fx:id\u003d\"id\" styleClass\u003d\"cell_big_label\"\u003e"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "nexolute"
        },
        "content": "                        \u003cminWidth\u003e"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "nexolute"
        },
        "content": "                            \u003c!-- Ensures that the label text is never truncated --\u003e"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "nexolute"
        },
        "content": "                            \u003cRegion fx:constant\u003d\"USE_PREF_SIZE\" /\u003e"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "nexolute"
        },
        "content": "                        \u003c/minWidth\u003e"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "nexolute"
        },
        "content": "                    \u003c/Label\u003e"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "nexolute"
        },
        "content": "                    \u003cLabel fx:id\u003d\"description\" text\u003d\"\\$description\" styleClass\u003d\"cell_big_label\" /\u003e"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "nexolute"
        },
        "content": "                \u003c/HBox\u003e"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "nexolute"
        },
        "content": "                \u003cLabel fx:id\u003d\"criterion\" styleClass\u003d\"cell_small_label\" text\u003d\"\\$criterion\" /\u003e"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "nexolute"
        },
        "content": "            \u003c/VBox\u003e"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "nexolute"
        },
        "content": "            \u003cRegion HBox.hgrow\u003d\"ALWAYS\" /\u003e"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "nexolute"
        },
        "content": "            \u003cVBox alignment\u003d\"CENTER_RIGHT\"\u003e"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "nexolute"
        },
        "content": "                \u003cpadding\u003e"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "nexolute"
        },
        "content": "                    \u003cInsets top\u003d\"5\" /\u003e"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "nexolute"
        },
        "content": "                \u003c/padding\u003e"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "nexolute"
        },
        "content": "                \u003cLabel fx:id\u003d\"amount\" text\u003d\"\\$amount\" /\u003e"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "nexolute"
        },
        "content": "                \u003cProgressBar fx:id\u003d\"budgetProgress\" progress\u003d\"0\" prefWidth\u003d\"200\" prefHeight\u003d\"10\"\u003e"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "nexolute"
        },
        "content": "                    \u003cVBox.margin\u003e"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "nexolute"
        },
        "content": "                        \u003cInsets top\u003d\"5\" /\u003e"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "nexolute"
        },
        "content": "                    \u003c/VBox.margin\u003e"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "nexolute"
        },
        "content": "                \u003c/ProgressBar\u003e"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "nexolute"
        },
        "content": "            \u003c/VBox\u003e"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "nexolute"
        },
        "content": "        \u003c/HBox\u003e"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "nexolute"
        },
        "content": "    \u003c/GridPane\u003e"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "nexolute"
        },
        "content": "\u003c/HBox\u003e"
      }
    ],
    "authorContributionMap": {
      "nexolute": 45
    }
  },
  {
    "path": "src/main/resources/view/BudgetListPanel.fxml",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "nexolute"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "nexolute"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "nexolute"
        },
        "content": "\u003c?import javafx.scene.control.ListView?\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "nexolute"
        },
        "content": "\u003c?import javafx.scene.layout.VBox?\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "nexolute"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "nexolute"
        },
        "content": "\u003cVBox xmlns\u003d\"http://javafx.com/javafx/8\" xmlns:fx\u003d\"http://javafx.com/fxml/1\"\u003e"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "nexolute"
        },
        "content": "    \u003cListView fx:id\u003d\"budgetListView\" VBox.vgrow\u003d\"ALWAYS\" /\u003e"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "nexolute"
        },
        "content": "\u003c/VBox\u003e"
      }
    ],
    "authorContributionMap": {
      "nexolute": 8
    }
  },
  {
    "path": "src/main/resources/view/CommandBox.fxml",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.control.TextField?\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.layout.StackPane?\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "nexolute"
        },
        "content": "\u003cStackPane xmlns\u003d\"http://javafx.com/javafx/8\" xmlns:fx\u003d\"http://javafx.com/fxml/1\"\u003e"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003cTextField fx:id\u003d\"commandTextField\" onAction\u003d\"#handleCommandEntered\" promptText\u003d\"Enter command here...\" /\u003e"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c/StackPane\u003e"
      }
    ],
    "authorContributionMap": {
      "nexolute": 1,
      "-": 7
    }
  },
  {
    "path": "src/main/resources/view/DataCard.fxml",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Alaete"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Alaete"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Alaete"
        },
        "content": "\u003c?import javafx.geometry.Insets?\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Alaete"
        },
        "content": "\u003c?import javafx.scene.control.Label?\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Alaete"
        },
        "content": "\u003c?import javafx.scene.layout.ColumnConstraints?\u003e"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Alaete"
        },
        "content": "\u003c?import javafx.scene.layout.GridPane?\u003e"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Alaete"
        },
        "content": "\u003c?import javafx.scene.layout.HBox?\u003e"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Alaete"
        },
        "content": "\u003c?import javafx.scene.layout.Region?\u003e"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Alaete"
        },
        "content": "\u003c?import javafx.scene.layout.VBox?\u003e"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Alaete"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Alaete"
        },
        "content": "\u003cHBox id\u003d\"cardPane\" fx:id\u003d\"cardPane\" xmlns\u003d\"http://javafx.com/javafx/8\" xmlns:fx\u003d\"http://javafx.com/fxml/1\"\u003e"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Alaete"
        },
        "content": "    \u003cGridPane HBox.hgrow\u003d\"ALWAYS\"\u003e"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Alaete"
        },
        "content": "        \u003ccolumnConstraints\u003e"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Alaete"
        },
        "content": "            \u003cColumnConstraints hgrow\u003d\"SOMETIMES\" minWidth\u003d\"10\" prefWidth\u003d\"150\" /\u003e"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Alaete"
        },
        "content": "        \u003c/columnConstraints\u003e"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Alaete"
        },
        "content": "        \u003cVBox alignment\u003d\"CENTER_LEFT\" GridPane.columnIndex\u003d\"0\"\u003e"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Alaete"
        },
        "content": "            \u003cHBox spacing\u003d\"5\" alignment\u003d\"CENTER_LEFT\"\u003e"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Alaete"
        },
        "content": "                \u003cLabel fx:id\u003d\"id\" styleClass\u003d\"cell_big_label\"\u003e"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Alaete"
        },
        "content": "                    \u003cminWidth\u003e"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Alaete"
        },
        "content": "                        \u003c!-- Ensures that the label text is never truncated --\u003e"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Alaete"
        },
        "content": "                        \u003cRegion fx:constant\u003d\"USE_PREF_SIZE\" /\u003e"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Alaete"
        },
        "content": "                    \u003c/minWidth\u003e"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Alaete"
        },
        "content": "                \u003c/Label\u003e"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Alaete"
        },
        "content": "                \u003cLabel fx:id\u003d\"description\" text\u003d\"\\$description\" styleClass\u003d\"cell_big_label\"\u003e"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Alaete"
        },
        "content": "                \u003c/Label\u003e"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Alaete"
        },
        "content": "                \u003cRegion HBox.hgrow\u003d\"ALWAYS\" /\u003e"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Alaete"
        },
        "content": "                \u003cLabel fx:id\u003d\"amount\" styleClass\u003d\"cell_big_label\" text\u003d\"\\$amount\" alignment\u003d\"CENTER_RIGHT\"\u003e"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Alaete"
        },
        "content": "                    \u003cminWidth\u003e"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Alaete"
        },
        "content": "                        \u003cRegion fx:constant\u003d\"USE_PREF_SIZE\" /\u003e"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Alaete"
        },
        "content": "                    \u003c/minWidth\u003e"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Alaete"
        },
        "content": "                \u003c/Label\u003e"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Alaete"
        },
        "content": "            \u003c/HBox\u003e"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Alaete"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Alaete"
        },
        "content": "            \u003cHBox spacing\u003d\"5\" alignment\u003d\"CENTER_LEFT\"\u003e"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Alaete"
        },
        "content": "                \u003cLabel fx:id\u003d\"date\" styleClass\u003d\"cell_small_label\" /\u003e"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Alaete"
        },
        "content": "                \u003cRegion HBox.hgrow\u003d\"ALWAYS\" /\u003e"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Alaete"
        },
        "content": "                \u003cLabel fx:id\u003d\"category\" text\u003d\"\\$category\" styleClass\u003d\"cell_small_label\" /\u003e"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Alaete"
        },
        "content": "            \u003c/HBox\u003e"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Alaete"
        },
        "content": "        \u003c/VBox\u003e"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Alaete"
        },
        "content": "    \u003c/GridPane\u003e"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Alaete"
        },
        "content": "\u003c/HBox\u003e"
      }
    ],
    "authorContributionMap": {
      "Alaete": 41
    }
  },
  {
    "path": "src/main/resources/view/DataListPanel.fxml",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Alaete"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Alaete"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Alaete"
        },
        "content": "\u003c?import javafx.scene.control.ListView?\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Alaete"
        },
        "content": "\u003c?import javafx.scene.layout.VBox?\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Alaete"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Alaete"
        },
        "content": "\u003cVBox xmlns\u003d\"http://javafx.com/javafx/8\" xmlns:fx\u003d\"http://javafx.com/fxml/1\"\u003e"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Alaete"
        },
        "content": "    \u003cListView fx:id\u003d\"dataListView\" VBox.vgrow\u003d\"ALWAYS\" /\u003e"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Alaete"
        },
        "content": "\u003c/VBox\u003e"
      }
    ],
    "authorContributionMap": {
      "Alaete": 8
    }
  },
  {
    "path": "src/main/resources/view/IchiTheme.css",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "nexolute"
        },
        "content": "@font-face {"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "nexolute"
        },
        "content": "    font-family: \"Roboto Mono\";"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "nexolute"
        },
        "content": "    src: url(\u0027../fonts/RobotoMono.ttf\u0027);"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "nexolute"
        },
        "content": "}"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "nexolute"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "nexolute"
        },
        "content": "@font-face {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "nexolute"
        },
        "content": "    font-family: \"Roboto\";"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "nexolute"
        },
        "content": "    src: url(\u0027../fonts/Roboto.ttf\u0027);"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "nexolute"
        },
        "content": "}"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "nexolute"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "nexolute"
        },
        "content": "@font-face {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "nexolute"
        },
        "content": "    font-family: \"Roboto\";"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "nexolute"
        },
        "content": "    src: url(\u0027../fonts/RobotoBold.ttf\u0027);"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "nexolute"
        },
        "content": "}"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "nexolute"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "nexolute"
        },
        "content": ".root {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "nexolute"
        },
        "content": "    -fx-background: white;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "nexolute"
        },
        "content": "}"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "nexolute"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "nexolute"
        },
        "content": ".text{"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "nexolute"
        },
        "content": "    -fx-font-smoothing-type: gray;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "nexolute"
        },
        "content": "}"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "nexolute"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "nexolute"
        },
        "content": ".error {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "nexolute"
        },
        "content": "    -fx-text-fill: #d06651 !important; /* The error class should always override the default text-fill style */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "nexolute"
        },
        "content": "}"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "nexolute"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "nexolute"
        },
        "content": ".tag-selector {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "nexolute"
        },
        "content": "    -fx-border-width: 1;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "nexolute"
        },
        "content": "    -fx-border-color: white;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "nexolute"
        },
        "content": "    -fx-border-radius: 3;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "nexolute"
        },
        "content": "    -fx-background-radius: 3;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "nexolute"
        },
        "content": "}"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "nexolute"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "nexolute"
        },
        "content": ".tooltip-text {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "nexolute"
        },
        "content": "    -fx-text-fill: white;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "nexolute"
        },
        "content": "}"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "nexolute"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "nexolute"
        },
        "content": ".menu-bar {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "nexolute"
        },
        "content": "    -fx-background-color: white;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "nexolute"
        },
        "content": "    -fx-font-family: \"Roboto\";"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "nexolute"
        },
        "content": "}"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "nexolute"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "nexolute"
        },
        "content": ".menu {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "nexolute"
        },
        "content": "    -fx-background-color: white;"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "nexolute"
        },
        "content": "}"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "nexolute"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "nexolute"
        },
        "content": ".menu .label {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "nexolute"
        },
        "content": "    -fx-text-fill: black;"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "nexolute"
        },
        "content": "}"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "nexolute"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "nexolute"
        },
        "content": ".menu:hover {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "nexolute"
        },
        "content": "    -fx-background-color: #eceff1;"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "nexolute"
        },
        "content": "}"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "nexolute"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "nexolute"
        },
        "content": ".context-menu {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "nexolute"
        },
        "content": "    -fx-background-color: white;"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "nexolute"
        },
        "content": "    -fx-padding: 0;"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "nexolute"
        },
        "content": "}"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "nexolute"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "nexolute"
        },
        "content": ".menu-item {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "nexolute"
        },
        "content": "    -fx-background-color: white;"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "nexolute"
        },
        "content": "    -fx-padding: 10px 20px;"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "nexolute"
        },
        "content": "}"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "nexolute"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "nexolute"
        },
        "content": ".menu-item:focused {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "nexolute"
        },
        "content": "    -fx-background-color: #eceff1;"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "nexolute"
        },
        "content": "}"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "nexolute"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "nexolute"
        },
        "content": "#commandBoxPlaceholder{"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "nexolute"
        },
        "content": "    -fx-padding: 10px;"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "nexolute"
        },
        "content": "}"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "nexolute"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "nexolute"
        },
        "content": "#commandTextField {"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "nexolute"
        },
        "content": "    -fx-background-color: white;"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "nexolute"
        },
        "content": "    -fx-font-family: \"Roboto Mono\";"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "nexolute"
        },
        "content": "}"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "nexolute"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "nexolute"
        },
        "content": "#resultDisplayPlaceholder {"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "nexolute"
        },
        "content": "    -fx-background-color: #37474f;"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "nexolute"
        },
        "content": "}"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "nexolute"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "nexolute"
        },
        "content": "#resultDisplay {"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "nexolute"
        },
        "content": "    -fx-background-insets: 0;"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "nexolute"
        },
        "content": "    -fx-background-color: #37474f;"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "nexolute"
        },
        "content": "    -fx-text-fill: white;"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "nexolute"
        },
        "content": "    -fx-font-family: \"Roboto Mono\";"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "nexolute"
        },
        "content": "    -fx-font-size: 9pt;"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "nexolute"
        },
        "content": "}"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "nexolute"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "nexolute"
        },
        "content": "#resultDisplay .content {"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "nexolute"
        },
        "content": "    -fx-background-color: #37474f;"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "nexolute"
        },
        "content": "    -fx-background-radius: 0;"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "nexolute"
        },
        "content": "    -fx-padding: 15px;"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "nexolute"
        },
        "content": "}"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "nexolute"
        },
        "content": ""
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "nexolute"
        },
        "content": "#resultDisplay:focused .content {"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "nexolute"
        },
        "content": "    -fx-background-color: #37474f;"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "nexolute"
        },
        "content": "    -fx-background-radius: 0;"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "nexolute"
        },
        "content": "    -fx-padding: 15px;"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "nexolute"
        },
        "content": "}"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "nexolute"
        },
        "content": ""
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "nexolute"
        },
        "content": ".tab-pane {"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "nexolute"
        },
        "content": "    -fx-tab-min-width: 100px;"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "nexolute"
        },
        "content": "}"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "nexolute"
        },
        "content": ""
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "nexolute"
        },
        "content": ".tab-pane .tab-header-area {"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "nexolute"
        },
        "content": "    -fx-padding: 0;"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "nexolute"
        },
        "content": "    -fx-border-width: 0 0 1px 0;"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "nexolute"
        },
        "content": "    -fx-border-color: #eceff1;"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "nexolute"
        },
        "content": "}"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "nexolute"
        },
        "content": ""
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "nexolute"
        },
        "content": ".tab-pane .tab-header-area .tab-header-background {"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "nexolute"
        },
        "content": "    -fx-opacity: 0;"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "nexolute"
        },
        "content": "}"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "nexolute"
        },
        "content": ""
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "nexolute"
        },
        "content": ".tab-pane .tab {"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "nexolute"
        },
        "content": "    -fx-background-color: transparent;"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "nexolute"
        },
        "content": "    -fx-background-insets: 0;"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "nexolute"
        },
        "content": "    -fx-background-radius: 0;"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "nexolute"
        },
        "content": "    -fx-border-width: 0 0 3px 0;"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "nexolute"
        },
        "content": "    -fx-border-color: transparent;"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "nexolute"
        },
        "content": "    -fx-faint-focus-color: transparent;"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "nexolute"
        },
        "content": "    -fx-focus-color: transparent;"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "nexolute"
        },
        "content": "    -fx-font-family: \"Roboto\";"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "nexolute"
        },
        "content": "    -fx-padding: 5px 10px;"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "nexolute"
        },
        "content": "}"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "nexolute"
        },
        "content": ""
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "nexolute"
        },
        "content": ".tab-pane .tab:selected {"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "nexolute"
        },
        "content": "    -fx-border-color: #80d8ff;"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "nexolute"
        },
        "content": "}"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "nexolute"
        },
        "content": ""
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "nexolute"
        },
        "content": ".tab-pane .tab:focused .label {"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "nexolute"
        },
        "content": "    -fx-background-color: transparent;"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "nexolute"
        },
        "content": "}"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "nexolute"
        },
        "content": ""
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "nexolute"
        },
        "content": ".tab-pane .tab .tab-label {"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "nexolute"
        },
        "content": "    -fx-alignment: center;"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "nexolute"
        },
        "content": "    -fx-text-fill: #b0bec5;"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "nexolute"
        },
        "content": "}"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "nexolute"
        },
        "content": ""
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "nexolute"
        },
        "content": ".tab-pane .tab:selected .tab-label {"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "nexolute"
        },
        "content": "    -fx-text-fill: black;"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "nexolute"
        },
        "content": "}"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "nexolute"
        },
        "content": ""
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "nexolute"
        },
        "content": ".content-pane {"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "nexolute"
        },
        "content": "    -fx-background-color: transparent;"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "nexolute"
        },
        "content": "}"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "nexolute"
        },
        "content": ""
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "nexolute"
        },
        "content": ".scroll-bar {"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "nexolute"
        },
        "content": "    -fx-background-color: transparent;"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "nexolute"
        },
        "content": "}"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "nexolute"
        },
        "content": ""
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "nexolute"
        },
        "content": ".scroll-bar .thumb {"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "nexolute"
        },
        "content": "    -fx-background-color: white;"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "nexolute"
        },
        "content": "    -fx-background-insets: 5;"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "nexolute"
        },
        "content": "}"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "nexolute"
        },
        "content": ""
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "nexolute"
        },
        "content": ".scroll-bar .increment-button,"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "nexolute"
        },
        "content": ".scroll-bar .decrement-button {"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "nexolute"
        },
        "content": "    -fx-background-color: transparent;"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "nexolute"
        },
        "content": "    -fx-padding: 0 0 0 0;"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "nexolute"
        },
        "content": "}"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "nexolute"
        },
        "content": ""
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "nexolute"
        },
        "content": ".scroll-bar .increment-arrow,"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "nexolute"
        },
        "content": ".scroll-bar .decrement-arrow {"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "nexolute"
        },
        "content": "    -fx-shape: \" \";"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "nexolute"
        },
        "content": "}"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "nexolute"
        },
        "content": ""
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "nexolute"
        },
        "content": ".scroll-bar:vertical .increment-arrow,"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "nexolute"
        },
        "content": ".scroll-bar:vertical .decrement-arrow {"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "nexolute"
        },
        "content": "    -fx-padding: 1 8 1 8;"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "nexolute"
        },
        "content": "}"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "nexolute"
        },
        "content": ""
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "nexolute"
        },
        "content": ".scroll-bar:horizontal .increment-arrow,"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "nexolute"
        },
        "content": ".scroll-bar:horizontal .decrement-arrow {"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "nexolute"
        },
        "content": "    -fx-padding: 8 1 8 1;"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "nexolute"
        },
        "content": "}"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "nexolute"
        },
        "content": ""
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "nexolute"
        },
        "content": ".list-view {"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "nexolute"
        },
        "content": "    -fx-background-color: transparent;"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "nexolute"
        },
        "content": "    -fx-background-insets: 0;"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "nexolute"
        },
        "content": "    -fx-padding: 0px;"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "nexolute"
        },
        "content": "}"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "nexolute"
        },
        "content": ""
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "nexolute"
        },
        "content": ".list-view .scroll-bar .thumb {"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "nexolute"
        },
        "content": "   -fx-background-color: #cfd8dc;"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "nexolute"
        },
        "content": "}"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "nexolute"
        },
        "content": ""
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "nexolute"
        },
        "content": ".list-cell {"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "nexolute"
        },
        "content": "    -fx-label-padding: 0;"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "nexolute"
        },
        "content": "    -fx-graphic-text-gap : 0;"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "nexolute"
        },
        "content": "    -fx-padding: 0;"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "nexolute"
        },
        "content": "    -fx-font-family: \"Roboto\";"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "nexolute"
        },
        "content": "}"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "nexolute"
        },
        "content": ""
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "nexolute"
        },
        "content": ".list-cell:empty {"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "nexolute"
        },
        "content": "    -fx-background: transparent;"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "nexolute"
        },
        "content": "}"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "nexolute"
        },
        "content": ""
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "nexolute"
        },
        "content": ".list-cell:filled #cardPane {"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "nexolute"
        },
        "content": "    -fx-padding: 20px 30px;"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "nexolute"
        },
        "content": "    -fx-background-color: white;"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "nexolute"
        },
        "content": "    -fx-border-width: 0;"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "nexolute"
        },
        "content": "}"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "nexolute"
        },
        "content": ""
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "nexolute"
        },
        "content": ".list-cell:filled #cardPane .label {"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "nexolute"
        },
        "content": "    -fx-font-family: \"Roboto\";"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "nexolute"
        },
        "content": "}"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "nexolute"
        },
        "content": ""
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "nexolute"
        },
        "content": ".list-cell:filled:selected #cardPane {"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "nexolute"
        },
        "content": "    -fx-background-color: #eceff1;"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "nexolute"
        },
        "content": "}"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "nexolute"
        },
        "content": ""
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "nexolute"
        },
        "content": ".list-cell:filled:selected .label {"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "nexolute"
        },
        "content": "    -fx-text-fill: black;"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "nexolute"
        },
        "content": "}"
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "nexolute"
        },
        "content": ""
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "weiyang13"
        },
        "content": ".list-title {"
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "nexolute"
        },
        "content": "    -fx-font-size: 12px;"
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "    -fx-font-weight: bold;"
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "    -fx-background-color: white;"
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "nexolute"
        },
        "content": "    -fx-border-width: 0;"
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "nexolute"
        },
        "content": "    -fx-padding: 15px 30px;"
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "nexolute"
        },
        "content": "}"
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "nexolute"
        },
        "content": ""
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "nexolute"
        },
        "content": ".list-title .label {"
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "nexolute"
        },
        "content": "    -fx-text-fill: #b0bec5;"
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "}"
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "weiyang13"
        },
        "content": ""
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "nexolute"
        },
        "content": ".cell_big_label {"
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "nexolute"
        },
        "content": "    -fx-font-family: \"Roboto\";"
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "nexolute"
        },
        "content": "    -fx-font-size: 16px;"
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "nexolute"
        },
        "content": "    -fx-font-weight: bold;"
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "nexolute"
        },
        "content": "}"
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "nexolute"
        },
        "content": ""
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "nexolute"
        },
        "content": ".cell_small_label {"
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "nexolute"
        },
        "content": "    -fx-font-size: 12px;"
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "nexolute"
        },
        "content": "}"
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "nexolute"
        },
        "content": ""
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "nexolute"
        },
        "content": "#budgetProgress {"
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "nexolute"
        },
        "content": "    -fx-accent: #cfd8dc;"
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "nexolute"
        },
        "content": "}"
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "nexolute"
        },
        "content": ""
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "nexolute"
        },
        "content": "#budgetProgress .bar {"
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "nexolute"
        },
        "content": "    -fx-background-insets: 0;"
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "nexolute"
        },
        "content": "    -fx-border-radius: 0;"
      },
      {
        "lineNumber": 248,
        "author": {
          "gitId": "nexolute"
        },
        "content": "    -fx-background-radius: 10px;"
      },
      {
        "lineNumber": 249,
        "author": {
          "gitId": "nexolute"
        },
        "content": "}"
      },
      {
        "lineNumber": 250,
        "author": {
          "gitId": "nexolute"
        },
        "content": ""
      },
      {
        "lineNumber": 251,
        "author": {
          "gitId": "nexolute"
        },
        "content": "#budgetProgress .track {"
      },
      {
        "lineNumber": 252,
        "author": {
          "gitId": "nexolute"
        },
        "content": "    -fx-background-insets: 0;"
      },
      {
        "lineNumber": 253,
        "author": {
          "gitId": "nexolute"
        },
        "content": "    -fx-background-color: #cfd8dc;"
      },
      {
        "lineNumber": 254,
        "author": {
          "gitId": "nexolute"
        },
        "content": "}"
      },
      {
        "lineNumber": 255,
        "author": {
          "gitId": "nexolute"
        },
        "content": ""
      },
      {
        "lineNumber": 256,
        "author": {
          "gitId": "nexolute"
        },
        "content": "#statusbarPlaceholder {"
      },
      {
        "lineNumber": 257,
        "author": {
          "gitId": "nexolute"
        },
        "content": "    -fx-border-width: 1px 0 0 0;"
      },
      {
        "lineNumber": 258,
        "author": {
          "gitId": "nexolute"
        },
        "content": "    -fx-border-color: #cfd8dc;"
      },
      {
        "lineNumber": 259,
        "author": {
          "gitId": "nexolute"
        },
        "content": "    -fx-padding: 2px;"
      },
      {
        "lineNumber": 260,
        "author": {
          "gitId": "nexolute"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "nexolute": 255,
      "weiyang13": 5
    }
  },
  {
    "path": "src/main/resources/view/MainWindow.fxml",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import java.net.URL?\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.Scene?\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.control.Menu?\u003e"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.control.MenuBar?\u003e"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.control.MenuItem?\u003e"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "nexolute"
        },
        "content": "\u003c?import javafx.scene.control.Tab?\u003e"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "nexolute"
        },
        "content": "\u003c?import javafx.scene.control.TabPane?\u003e"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.image.Image?\u003e"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "nexolute"
        },
        "content": "\u003c?import javafx.scene.layout.AnchorPane?\u003e"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.layout.StackPane?\u003e"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.layout.VBox?\u003e"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "nexolute"
        },
        "content": "\u003c?import javafx.stage.Stage?\u003e"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "nexolute"
        },
        "content": "\u003cfx:root xmlns:fx\u003d\"http://javafx.com/fxml/1\" xmlns\u003d\"http://javafx.com/javafx/11.0.1\" height\u003d\"720.0\" minHeight\u003d\"720.0\" minWidth\u003d\"960.0\" onCloseRequest\u003d\"#handleExit\" resizable\u003d\"false\" title\u003d\"IchiFund\" type\u003d\"javafx.stage.Stage\" width\u003d\"960.0\"\u003e"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003cicons\u003e"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "nexolute"
        },
        "content": "        \u003cImage url\u003d\"@/images/fund_book_32.png\" /\u003e"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003c/icons\u003e"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003cscene\u003e"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003cScene\u003e"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "            \u003cstylesheets\u003e"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "nexolute"
        },
        "content": "                \u003cURL value\u003d\"@IchiTheme.css\" /\u003e"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "            \u003c/stylesheets\u003e"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "nexolute"
        },
        "content": "            \u003cVBox prefHeight\u003d\"720.0\" prefWidth\u003d\"960.0\"\u003e"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "                \u003cMenuBar fx:id\u003d\"menuBar\" VBox.vgrow\u003d\"NEVER\"\u003e"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "                    \u003cMenu mnemonicParsing\u003d\"false\" text\u003d\"File\"\u003e"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "                        \u003cMenuItem mnemonicParsing\u003d\"false\" onAction\u003d\"#handleExit\" text\u003d\"Exit\" /\u003e"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "                    \u003c/Menu\u003e"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "nexolute"
        },
        "content": "                    \u003cMenu mnemonicParsing\u003d\"false\" text\u003d\"View\"\u003e"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "nexolute"
        },
        "content": "                        \u003cMenuItem fx:id\u003d\"showTransactionMenuItem\" mnemonicParsing\u003d\"false\" onAction\u003d\"#handleShowTransaction\" text\u003d\"Show Transaction\" /\u003e"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "nexolute"
        },
        "content": "                        \u003cMenuItem fx:id\u003d\"showRepeaterMenuItem\" mnemonicParsing\u003d\"false\" onAction\u003d\"#handleShowRepeater\" text\u003d\"Show Repeater\" /\u003e"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "nexolute"
        },
        "content": "                        \u003cMenuItem fx:id\u003d\"showBudgetMenuItem\" mnemonicParsing\u003d\"false\" onAction\u003d\"#handleShowBudget\" text\u003d\"Show Budget\" /\u003e"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "nexolute"
        },
        "content": "                        \u003cMenuItem fx:id\u003d\"showLoanMenuItem\" mnemonicParsing\u003d\"false\" onAction\u003d\"#handleShowLoan\" text\u003d\"Show Loan\" /\u003e"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "nexolute"
        },
        "content": "                        \u003cMenuItem fx:id\u003d\"showAnalyticsMenuItem\" mnemonicParsing\u003d\"false\" onAction\u003d\"#handleShowAnalytics\" text\u003d\"Show Analytics\" /\u003e"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "nexolute"
        },
        "content": "                    \u003c/Menu\u003e"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "                    \u003cMenu mnemonicParsing\u003d\"false\" text\u003d\"Help\"\u003e"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "                        \u003cMenuItem fx:id\u003d\"helpMenuItem\" mnemonicParsing\u003d\"false\" onAction\u003d\"#handleHelp\" text\u003d\"Help\" /\u003e"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "                    \u003c/Menu\u003e"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "                \u003c/MenuBar\u003e"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "nexolute"
        },
        "content": "                \u003cVBox VBox.vgrow\u003d\"ALWAYS\"\u003e"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "nexolute"
        },
        "content": "                    \u003cStackPane fx:id\u003d\"commandBoxPlaceholder\" VBox.vgrow\u003d\"NEVER\" /\u003e"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "nexolute"
        },
        "content": "                    \u003cStackPane fx:id\u003d\"resultDisplayPlaceholder\" maxHeight\u003d\"100\" minHeight\u003d\"120\" prefHeight\u003d\"120\" /\u003e"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "nexolute"
        },
        "content": "                    \u003cTabPane fx:id\u003d\"mainTabPane\" tabClosingPolicy\u003d\"UNAVAILABLE\" VBox.vgrow\u003d\"ALWAYS\"\u003e"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "nexolute"
        },
        "content": "                        \u003ctabs\u003e"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "nexolute"
        },
        "content": "                            \u003cTab text\u003d\"Transaction\"\u003e"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "nexolute"
        },
        "content": "                                \u003ccontent\u003e"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "nexolute"
        },
        "content": "                                    \u003cAnchorPane minHeight\u003d\"0.0\" minWidth\u003d\"0.0\"\u003e"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "nexolute"
        },
        "content": "                                        \u003cchildren\u003e"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "nexolute"
        },
        "content": "                                            \u003cVBox fx:id\u003d\"transactionList\" styleClass\u003d\"content-pane\" AnchorPane.bottomAnchor\u003d\"0.0\" AnchorPane.leftAnchor\u003d\"0.0\" AnchorPane.rightAnchor\u003d\"0.0\" AnchorPane.topAnchor\u003d\"0.0\"\u003e"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "                                                \u003cStackPane fx:id\u003d\"transactionListPanelPlaceholder\" VBox.vgrow\u003d\"ALWAYS\" /\u003e"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "nexolute"
        },
        "content": "                                            \u003c/VBox\u003e"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "nexolute"
        },
        "content": "                                        \u003c/children\u003e"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "nexolute"
        },
        "content": "                                    \u003c/AnchorPane\u003e"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "nexolute"
        },
        "content": "                                \u003c/content\u003e"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "nexolute"
        },
        "content": "                            \u003c/Tab\u003e"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "nexolute"
        },
        "content": "                            \u003cTab text\u003d\"Repeaters\"\u003e"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "nexolute"
        },
        "content": "                                \u003ccontent\u003e"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "nexolute"
        },
        "content": "                                    \u003cAnchorPane minHeight\u003d\"0.0\" minWidth\u003d\"0.0\"\u003e"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "nexolute"
        },
        "content": "                                        \u003cchildren\u003e"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "nexolute"
        },
        "content": "                                            \u003cVBox fx:id\u003d\"repeaterList\" styleClass\u003d\"content-pane\" AnchorPane.bottomAnchor\u003d\"0.0\" AnchorPane.leftAnchor\u003d\"0.0\" AnchorPane.rightAnchor\u003d\"0.0\" AnchorPane.topAnchor\u003d\"0.0\"\u003e"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "nexolute"
        },
        "content": "                                                \u003cStackPane fx:id\u003d\"repeaterListPanelPlaceholder\" VBox.vgrow\u003d\"ALWAYS\" /\u003e"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "nexolute"
        },
        "content": "                                            \u003c/VBox\u003e"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "nexolute"
        },
        "content": "                                        \u003c/children\u003e"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "nexolute"
        },
        "content": "                                    \u003c/AnchorPane\u003e"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "nexolute"
        },
        "content": "                                \u003c/content\u003e"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "nexolute"
        },
        "content": "                            \u003c/Tab\u003e"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "nexolute"
        },
        "content": "                            \u003cTab text\u003d\"Budgets\"\u003e"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "nexolute"
        },
        "content": "                                \u003ccontent\u003e"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "nexolute"
        },
        "content": "                                    \u003cAnchorPane minHeight\u003d\"0.0\" minWidth\u003d\"0.0\"\u003e"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "nexolute"
        },
        "content": "                                        \u003cchildren\u003e"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "nexolute"
        },
        "content": "                                            \u003cVBox fx:id\u003d\"budgetList\" styleClass\u003d\"content-pane\" AnchorPane.bottomAnchor\u003d\"0.0\" AnchorPane.leftAnchor\u003d\"0.0\" AnchorPane.rightAnchor\u003d\"0.0\" AnchorPane.topAnchor\u003d\"0.0\"\u003e"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "nexolute"
        },
        "content": "                                                \u003cStackPane fx:id\u003d\"budgetListPanelPlaceholder\" VBox.vgrow\u003d\"ALWAYS\" /\u003e"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "nexolute"
        },
        "content": "                                            \u003c/VBox\u003e"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "nexolute"
        },
        "content": "                                        \u003c/children\u003e"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "nexolute"
        },
        "content": "                                    \u003c/AnchorPane\u003e"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "nexolute"
        },
        "content": "                                \u003c/content\u003e"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "nexolute"
        },
        "content": "                            \u003c/Tab\u003e"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "nexolute"
        },
        "content": "                            \u003cTab text\u003d\"Loan\"\u003e"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "nexolute"
        },
        "content": "                                \u003ccontent\u003e"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "nexolute"
        },
        "content": "                                    \u003cAnchorPane minHeight\u003d\"0.0\" minWidth\u003d\"0.0\"\u003e"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "nexolute"
        },
        "content": "                                        \u003cchildren\u003e"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "nexolute"
        },
        "content": "                                            \u003cVBox fx:id\u003d\"loanList\" styleClass\u003d\"content-pane\" AnchorPane.bottomAnchor\u003d\"0.0\" AnchorPane.leftAnchor\u003d\"0.0\" AnchorPane.rightAnchor\u003d\"0.0\" AnchorPane.topAnchor\u003d\"0.0\"\u003e"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "nexolute"
        },
        "content": "                                                \u003cStackPane fx:id\u003d\"loanListPanelPlaceholder\" VBox.vgrow\u003d\"ALWAYS\" /\u003e"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "                                            \u003c/VBox\u003e"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "nexolute"
        },
        "content": "                                        \u003c/children\u003e"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "nexolute"
        },
        "content": "                                    \u003c/AnchorPane\u003e"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "nexolute"
        },
        "content": "                                \u003c/content\u003e"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "nexolute"
        },
        "content": "                            \u003c/Tab\u003e"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "nexolute"
        },
        "content": "                            \u003cTab text\u003d\"Analytics\"\u003e"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "nexolute"
        },
        "content": "                                \u003ccontent\u003e"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "nexolute"
        },
        "content": "                                    \u003cAnchorPane minHeight\u003d\"0.0\" minWidth\u003d\"0.0\"\u003e"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "nexolute"
        },
        "content": "                                        \u003cchildren\u003e"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "Alaete"
        },
        "content": "                                            \u003cVBox fx:id\u003d\"analyticsBoard\" styleClass\u003d\"pane-with-border\" AnchorPane.bottomAnchor\u003d\"0.0\" AnchorPane.leftAnchor\u003d\"0.0\" AnchorPane.rightAnchor\u003d\"0.0\" AnchorPane.topAnchor\u003d\"0.0\"\u003e"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "Alaete"
        },
        "content": "                                                \u003cStackPane fx:id\u003d\"dataListPanelPlaceholder\" VBox.vgrow\u003d\"ALWAYS\" /\u003e"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "nexolute"
        },
        "content": "                                            \u003c/VBox\u003e"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "nexolute"
        },
        "content": "                                        \u003c/children\u003e"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "nexolute"
        },
        "content": "                                    \u003c/AnchorPane\u003e"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "nexolute"
        },
        "content": "                                \u003c/content\u003e"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "nexolute"
        },
        "content": "                            \u003c/Tab\u003e"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "nexolute"
        },
        "content": "                        \u003c/tabs\u003e"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "nexolute"
        },
        "content": "                    \u003c/TabPane\u003e"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "nexolute"
        },
        "content": "                \u003c/VBox\u003e"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "nexolute"
        },
        "content": "                \u003cStackPane fx:id\u003d\"statusbarPlaceholder\" /\u003e"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "            \u003c/VBox\u003e"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003c/Scene\u003e"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003c/scene\u003e"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c/fx:root\u003e"
      }
    ],
    "authorContributionMap": {
      "nexolute": 75,
      "Alaete": 2,
      "weiyang13": 1,
      "-": 30
    }
  },
  {
    "path": "src/main/resources/view/RepeaterListCard.fxml",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "LeeYiyuan"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "LeeYiyuan"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "LeeYiyuan"
        },
        "content": "\u003c?import javafx.scene.control.Label?\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "LeeYiyuan"
        },
        "content": "\u003c?import javafx.scene.layout.ColumnConstraints?\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "LeeYiyuan"
        },
        "content": "\u003c?import javafx.scene.layout.GridPane?\u003e"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "LeeYiyuan"
        },
        "content": "\u003c?import javafx.scene.layout.HBox?\u003e"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "LeeYiyuan"
        },
        "content": "\u003c?import javafx.scene.layout.Region?\u003e"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "LeeYiyuan"
        },
        "content": "\u003c?import javafx.scene.layout.VBox?\u003e"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "LeeYiyuan"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "LeeYiyuan"
        },
        "content": "\u003cHBox id\u003d\"cardPane\" fx:id\u003d\"cardPane\" xmlns\u003d\"http://javafx.com/javafx/8\" xmlns:fx\u003d\"http://javafx.com/fxml/1\"\u003e"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "LeeYiyuan"
        },
        "content": "    \u003cGridPane HBox.hgrow\u003d\"ALWAYS\"\u003e"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "LeeYiyuan"
        },
        "content": "        \u003ccolumnConstraints\u003e"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "LeeYiyuan"
        },
        "content": "            \u003cColumnConstraints hgrow\u003d\"SOMETIMES\" minWidth\u003d\"10\" prefWidth\u003d\"150\" /\u003e"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "LeeYiyuan"
        },
        "content": "        \u003c/columnConstraints\u003e"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "LeeYiyuan"
        },
        "content": "        \u003cVBox alignment\u003d\"CENTER_LEFT\" GridPane.columnIndex\u003d\"0\"\u003e"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "LeeYiyuan"
        },
        "content": "            \u003cHBox spacing\u003d\"5\" alignment\u003d\"CENTER_LEFT\"\u003e"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "LeeYiyuan"
        },
        "content": "                \u003cLabel fx:id\u003d\"id\" styleClass\u003d\"cell_big_label\"\u003e"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "LeeYiyuan"
        },
        "content": "                    \u003cminWidth\u003e"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "LeeYiyuan"
        },
        "content": "                        \u003c!-- Ensures that the label text is never truncated --\u003e"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "LeeYiyuan"
        },
        "content": "                        \u003cRegion fx:constant\u003d\"USE_PREF_SIZE\" /\u003e"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "LeeYiyuan"
        },
        "content": "                    \u003c/minWidth\u003e"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "LeeYiyuan"
        },
        "content": "                \u003c/Label\u003e"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "LeeYiyuan"
        },
        "content": "                \u003cLabel fx:id\u003d\"description\" text\u003d\"\\$description\" styleClass\u003d\"cell_big_label\"\u003e"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "LeeYiyuan"
        },
        "content": "                \u003c/Label\u003e"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "LeeYiyuan"
        },
        "content": "                \u003cRegion HBox.hgrow\u003d\"ALWAYS\" /\u003e"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "LeeYiyuan"
        },
        "content": "                \u003cLabel fx:id\u003d\"amount\" styleClass\u003d\"cell_big_label\" text\u003d\"\\$amount\" alignment\u003d\"CENTER_RIGHT\"\u003e"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "LeeYiyuan"
        },
        "content": "                    \u003cminWidth\u003e"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "LeeYiyuan"
        },
        "content": "                        \u003cRegion fx:constant\u003d\"USE_PREF_SIZE\" /\u003e"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "LeeYiyuan"
        },
        "content": "                    \u003c/minWidth\u003e"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "LeeYiyuan"
        },
        "content": "                \u003c/Label\u003e"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "LeeYiyuan"
        },
        "content": "            \u003c/HBox\u003e"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "LeeYiyuan"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "LeeYiyuan"
        },
        "content": "            \u003cHBox spacing\u003d\"5\" alignment\u003d\"CENTER_LEFT\"\u003e"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "LeeYiyuan"
        },
        "content": "                \u003cLabel fx:id\u003d\"date\" styleClass\u003d\"cell_small_label\" /\u003e"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "LeeYiyuan"
        },
        "content": "                \u003cRegion HBox.hgrow\u003d\"ALWAYS\" /\u003e"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "LeeYiyuan"
        },
        "content": "                \u003cLabel fx:id\u003d\"category\" text\u003d\"\\$category\" styleClass\u003d\"cell_small_label\" /\u003e"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "LeeYiyuan"
        },
        "content": "            \u003c/HBox\u003e"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "LeeYiyuan"
        },
        "content": "        \u003c/VBox\u003e"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "LeeYiyuan"
        },
        "content": "    \u003c/GridPane\u003e"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "LeeYiyuan"
        },
        "content": "\u003c/HBox\u003e"
      }
    ],
    "authorContributionMap": {
      "LeeYiyuan": 40
    }
  },
  {
    "path": "src/main/resources/view/RepeaterListPanel.fxml",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "LeeYiyuan"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "LeeYiyuan"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "LeeYiyuan"
        },
        "content": "\u003c?import javafx.scene.control.ListView?\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "LeeYiyuan"
        },
        "content": "\u003c?import javafx.scene.layout.VBox?\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "LeeYiyuan"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "LeeYiyuan"
        },
        "content": "\u003c?import javafx.scene.control.Label?\u003e"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "LeeYiyuan"
        },
        "content": "\u003c?import javafx.scene.layout.HBox?\u003e"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "LeeYiyuan"
        },
        "content": "\u003c?import javafx.scene.layout.Region?\u003e"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "LeeYiyuan"
        },
        "content": "\u003cVBox xmlns\u003d\"http://javafx.com/javafx/8\" xmlns:fx\u003d\"http://javafx.com/fxml/1\"\u003e"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "LeeYiyuan"
        },
        "content": "    \u003cHBox minHeight\u003d\"20\" styleClass\u003d\"list-title\"\u003e"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "LeeYiyuan"
        },
        "content": "        \u003cRegion HBox.hgrow\u003d\"ALWAYS\" /\u003e"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "LeeYiyuan"
        },
        "content": "    \u003c/HBox\u003e"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "LeeYiyuan"
        },
        "content": "    \u003cListView fx:id\u003d\"repeaterListView\" VBox.vgrow\u003d\"ALWAYS\" /\u003e"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "LeeYiyuan"
        },
        "content": "\u003c/VBox\u003e"
      }
    ],
    "authorContributionMap": {
      "LeeYiyuan": 14
    }
  },
  {
    "path": "src/main/resources/view/ResultDisplay.fxml",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.control.TextArea?\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.layout.StackPane?\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "nexolute"
        },
        "content": "\u003cStackPane fx:id\u003d\"placeHolder\" xmlns\u003d\"http://javafx.com/javafx/8\" xmlns:fx\u003d\"http://javafx.com/fxml/1\"\u003e"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "nexolute"
        },
        "content": "    \u003cTextArea fx:id\u003d\"resultDisplay\" editable\u003d\"false\" wrapText\u003d\"true\" /\u003e"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c/StackPane\u003e"
      }
    ],
    "authorContributionMap": {
      "nexolute": 2,
      "-": 6
    }
  },
  {
    "path": "src/main/resources/view/TransactionListCard.fxml",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "weiyang13"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "\u003c?import javafx.scene.control.Label?\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "\u003c?import javafx.scene.layout.ColumnConstraints?\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "\u003c?import javafx.scene.layout.GridPane?\u003e"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "\u003c?import javafx.scene.layout.HBox?\u003e"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "\u003c?import javafx.scene.layout.Region?\u003e"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "\u003c?import javafx.scene.layout.VBox?\u003e"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "weiyang13"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "\u003cHBox id\u003d\"cardPane\" fx:id\u003d\"cardPane\" xmlns\u003d\"http://javafx.com/javafx/8\" xmlns:fx\u003d\"http://javafx.com/fxml/1\"\u003e"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "    \u003cGridPane HBox.hgrow\u003d\"ALWAYS\"\u003e"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "        \u003ccolumnConstraints\u003e"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "            \u003cColumnConstraints hgrow\u003d\"SOMETIMES\" minWidth\u003d\"10\" prefWidth\u003d\"150\" /\u003e"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "        \u003c/columnConstraints\u003e"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "        \u003cVBox alignment\u003d\"CENTER_LEFT\" GridPane.columnIndex\u003d\"0\"\u003e"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "            \u003cHBox spacing\u003d\"5\" alignment\u003d\"CENTER_LEFT\"\u003e"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "                \u003cLabel fx:id\u003d\"id\" styleClass\u003d\"cell_big_label\"\u003e"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "                    \u003cminWidth\u003e"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "                        \u003c!-- Ensures that the label text is never truncated --\u003e"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "                        \u003cRegion fx:constant\u003d\"USE_PREF_SIZE\" /\u003e"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "                    \u003c/minWidth\u003e"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "                \u003c/Label\u003e"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "                \u003cLabel fx:id\u003d\"description\" text\u003d\"\\$description\" styleClass\u003d\"cell_big_label\"\u003e"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "                \u003c/Label\u003e"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "                \u003cRegion HBox.hgrow\u003d\"ALWAYS\" /\u003e"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "                \u003cLabel fx:id\u003d\"amount\" styleClass\u003d\"cell_big_label\" text\u003d\"\\$amount\" alignment\u003d\"CENTER_RIGHT\"\u003e"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "                    \u003cminWidth\u003e"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "                        \u003cRegion fx:constant\u003d\"USE_PREF_SIZE\" /\u003e"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "                    \u003c/minWidth\u003e"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "                \u003c/Label\u003e"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "            \u003c/HBox\u003e"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "weiyang13"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "            \u003cHBox spacing\u003d\"5\" alignment\u003d\"CENTER_LEFT\"\u003e"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "                \u003cLabel fx:id\u003d\"date\" styleClass\u003d\"cell_small_label\" /\u003e"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "                \u003cRegion HBox.hgrow\u003d\"ALWAYS\" /\u003e"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "                \u003cLabel fx:id\u003d\"category\" text\u003d\"\\$category\" styleClass\u003d\"cell_small_label\" /\u003e"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "            \u003c/HBox\u003e"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "        \u003c/VBox\u003e"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "    \u003c/GridPane\u003e"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "\u003c/HBox\u003e"
      }
    ],
    "authorContributionMap": {
      "weiyang13": 40
    }
  },
  {
    "path": "src/main/resources/view/TransactionListPanel.fxml",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "weiyang13"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "\u003c?import javafx.scene.control.ListView?\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "\u003c?import javafx.scene.layout.VBox?\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "weiyang13"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "\u003c?import javafx.scene.control.Label?\u003e"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "\u003c?import javafx.scene.layout.HBox?\u003e"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "\u003c?import javafx.scene.layout.Region?\u003e"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "\u003cVBox xmlns\u003d\"http://javafx.com/javafx/8\" xmlns:fx\u003d\"http://javafx.com/fxml/1\"\u003e"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "nexolute"
        },
        "content": "    \u003cHBox minHeight\u003d\"20\" styleClass\u003d\"list-title\"\u003e"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "        \u003cRegion HBox.hgrow\u003d\"ALWAYS\" /\u003e"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "nexolute"
        },
        "content": "        \u003cLabel fx:id\u003d\"transactionContextView\" alignment\u003d\"CENTER\" minHeight\u003d\"20\"  /\u003e"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "        \u003cRegion HBox.hgrow\u003d\"ALWAYS\" /\u003e"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "    \u003c/HBox\u003e"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "    \u003cListView fx:id\u003d\"transactionListView\" VBox.vgrow\u003d\"ALWAYS\" /\u003e"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "\u003c/VBox\u003e"
      }
    ],
    "authorContributionMap": {
      "nexolute": 2,
      "weiyang13": 14
    }
  },
  {
    "path": "src/test/java/seedu/ichifund/AppParametersTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "nexolute"
        },
        "content": "package seedu.ichifund;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Paths;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Collections;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.HashMap;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Map;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.application.Application;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "public class AppParametersTest {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    private final ParametersStub parametersStub \u003d new ParametersStub();"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    private final AppParameters expected \u003d new AppParameters();"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parse_validConfigPath_success() {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "        parametersStub.namedParameters.put(\"config\", \"config.json\");"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "        expected.setConfigPath(Paths.get(\"config.json\"));"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expected, AppParameters.parse(parametersStub));"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parse_nullConfigPath_success() {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        parametersStub.namedParameters.put(\"config\", null);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expected, AppParameters.parse(parametersStub));"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parse_invalidConfigPath_success() {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "        parametersStub.namedParameters.put(\"config\", \"a\\0\");"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        expected.setConfigPath(null);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expected, AppParameters.parse(parametersStub));"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    private static class ParametersStub extends Application.Parameters {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "        private Map\u003cString, String\u003e namedParameters \u003d new HashMap\u003c\u003e();"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        public List\u003cString\u003e getRaw() {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"should not be called\");"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        public List\u003cString\u003e getUnnamed() {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"should not be called\");"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "        public Map\u003cString, String\u003e getNamed() {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "            return Collections.unmodifiableMap(namedParameters);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "nexolute": 1,
      "-": 57
    }
  },
  {
    "path": "src/test/java/seedu/ichifund/commons/core/ConfigTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "nexolute"
        },
        "content": "package seedu.ichifund.commons.core;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertNotNull;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "public class ConfigTest {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    public void toString_defaultObject_stringReturned() {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "        String defaultConfigAsString \u003d \"Current log level : INFO\\n\""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "                + \"Preference file Location : preferences.json\";"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(defaultConfigAsString, new Config().toString());"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    public void equalsMethod() {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "        Config defaultConfig \u003d new Config();"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "        assertNotNull(defaultConfig);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(defaultConfig.equals(defaultConfig));"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "nexolute": 1,
      "-": 26
    }
  },
  {
    "path": "src/test/java/seedu/ichifund/commons/core/VersionTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "nexolute"
        },
        "content": "package seedu.ichifund.commons.core;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "nexolute"
        },
        "content": "import static seedu.ichifund.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "public class VersionTest {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    public void versionParsing_acceptableVersionString_parsedVersionCorrectly() {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "        verifyVersionParsedCorrectly(\"V0.0.0ea\", 0, 0, 0, true);"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "        verifyVersionParsedCorrectly(\"V3.10.2\", 3, 10, 2, false);"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "        verifyVersionParsedCorrectly(\"V100.100.100ea\", 100, 100, 100, true);"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    public void versionParsing_wrongVersionString_throwIllegalArgumentException() {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(IllegalArgumentException.class, () -\u003e Version.fromString(\"This is not a version string\"));"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    public void versionConstructor_correctParameter_valueAsExpected() {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "        Version version \u003d new Version(19, 10, 20, true);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(19, version.getMajor());"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(10, version.getMinor());"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(20, version.getPatch());"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(true, version.isEarlyAccess());"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    public void versionToString_validVersion_correctStringRepresentation() {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "        // boundary at 0"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        Version version \u003d new Version(0, 0, 0, true);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(\"V0.0.0ea\", version.toString());"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        // normal values"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "        version \u003d new Version(4, 10, 5, false);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(\"V4.10.5\", version.toString());"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        // big numbers"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        version \u003d new Version(100, 100, 100, true);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(\"V100.100.100ea\", version.toString());"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    public void versionComparable_validVersion_compareToIsCorrect() {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "        Version one;"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        Version another;"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "        // Tests equality"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "        one \u003d new Version(0, 0, 0, true);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "        another \u003d new Version(0, 0, 0, true);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(one.compareTo(another) \u003d\u003d 0);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "        one \u003d new Version(11, 12, 13, false);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "        another \u003d new Version(11, 12, 13, false);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(one.compareTo(another) \u003d\u003d 0);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "        // Tests different patch"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "        one \u003d new Version(0, 0, 5, false);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "        another \u003d new Version(0, 0, 0, false);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(one.compareTo(another) \u003e 0);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "        // Tests different minor"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "        one \u003d new Version(0, 0, 0, false);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "        another \u003d new Version(0, 5, 0, false);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(one.compareTo(another) \u003c 0);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "        // Tests different major"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "        one \u003d new Version(10, 0, 0, true);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "        another \u003d new Version(0, 0, 0, true);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(one.compareTo(another) \u003e 0);"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "        // Tests high major vs low minor"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "        one \u003d new Version(10, 0, 0, true);"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "        another \u003d new Version(0, 1, 0, true);"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(one.compareTo(another) \u003e 0);"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "        // Tests high patch vs low minor"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "        one \u003d new Version(0, 0, 10, false);"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "        another \u003d new Version(0, 1, 0, false);"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(one.compareTo(another) \u003c 0);"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "        // Tests same major minor different patch"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "        one \u003d new Version(2, 15, 0, false);"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "        another \u003d new Version(2, 15, 5, false);"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(one.compareTo(another) \u003c 0);"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "        // Tests early access vs not early access on same version number"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "        one \u003d new Version(2, 15, 0, true);"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "        another \u003d new Version(2, 15, 0, false);"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(one.compareTo(another) \u003c 0);"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "        // Tests early access lower version vs not early access higher version compare by version number first"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "        one \u003d new Version(2, 15, 0, true);"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "        another \u003d new Version(2, 15, 5, false);"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(one.compareTo(another) \u003c 0);"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "        // Tests early access higher version vs not early access lower version compare by version number first"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "        one \u003d new Version(2, 15, 0, false);"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "        another \u003d new Version(2, 15, 5, true);"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(one.compareTo(another) \u003c 0);"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "    public void versionComparable_validVersion_hashCodeIsCorrect() {"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "        Version version \u003d new Version(100, 100, 100, true);"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(100100100, version.hashCode());"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "        version \u003d new Version(10, 10, 10, false);"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(1010010010, version.hashCode());"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "    public void versionComparable_validVersion_equalIsCorrect() {"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "        Version one;"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "        Version another;"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "        one \u003d new Version(0, 0, 0, false);"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "        another \u003d new Version(0, 0, 0, false);"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(one.equals(another));"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "        one \u003d new Version(100, 191, 275, true);"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "        another \u003d new Version(100, 191, 275, true);"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(one.equals(another));"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "    private void verifyVersionParsedCorrectly(String versionString,"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "            int major, int minor, int patch, boolean isEarlyAccess) {"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(new Version(major, minor, patch, isEarlyAccess), Version.fromString(versionString));"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "nexolute": 2,
      "-": 133
    }
  },
  {
    "path": "src/test/java/seedu/ichifund/commons/core/index/IndexTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "nexolute"
        },
        "content": "package seedu.ichifund.commons.core.index;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "nexolute"
        },
        "content": "import static seedu.ichifund.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "public class IndexTest {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "    public void createOneBasedIndex() {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "        // invalid index"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(IndexOutOfBoundsException.class, () -\u003e Index.fromOneBased(0));"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "        // check equality using the same base"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(1, Index.fromOneBased(1).getOneBased());"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(5, Index.fromOneBased(5).getOneBased());"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "        // convert from one-based index to zero-based index"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(0, Index.fromOneBased(1).getZeroBased());"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(4, Index.fromOneBased(5).getZeroBased());"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    public void createZeroBasedIndex() {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        // invalid index"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(IndexOutOfBoundsException.class, () -\u003e Index.fromZeroBased(-1));"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        // check equality using the same base"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(0, Index.fromZeroBased(0).getZeroBased());"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(5, Index.fromZeroBased(5).getZeroBased());"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "        // convert from zero-based index to one-based index"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(1, Index.fromZeroBased(0).getOneBased());"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(6, Index.fromZeroBased(5).getOneBased());"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "        final Index fifthPersonIndex \u003d Index.fromOneBased(5);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        // same values -\u003e returns true"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(fifthPersonIndex.equals(Index.fromOneBased(5)));"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(fifthPersonIndex.equals(Index.fromZeroBased(4)));"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(fifthPersonIndex.equals(fifthPersonIndex));"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(fifthPersonIndex.equals(null));"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "        // different types -\u003e returns false"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(fifthPersonIndex.equals(5.0f));"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "        // different index -\u003e returns false"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(fifthPersonIndex.equals(Index.fromOneBased(1)));"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "nexolute": 2,
      "-": 58
    }
  },
  {
    "path": "src/test/java/seedu/ichifund/commons/util/AppUtilTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "nexolute"
        },
        "content": "package seedu.ichifund.commons.util;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertNotNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "nexolute"
        },
        "content": "import static seedu.ichifund.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "public class AppUtilTest {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "    public void getImage_exitingImage() {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "nexolute"
        },
        "content": "        assertNotNull(AppUtil.getImage(\"/images/fund_book_32.png\"));"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    public void getImage_nullGiven_throwsNullPointerException() {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e AppUtil.getImage(null));"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    public void checkArgument_true_nothingHappens() {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "        AppUtil.checkArgument(true);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "        AppUtil.checkArgument(true, \"\");"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    public void checkArgument_falseWithoutErrorMessage_throwsIllegalArgumentException() {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(IllegalArgumentException.class, () -\u003e AppUtil.checkArgument(false));"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    public void checkArgument_falseWithErrorMessage_throwsIllegalArgumentException() {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "        String errorMessage \u003d \"error message\";"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(IllegalArgumentException.class, errorMessage, () -\u003e AppUtil.checkArgument(false, errorMessage));"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "nexolute": 3,
      "-": 33
    }
  },
  {
    "path": "src/test/java/seedu/ichifund/commons/util/CollectionUtilTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "nexolute"
        },
        "content": "package seedu.ichifund.commons.util;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "nexolute"
        },
        "content": "import static seedu.ichifund.commons.util.CollectionUtil.requireAllNonNull;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "nexolute"
        },
        "content": "import static seedu.ichifund.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Collection;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Collections;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "public class CollectionUtilTest {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    public void requireAllNonNullVarargs() {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "        // no arguments"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "        assertNullPointerExceptionNotThrown();"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "        // any non-empty argument list"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "        assertNullPointerExceptionNotThrown(new Object(), new Object());"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "        assertNullPointerExceptionNotThrown(\"test\");"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "        assertNullPointerExceptionNotThrown(\"\");"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "        // argument lists with just one null at the beginning"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        assertNullPointerExceptionThrown((Object) null);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        assertNullPointerExceptionThrown(null, \"\", new Object());"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        assertNullPointerExceptionThrown(null, new Object(), new Object());"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        // argument lists with nulls in the middle"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        assertNullPointerExceptionThrown(new Object(), null, null, \"test\");"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "        assertNullPointerExceptionThrown(\"\", null, new Object());"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "        // argument lists with one null as the last argument"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        assertNullPointerExceptionThrown(\"\", new Object(), null);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        assertNullPointerExceptionThrown(new Object(), new Object(), null);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        // null reference"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "        assertNullPointerExceptionThrown((Object[]) null);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "        // confirms nulls inside lists in the argument list are not considered"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        List\u003cObject\u003e containingNull \u003d Arrays.asList((Object) null);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        assertNullPointerExceptionNotThrown(containingNull, new Object());"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    public void requireAllNonNullCollection() {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        // lists containing nulls in the front"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "        assertNullPointerExceptionThrown(Arrays.asList((Object) null));"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        assertNullPointerExceptionThrown(Arrays.asList(null, new Object(), \"\"));"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "        // lists containing nulls in the middle"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "        assertNullPointerExceptionThrown(Arrays.asList(\"spam\", null, new Object()));"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "        assertNullPointerExceptionThrown(Arrays.asList(\"spam\", null, \"eggs\", null, new Object()));"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "        // lists containing nulls at the end"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "        assertNullPointerExceptionThrown(Arrays.asList(\"spam\", new Object(), null));"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "        assertNullPointerExceptionThrown(Arrays.asList(new Object(), null));"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "        // null reference"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "        assertNullPointerExceptionThrown((Collection\u003cObject\u003e) null);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "        // empty list"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "        assertNullPointerExceptionNotThrown(Collections.emptyList());"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "        // list with all non-null elements"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "        assertNullPointerExceptionNotThrown(Arrays.asList(new Object(), \"ham\", Integer.valueOf(1)));"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "        assertNullPointerExceptionNotThrown(Arrays.asList(new Object()));"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "        // confirms nulls inside nested lists are not considered"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "        List\u003cObject\u003e containingNull \u003d Arrays.asList((Object) null);"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "        assertNullPointerExceptionNotThrown(Arrays.asList(containingNull, new Object()));"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "    public void isAnyNonNull() {"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(CollectionUtil.isAnyNonNull());"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(CollectionUtil.isAnyNonNull((Object) null));"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(CollectionUtil.isAnyNonNull((Object[]) null));"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(CollectionUtil.isAnyNonNull(new Object()));"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(CollectionUtil.isAnyNonNull(new Object(), null));"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "     * Asserts that {@code CollectionUtil#requireAllNonNull(Object...)} throw {@code NullPointerException}"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "     * if {@code objects} or any element of {@code objects} is null."
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertNullPointerExceptionThrown(Object... objects) {"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e requireAllNonNull(objects));"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "     * Asserts that {@code CollectionUtil#requireAllNonNull(Collection\u003c?\u003e)} throw {@code NullPointerException}"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "     * if {@code collection} or any element of {@code collection} is null."
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertNullPointerExceptionThrown(Collection\u003c?\u003e collection) {"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e requireAllNonNull(collection));"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertNullPointerExceptionNotThrown(Object... objects) {"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "        requireAllNonNull(objects);"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertNullPointerExceptionNotThrown(Collection\u003c?\u003e collection) {"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "        requireAllNonNull(collection);"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "nexolute": 3,
      "-": 105
    }
  },
  {
    "path": "src/test/java/seedu/ichifund/commons/util/ConfigUtilTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "nexolute"
        },
        "content": "package seedu.ichifund.commons.util;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "nexolute"
        },
        "content": "import static seedu.ichifund.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Paths;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.logging.Level;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.io.TempDir;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "nexolute"
        },
        "content": "import seedu.ichifund.commons.core.Config;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "nexolute"
        },
        "content": "import seedu.ichifund.commons.exceptions.DataConversionException;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "public class ConfigUtilTest {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final Path TEST_DATA_FOLDER \u003d Paths.get(\"src\", \"test\", \"data\", \"ConfigUtilTest\");"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    @TempDir"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    public Path tempDir;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    public void read_null_throwsNullPointerException() {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e read(null));"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    public void read_missingFile_emptyResult() throws DataConversionException {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(read(\"NonExistentFile.json\").isPresent());"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    public void read_notJsonFormat_exceptionThrown() {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(DataConversionException.class, () -\u003e read(\"NotJsonFormatConfig.json\"));"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    public void read_fileInOrder_successfullyRead() throws DataConversionException {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        Config expected \u003d getTypicalConfig();"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        Config actual \u003d read(\"TypicalConfig.json\").get();"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expected, actual);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    public void read_valuesMissingFromFile_defaultValuesUsed() throws DataConversionException {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        Config actual \u003d read(\"EmptyConfig.json\").get();"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(new Config(), actual);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    public void read_extraValuesInFile_extraValuesIgnored() throws DataConversionException {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "        Config expected \u003d getTypicalConfig();"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "        Config actual \u003d read(\"ExtraValuesConfig.json\").get();"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expected, actual);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "    private Config getTypicalConfig() {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "        Config config \u003d new Config();"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "        config.setLogLevel(Level.INFO);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "        config.setUserPrefsFilePath(Paths.get(\"preferences.json\"));"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "        return config;"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "    private Optional\u003cConfig\u003e read(String configFileInTestDataFolder) throws DataConversionException {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "        Path configFilePath \u003d addToTestDataPathIfNotNull(configFileInTestDataFolder);"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "        return ConfigUtil.readConfig(configFilePath);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "    public void save_nullConfig_throwsNullPointerException() {"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e save(null, \"SomeFile.json\"));"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "    public void save_nullFile_throwsNullPointerException() {"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e save(new Config(), null));"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "    public void saveConfig_allInOrder_success() throws DataConversionException, IOException {"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "        Config original \u003d getTypicalConfig();"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "        Path configFilePath \u003d tempDir.resolve(\"TempConfig.json\");"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "        //Try writing when the file doesn\u0027t exist"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "        ConfigUtil.saveConfig(original, configFilePath);"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "        Config readBack \u003d ConfigUtil.readConfig(configFilePath).get();"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(original, readBack);"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "        //Try saving when the file exists"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "        original.setLogLevel(Level.FINE);"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "        ConfigUtil.saveConfig(original, configFilePath);"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "        readBack \u003d ConfigUtil.readConfig(configFilePath).get();"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(original, readBack);"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "    private void save(Config config, String configFileInTestDataFolder) throws IOException {"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "        Path configFilePath \u003d addToTestDataPathIfNotNull(configFileInTestDataFolder);"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "        ConfigUtil.saveConfig(config, configFilePath);"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "    private Path addToTestDataPathIfNotNull(String configFileInTestDataFolder) {"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "        return configFileInTestDataFolder !\u003d null"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "                                  ? TEST_DATA_FOLDER.resolve(configFileInTestDataFolder)"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "                                  : null;"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "nexolute": 4,
      "-": 112
    }
  },
  {
    "path": "src/test/java/seedu/ichifund/commons/util/FileUtilTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "nexolute"
        },
        "content": "package seedu.ichifund.commons.util;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "nexolute"
        },
        "content": "import static seedu.ichifund.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "public class FileUtilTest {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    public void isValidPath() {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "        // valid path"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(FileUtil.isValidPath(\"valid/file/path\"));"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "        // invalid path"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(FileUtil.isValidPath(\"a\\0\"));"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "        // null path -\u003e throws NullPointerException"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e FileUtil.isValidPath(null));"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "nexolute": 2,
      "-": 21
    }
  },
  {
    "path": "src/test/java/seedu/ichifund/commons/util/JsonUtilTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "nexolute"
        },
        "content": "package seedu.ichifund.commons.util;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "nexolute"
        },
        "content": "import seedu.ichifund.testutil.SerializableTestClass;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "nexolute"
        },
        "content": "import seedu.ichifund.testutil.TestUtil;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": " * Tests JSON Read and Write"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "public class JsonUtilTest {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final Path SERIALIZATION_FILE \u003d TestUtil.getFilePathInSandboxFolder(\"serialize.json\");"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    public void serializeObjectToJsonFile_noExceptionThrown() throws IOException {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "        SerializableTestClass serializableTestClass \u003d new SerializableTestClass();"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "        serializableTestClass.setTestValues();"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "        JsonUtil.serializeObjectToJsonFile(SERIALIZATION_FILE, serializableTestClass);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(FileUtil.readFromFile(SERIALIZATION_FILE), SerializableTestClass.JSON_STRING_REPRESENTATION);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    public void deserializeObjectFromJsonFile_noExceptionThrown() throws IOException {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        FileUtil.writeToFile(SERIALIZATION_FILE, SerializableTestClass.JSON_STRING_REPRESENTATION);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        SerializableTestClass serializableTestClass \u003d JsonUtil"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "                .deserializeObjectFromJsonFile(SERIALIZATION_FILE, SerializableTestClass.class);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(serializableTestClass.getName(), SerializableTestClass.getNameTestValue());"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(serializableTestClass.getListOfLocalDateTimes(), SerializableTestClass.getListTestValues());"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(serializableTestClass.getMapOfIntegerToString(), SerializableTestClass.getHashMapTestValues());"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    //TODO: @Test jsonUtil_readJsonStringToObjectInstance_correctObject()"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    //TODO: @Test jsonUtil_writeThenReadObjectToJson_correctObject()"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "nexolute": 3,
      "-": 42
    }
  },
  {
    "path": "src/test/java/seedu/ichifund/commons/util/StringUtilTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "nexolute"
        },
        "content": "package seedu.ichifund.commons.util;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "nexolute"
        },
        "content": "import static seedu.ichifund.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.FileNotFoundException;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "public class StringUtilTest {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "    //---------------- Tests for isNonZeroUnsignedInteger --------------------------------------"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    public void isNonZeroUnsignedInteger() {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "        // EP: empty strings"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(StringUtil.isNonZeroUnsignedInteger(\"\")); // Boundary value"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(StringUtil.isNonZeroUnsignedInteger(\"  \"));"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "        // EP: not a number"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(StringUtil.isNonZeroUnsignedInteger(\"a\"));"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(StringUtil.isNonZeroUnsignedInteger(\"aaa\"));"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "        // EP: zero"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(StringUtil.isNonZeroUnsignedInteger(\"0\"));"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        // EP: zero as prefix"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(StringUtil.isNonZeroUnsignedInteger(\"01\"));"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        // EP: signed numbers"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(StringUtil.isNonZeroUnsignedInteger(\"-1\"));"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(StringUtil.isNonZeroUnsignedInteger(\"+1\"));"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        // EP: numbers with white space"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(StringUtil.isNonZeroUnsignedInteger(\" 10 \")); // Leading/trailing spaces"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(StringUtil.isNonZeroUnsignedInteger(\"1 0\")); // Spaces in the middle"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "        // EP: number larger than Integer.MAX_VALUE"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(StringUtil.isNonZeroUnsignedInteger(Long.toString(Integer.MAX_VALUE + 1)));"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        // EP: valid numbers, should return true"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(StringUtil.isNonZeroUnsignedInteger(\"1\")); // Boundary value"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(StringUtil.isNonZeroUnsignedInteger(\"10\"));"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    //---------------- Tests for containsWordIgnoreCase --------------------------------------"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    /*"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "     * Invalid equivalence partitions for word: null, empty, multiple words"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "     * Invalid equivalence partitions for sentence: null"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "     * The four test cases below test one invalid input at a time."
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    public void containsWordIgnoreCase_nullWord_throwsNullPointerException() {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e StringUtil.containsWordIgnoreCase(\"typical sentence\", null));"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "    public void containsWordIgnoreCase_emptyWord_throwsIllegalArgumentException() {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(IllegalArgumentException.class, \"Word parameter cannot be empty\", ()"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "            -\u003e StringUtil.containsWordIgnoreCase(\"typical sentence\", \"  \"));"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "    public void containsWordIgnoreCase_multipleWords_throwsIllegalArgumentException() {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(IllegalArgumentException.class, \"Word parameter should be a single word\", ()"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "            -\u003e StringUtil.containsWordIgnoreCase(\"typical sentence\", \"aaa BBB\"));"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "    public void containsWordIgnoreCase_nullSentence_throwsNullPointerException() {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e StringUtil.containsWordIgnoreCase(null, \"abc\"));"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "    /*"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "     * Valid equivalence partitions for word:"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "     *   - any word"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "     *   - word containing symbols/numbers"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "     *   - word with leading/trailing spaces"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "     * Valid equivalence partitions for sentence:"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "     *   - empty string"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "     *   - one word"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "     *   - multiple words"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "     *   - sentence with extra spaces"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "     * Possible scenarios returning true:"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "     *   - matches first word in sentence"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "     *   - last word in sentence"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "     *   - middle word in sentence"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "     *   - matches multiple words"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "     * Possible scenarios returning false:"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "     *   - query word matches part of a sentence word"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "     *   - sentence word matches part of the query word"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "     * The test method below tries to verify all above with a reasonably low number of test cases."
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "    public void containsWordIgnoreCase_validInputs_correctResult() {"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "        // Empty sentence"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(StringUtil.containsWordIgnoreCase(\"\", \"abc\")); // Boundary case"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(StringUtil.containsWordIgnoreCase(\"    \", \"123\"));"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "        // Matches a partial word only"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(StringUtil.containsWordIgnoreCase(\"aaa bbb ccc\", \"bb\")); // Sentence word bigger than query word"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(StringUtil.containsWordIgnoreCase(\"aaa bbb ccc\", \"bbbb\")); // Query word bigger than sentence word"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "        // Matches word in the sentence, different upper/lower case letters"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(StringUtil.containsWordIgnoreCase(\"aaa bBb ccc\", \"Bbb\")); // First word (boundary case)"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(StringUtil.containsWordIgnoreCase(\"aaa bBb ccc@1\", \"CCc@1\")); // Last word (boundary case)"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(StringUtil.containsWordIgnoreCase(\"  AAA   bBb   ccc  \", \"aaa\")); // Sentence has extra spaces"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(StringUtil.containsWordIgnoreCase(\"Aaa\", \"aaa\")); // Only one word in sentence (boundary case)"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(StringUtil.containsWordIgnoreCase(\"aaa bbb ccc\", \"  ccc  \")); // Leading/trailing spaces"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "        // Matches multiple words in sentence"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(StringUtil.containsWordIgnoreCase(\"AAA bBb ccc  bbb\", \"bbB\"));"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "    //---------------- Tests for getDetails --------------------------------------"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "    /*"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "     * Equivalence Partitions: null, valid throwable object"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "    public void getDetails_exceptionGiven() {"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(StringUtil.getDetails(new FileNotFoundException(\"file not found\"))"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": "            .contains(\"java.io.FileNotFoundException: file not found\"));"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": "    public void getDetails_nullGiven_throwsNullPointerException() {"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e StringUtil.getDetails(null));"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "nexolute": 2,
      "-": 141
    }
  },
  {
    "path": "src/test/java/seedu/ichifund/logic/LogicManagerTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "nexolute"
        },
        "content": "package seedu.ichifund.logic;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "import static seedu.ichifund.commons.core.Messages.MESSAGE_INVALID_TRANSACTION_DISPLAYED_INDEX;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "nexolute"
        },
        "content": "import static seedu.ichifund.commons.core.Messages.MESSAGE_UNKNOWN_COMMAND;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "nexolute"
        },
        "content": "import static seedu.ichifund.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.BeforeEach;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.io.TempDir;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "nexolute"
        },
        "content": "import seedu.ichifund.logic.commands.CommandResult;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "import seedu.ichifund.logic.commands.HelpCommand;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "nexolute"
        },
        "content": "import seedu.ichifund.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "import seedu.ichifund.logic.commands.transaction.DeleteTransactionCommand;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "nexolute"
        },
        "content": "import seedu.ichifund.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "nexolute"
        },
        "content": "import seedu.ichifund.model.Model;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "nexolute"
        },
        "content": "import seedu.ichifund.model.ModelManager;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "nexolute"
        },
        "content": "import seedu.ichifund.model.ReadOnlyFundBook;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "nexolute"
        },
        "content": "import seedu.ichifund.model.UserPrefs;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "import seedu.ichifund.model.transaction.Transaction;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "nexolute"
        },
        "content": "import seedu.ichifund.storage.JsonFundBookStorage;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "nexolute"
        },
        "content": "import seedu.ichifund.storage.JsonUserPrefsStorage;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "nexolute"
        },
        "content": "import seedu.ichifund.storage.StorageManager;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "import seedu.ichifund.testutil.TransactionBuilder;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "import seedu.ichifund.testutil.TransactionUtil;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "public class LogicManagerTest {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final IOException DUMMY_IO_EXCEPTION \u003d new IOException(\"dummy exception\");"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    @TempDir"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    public Path temporaryFolder;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    private Model model \u003d new ModelManager();"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    private Logic logic;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    @BeforeEach"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setUp() {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "nexolute"
        },
        "content": "        JsonFundBookStorage addressBookStorage \u003d"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "nexolute"
        },
        "content": "                new JsonFundBookStorage(temporaryFolder.resolve(\"addressBook.json\"));"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        JsonUserPrefsStorage userPrefsStorage \u003d new JsonUserPrefsStorage(temporaryFolder.resolve(\"userPrefs.json\"));"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        StorageManager storage \u003d new StorageManager(addressBookStorage, userPrefsStorage);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        logic \u003d new LogicManager(model, storage);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_invalidCommandFormat_throwsParseException() {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        String invalidCommand \u003d \"uicfhmowqewca\";"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseException(invalidCommand, MESSAGE_UNKNOWN_COMMAND);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_commandExecutionError_throwsCommandException() {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "        String deleteTransactionCommand \u003d DeleteTransactionCommand.COMMAND_WORD + \" 20\";"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "        assertCommandException(deleteTransactionCommand, MESSAGE_INVALID_TRANSACTION_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_validCommand_success() throws Exception {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "        String helpCommand \u003d HelpCommand.COMMAND_WORD;"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "        assertCommandSuccess(helpCommand, HelpCommand.SHOWING_HELP_MESSAGE, model);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_storageThrowsIoException_throwsCommandException() {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "        // Setup LogicManager with JsonAddressBookIoExceptionThrowingStub"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "        JsonFundBookStorage fundBookStorage \u003d"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "nexolute"
        },
        "content": "                new JsonFundBookIoExceptionThrowingStub(temporaryFolder.resolve(\"ioExceptionAddressBook.json\"));"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "        JsonUserPrefsStorage userPrefsStorage \u003d"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "                new JsonUserPrefsStorage(temporaryFolder.resolve(\"ioExceptionUserPrefs.json\"));"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "        StorageManager storage \u003d new StorageManager(fundBookStorage, userPrefsStorage);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "        logic \u003d new LogicManager(model, storage);"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "        // Execute add command"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "        Transaction expectedTransaction \u003d new TransactionBuilder().build();"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "        String addTransactionCommand \u003d TransactionUtil.getAddTransactionCommand(expectedTransaction);"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "        ModelManager expectedModel \u003d new ModelManager();"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "        expectedModel.addTransaction(expectedTransaction);"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "        expectedModel.updateTransactionContext(expectedTransaction);"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "        String expectedMessage \u003d LogicManager.FILE_OPS_ERROR_MESSAGE + DUMMY_IO_EXCEPTION;"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "        assertCommandFailure(addTransactionCommand, CommandException.class, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "    public void getFilteredPersonList_modifyList_throwsUnsupportedOperationException() {"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(UnsupportedOperationException.class, () -\u003e logic.getFilteredPersonList().remove(0));"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "     * Executes the command and confirms that"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "     * - no exceptions are thrown \u003cbr\u003e"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "     * - the feedback message is equal to {@code expectedMessage} \u003cbr\u003e"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "     * - the internal model manager state is the same as that in {@code expectedModel} \u003cbr\u003e"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "     * @see #assertCommandFailure(String, Class, String, Model)"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertCommandSuccess(String inputCommand, String expectedMessage,"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "            Model expectedModel) throws CommandException, ParseException {"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "        CommandResult result \u003d logic.execute(inputCommand);"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expectedMessage, result.getFeedbackToUser());"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expectedModel, model);"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "     * Executes the command, confirms that a ParseException is thrown and that the result message is correct."
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "     * @see #assertCommandFailure(String, Class, String, Model)"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertParseException(String inputCommand, String expectedMessage) {"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandFailure(inputCommand, ParseException.class, expectedMessage);"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "     * Executes the command, confirms that a CommandException is thrown and that the result message is correct."
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "     * @see #assertCommandFailure(String, Class, String, Model)"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertCommandException(String inputCommand, String expectedMessage) {"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandFailure(inputCommand, CommandException.class, expectedMessage);"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "     * Executes the command, confirms that the exception is thrown and that the result message is correct."
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "     * @see #assertCommandFailure(String, Class, String, Model)"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertCommandFailure(String inputCommand, Class\u003c? extends Throwable\u003e expectedException,"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "            String expectedMessage) {"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "nexolute"
        },
        "content": "        Model expectedModel \u003d new ModelManager(model.getFundBook(), new UserPrefs());"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandFailure(inputCommand, expectedException, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "     * Executes the command and confirms that"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "     * - the {@code expectedException} is thrown \u003cbr\u003e"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": "     * - the resulting error message is equal to {@code expectedMessage} \u003cbr\u003e"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "     * - the internal model manager state is the same as that in {@code expectedModel} \u003cbr\u003e"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": "     * @see #assertCommandSuccess(String, String, Model)"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertCommandFailure(String inputCommand, Class\u003c? extends Throwable\u003e expectedException,"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": "            String expectedMessage, Model expectedModel) {"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(expectedException, expectedMessage, () -\u003e logic.execute(inputCommand));"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expectedModel, model);"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": "     * A stub class to throw an {@code IOException} when the save method is called."
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "nexolute"
        },
        "content": "    private static class JsonFundBookIoExceptionThrowingStub extends JsonFundBookStorage {"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "nexolute"
        },
        "content": "        private JsonFundBookIoExceptionThrowingStub(Path filePath) {"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": "            super(filePath);"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "        public void saveFundBook(ReadOnlyFundBook fundBook, Path filePath) throws IOException {"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "-"
        },
        "content": "            throw DUMMY_IO_EXCEPTION;"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "nexolute": 19,
      "weiyang13": 18,
      "-": 121
    }
  },
  {
    "path": "src/test/java/seedu/ichifund/logic/commands/AddCommandIntegrationTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "nexolute"
        },
        "content": "package seedu.ichifund.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "nexolute"
        },
        "content": "import static seedu.ichifund.logic.commands.CommandTestUtil.assertCommandFailure;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "nexolute"
        },
        "content": "import static seedu.ichifund.logic.commands.CommandTestUtil.assertCommandSuccess;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "nexolute"
        },
        "content": "import static seedu.ichifund.testutil.TypicalFundBook.getTypicalFundBook;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.BeforeEach;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "nexolute"
        },
        "content": "import seedu.ichifund.model.Model;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "nexolute"
        },
        "content": "import seedu.ichifund.model.ModelManager;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "nexolute"
        },
        "content": "import seedu.ichifund.model.UserPrefs;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "nexolute"
        },
        "content": "import seedu.ichifund.model.person.Person;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "nexolute"
        },
        "content": "import seedu.ichifund.testutil.PersonBuilder;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": " * Contains integration tests (interaction with the Model) for {@code AddCommand}."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "public class AddCommandIntegrationTest {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    private Model model;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    @BeforeEach"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setUp() {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "nexolute"
        },
        "content": "        model \u003d new ModelManager(getTypicalFundBook(), new UserPrefs());"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_newPerson_success() {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "        Person validPerson \u003d new PersonBuilder().build();"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "nexolute"
        },
        "content": "        Model expectedModel \u003d new ModelManager(model.getFundBook(), new UserPrefs());"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "        expectedModel.addPerson(validPerson);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(new AddCommand(validPerson), model,"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "                String.format(AddCommand.MESSAGE_SUCCESS, validPerson), expectedModel);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_duplicatePerson_throwsCommandException() {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "nexolute"
        },
        "content": "        Person personInList \u003d model.getFundBook().getPersonList().get(0);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandFailure(new AddCommand(personInList), model, AddCommand.MESSAGE_DUPLICATE_PERSON);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "nexolute": 12,
      "-": 33
    }
  },
  {
    "path": "src/test/java/seedu/ichifund/logic/commands/AddCommandTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "nexolute"
        },
        "content": "package seedu.ichifund.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "nexolute"
        },
        "content": "import static seedu.ichifund.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Alaete"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.function.Predicate;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "import javafx.beans.property.ReadOnlyProperty;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "weiyang13"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "nexolute"
        },
        "content": "import seedu.ichifund.commons.core.GuiSettings;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "nexolute"
        },
        "content": "import seedu.ichifund.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "nexolute"
        },
        "content": "import seedu.ichifund.model.FundBook;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "nexolute"
        },
        "content": "import seedu.ichifund.model.Model;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "nexolute"
        },
        "content": "import seedu.ichifund.model.ReadOnlyFundBook;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "nexolute"
        },
        "content": "import seedu.ichifund.model.ReadOnlyUserPrefs;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Alaete"
        },
        "content": "import seedu.ichifund.model.analytics.Data;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "nexolute"
        },
        "content": "import seedu.ichifund.model.budget.Budget;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "import seedu.ichifund.model.context.TransactionContext;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "nexolute"
        },
        "content": "import seedu.ichifund.model.person.Person;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "LeeYiyuan"
        },
        "content": "import seedu.ichifund.model.repeater.Repeater;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "LeeYiyuan"
        },
        "content": "import seedu.ichifund.model.repeater.RepeaterUniqueId;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "import seedu.ichifund.model.transaction.Transaction;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "nexolute"
        },
        "content": "import seedu.ichifund.testutil.PersonBuilder;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "public class AddCommandTest {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    public void constructor_nullPerson_throwsNullPointerException() {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e new AddCommand(null));"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_personAcceptedByModel_addSuccessful() throws Exception {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        ModelStubAcceptingPersonAdded modelStub \u003d new ModelStubAcceptingPersonAdded();"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        Person validPerson \u003d new PersonBuilder().build();"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        CommandResult commandResult \u003d new AddCommand(validPerson).execute(modelStub);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(String.format(AddCommand.MESSAGE_SUCCESS, validPerson), commandResult.getFeedbackToUser());"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(Arrays.asList(validPerson), modelStub.personsAdded);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_duplicatePerson_throwsCommandException() {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "        Person validPerson \u003d new PersonBuilder().build();"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "        AddCommand addCommand \u003d new AddCommand(validPerson);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "        ModelStub modelStub \u003d new ModelStubWithPerson(validPerson);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(CommandException.class, AddCommand.MESSAGE_DUPLICATE_PERSON, () -\u003e addCommand.execute(modelStub));"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "        Person alice \u003d new PersonBuilder().withName(\"Alice\").build();"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "        Person bob \u003d new PersonBuilder().withName(\"Bob\").build();"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "        AddCommand addAliceCommand \u003d new AddCommand(alice);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "        AddCommand addBobCommand \u003d new AddCommand(bob);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(addAliceCommand.equals(addAliceCommand));"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "        // same values -\u003e returns true"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "        AddCommand addAliceCommandCopy \u003d new AddCommand(alice);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(addAliceCommand.equals(addAliceCommandCopy));"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "        // different types -\u003e returns false"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(addAliceCommand.equals(1));"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(addAliceCommand.equals(null));"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "        // different person -\u003e returns false"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(addAliceCommand.equals(addBobCommand));"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "     * A default model stub that have all of the methods failing."
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "    private class ModelStub implements Model {"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "        public void setUserPrefs(ReadOnlyUserPrefs userPrefs) {"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "        public ReadOnlyUserPrefs getUserPrefs() {"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "        public GuiSettings getGuiSettings() {"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "        public void setGuiSettings(GuiSettings guiSettings) {"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "nexolute"
        },
        "content": "        public Path getFundBookFilePath() {"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "nexolute"
        },
        "content": "        public void setFundBookFilePath(Path addressBookFilePath) {"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "LeeYiyuan"
        },
        "content": "        public RepeaterUniqueId getCurrentRepeaterUniqueId() {"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "LeeYiyuan"
        },
        "content": "        public void setCurrentRepeaterUniqueId(RepeaterUniqueId uniqueId) {"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "        public void addPerson(Person person) {"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "        public boolean hasPerson(Person person) {"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": "        public void deletePerson(Person target) {"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": "        public void setPerson(Person target, Person editedPerson) {"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": "        public ObservableList\u003cPerson\u003e getFilteredPersonList() {"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "-"
        },
        "content": "        public void updateFilteredPersonList(Predicate\u003cPerson\u003e predicate) {"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "nexolute"
        },
        "content": ""
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "        public void addTransaction(Transaction transaction) {"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "        }"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "weiyang13"
        },
        "content": ""
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "        public void deleteTransaction(Transaction target) {"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "        }"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "weiyang13"
        },
        "content": ""
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "        public void setTransaction(Transaction target, Transaction editedTransaction) {"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "        }"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "weiyang13"
        },
        "content": ""
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "        public ObservableList\u003cTransaction\u003e getFilteredTransactionList() {"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "        }"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "weiyang13"
        },
        "content": ""
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "        public TransactionContext getTransactionContext() {"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "        }"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "weiyang13"
        },
        "content": ""
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "        public void setTransactionContext(TransactionContext transactionContext) {"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "        }"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "LeeYiyuan"
        },
        "content": ""
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "        public void updateTransactionContext(Transaction transaction) {"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "        }"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "weiyang13"
        },
        "content": ""
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "LeeYiyuan"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "LeeYiyuan"
        },
        "content": "        public ObservableList\u003cTransaction\u003e getAssociatedTransactions(RepeaterUniqueId repeaterUniqueId) {"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "LeeYiyuan"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "LeeYiyuan"
        },
        "content": "        }"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "LeeYiyuan"
        },
        "content": ""
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "LeeYiyuan"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "LeeYiyuan"
        },
        "content": "        public void addRepeater(Repeater repeater) {"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "LeeYiyuan"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "LeeYiyuan"
        },
        "content": "        }"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "LeeYiyuan"
        },
        "content": ""
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "LeeYiyuan"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "LeeYiyuan"
        },
        "content": "        public boolean hasRepeater(Repeater repeater) {"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "LeeYiyuan"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "LeeYiyuan"
        },
        "content": "        }"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "LeeYiyuan"
        },
        "content": ""
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "LeeYiyuan"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "LeeYiyuan"
        },
        "content": "        public void deleteRepeater(Repeater target) {"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "LeeYiyuan"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "LeeYiyuan"
        },
        "content": "        }"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "LeeYiyuan"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "LeeYiyuan"
        },
        "content": "        public void setRepeater(Repeater target, Repeater editedRepeater) {"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "LeeYiyuan"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "LeeYiyuan"
        },
        "content": "        }"
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "LeeYiyuan"
        },
        "content": ""
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "LeeYiyuan"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "LeeYiyuan"
        },
        "content": "        public ObservableList\u003cRepeater\u003e getFilteredRepeaterList() {"
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "LeeYiyuan"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "LeeYiyuan"
        },
        "content": "        }"
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "LeeYiyuan"
        },
        "content": ""
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "LeeYiyuan"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "LeeYiyuan"
        },
        "content": "        public void updateFilteredRepeaterList(Predicate\u003cRepeater\u003e predicate) {"
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "LeeYiyuan"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "LeeYiyuan"
        },
        "content": "        }"
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "LeeYiyuan"
        },
        "content": ""
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "LeeYiyuan"
        },
        "content": ""
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "nexolute"
        },
        "content": "        public void addBudget(Budget budget) {"
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "nexolute"
        },
        "content": "        public boolean hasBudget(Budget budget) {"
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "nexolute"
        },
        "content": "        public void deleteBudget(Budget target) {"
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "nexolute"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "nexolute"
        },
        "content": "        }"
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "nexolute"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "nexolute"
        },
        "content": "        public void setBudget(Budget target, Budget editedBudget) {"
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 248,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 249,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 250,
        "author": {
          "gitId": "nexolute"
        },
        "content": "        public ObservableList\u003cBudget\u003e getFilteredBudgetList() {"
      },
      {
        "lineNumber": 251,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 252,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 253,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 254,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 255,
        "author": {
          "gitId": "nexolute"
        },
        "content": "        public void updateFilteredBudgetList(Predicate\u003cBudget\u003e predicate) {"
      },
      {
        "lineNumber": 256,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 257,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 258,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 259,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 260,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "        public ReadOnlyProperty\u003cTransactionContext\u003e getTransactionContextProperty() {"
      },
      {
        "lineNumber": 261,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 262,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "        }"
      },
      {
        "lineNumber": 263,
        "author": {
          "gitId": "weiyang13"
        },
        "content": ""
      },
      {
        "lineNumber": 264,
        "author": {
          "gitId": "Alaete"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 265,
        "author": {
          "gitId": "Alaete"
        },
        "content": "        public ObservableList\u003cData\u003e getDataList() {"
      },
      {
        "lineNumber": 266,
        "author": {
          "gitId": "Alaete"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 267,
        "author": {
          "gitId": "Alaete"
        },
        "content": "        }"
      },
      {
        "lineNumber": 268,
        "author": {
          "gitId": "Alaete"
        },
        "content": ""
      },
      {
        "lineNumber": 269,
        "author": {
          "gitId": "Alaete"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 270,
        "author": {
          "gitId": "Alaete"
        },
        "content": "        public void updateDataList(List\u003cData\u003e datas) {"
      },
      {
        "lineNumber": 271,
        "author": {
          "gitId": "Alaete"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 272,
        "author": {
          "gitId": "Alaete"
        },
        "content": "        }"
      },
      {
        "lineNumber": 273,
        "author": {
          "gitId": "Alaete"
        },
        "content": ""
      },
      {
        "lineNumber": 274,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 275,
        "author": {
          "gitId": "nexolute"
        },
        "content": "        public void setFundBook(ReadOnlyFundBook newData) {"
      },
      {
        "lineNumber": 276,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 277,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 278,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 279,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 280,
        "author": {
          "gitId": "nexolute"
        },
        "content": "        public ReadOnlyFundBook getFundBook() {"
      },
      {
        "lineNumber": 281,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 282,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 283,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 284,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 285,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 286,
        "author": {
          "gitId": "-"
        },
        "content": "     * A Model stub that contains a single person."
      },
      {
        "lineNumber": 287,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 288,
        "author": {
          "gitId": "-"
        },
        "content": "    private class ModelStubWithPerson extends ModelStub {"
      },
      {
        "lineNumber": 289,
        "author": {
          "gitId": "-"
        },
        "content": "        private final Person person;"
      },
      {
        "lineNumber": 290,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 291,
        "author": {
          "gitId": "-"
        },
        "content": "        ModelStubWithPerson(Person person) {"
      },
      {
        "lineNumber": 292,
        "author": {
          "gitId": "-"
        },
        "content": "            requireNonNull(person);"
      },
      {
        "lineNumber": 293,
        "author": {
          "gitId": "-"
        },
        "content": "            this.person \u003d person;"
      },
      {
        "lineNumber": 294,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 295,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 296,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 297,
        "author": {
          "gitId": "-"
        },
        "content": "        public boolean hasPerson(Person person) {"
      },
      {
        "lineNumber": 298,
        "author": {
          "gitId": "-"
        },
        "content": "            requireNonNull(person);"
      },
      {
        "lineNumber": 299,
        "author": {
          "gitId": "-"
        },
        "content": "            return this.person.isSamePerson(person);"
      },
      {
        "lineNumber": 300,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 301,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 302,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 303,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 304,
        "author": {
          "gitId": "-"
        },
        "content": "     * A Model stub that always accept the person being added."
      },
      {
        "lineNumber": 305,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 306,
        "author": {
          "gitId": "-"
        },
        "content": "    private class ModelStubAcceptingPersonAdded extends ModelStub {"
      },
      {
        "lineNumber": 307,
        "author": {
          "gitId": "-"
        },
        "content": "        final ArrayList\u003cPerson\u003e personsAdded \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 308,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 309,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 310,
        "author": {
          "gitId": "-"
        },
        "content": "        public boolean hasPerson(Person person) {"
      },
      {
        "lineNumber": 311,
        "author": {
          "gitId": "-"
        },
        "content": "            requireNonNull(person);"
      },
      {
        "lineNumber": 312,
        "author": {
          "gitId": "-"
        },
        "content": "            return personsAdded.stream().anyMatch(person::isSamePerson);"
      },
      {
        "lineNumber": 313,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 314,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 315,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 316,
        "author": {
          "gitId": "-"
        },
        "content": "        public void addPerson(Person person) {"
      },
      {
        "lineNumber": 317,
        "author": {
          "gitId": "-"
        },
        "content": "            requireNonNull(person);"
      },
      {
        "lineNumber": 318,
        "author": {
          "gitId": "-"
        },
        "content": "            personsAdded.add(person);"
      },
      {
        "lineNumber": 319,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 320,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 321,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 322,
        "author": {
          "gitId": "nexolute"
        },
        "content": "        public ReadOnlyFundBook getFundBook() {"
      },
      {
        "lineNumber": 323,
        "author": {
          "gitId": "nexolute"
        },
        "content": "            return new FundBook();"
      },
      {
        "lineNumber": 324,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 325,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 326,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 327,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "LeeYiyuan": 40,
      "nexolute": 27,
      "Alaete": 12,
      "weiyang13": 43,
      "-": 205
    }
  },
  {
    "path": "src/test/java/seedu/ichifund/logic/commands/ClearCommandTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "nexolute"
        },
        "content": "package seedu.ichifund.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "nexolute"
        },
        "content": "import static seedu.ichifund.logic.commands.CommandTestUtil.assertCommandSuccess;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "nexolute"
        },
        "content": "import static seedu.ichifund.testutil.TypicalFundBook.getTypicalFundBook;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "nexolute"
        },
        "content": "import seedu.ichifund.model.FundBook;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "nexolute"
        },
        "content": "import seedu.ichifund.model.Model;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "nexolute"
        },
        "content": "import seedu.ichifund.model.ModelManager;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "nexolute"
        },
        "content": "import seedu.ichifund.model.UserPrefs;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "public class ClearCommandTest {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "nexolute"
        },
        "content": "    public void execute_emptyFundBook_success() {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "        Model model \u003d new ModelManager();"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "        Model expectedModel \u003d new ModelManager();"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(new ClearCommand(), model, ClearCommand.MESSAGE_SUCCESS, expectedModel);"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "nexolute"
        },
        "content": "    public void execute_nonEmptyFundBook_success() {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "nexolute"
        },
        "content": "        Model model \u003d new ModelManager(getTypicalFundBook(), new UserPrefs());"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "nexolute"
        },
        "content": "        Model expectedModel \u003d new ModelManager(getTypicalFundBook(), new UserPrefs());"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "nexolute"
        },
        "content": "        expectedModel.setFundBook(new FundBook());"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(new ClearCommand(), model, ClearCommand.MESSAGE_SUCCESS, expectedModel);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "nexolute": 12,
      "-": 20
    }
  },
  {
    "path": "src/test/java/seedu/ichifund/logic/commands/CommandResultTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "nexolute"
        },
        "content": "package seedu.ichifund.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertNotEquals;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "public class CommandResultTest {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "        CommandResult commandResult \u003d new CommandResult(\"feedback\");"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "        // same values -\u003e returns true"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(commandResult.equals(new CommandResult(\"feedback\")));"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(commandResult.equals(new CommandResult(\"feedback\", false, false)));"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(commandResult.equals(commandResult));"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(commandResult.equals(null));"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "        // different types -\u003e returns false"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(commandResult.equals(0.5f));"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        // different feedbackToUser value -\u003e returns false"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(commandResult.equals(new CommandResult(\"different\")));"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        // different showHelp value -\u003e returns false"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(commandResult.equals(new CommandResult(\"feedback\", true, false)));"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        // different exit value -\u003e returns false"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(commandResult.equals(new CommandResult(\"feedback\", false, true)));"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    public void hashcode() {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "        CommandResult commandResult \u003d new CommandResult(\"feedback\");"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "        // same values -\u003e returns same hashcode"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(commandResult.hashCode(), new CommandResult(\"feedback\").hashCode());"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        // different feedbackToUser value -\u003e returns different hashcode"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        assertNotEquals(commandResult.hashCode(), new CommandResult(\"different\").hashCode());"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        // different showHelp value -\u003e returns different hashcode"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        assertNotEquals(commandResult.hashCode(), new CommandResult(\"feedback\", true, false).hashCode());"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        // different exit value -\u003e returns different hashcode"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        assertNotEquals(commandResult.hashCode(), new CommandResult(\"feedback\", false, true).hashCode());"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "nexolute": 1,
      "-": 53
    }
  },
  {
    "path": "src/test/java/seedu/ichifund/logic/commands/CommandTestUtil.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "nexolute"
        },
        "content": "package seedu.ichifund.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "nexolute"
        },
        "content": "import static seedu.ichifund.logic.parser.CliSyntax.PREFIX_ADDRESS;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "import static seedu.ichifund.logic.parser.CliSyntax.PREFIX_AMOUNT;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "import static seedu.ichifund.logic.parser.CliSyntax.PREFIX_CATEGORY;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "import static seedu.ichifund.logic.parser.CliSyntax.PREFIX_DAY;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "import static seedu.ichifund.logic.parser.CliSyntax.PREFIX_DESCRIPTION;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "nexolute"
        },
        "content": "import static seedu.ichifund.logic.parser.CliSyntax.PREFIX_EMAIL;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "import static seedu.ichifund.logic.parser.CliSyntax.PREFIX_MONTH;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "nexolute"
        },
        "content": "import static seedu.ichifund.logic.parser.CliSyntax.PREFIX_NAME;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "nexolute"
        },
        "content": "import static seedu.ichifund.logic.parser.CliSyntax.PREFIX_PHONE;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "nexolute"
        },
        "content": "import static seedu.ichifund.logic.parser.CliSyntax.PREFIX_TAG;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "import static seedu.ichifund.logic.parser.CliSyntax.PREFIX_TRANSACTION_TYPE;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "import static seedu.ichifund.logic.parser.CliSyntax.PREFIX_YEAR;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "nexolute"
        },
        "content": "import static seedu.ichifund.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "nexolute"
        },
        "content": "import seedu.ichifund.commons.core.index.Index;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "nexolute"
        },
        "content": "import seedu.ichifund.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "import seedu.ichifund.logic.commands.transaction.EditTransactionCommand;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "nexolute"
        },
        "content": "import seedu.ichifund.model.FundBook;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "nexolute"
        },
        "content": "import seedu.ichifund.model.Model;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "nexolute"
        },
        "content": "import seedu.ichifund.model.budget.Budget;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "nexolute"
        },
        "content": "import seedu.ichifund.model.budget.BudgetDescriptionPredicate;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "nexolute"
        },
        "content": "import seedu.ichifund.model.person.NameContainsKeywordsPredicate;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "nexolute"
        },
        "content": "import seedu.ichifund.model.person.Person;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "nexolute"
        },
        "content": "import seedu.ichifund.testutil.EditPersonDescriptorBuilder;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "import seedu.ichifund.testutil.EditTransactionDescriptorBuilder;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": " * Contains helper methods for testing commands."
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "public class CommandTestUtil {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String VALID_NAME_AMY \u003d \"Amy Bee\";"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String VALID_NAME_BOB \u003d \"Bob Choo\";"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String VALID_PHONE_AMY \u003d \"11111111\";"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String VALID_PHONE_BOB \u003d \"22222222\";"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String VALID_EMAIL_AMY \u003d \"amy@example.com\";"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String VALID_EMAIL_BOB \u003d \"bob@example.com\";"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String VALID_ADDRESS_AMY \u003d \"Block 312, Amy Street 1\";"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String VALID_ADDRESS_BOB \u003d \"Block 123, Bobby Street 3\";"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String VALID_TAG_HUSBAND \u003d \"husband\";"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String VALID_TAG_FRIEND \u003d \"friend\";"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "    public static final String VALID_DESCRIPTION_ALLOWANCE \u003d \"Allowance from Daddy\";"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "    public static final String VALID_DESCRIPTION_BUS \u003d \"Bus to School\";"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "    public static final String VALID_AMOUNT_ALLOWANCE \u003d \"500\";"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "    public static final String VALID_AMOUNT_BUS \u003d \"2.10\";"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "    public static final String VALID_CATEGORY_ALLOWANCE \u003d \"allowance\";"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "    public static final String VALID_CATEGORY_BUS \u003d \"transportation\";"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "    public static final String VALID_DAY_ALLOWANCE \u003d \"5\";"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "    public static final String VALID_DAY_BUS \u003d \"20\";"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "    public static final String VALID_MONTH_ALLOWANCE \u003d \"2\";"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "    public static final String VALID_MONTH_BUS \u003d \"7\";"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "    public static final String VALID_YEAR_ALLOWANCE \u003d \"2019\";"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "    public static final String VALID_YEAR_BUS \u003d \"2019\";"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "    public static final String VALID_TRANSACTION_TYPE_ALLOWANCE \u003d \"in\";"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "    public static final String VALID_TRANSACTION_TYPE_BUS \u003d \"exp\";"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "weiyang13"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "    public static final String DESCRIPTION_DESC_ALLOWANCE \u003d \" \" + PREFIX_DESCRIPTION + VALID_DESCRIPTION_ALLOWANCE;"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "    public static final String DESCRIPTION_DESC_BUS \u003d \" \" + PREFIX_DESCRIPTION + VALID_DESCRIPTION_BUS;"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "    public static final String AMOUNT_DESC_ALLOWANCE \u003d \" \" + PREFIX_AMOUNT + VALID_AMOUNT_ALLOWANCE;"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "    public static final String AMOUNT_DESC_BUS \u003d \" \" + PREFIX_AMOUNT + VALID_AMOUNT_BUS;"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "    public static final String CATEGORY_DESC_ALLOWANCE \u003d \" \" + PREFIX_CATEGORY + VALID_CATEGORY_ALLOWANCE;"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "    public static final String CATEGORY_DESC_BUS \u003d \" \" + PREFIX_CATEGORY + VALID_CATEGORY_BUS;"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "    public static final String DAY_DESC_ALLOWANCE \u003d \" \" + PREFIX_DAY + VALID_DAY_ALLOWANCE;"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "    public static final String DAY_DESC_BUS \u003d \" \" + PREFIX_DAY + VALID_DAY_BUS;"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "    public static final String MONTH_DESC_ALLOWANCE \u003d \" \" + PREFIX_MONTH + VALID_MONTH_ALLOWANCE;"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "    public static final String MONTH_DESC_BUS \u003d \" \" + PREFIX_MONTH + VALID_MONTH_BUS;"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "    public static final String YEAR_DESC_ALLOWANCE \u003d \" \" + PREFIX_YEAR + VALID_YEAR_ALLOWANCE;"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "    public static final String YEAR_DESC_BUS \u003d \" \" + PREFIX_YEAR + VALID_YEAR_BUS;"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "    public static final String TRANSACTION_TYPE_DESC_ALLOWANCE \u003d \" \" + PREFIX_TRANSACTION_TYPE"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "            + VALID_TRANSACTION_TYPE_ALLOWANCE;"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "    public static final String TRANSACTION_TYPE_DESC_BUS \u003d \" \" + PREFIX_TRANSACTION_TYPE"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "            + VALID_TRANSACTION_TYPE_BUS;"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "weiyang13"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "    public static final String INVALID_DESCRIPTION_DESC \u003d \" \" + PREFIX_DESCRIPTION + \"!?\";"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "    public static final String INVALID_AMOUNT_DESC \u003d \" \" + PREFIX_AMOUNT + \"0.0\";"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "    public static final String INVALID_CATEGORY_DESC \u003d \" \" + PREFIX_CATEGORY + \"?!\";"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "    public static final String INVALID_DAY_DESC \u003d \" \" + PREFIX_DAY + \"32\";"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "    public static final String INVALID_MONTH_DESC \u003d \" \" + PREFIX_MONTH + \"13\";"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "    public static final String INVALID_YEAR_DESC \u003d \" \" + PREFIX_YEAR + \"999\";"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "    public static final String INVALID_TRANSACTION_TYPE_DESC \u003d \" \" + PREFIX_TRANSACTION_TYPE + \"hi\";"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "weiyang13"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String NAME_DESC_AMY \u003d \" \" + PREFIX_NAME + VALID_NAME_AMY;"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String NAME_DESC_BOB \u003d \" \" + PREFIX_NAME + VALID_NAME_BOB;"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String PHONE_DESC_AMY \u003d \" \" + PREFIX_PHONE + VALID_PHONE_AMY;"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String PHONE_DESC_BOB \u003d \" \" + PREFIX_PHONE + VALID_PHONE_BOB;"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String EMAIL_DESC_AMY \u003d \" \" + PREFIX_EMAIL + VALID_EMAIL_AMY;"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String EMAIL_DESC_BOB \u003d \" \" + PREFIX_EMAIL + VALID_EMAIL_BOB;"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String ADDRESS_DESC_AMY \u003d \" \" + PREFIX_ADDRESS + VALID_ADDRESS_AMY;"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String ADDRESS_DESC_BOB \u003d \" \" + PREFIX_ADDRESS + VALID_ADDRESS_BOB;"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String TAG_DESC_FRIEND \u003d \" \" + PREFIX_TAG + VALID_TAG_FRIEND;"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String TAG_DESC_HUSBAND \u003d \" \" + PREFIX_TAG + VALID_TAG_HUSBAND;"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String INVALID_NAME_DESC \u003d \" \" + PREFIX_NAME + \"James\u0026\"; // \u0027\u0026\u0027 not allowed in names"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String INVALID_PHONE_DESC \u003d \" \" + PREFIX_PHONE + \"911a\"; // \u0027a\u0027 not allowed in phones"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String INVALID_EMAIL_DESC \u003d \" \" + PREFIX_EMAIL + \"bob!yahoo\"; // missing \u0027@\u0027 symbol"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String INVALID_ADDRESS_DESC \u003d \" \" + PREFIX_ADDRESS; // empty string not allowed for addresses"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String INVALID_TAG_DESC \u003d \" \" + PREFIX_TAG + \"hubby*\"; // \u0027*\u0027 not allowed in tags"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String PREAMBLE_WHITESPACE \u003d \"\\t  \\r  \\n\";"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String PREAMBLE_NON_EMPTY \u003d \"NonEmptyPreamble\";"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final EditCommand.EditPersonDescriptor DESC_AMY;"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final EditCommand.EditPersonDescriptor DESC_BOB;"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "    public static final EditTransactionCommand.EditTransactionDescriptor DESC_ALLOWANCE;"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "    public static final EditTransactionCommand.EditTransactionDescriptor DESC_BUS;"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "weiyang13"
        },
        "content": ""
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "    static {"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "        DESC_AMY \u003d new EditPersonDescriptorBuilder().withName(VALID_NAME_AMY)"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "                .withPhone(VALID_PHONE_AMY).withEmail(VALID_EMAIL_AMY).withAddress(VALID_ADDRESS_AMY)"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "                .withTags(VALID_TAG_FRIEND).build();"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "        DESC_BOB \u003d new EditPersonDescriptorBuilder().withName(VALID_NAME_BOB)"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "                .withPhone(VALID_PHONE_BOB).withEmail(VALID_EMAIL_BOB).withAddress(VALID_ADDRESS_BOB)"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "                .withTags(VALID_TAG_HUSBAND, VALID_TAG_FRIEND).build();"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "weiyang13"
        },
        "content": ""
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "        DESC_ALLOWANCE \u003d new EditTransactionDescriptorBuilder().withDescription(VALID_DESCRIPTION_ALLOWANCE)"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "                .withAmount(VALID_AMOUNT_ALLOWANCE).withDay(VALID_DAY_ALLOWANCE).withMonth(VALID_MONTH_ALLOWANCE)"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "                .withYear(VALID_YEAR_ALLOWANCE).withCategory(VALID_CATEGORY_ALLOWANCE)"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "                .withTransactionType(VALID_TRANSACTION_TYPE_ALLOWANCE).build();"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "        DESC_BUS \u003d new EditTransactionDescriptorBuilder().withDescription(VALID_DESCRIPTION_BUS)"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "                .withAmount(VALID_AMOUNT_BUS).withDay(VALID_DAY_BUS).withMonth(VALID_MONTH_BUS)"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "                .withYear(VALID_YEAR_BUS).withCategory(VALID_CATEGORY_BUS)"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "                .withTransactionType(VALID_TRANSACTION_TYPE_BUS).build();"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "     * Executes the given {@code command}, confirms that \u003cbr\u003e"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": "     * - the returned {@link CommandResult} matches {@code expectedCommandResult} \u003cbr\u003e"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": "     * - the {@code actualModel} matches {@code expectedModel}"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": "    public static void assertCommandSuccess(Command command, Model actualModel, CommandResult expectedCommandResult,"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": "            Model expectedModel) {"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": "            CommandResult result \u003d command.execute(actualModel);"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": "            assertEquals(expectedCommandResult, result);"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": "            assertEquals(expectedModel, actualModel);"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (CommandException ce) {"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"Execution of command should not fail.\", ce);"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": "     * Convenience wrapper to {@link #assertCommandSuccess(Command, Model, CommandResult, Model)}"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": "     * that takes a string {@code expectedMessage}."
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "-"
        },
        "content": "    public static void assertCommandSuccess(Command command, Model actualModel, String expectedMessage,"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "-"
        },
        "content": "            Model expectedModel) {"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "-"
        },
        "content": "        CommandResult expectedCommandResult \u003d new CommandResult(expectedMessage);"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(command, actualModel, expectedCommandResult, expectedModel);"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "-"
        },
        "content": "     * Executes the given {@code command}, confirms that \u003cbr\u003e"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "-"
        },
        "content": "     * - a {@code CommandException} is thrown \u003cbr\u003e"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "-"
        },
        "content": "     * - the CommandException message matches {@code expectedMessage} \u003cbr\u003e"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "-"
        },
        "content": "     * - the address book, filtered person list and selected person in {@code actualModel} remain unchanged"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "-"
        },
        "content": "    public static void assertCommandFailure(Command command, Model actualModel, String expectedMessage) {"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "-"
        },
        "content": "        // we are unable to defensively copy the model for comparison later, so we can"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "-"
        },
        "content": "        // only do so by copying its components."
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "nexolute"
        },
        "content": "        FundBook expectedFundBook \u003d new FundBook(actualModel.getFundBook());"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "-"
        },
        "content": "        List\u003cPerson\u003e expectedFilteredList \u003d new ArrayList\u003c\u003e(actualModel.getFilteredPersonList());"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(CommandException.class, expectedMessage, () -\u003e command.execute(actualModel));"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "nexolute"
        },
        "content": "        assertEquals(expectedFundBook, actualModel.getFundBook());"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expectedFilteredList, actualModel.getFilteredPersonList());"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "-"
        },
        "content": "     * Updates {@code model}\u0027s filtered list to show only the person at the given {@code targetIndex} in the"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "-"
        },
        "content": "     * {@code model}\u0027s address book."
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "-"
        },
        "content": "    public static void showPersonAtIndex(Model model, Index targetIndex) {"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(targetIndex.getZeroBased() \u003c model.getFilteredPersonList().size());"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "-"
        },
        "content": "        Person person \u003d model.getFilteredPersonList().get(targetIndex.getZeroBased());"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "-"
        },
        "content": "        final String[] splitName \u003d person.getName().fullName.split(\"\\\\s+\");"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "-"
        },
        "content": "        model.updateFilteredPersonList(new NameContainsKeywordsPredicate(Arrays.asList(splitName[0])));"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(1, model.getFilteredPersonList().size());"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "nexolute"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "nexolute"
        },
        "content": "     * Updates {@code model}\u0027s filtered list to show only the budget at the given {@code targetIndex} in the"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "nexolute"
        },
        "content": "     * {@code model}\u0027s fund book."
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "nexolute"
        },
        "content": "     */"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "nexolute"
        },
        "content": "    public static void showBudgetAtIndex(Model model, Index targetIndex) {"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "nexolute"
        },
        "content": "        assertTrue(targetIndex.getZeroBased() \u003c model.getFilteredBudgetList().size());"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "nexolute"
        },
        "content": ""
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "nexolute"
        },
        "content": "        Budget budget \u003d model.getFilteredBudgetList().get(targetIndex.getZeroBased());"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "nexolute"
        },
        "content": "        final String[] splitDescription \u003d budget.getDescription().description.split(\"\\\\s+\");"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "nexolute"
        },
        "content": "        model.updateFilteredBudgetList(new BudgetDescriptionPredicate(Arrays.asList(splitDescription[0])));"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "nexolute"
        },
        "content": ""
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "nexolute"
        },
        "content": "        assertEquals(1, model.getFilteredBudgetList().size());"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "nexolute"
        },
        "content": "    }"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "nexolute": 31,
      "weiyang13": 61,
      "-": 112
    }
  },
  {
    "path": "src/test/java/seedu/ichifund/logic/commands/DeleteCommandTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "nexolute"
        },
        "content": "package seedu.ichifund.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "nexolute"
        },
        "content": "import static seedu.ichifund.logic.commands.CommandTestUtil.assertCommandFailure;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "nexolute"
        },
        "content": "import static seedu.ichifund.logic.commands.CommandTestUtil.assertCommandSuccess;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "nexolute"
        },
        "content": "import static seedu.ichifund.logic.commands.CommandTestUtil.showPersonAtIndex;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "nexolute"
        },
        "content": "import static seedu.ichifund.testutil.TypicalFundBook.getTypicalFundBook;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "nexolute"
        },
        "content": "import static seedu.ichifund.testutil.TypicalIndexes.INDEX_FIRST_PERSON;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "nexolute"
        },
        "content": "import static seedu.ichifund.testutil.TypicalIndexes.INDEX_SECOND_PERSON;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "nexolute"
        },
        "content": "import seedu.ichifund.commons.core.Messages;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "nexolute"
        },
        "content": "import seedu.ichifund.commons.core.index.Index;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "nexolute"
        },
        "content": "import seedu.ichifund.model.Model;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "nexolute"
        },
        "content": "import seedu.ichifund.model.ModelManager;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "nexolute"
        },
        "content": "import seedu.ichifund.model.UserPrefs;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "nexolute"
        },
        "content": "import seedu.ichifund.model.person.Person;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": " * Contains integration tests (interaction with the Model, UndoCommand and RedoCommand) and unit tests for"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": " * {@code DeleteCommand}."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "public class DeleteCommandTest {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "nexolute"
        },
        "content": "    private Model model \u003d new ModelManager(getTypicalFundBook(), new UserPrefs());"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_validIndexUnfilteredList_success() {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        Person personToDelete \u003d model.getFilteredPersonList().get(INDEX_FIRST_PERSON.getZeroBased());"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        DeleteCommand deleteCommand \u003d new DeleteCommand(INDEX_FIRST_PERSON);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        String expectedMessage \u003d String.format(DeleteCommand.MESSAGE_DELETE_PERSON_SUCCESS, personToDelete);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "nexolute"
        },
        "content": "        ModelManager expectedModel \u003d new ModelManager(model.getFundBook(), new UserPrefs());"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        expectedModel.deletePerson(personToDelete);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(deleteCommand, model, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_invalidIndexUnfilteredList_throwsCommandException() {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        Index outOfBoundIndex \u003d Index.fromOneBased(model.getFilteredPersonList().size() + 1);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        DeleteCommand deleteCommand \u003d new DeleteCommand(outOfBoundIndex);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandFailure(deleteCommand, model, Messages.MESSAGE_INVALID_PERSON_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_validIndexFilteredList_success() {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        showPersonAtIndex(model, INDEX_FIRST_PERSON);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "        Person personToDelete \u003d model.getFilteredPersonList().get(INDEX_FIRST_PERSON.getZeroBased());"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "        DeleteCommand deleteCommand \u003d new DeleteCommand(INDEX_FIRST_PERSON);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "        String expectedMessage \u003d String.format(DeleteCommand.MESSAGE_DELETE_PERSON_SUCCESS, personToDelete);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "nexolute"
        },
        "content": "        Model expectedModel \u003d new ModelManager(model.getFundBook(), new UserPrefs());"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "        expectedModel.deletePerson(personToDelete);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "        showNoPerson(expectedModel);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(deleteCommand, model, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_invalidIndexFilteredList_throwsCommandException() {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "        showPersonAtIndex(model, INDEX_FIRST_PERSON);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "        Index outOfBoundIndex \u003d INDEX_SECOND_PERSON;"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "        // ensures that outOfBoundIndex is still in bounds of address book list"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "nexolute"
        },
        "content": "        assertTrue(outOfBoundIndex.getZeroBased() \u003c model.getFundBook().getPersonList().size());"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "        DeleteCommand deleteCommand \u003d new DeleteCommand(outOfBoundIndex);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandFailure(deleteCommand, model, Messages.MESSAGE_INVALID_PERSON_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "        DeleteCommand deleteFirstCommand \u003d new DeleteCommand(INDEX_FIRST_PERSON);"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "        DeleteCommand deleteSecondCommand \u003d new DeleteCommand(INDEX_SECOND_PERSON);"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(deleteFirstCommand.equals(deleteFirstCommand));"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "        // same values -\u003e returns true"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "        DeleteCommand deleteFirstCommandCopy \u003d new DeleteCommand(INDEX_FIRST_PERSON);"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(deleteFirstCommand.equals(deleteFirstCommandCopy));"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "        // different types -\u003e returns false"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(deleteFirstCommand.equals(1));"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(deleteFirstCommand.equals(null));"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "        // different person -\u003e returns false"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(deleteFirstCommand.equals(deleteSecondCommand));"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "     * Updates {@code model}\u0027s filtered list to show no one."
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "    private void showNoPerson(Model model) {"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "        model.updateFilteredPersonList(p -\u003e false);"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(model.getFilteredPersonList().isEmpty());"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "nexolute": 17,
      "-": 92
    }
  },
  {
    "path": "src/test/java/seedu/ichifund/logic/commands/EditCommandTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "nexolute"
        },
        "content": "package seedu.ichifund.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "nexolute"
        },
        "content": "import static seedu.ichifund.logic.commands.CommandTestUtil.DESC_AMY;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "nexolute"
        },
        "content": "import static seedu.ichifund.logic.commands.CommandTestUtil.DESC_BOB;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "nexolute"
        },
        "content": "import static seedu.ichifund.logic.commands.CommandTestUtil.VALID_NAME_BOB;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "nexolute"
        },
        "content": "import static seedu.ichifund.logic.commands.CommandTestUtil.VALID_PHONE_BOB;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "nexolute"
        },
        "content": "import static seedu.ichifund.logic.commands.CommandTestUtil.VALID_TAG_HUSBAND;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "nexolute"
        },
        "content": "import static seedu.ichifund.logic.commands.CommandTestUtil.assertCommandFailure;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "nexolute"
        },
        "content": "import static seedu.ichifund.logic.commands.CommandTestUtil.assertCommandSuccess;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "nexolute"
        },
        "content": "import static seedu.ichifund.logic.commands.CommandTestUtil.showPersonAtIndex;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "nexolute"
        },
        "content": "import static seedu.ichifund.testutil.TypicalFundBook.getTypicalFundBook;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "nexolute"
        },
        "content": "import static seedu.ichifund.testutil.TypicalIndexes.INDEX_FIRST_PERSON;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "nexolute"
        },
        "content": "import static seedu.ichifund.testutil.TypicalIndexes.INDEX_SECOND_PERSON;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "nexolute"
        },
        "content": "import seedu.ichifund.commons.core.Messages;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "nexolute"
        },
        "content": "import seedu.ichifund.commons.core.index.Index;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "nexolute"
        },
        "content": "import seedu.ichifund.logic.commands.EditCommand.EditPersonDescriptor;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "nexolute"
        },
        "content": "import seedu.ichifund.model.FundBook;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "nexolute"
        },
        "content": "import seedu.ichifund.model.Model;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "nexolute"
        },
        "content": "import seedu.ichifund.model.ModelManager;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "nexolute"
        },
        "content": "import seedu.ichifund.model.UserPrefs;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "nexolute"
        },
        "content": "import seedu.ichifund.model.person.Person;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "nexolute"
        },
        "content": "import seedu.ichifund.testutil.EditPersonDescriptorBuilder;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "nexolute"
        },
        "content": "import seedu.ichifund.testutil.PersonBuilder;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": " * Contains integration tests (interaction with the Model, UndoCommand and RedoCommand) and unit tests for EditCommand."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "public class EditCommandTest {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "nexolute"
        },
        "content": "    private Model model \u003d new ModelManager(getTypicalFundBook(), new UserPrefs());"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_allFieldsSpecifiedUnfilteredList_success() {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        Person editedPerson \u003d new PersonBuilder().build();"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "        EditPersonDescriptor descriptor \u003d new EditPersonDescriptorBuilder(editedPerson).build();"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "        EditCommand editCommand \u003d new EditCommand(INDEX_FIRST_PERSON, descriptor);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        String expectedMessage \u003d String.format(EditCommand.MESSAGE_EDIT_PERSON_SUCCESS, editedPerson);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "nexolute"
        },
        "content": "        Model expectedModel \u003d new ModelManager(new FundBook(model.getFundBook()), new UserPrefs());"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        expectedModel.setPerson(model.getFilteredPersonList().get(0), editedPerson);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(editCommand, model, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_someFieldsSpecifiedUnfilteredList_success() {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "        Index indexLastPerson \u003d Index.fromOneBased(model.getFilteredPersonList().size());"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "        Person lastPerson \u003d model.getFilteredPersonList().get(indexLastPerson.getZeroBased());"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "        PersonBuilder personInList \u003d new PersonBuilder(lastPerson);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "        Person editedPerson \u003d personInList.withName(VALID_NAME_BOB).withPhone(VALID_PHONE_BOB)"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "                .withTags(VALID_TAG_HUSBAND).build();"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "        EditPersonDescriptor descriptor \u003d new EditPersonDescriptorBuilder().withName(VALID_NAME_BOB)"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "                .withPhone(VALID_PHONE_BOB).withTags(VALID_TAG_HUSBAND).build();"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "        EditCommand editCommand \u003d new EditCommand(indexLastPerson, descriptor);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "        String expectedMessage \u003d String.format(EditCommand.MESSAGE_EDIT_PERSON_SUCCESS, editedPerson);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "nexolute"
        },
        "content": "        Model expectedModel \u003d new ModelManager(new FundBook(model.getFundBook()), new UserPrefs());"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "        expectedModel.setPerson(lastPerson, editedPerson);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(editCommand, model, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_noFieldSpecifiedUnfilteredList_success() {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "        EditCommand editCommand \u003d new EditCommand(INDEX_FIRST_PERSON, new EditPersonDescriptor());"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "        Person editedPerson \u003d model.getFilteredPersonList().get(INDEX_FIRST_PERSON.getZeroBased());"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "        String expectedMessage \u003d String.format(EditCommand.MESSAGE_EDIT_PERSON_SUCCESS, editedPerson);"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "nexolute"
        },
        "content": "        Model expectedModel \u003d new ModelManager(new FundBook(model.getFundBook()), new UserPrefs());"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(editCommand, model, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_filteredList_success() {"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "        showPersonAtIndex(model, INDEX_FIRST_PERSON);"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "        Person personInFilteredList \u003d model.getFilteredPersonList().get(INDEX_FIRST_PERSON.getZeroBased());"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "        Person editedPerson \u003d new PersonBuilder(personInFilteredList).withName(VALID_NAME_BOB).build();"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "        EditCommand editCommand \u003d new EditCommand(INDEX_FIRST_PERSON,"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "                new EditPersonDescriptorBuilder().withName(VALID_NAME_BOB).build());"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "        String expectedMessage \u003d String.format(EditCommand.MESSAGE_EDIT_PERSON_SUCCESS, editedPerson);"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "nexolute"
        },
        "content": "        Model expectedModel \u003d new ModelManager(new FundBook(model.getFundBook()), new UserPrefs());"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "        expectedModel.setPerson(model.getFilteredPersonList().get(0), editedPerson);"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(editCommand, model, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_duplicatePersonUnfilteredList_failure() {"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "        Person firstPerson \u003d model.getFilteredPersonList().get(INDEX_FIRST_PERSON.getZeroBased());"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "        EditPersonDescriptor descriptor \u003d new EditPersonDescriptorBuilder(firstPerson).build();"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "        EditCommand editCommand \u003d new EditCommand(INDEX_SECOND_PERSON, descriptor);"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandFailure(editCommand, model, EditCommand.MESSAGE_DUPLICATE_PERSON);"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_duplicatePersonFilteredList_failure() {"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "        showPersonAtIndex(model, INDEX_FIRST_PERSON);"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "        // edit person in filtered list into a duplicate in address book"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "nexolute"
        },
        "content": "        Person personInList \u003d model.getFundBook().getPersonList().get(INDEX_SECOND_PERSON.getZeroBased());"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "        EditCommand editCommand \u003d new EditCommand(INDEX_FIRST_PERSON,"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "                new EditPersonDescriptorBuilder(personInList).build());"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandFailure(editCommand, model, EditCommand.MESSAGE_DUPLICATE_PERSON);"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_invalidPersonIndexUnfilteredList_failure() {"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "        Index outOfBoundIndex \u003d Index.fromOneBased(model.getFilteredPersonList().size() + 1);"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "        EditPersonDescriptor descriptor \u003d new EditPersonDescriptorBuilder().withName(VALID_NAME_BOB).build();"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "        EditCommand editCommand \u003d new EditCommand(outOfBoundIndex, descriptor);"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandFailure(editCommand, model, Messages.MESSAGE_INVALID_PERSON_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "     * Edit filtered list where index is larger than size of filtered list,"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "     * but smaller than size of address book"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_invalidPersonIndexFilteredList_failure() {"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": "        showPersonAtIndex(model, INDEX_FIRST_PERSON);"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": "        Index outOfBoundIndex \u003d INDEX_SECOND_PERSON;"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": "        // ensures that outOfBoundIndex is still in bounds of address book list"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "nexolute"
        },
        "content": "        assertTrue(outOfBoundIndex.getZeroBased() \u003c model.getFundBook().getPersonList().size());"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": "        EditCommand editCommand \u003d new EditCommand(outOfBoundIndex,"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": "                new EditPersonDescriptorBuilder().withName(VALID_NAME_BOB).build());"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandFailure(editCommand, model, Messages.MESSAGE_INVALID_PERSON_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": "        final EditCommand standardCommand \u003d new EditCommand(INDEX_FIRST_PERSON, DESC_AMY);"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": "        // same values -\u003e returns true"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": "        EditPersonDescriptor copyDescriptor \u003d new EditPersonDescriptor(DESC_AMY);"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "-"
        },
        "content": "        EditCommand commandWithSameValues \u003d new EditCommand(INDEX_FIRST_PERSON, copyDescriptor);"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(standardCommand.equals(commandWithSameValues));"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "-"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(standardCommand.equals(standardCommand));"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "-"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(standardCommand.equals(null));"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "-"
        },
        "content": "        // different types -\u003e returns false"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(standardCommand.equals(new ClearCommand()));"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "-"
        },
        "content": "        // different index -\u003e returns false"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(standardCommand.equals(new EditCommand(INDEX_SECOND_PERSON, DESC_AMY)));"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "-"
        },
        "content": "        // different descriptor -\u003e returns false"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(standardCommand.equals(new EditCommand(INDEX_FIRST_PERSON, DESC_BOB)));"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "nexolute": 29,
      "-": 144
    }
  },
  {
    "path": "src/test/java/seedu/ichifund/logic/commands/EditPersonDescriptorTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "nexolute"
        },
        "content": "package seedu.ichifund.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "nexolute"
        },
        "content": "import static seedu.ichifund.logic.commands.CommandTestUtil.DESC_AMY;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "nexolute"
        },
        "content": "import static seedu.ichifund.logic.commands.CommandTestUtil.DESC_BOB;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "nexolute"
        },
        "content": "import static seedu.ichifund.logic.commands.CommandTestUtil.VALID_ADDRESS_BOB;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "nexolute"
        },
        "content": "import static seedu.ichifund.logic.commands.CommandTestUtil.VALID_EMAIL_BOB;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "nexolute"
        },
        "content": "import static seedu.ichifund.logic.commands.CommandTestUtil.VALID_NAME_BOB;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "nexolute"
        },
        "content": "import static seedu.ichifund.logic.commands.CommandTestUtil.VALID_PHONE_BOB;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "nexolute"
        },
        "content": "import static seedu.ichifund.logic.commands.CommandTestUtil.VALID_TAG_HUSBAND;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "nexolute"
        },
        "content": "import seedu.ichifund.logic.commands.EditCommand.EditPersonDescriptor;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "nexolute"
        },
        "content": "import seedu.ichifund.testutil.EditPersonDescriptorBuilder;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "public class EditPersonDescriptorTest {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "        // same values -\u003e returns true"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "        EditPersonDescriptor descriptorWithSameValues \u003d new EditPersonDescriptor(DESC_AMY);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(DESC_AMY.equals(descriptorWithSameValues));"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(DESC_AMY.equals(DESC_AMY));"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(DESC_AMY.equals(null));"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        // different types -\u003e returns false"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(DESC_AMY.equals(5));"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "        // different values -\u003e returns false"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(DESC_AMY.equals(DESC_BOB));"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        // different name -\u003e returns false"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        EditPersonDescriptor editedAmy \u003d new EditPersonDescriptorBuilder(DESC_AMY).withName(VALID_NAME_BOB).build();"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(DESC_AMY.equals(editedAmy));"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "        // different phone -\u003e returns false"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        editedAmy \u003d new EditPersonDescriptorBuilder(DESC_AMY).withPhone(VALID_PHONE_BOB).build();"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(DESC_AMY.equals(editedAmy));"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        // different email -\u003e returns false"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        editedAmy \u003d new EditPersonDescriptorBuilder(DESC_AMY).withEmail(VALID_EMAIL_BOB).build();"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(DESC_AMY.equals(editedAmy));"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "        // different address -\u003e returns false"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        editedAmy \u003d new EditPersonDescriptorBuilder(DESC_AMY).withAddress(VALID_ADDRESS_BOB).build();"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(DESC_AMY.equals(editedAmy));"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "        // different tags -\u003e returns false"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "        editedAmy \u003d new EditPersonDescriptorBuilder(DESC_AMY).withTags(VALID_TAG_HUSBAND).build();"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(DESC_AMY.equals(editedAmy));"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "nexolute": 10,
      "-": 48
    }
  },
  {
    "path": "src/test/java/seedu/ichifund/logic/commands/ExitCommandTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "nexolute"
        },
        "content": "package seedu.ichifund.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "nexolute"
        },
        "content": "import static seedu.ichifund.logic.commands.CommandTestUtil.assertCommandSuccess;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "nexolute"
        },
        "content": "import static seedu.ichifund.logic.commands.ExitCommand.MESSAGE_EXIT_ACKNOWLEDGEMENT;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "nexolute"
        },
        "content": "import seedu.ichifund.model.Model;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "nexolute"
        },
        "content": "import seedu.ichifund.model.ModelManager;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "public class ExitCommandTest {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    private Model model \u003d new ModelManager();"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "    private Model expectedModel \u003d new ModelManager();"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_exit_success() {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "        CommandResult expectedCommandResult \u003d new CommandResult(MESSAGE_EXIT_ACKNOWLEDGEMENT, false, true);"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(new ExitCommand(), model, expectedCommandResult, expectedModel);"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "nexolute": 5,
      "-": 15
    }
  },
  {
    "path": "src/test/java/seedu/ichifund/logic/commands/FindCommandTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "nexolute"
        },
        "content": "package seedu.ichifund.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "nexolute"
        },
        "content": "import static seedu.ichifund.commons.core.Messages.MESSAGE_PERSONS_LISTED_OVERVIEW;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "nexolute"
        },
        "content": "import static seedu.ichifund.logic.commands.CommandTestUtil.assertCommandSuccess;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "nexolute"
        },
        "content": "import static seedu.ichifund.testutil.TypicalFundBook.PERSON_CARL;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "nexolute"
        },
        "content": "import static seedu.ichifund.testutil.TypicalFundBook.PERSON_ELLE;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "nexolute"
        },
        "content": "import static seedu.ichifund.testutil.TypicalFundBook.PERSON_FIONA;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "nexolute"
        },
        "content": "import static seedu.ichifund.testutil.TypicalFundBook.getTypicalFundBook;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Collections;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "nexolute"
        },
        "content": "import seedu.ichifund.model.Model;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "nexolute"
        },
        "content": "import seedu.ichifund.model.ModelManager;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "nexolute"
        },
        "content": "import seedu.ichifund.model.UserPrefs;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "nexolute"
        },
        "content": "import seedu.ichifund.model.person.NameContainsKeywordsPredicate;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": " * Contains integration tests (interaction with the Model) for {@code FindCommand}."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "public class FindCommandTest {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "nexolute"
        },
        "content": "    private Model model \u003d new ModelManager(getTypicalFundBook(), new UserPrefs());"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "nexolute"
        },
        "content": "    private Model expectedModel \u003d new ModelManager(getTypicalFundBook(), new UserPrefs());"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        NameContainsKeywordsPredicate firstPredicate \u003d"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "                new NameContainsKeywordsPredicate(Collections.singletonList(\"first\"));"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        NameContainsKeywordsPredicate secondPredicate \u003d"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "                new NameContainsKeywordsPredicate(Collections.singletonList(\"second\"));"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        FindCommand findFirstCommand \u003d new FindCommand(firstPredicate);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        FindCommand findSecondCommand \u003d new FindCommand(secondPredicate);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(findFirstCommand.equals(findFirstCommand));"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        // same values -\u003e returns true"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        FindCommand findFirstCommandCopy \u003d new FindCommand(firstPredicate);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(findFirstCommand.equals(findFirstCommandCopy));"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        // different types -\u003e returns false"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(findFirstCommand.equals(1));"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(findFirstCommand.equals(null));"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "        // different person -\u003e returns false"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(findFirstCommand.equals(findSecondCommand));"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_zeroKeywords_noPersonFound() {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "        String expectedMessage \u003d String.format(MESSAGE_PERSONS_LISTED_OVERVIEW, 0);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "        NameContainsKeywordsPredicate predicate \u003d preparePredicate(\" \");"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "        FindCommand command \u003d new FindCommand(predicate);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "        expectedModel.updateFilteredPersonList(predicate);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(command, model, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(Collections.emptyList(), model.getFilteredPersonList());"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_multipleKeywords_multiplePersonsFound() {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "        String expectedMessage \u003d String.format(MESSAGE_PERSONS_LISTED_OVERVIEW, 3);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "        NameContainsKeywordsPredicate predicate \u003d preparePredicate(\"Kurz Elle Kunz\");"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "        FindCommand command \u003d new FindCommand(predicate);"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "        expectedModel.updateFilteredPersonList(predicate);"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(command, model, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "nexolute"
        },
        "content": "        assertEquals(Arrays.asList(PERSON_CARL, PERSON_ELLE, PERSON_FIONA), model.getFilteredPersonList());"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "     * Parses {@code userInput} into a {@code NameContainsKeywordsPredicate}."
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "    private NameContainsKeywordsPredicate preparePredicate(String userInput) {"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "        return new NameContainsKeywordsPredicate(Arrays.asList(userInput.split(\"\\\\s+\")));"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "nexolute": 14,
      "-": 69
    }
  },
  {
    "path": "src/test/java/seedu/ichifund/logic/commands/HelpCommandTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "nexolute"
        },
        "content": "package seedu.ichifund.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "nexolute"
        },
        "content": "import static seedu.ichifund.logic.commands.CommandTestUtil.assertCommandSuccess;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "nexolute"
        },
        "content": "import static seedu.ichifund.logic.commands.HelpCommand.SHOWING_HELP_MESSAGE;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "nexolute"
        },
        "content": "import seedu.ichifund.model.Model;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "nexolute"
        },
        "content": "import seedu.ichifund.model.ModelManager;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "public class HelpCommandTest {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    private Model model \u003d new ModelManager();"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "    private Model expectedModel \u003d new ModelManager();"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_help_success() {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "        CommandResult expectedCommandResult \u003d new CommandResult(SHOWING_HELP_MESSAGE, true, false);"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(new HelpCommand(), model, expectedCommandResult, expectedModel);"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "nexolute": 5,
      "-": 15
    }
  },
  {
    "path": "src/test/java/seedu/ichifund/logic/commands/ListCommandTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "nexolute"
        },
        "content": "package seedu.ichifund.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "nexolute"
        },
        "content": "import static seedu.ichifund.logic.commands.CommandTestUtil.assertCommandSuccess;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "nexolute"
        },
        "content": "import static seedu.ichifund.logic.commands.CommandTestUtil.showPersonAtIndex;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "nexolute"
        },
        "content": "import static seedu.ichifund.testutil.TypicalFundBook.getTypicalFundBook;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "nexolute"
        },
        "content": "import static seedu.ichifund.testutil.TypicalIndexes.INDEX_FIRST_PERSON;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.BeforeEach;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "nexolute"
        },
        "content": "import seedu.ichifund.model.Model;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "nexolute"
        },
        "content": "import seedu.ichifund.model.ModelManager;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "nexolute"
        },
        "content": "import seedu.ichifund.model.UserPrefs;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": " * Contains integration tests (interaction with the Model) and unit tests for ListCommand."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "public class ListCommandTest {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    private Model model;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    private Model expectedModel;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    @BeforeEach"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setUp() {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "nexolute"
        },
        "content": "        model \u003d new ModelManager(getTypicalFundBook(), new UserPrefs());"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "nexolute"
        },
        "content": "        expectedModel \u003d new ModelManager(model.getFundBook(), new UserPrefs());"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_listIsNotFiltered_showsSameList() {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(new ListCommand(), model, ListCommand.MESSAGE_SUCCESS, expectedModel);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_listIsFiltered_showsEverything() {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        showPersonAtIndex(model, INDEX_FIRST_PERSON);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(new ListCommand(), model, ListCommand.MESSAGE_SUCCESS, expectedModel);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "nexolute": 10,
      "-": 29
    }
  },
  {
    "path": "src/test/java/seedu/ichifund/logic/commands/budget/AddBudgetCommandTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "nexolute"
        },
        "content": "package seedu.ichifund.logic.commands.budget;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "nexolute"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "nexolute"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "nexolute"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "nexolute"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "nexolute"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "nexolute"
        },
        "content": "import static seedu.ichifund.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "nexolute"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "nexolute"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "nexolute"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "nexolute"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "nexolute"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "nexolute"
        },
        "content": "import java.util.function.Predicate;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "nexolute"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "nexolute"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "nexolute"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "nexolute"
        },
        "content": "import javafx.beans.property.ReadOnlyProperty;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "nexolute"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "nexolute"
        },
        "content": "import seedu.ichifund.commons.core.GuiSettings;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "nexolute"
        },
        "content": "import seedu.ichifund.logic.commands.CommandResult;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "nexolute"
        },
        "content": "import seedu.ichifund.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "nexolute"
        },
        "content": "import seedu.ichifund.model.FundBook;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "nexolute"
        },
        "content": "import seedu.ichifund.model.Model;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "nexolute"
        },
        "content": "import seedu.ichifund.model.ReadOnlyFundBook;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "nexolute"
        },
        "content": "import seedu.ichifund.model.ReadOnlyUserPrefs;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "nexolute"
        },
        "content": "import seedu.ichifund.model.analytics.Data;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "nexolute"
        },
        "content": "import seedu.ichifund.model.budget.Budget;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "nexolute"
        },
        "content": "import seedu.ichifund.model.context.TransactionContext;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "nexolute"
        },
        "content": "import seedu.ichifund.model.person.Person;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "nexolute"
        },
        "content": "import seedu.ichifund.model.repeater.Repeater;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "nexolute"
        },
        "content": "import seedu.ichifund.model.repeater.RepeaterUniqueId;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "nexolute"
        },
        "content": "import seedu.ichifund.model.transaction.Transaction;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "nexolute"
        },
        "content": "import seedu.ichifund.testutil.BudgetBuilder;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "nexolute"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "nexolute"
        },
        "content": "public class AddBudgetCommandTest {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "nexolute"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "nexolute"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "nexolute"
        },
        "content": "    public void constructor_nullBudget_throwsNullPointerException() {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "nexolute"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e new AddBudgetCommand(null));"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "nexolute"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "nexolute"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "nexolute"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "nexolute"
        },
        "content": "    public void execute_budgetAcceptedByModel_addSuccessful() throws Exception {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "nexolute"
        },
        "content": "        ModelStubAcceptingBudgetAdded modelStub \u003d new ModelStubAcceptingBudgetAdded();"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "nexolute"
        },
        "content": "        Budget validBudget \u003d new BudgetBuilder().build();"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "nexolute"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "nexolute"
        },
        "content": "        CommandResult commandResult \u003d new AddBudgetCommand(validBudget).execute(modelStub);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "nexolute"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "nexolute"
        },
        "content": "        assertEquals(String.format(AddBudgetCommand.MESSAGE_SUCCESS, validBudget), commandResult.getFeedbackToUser());"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "nexolute"
        },
        "content": "        assertEquals(Arrays.asList(validBudget), modelStub.budgetsAdded);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "nexolute"
        },
        "content": "    }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "nexolute"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "nexolute"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "nexolute"
        },
        "content": "    public void execute_duplicateBudget_throwsCommandException() {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "nexolute"
        },
        "content": "        Budget validBudget \u003d new BudgetBuilder().build();"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "nexolute"
        },
        "content": "        AddBudgetCommand addBudgetCommand \u003d new AddBudgetCommand(validBudget);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "nexolute"
        },
        "content": "        ModelStub modelStub \u003d new ModelStubWithBudget(validBudget);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "nexolute"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "nexolute"
        },
        "content": "        assertThrows(CommandException.class, AddBudgetCommand.MESSAGE_DUPLICATE_BUDGET, ()"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "nexolute"
        },
        "content": "            -\u003e addBudgetCommand.execute(modelStub));"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "nexolute"
        },
        "content": "    }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "nexolute"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "nexolute"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "nexolute"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "nexolute"
        },
        "content": "        Budget overall \u003d new BudgetBuilder().withDescription(\"Limit for Spendings\").build();"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "nexolute"
        },
        "content": "        Budget food \u003d new BudgetBuilder().withDescription(\"Limit for Food\").build();"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "nexolute"
        },
        "content": "        AddBudgetCommand addOverallCommand \u003d new AddBudgetCommand(overall);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "nexolute"
        },
        "content": "        AddBudgetCommand addFoodCommand \u003d new AddBudgetCommand(food);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "nexolute"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "nexolute"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "nexolute"
        },
        "content": "        assertTrue(addOverallCommand.equals(addOverallCommand));"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "nexolute"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "nexolute"
        },
        "content": "        // same values -\u003e returns true"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "nexolute"
        },
        "content": "        AddBudgetCommand addOverallCommandCopy \u003d new AddBudgetCommand(overall);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "nexolute"
        },
        "content": "        assertTrue(addOverallCommand.equals(addOverallCommandCopy));"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "nexolute"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "nexolute"
        },
        "content": "        // different types -\u003e returns false"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "nexolute"
        },
        "content": "        assertFalse(addOverallCommand.equals(1));"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "nexolute"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "nexolute"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "nexolute"
        },
        "content": "        assertFalse(addOverallCommand.equals(null));"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "nexolute"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "nexolute"
        },
        "content": "        // different budget -\u003e returns false"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "nexolute"
        },
        "content": "        assertFalse(addOverallCommand.equals(addFoodCommand));"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "nexolute"
        },
        "content": "    }"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "nexolute"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "nexolute"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "nexolute"
        },
        "content": "     * A default model stub that have all of the methods failing."
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "nexolute"
        },
        "content": "     */"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "nexolute"
        },
        "content": "    private class ModelStub implements Model {"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "nexolute"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "nexolute"
        },
        "content": "        public void setUserPrefs(ReadOnlyUserPrefs userPrefs) {"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "nexolute"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "nexolute"
        },
        "content": "        }"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "nexolute"
        },
        "content": ""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "nexolute"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "nexolute"
        },
        "content": "        public ReadOnlyUserPrefs getUserPrefs() {"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "nexolute"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "nexolute"
        },
        "content": "        }"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "nexolute"
        },
        "content": ""
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "nexolute"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "nexolute"
        },
        "content": "        public GuiSettings getGuiSettings() {"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "nexolute"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "nexolute"
        },
        "content": "        }"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "nexolute"
        },
        "content": ""
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "nexolute"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "nexolute"
        },
        "content": "        public void setGuiSettings(GuiSettings guiSettings) {"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "nexolute"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "nexolute"
        },
        "content": "        }"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "nexolute"
        },
        "content": ""
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "nexolute"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "nexolute"
        },
        "content": "        public Path getFundBookFilePath() {"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "nexolute"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "nexolute"
        },
        "content": "        }"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "nexolute"
        },
        "content": ""
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "nexolute"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "nexolute"
        },
        "content": "        public void setFundBookFilePath(Path addressBookFilePath) {"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "nexolute"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "nexolute"
        },
        "content": "        }"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "nexolute"
        },
        "content": ""
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "nexolute"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "nexolute"
        },
        "content": "        public RepeaterUniqueId getCurrentRepeaterUniqueId() {"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "nexolute"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "nexolute"
        },
        "content": "        }"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "nexolute"
        },
        "content": ""
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "nexolute"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "nexolute"
        },
        "content": "        public void setCurrentRepeaterUniqueId(RepeaterUniqueId uniqueId) {"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "nexolute"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "nexolute"
        },
        "content": "        }"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "nexolute"
        },
        "content": ""
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "nexolute"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "nexolute"
        },
        "content": "        public void addPerson(Person person) {"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "nexolute"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "nexolute"
        },
        "content": "        }"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "nexolute"
        },
        "content": ""
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "nexolute"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "nexolute"
        },
        "content": "        public boolean hasPerson(Person person) {"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "nexolute"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "nexolute"
        },
        "content": "        }"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "nexolute"
        },
        "content": ""
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "nexolute"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "nexolute"
        },
        "content": "        public void deletePerson(Person target) {"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "nexolute"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "nexolute"
        },
        "content": "        }"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "nexolute"
        },
        "content": ""
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "nexolute"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "nexolute"
        },
        "content": "        public void setPerson(Person target, Person editedPerson) {"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "nexolute"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "nexolute"
        },
        "content": "        }"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "nexolute"
        },
        "content": ""
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "nexolute"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "nexolute"
        },
        "content": "        public ObservableList\u003cPerson\u003e getFilteredPersonList() {"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "nexolute"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "nexolute"
        },
        "content": "        }"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "nexolute"
        },
        "content": ""
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "nexolute"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "nexolute"
        },
        "content": "        public void updateFilteredPersonList(Predicate\u003cPerson\u003e predicate) {"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "nexolute"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "nexolute"
        },
        "content": "        }"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "nexolute"
        },
        "content": ""
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "nexolute"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "nexolute"
        },
        "content": "        public void addTransaction(Transaction transaction) {"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "nexolute"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "nexolute"
        },
        "content": "        }"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "nexolute"
        },
        "content": ""
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "nexolute"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "nexolute"
        },
        "content": "        public void deleteTransaction(Transaction target) {"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "nexolute"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "nexolute"
        },
        "content": "        }"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "nexolute"
        },
        "content": ""
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "nexolute"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "nexolute"
        },
        "content": "        public void setTransaction(Transaction target, Transaction editedTransaction) {"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "nexolute"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "nexolute"
        },
        "content": "        }"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "nexolute"
        },
        "content": ""
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "nexolute"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "nexolute"
        },
        "content": "        public ObservableList\u003cTransaction\u003e getFilteredTransactionList() {"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "nexolute"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "nexolute"
        },
        "content": "        }"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "nexolute"
        },
        "content": ""
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "nexolute"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "nexolute"
        },
        "content": "        public TransactionContext getTransactionContext() {"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "nexolute"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "nexolute"
        },
        "content": "        }"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "nexolute"
        },
        "content": ""
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "nexolute"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "nexolute"
        },
        "content": "        public void setTransactionContext(TransactionContext transactionContext) {"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "nexolute"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "nexolute"
        },
        "content": "        }"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "nexolute"
        },
        "content": ""
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "nexolute"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "nexolute"
        },
        "content": "        public void updateTransactionContext(Transaction transaction) {"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "nexolute"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "nexolute"
        },
        "content": "        }"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "nexolute"
        },
        "content": ""
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "nexolute"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "nexolute"
        },
        "content": "        public ObservableList\u003cTransaction\u003e getAssociatedTransactions(RepeaterUniqueId repeaterUniqueId) {"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "nexolute"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "nexolute"
        },
        "content": "        }"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "nexolute"
        },
        "content": ""
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "nexolute"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "nexolute"
        },
        "content": "        public void addRepeater(Repeater repeater) {"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "nexolute"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "nexolute"
        },
        "content": "        }"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "nexolute"
        },
        "content": ""
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "nexolute"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "nexolute"
        },
        "content": "        public boolean hasRepeater(Repeater repeater) {"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "nexolute"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "nexolute"
        },
        "content": "        }"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "nexolute"
        },
        "content": ""
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "nexolute"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "nexolute"
        },
        "content": "        public void deleteRepeater(Repeater target) {"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "nexolute"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "nexolute"
        },
        "content": "        }"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "nexolute"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "nexolute"
        },
        "content": "        public void setRepeater(Repeater target, Repeater editedRepeater) {"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "nexolute"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "nexolute"
        },
        "content": "        }"
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "nexolute"
        },
        "content": ""
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "nexolute"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "nexolute"
        },
        "content": "        public ObservableList\u003cRepeater\u003e getFilteredRepeaterList() {"
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "nexolute"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "nexolute"
        },
        "content": "        }"
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "nexolute"
        },
        "content": ""
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "nexolute"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "nexolute"
        },
        "content": "        public void updateFilteredRepeaterList(Predicate\u003cRepeater\u003e predicate) {"
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "nexolute"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "nexolute"
        },
        "content": "        }"
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "nexolute"
        },
        "content": ""
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "nexolute"
        },
        "content": ""
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "nexolute"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "nexolute"
        },
        "content": "        public void addBudget(Budget budget) {"
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "nexolute"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "nexolute"
        },
        "content": "        }"
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "nexolute"
        },
        "content": ""
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "nexolute"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "nexolute"
        },
        "content": "        public boolean hasBudget(Budget budget) {"
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "nexolute"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "nexolute"
        },
        "content": "        }"
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "nexolute"
        },
        "content": ""
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "nexolute"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "nexolute"
        },
        "content": "        public void deleteBudget(Budget target) {"
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "nexolute"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "nexolute"
        },
        "content": "        }"
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "nexolute"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "nexolute"
        },
        "content": "        public void setBudget(Budget target, Budget editedBudget) {"
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "nexolute"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 248,
        "author": {
          "gitId": "nexolute"
        },
        "content": "        }"
      },
      {
        "lineNumber": 249,
        "author": {
          "gitId": "nexolute"
        },
        "content": ""
      },
      {
        "lineNumber": 250,
        "author": {
          "gitId": "nexolute"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 251,
        "author": {
          "gitId": "nexolute"
        },
        "content": "        public ObservableList\u003cBudget\u003e getFilteredBudgetList() {"
      },
      {
        "lineNumber": 252,
        "author": {
          "gitId": "nexolute"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 253,
        "author": {
          "gitId": "nexolute"
        },
        "content": "        }"
      },
      {
        "lineNumber": 254,
        "author": {
          "gitId": "nexolute"
        },
        "content": ""
      },
      {
        "lineNumber": 255,
        "author": {
          "gitId": "nexolute"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 256,
        "author": {
          "gitId": "nexolute"
        },
        "content": "        public void updateFilteredBudgetList(Predicate\u003cBudget\u003e predicate) {"
      },
      {
        "lineNumber": 257,
        "author": {
          "gitId": "nexolute"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 258,
        "author": {
          "gitId": "nexolute"
        },
        "content": "        }"
      },
      {
        "lineNumber": 259,
        "author": {
          "gitId": "nexolute"
        },
        "content": ""
      },
      {
        "lineNumber": 260,
        "author": {
          "gitId": "nexolute"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 261,
        "author": {
          "gitId": "nexolute"
        },
        "content": "        public ReadOnlyProperty\u003cTransactionContext\u003e getTransactionContextProperty() {"
      },
      {
        "lineNumber": 262,
        "author": {
          "gitId": "nexolute"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 263,
        "author": {
          "gitId": "nexolute"
        },
        "content": "        }"
      },
      {
        "lineNumber": 264,
        "author": {
          "gitId": "nexolute"
        },
        "content": ""
      },
      {
        "lineNumber": 265,
        "author": {
          "gitId": "nexolute"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 266,
        "author": {
          "gitId": "nexolute"
        },
        "content": "        public ObservableList\u003cData\u003e getDataList() {"
      },
      {
        "lineNumber": 267,
        "author": {
          "gitId": "nexolute"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 268,
        "author": {
          "gitId": "nexolute"
        },
        "content": "        }"
      },
      {
        "lineNumber": 269,
        "author": {
          "gitId": "nexolute"
        },
        "content": ""
      },
      {
        "lineNumber": 270,
        "author": {
          "gitId": "nexolute"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 271,
        "author": {
          "gitId": "nexolute"
        },
        "content": "        public void updateDataList(List\u003cData\u003e datas) {"
      },
      {
        "lineNumber": 272,
        "author": {
          "gitId": "nexolute"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 273,
        "author": {
          "gitId": "nexolute"
        },
        "content": "        }"
      },
      {
        "lineNumber": 274,
        "author": {
          "gitId": "nexolute"
        },
        "content": ""
      },
      {
        "lineNumber": 275,
        "author": {
          "gitId": "nexolute"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 276,
        "author": {
          "gitId": "nexolute"
        },
        "content": "        public void setFundBook(ReadOnlyFundBook newData) {"
      },
      {
        "lineNumber": 277,
        "author": {
          "gitId": "nexolute"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 278,
        "author": {
          "gitId": "nexolute"
        },
        "content": "        }"
      },
      {
        "lineNumber": 279,
        "author": {
          "gitId": "nexolute"
        },
        "content": ""
      },
      {
        "lineNumber": 280,
        "author": {
          "gitId": "nexolute"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 281,
        "author": {
          "gitId": "nexolute"
        },
        "content": "        public ReadOnlyFundBook getFundBook() {"
      },
      {
        "lineNumber": 282,
        "author": {
          "gitId": "nexolute"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 283,
        "author": {
          "gitId": "nexolute"
        },
        "content": "        }"
      },
      {
        "lineNumber": 284,
        "author": {
          "gitId": "nexolute"
        },
        "content": "    }"
      },
      {
        "lineNumber": 285,
        "author": {
          "gitId": "nexolute"
        },
        "content": ""
      },
      {
        "lineNumber": 286,
        "author": {
          "gitId": "nexolute"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 287,
        "author": {
          "gitId": "nexolute"
        },
        "content": "     * A Model stub that contains a single budget."
      },
      {
        "lineNumber": 288,
        "author": {
          "gitId": "nexolute"
        },
        "content": "     */"
      },
      {
        "lineNumber": 289,
        "author": {
          "gitId": "nexolute"
        },
        "content": "    private class ModelStubWithBudget extends ModelStub {"
      },
      {
        "lineNumber": 290,
        "author": {
          "gitId": "nexolute"
        },
        "content": "        private final Budget budget;"
      },
      {
        "lineNumber": 291,
        "author": {
          "gitId": "nexolute"
        },
        "content": ""
      },
      {
        "lineNumber": 292,
        "author": {
          "gitId": "nexolute"
        },
        "content": "        ModelStubWithBudget(Budget budget) {"
      },
      {
        "lineNumber": 293,
        "author": {
          "gitId": "nexolute"
        },
        "content": "            requireNonNull(budget);"
      },
      {
        "lineNumber": 294,
        "author": {
          "gitId": "nexolute"
        },
        "content": "            this.budget \u003d budget;"
      },
      {
        "lineNumber": 295,
        "author": {
          "gitId": "nexolute"
        },
        "content": "        }"
      },
      {
        "lineNumber": 296,
        "author": {
          "gitId": "nexolute"
        },
        "content": ""
      },
      {
        "lineNumber": 297,
        "author": {
          "gitId": "nexolute"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 298,
        "author": {
          "gitId": "nexolute"
        },
        "content": "        public boolean hasBudget(Budget budget) {"
      },
      {
        "lineNumber": 299,
        "author": {
          "gitId": "nexolute"
        },
        "content": "            requireNonNull(budget);"
      },
      {
        "lineNumber": 300,
        "author": {
          "gitId": "nexolute"
        },
        "content": "            return this.budget.isSameBudget(budget);"
      },
      {
        "lineNumber": 301,
        "author": {
          "gitId": "nexolute"
        },
        "content": "        }"
      },
      {
        "lineNumber": 302,
        "author": {
          "gitId": "nexolute"
        },
        "content": "    }"
      },
      {
        "lineNumber": 303,
        "author": {
          "gitId": "nexolute"
        },
        "content": ""
      },
      {
        "lineNumber": 304,
        "author": {
          "gitId": "nexolute"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 305,
        "author": {
          "gitId": "nexolute"
        },
        "content": "     * A Model stub that always accept the budget being added."
      },
      {
        "lineNumber": 306,
        "author": {
          "gitId": "nexolute"
        },
        "content": "     */"
      },
      {
        "lineNumber": 307,
        "author": {
          "gitId": "nexolute"
        },
        "content": "    private class ModelStubAcceptingBudgetAdded extends ModelStub {"
      },
      {
        "lineNumber": 308,
        "author": {
          "gitId": "nexolute"
        },
        "content": "        final ArrayList\u003cBudget\u003e budgetsAdded \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 309,
        "author": {
          "gitId": "nexolute"
        },
        "content": ""
      },
      {
        "lineNumber": 310,
        "author": {
          "gitId": "nexolute"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 311,
        "author": {
          "gitId": "nexolute"
        },
        "content": "        public boolean hasBudget(Budget budget) {"
      },
      {
        "lineNumber": 312,
        "author": {
          "gitId": "nexolute"
        },
        "content": "            requireNonNull(budget);"
      },
      {
        "lineNumber": 313,
        "author": {
          "gitId": "nexolute"
        },
        "content": "            return budgetsAdded.stream().anyMatch(budget::isSameBudget);"
      },
      {
        "lineNumber": 314,
        "author": {
          "gitId": "nexolute"
        },
        "content": "        }"
      },
      {
        "lineNumber": 315,
        "author": {
          "gitId": "nexolute"
        },
        "content": ""
      },
      {
        "lineNumber": 316,
        "author": {
          "gitId": "nexolute"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 317,
        "author": {
          "gitId": "nexolute"
        },
        "content": "        public void addBudget(Budget budget) {"
      },
      {
        "lineNumber": 318,
        "author": {
          "gitId": "nexolute"
        },
        "content": "            requireNonNull(budget);"
      },
      {
        "lineNumber": 319,
        "author": {
          "gitId": "nexolute"
        },
        "content": "            budgetsAdded.add(budget);"
      },
      {
        "lineNumber": 320,
        "author": {
          "gitId": "nexolute"
        },
        "content": "        }"
      },
      {
        "lineNumber": 321,
        "author": {
          "gitId": "nexolute"
        },
        "content": ""
      },
      {
        "lineNumber": 322,
        "author": {
          "gitId": "nexolute"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 323,
        "author": {
          "gitId": "nexolute"
        },
        "content": "        public ReadOnlyFundBook getFundBook() {"
      },
      {
        "lineNumber": 324,
        "author": {
          "gitId": "nexolute"
        },
        "content": "            return new FundBook();"
      },
      {
        "lineNumber": 325,
        "author": {
          "gitId": "nexolute"
        },
        "content": "        }"
      },
      {
        "lineNumber": 326,
        "author": {
          "gitId": "nexolute"
        },
        "content": "    }"
      },
      {
        "lineNumber": 327,
        "author": {
          "gitId": "nexolute"
        },
        "content": ""
      },
      {
        "lineNumber": 328,
        "author": {
          "gitId": "nexolute"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "nexolute": 328
    }
  },
  {
    "path": "src/test/java/seedu/ichifund/logic/commands/budget/DeleteBudgetCommandTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "nexolute"
        },
        "content": "package seedu.ichifund.logic.commands.budget;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "nexolute"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "nexolute"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "nexolute"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "nexolute"
        },
        "content": "import static seedu.ichifund.logic.commands.CommandTestUtil.assertCommandFailure;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "nexolute"
        },
        "content": "import static seedu.ichifund.logic.commands.CommandTestUtil.assertCommandSuccess;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "nexolute"
        },
        "content": "import static seedu.ichifund.logic.commands.CommandTestUtil.showBudgetAtIndex;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "nexolute"
        },
        "content": "import static seedu.ichifund.testutil.TypicalFundBook.getTypicalFundBook;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "nexolute"
        },
        "content": "import static seedu.ichifund.testutil.TypicalIndexes.INDEX_FIRST_BUDGET;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "nexolute"
        },
        "content": "import static seedu.ichifund.testutil.TypicalIndexes.INDEX_SECOND_BUDGET;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "nexolute"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "nexolute"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "nexolute"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "nexolute"
        },
        "content": "import seedu.ichifund.commons.core.Messages;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "nexolute"
        },
        "content": "import seedu.ichifund.commons.core.index.Index;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "nexolute"
        },
        "content": "import seedu.ichifund.model.Model;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "nexolute"
        },
        "content": "import seedu.ichifund.model.ModelManager;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "nexolute"
        },
        "content": "import seedu.ichifund.model.UserPrefs;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "nexolute"
        },
        "content": "import seedu.ichifund.model.budget.Budget;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "nexolute"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "nexolute"
        },
        "content": "/**"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "nexolute"
        },
        "content": " * Contains integration tests (interaction with the Model) and unit tests for"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "nexolute"
        },
        "content": " * {@code DeleteBudgetCommand}."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "nexolute"
        },
        "content": " */"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "nexolute"
        },
        "content": "public class DeleteBudgetCommandTest {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "nexolute"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "nexolute"
        },
        "content": "    private Model model \u003d new ModelManager(getTypicalFundBook(), new UserPrefs());"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "nexolute"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "nexolute"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "nexolute"
        },
        "content": "    public void execute_validIndexUnfilteredList_success() {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "nexolute"
        },
        "content": "        Budget budgetToDelete \u003d model.getFilteredBudgetList().get(INDEX_FIRST_BUDGET.getZeroBased());"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "nexolute"
        },
        "content": "        DeleteBudgetCommand deleteCommand \u003d new DeleteBudgetCommand(INDEX_FIRST_BUDGET);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "nexolute"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "nexolute"
        },
        "content": "        String expectedMessage \u003d String.format(DeleteBudgetCommand.MESSAGE_DELETE_BUDGET_SUCCESS, budgetToDelete);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "nexolute"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "nexolute"
        },
        "content": "        ModelManager expectedModel \u003d new ModelManager(model.getFundBook(), new UserPrefs());"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "nexolute"
        },
        "content": "        expectedModel.deleteBudget(budgetToDelete);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "nexolute"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "nexolute"
        },
        "content": "        assertCommandSuccess(deleteCommand, model, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "nexolute"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "nexolute"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "nexolute"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "nexolute"
        },
        "content": "    public void execute_invalidIndexUnfilteredList_throwsCommandException() {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "nexolute"
        },
        "content": "        Index outOfBoundIndex \u003d Index.fromOneBased(model.getFilteredBudgetList().size() + 1);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "nexolute"
        },
        "content": "        DeleteBudgetCommand deleteCommand \u003d new DeleteBudgetCommand(outOfBoundIndex);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "nexolute"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "nexolute"
        },
        "content": "        assertCommandFailure(deleteCommand, model, Messages.MESSAGE_INVALID_BUDGET_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "nexolute"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "nexolute"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "nexolute"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "nexolute"
        },
        "content": "    public void execute_validIndexFilteredList_success() {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "nexolute"
        },
        "content": "        showBudgetAtIndex(model, INDEX_FIRST_BUDGET);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "nexolute"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "nexolute"
        },
        "content": "        Budget budgetToDelete \u003d model.getFilteredBudgetList().get(INDEX_FIRST_BUDGET.getZeroBased());"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "nexolute"
        },
        "content": "        DeleteBudgetCommand deleteCommand \u003d new DeleteBudgetCommand(INDEX_FIRST_BUDGET);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "nexolute"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "nexolute"
        },
        "content": "        String expectedMessage \u003d String.format(DeleteBudgetCommand.MESSAGE_DELETE_BUDGET_SUCCESS, budgetToDelete);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "nexolute"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "nexolute"
        },
        "content": "        Model expectedModel \u003d new ModelManager(model.getFundBook(), new UserPrefs());"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "nexolute"
        },
        "content": "        expectedModel.deleteBudget(budgetToDelete);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "nexolute"
        },
        "content": "        showNoBudget(expectedModel);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "nexolute"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "nexolute"
        },
        "content": "        assertCommandSuccess(deleteCommand, model, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "nexolute"
        },
        "content": "    }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "nexolute"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "nexolute"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "nexolute"
        },
        "content": "    public void execute_invalidIndexFilteredList_throwsCommandException() {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "nexolute"
        },
        "content": "        showBudgetAtIndex(model, INDEX_FIRST_BUDGET);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "nexolute"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "nexolute"
        },
        "content": "        Index outOfBoundIndex \u003d INDEX_SECOND_BUDGET;"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "nexolute"
        },
        "content": "        // ensures that outOfBoundIndex is still in bounds of fund book list"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "nexolute"
        },
        "content": "        assertTrue(outOfBoundIndex.getZeroBased() \u003c model.getFundBook().getBudgetList().size());"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "nexolute"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "nexolute"
        },
        "content": "        DeleteBudgetCommand deleteCommand \u003d new DeleteBudgetCommand(outOfBoundIndex);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "nexolute"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "nexolute"
        },
        "content": "        assertCommandFailure(deleteCommand, model, Messages.MESSAGE_INVALID_BUDGET_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "nexolute"
        },
        "content": "    }"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "nexolute"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "nexolute"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "nexolute"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "nexolute"
        },
        "content": "        DeleteBudgetCommand deleteFirstCommand \u003d new DeleteBudgetCommand(INDEX_FIRST_BUDGET);"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "nexolute"
        },
        "content": "        DeleteBudgetCommand deleteSecondCommand \u003d new DeleteBudgetCommand(INDEX_SECOND_BUDGET);"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "nexolute"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "nexolute"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "nexolute"
        },
        "content": "        assertTrue(deleteFirstCommand.equals(deleteFirstCommand));"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "nexolute"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "nexolute"
        },
        "content": "        // same values -\u003e returns true"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "nexolute"
        },
        "content": "        DeleteBudgetCommand deleteFirstCommandCopy \u003d new DeleteBudgetCommand(INDEX_FIRST_BUDGET);"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "nexolute"
        },
        "content": "        assertTrue(deleteFirstCommand.equals(deleteFirstCommandCopy));"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "nexolute"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "nexolute"
        },
        "content": "        // different types -\u003e returns false"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "nexolute"
        },
        "content": "        assertFalse(deleteFirstCommand.equals(1));"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "nexolute"
        },
        "content": ""
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "nexolute"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "nexolute"
        },
        "content": "        assertFalse(deleteFirstCommand.equals(null));"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "nexolute"
        },
        "content": ""
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "nexolute"
        },
        "content": "        // different budget -\u003e returns false"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "nexolute"
        },
        "content": "        assertFalse(deleteFirstCommand.equals(deleteSecondCommand));"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "nexolute"
        },
        "content": "    }"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "nexolute"
        },
        "content": ""
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "nexolute"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "nexolute"
        },
        "content": "     * Updates {@code model}\u0027s filtered list to show no one."
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "nexolute"
        },
        "content": "     */"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "nexolute"
        },
        "content": "    private void showNoBudget(Model model) {"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "nexolute"
        },
        "content": "        model.updateFilteredBudgetList(p -\u003e false);"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "nexolute"
        },
        "content": ""
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "nexolute"
        },
        "content": "        assertTrue(model.getFilteredBudgetList().isEmpty());"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "nexolute"
        },
        "content": "    }"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "nexolute"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "nexolute": 109
    }
  },
  {
    "path": "src/test/java/seedu/ichifund/logic/commands/transaction/AddTransactionCommandTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "package seedu.ichifund.logic.commands.transaction;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "weiyang13"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "class AddTransactionCommandTest {"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "weiyang13"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "weiyang13": 5
    }
  },
  {
    "path": "src/test/java/seedu/ichifund/logic/parser/AddCommandParserTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "nexolute"
        },
        "content": "package seedu.ichifund.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "nexolute"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "nexolute"
        },
        "content": "import static seedu.ichifund.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "nexolute"
        },
        "content": "import static seedu.ichifund.logic.commands.CommandTestUtil.ADDRESS_DESC_AMY;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "nexolute"
        },
        "content": "import static seedu.ichifund.logic.commands.CommandTestUtil.ADDRESS_DESC_BOB;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "nexolute"
        },
        "content": "import static seedu.ichifund.logic.commands.CommandTestUtil.EMAIL_DESC_AMY;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "nexolute"
        },
        "content": "import static seedu.ichifund.logic.commands.CommandTestUtil.EMAIL_DESC_BOB;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "nexolute"
        },
        "content": "import static seedu.ichifund.logic.commands.CommandTestUtil.INVALID_ADDRESS_DESC;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "nexolute"
        },
        "content": "import static seedu.ichifund.logic.commands.CommandTestUtil.INVALID_EMAIL_DESC;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "nexolute"
        },
        "content": "import static seedu.ichifund.logic.commands.CommandTestUtil.INVALID_NAME_DESC;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "nexolute"
        },
        "content": "import static seedu.ichifund.logic.commands.CommandTestUtil.INVALID_PHONE_DESC;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "nexolute"
        },
        "content": "import static seedu.ichifund.logic.commands.CommandTestUtil.INVALID_TAG_DESC;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "nexolute"
        },
        "content": "import static seedu.ichifund.logic.commands.CommandTestUtil.NAME_DESC_AMY;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "nexolute"
        },
        "content": "import static seedu.ichifund.logic.commands.CommandTestUtil.NAME_DESC_BOB;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "nexolute"
        },
        "content": "import static seedu.ichifund.logic.commands.CommandTestUtil.PHONE_DESC_AMY;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "nexolute"
        },
        "content": "import static seedu.ichifund.logic.commands.CommandTestUtil.PHONE_DESC_BOB;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "nexolute"
        },
        "content": "import static seedu.ichifund.logic.commands.CommandTestUtil.PREAMBLE_NON_EMPTY;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "nexolute"
        },
        "content": "import static seedu.ichifund.logic.commands.CommandTestUtil.PREAMBLE_WHITESPACE;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "nexolute"
        },
        "content": "import static seedu.ichifund.logic.commands.CommandTestUtil.TAG_DESC_FRIEND;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "nexolute"
        },
        "content": "import static seedu.ichifund.logic.commands.CommandTestUtil.TAG_DESC_HUSBAND;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "nexolute"
        },
        "content": "import static seedu.ichifund.logic.commands.CommandTestUtil.VALID_ADDRESS_BOB;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "nexolute"
        },
        "content": "import static seedu.ichifund.logic.commands.CommandTestUtil.VALID_EMAIL_BOB;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "nexolute"
        },
        "content": "import static seedu.ichifund.logic.commands.CommandTestUtil.VALID_NAME_BOB;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "nexolute"
        },
        "content": "import static seedu.ichifund.logic.commands.CommandTestUtil.VALID_PHONE_BOB;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "nexolute"
        },
        "content": "import static seedu.ichifund.logic.commands.CommandTestUtil.VALID_TAG_FRIEND;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "nexolute"
        },
        "content": "import static seedu.ichifund.logic.commands.CommandTestUtil.VALID_TAG_HUSBAND;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "nexolute"
        },
        "content": "import static seedu.ichifund.logic.parser.CommandParserTestUtil.assertParseFailure;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "nexolute"
        },
        "content": "import static seedu.ichifund.logic.parser.CommandParserTestUtil.assertParseSuccess;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "nexolute"
        },
        "content": "import static seedu.ichifund.testutil.TypicalFundBook.PERSON_AMY;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "nexolute"
        },
        "content": "import static seedu.ichifund.testutil.TypicalFundBook.PERSON_BOB;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "nexolute"
        },
        "content": "import seedu.ichifund.logic.commands.AddCommand;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "nexolute"
        },
        "content": "import seedu.ichifund.model.person.Address;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "nexolute"
        },
        "content": "import seedu.ichifund.model.person.Email;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "nexolute"
        },
        "content": "import seedu.ichifund.model.person.Name;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "nexolute"
        },
        "content": "import seedu.ichifund.model.person.Person;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "nexolute"
        },
        "content": "import seedu.ichifund.model.person.Phone;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "nexolute"
        },
        "content": "import seedu.ichifund.model.tag.Tag;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "nexolute"
        },
        "content": "import seedu.ichifund.testutil.PersonBuilder;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "public class AddCommandParserTest {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    private AddCommandParser parser \u003d new AddCommandParser();"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parse_allFieldsPresent_success() {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "nexolute"
        },
        "content": "        Person expectedPerson \u003d new PersonBuilder(PERSON_BOB).withTags(VALID_TAG_FRIEND).build();"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "        // whitespace only preamble"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseSuccess(parser, PREAMBLE_WHITESPACE + NAME_DESC_BOB + PHONE_DESC_BOB + EMAIL_DESC_BOB"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "                + ADDRESS_DESC_BOB + TAG_DESC_FRIEND, new AddCommand(expectedPerson));"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "        // multiple names - last name accepted"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseSuccess(parser, NAME_DESC_AMY + NAME_DESC_BOB + PHONE_DESC_BOB + EMAIL_DESC_BOB"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "                + ADDRESS_DESC_BOB + TAG_DESC_FRIEND, new AddCommand(expectedPerson));"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "        // multiple phones - last phone accepted"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseSuccess(parser, NAME_DESC_BOB + PHONE_DESC_AMY + PHONE_DESC_BOB + EMAIL_DESC_BOB"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "                + ADDRESS_DESC_BOB + TAG_DESC_FRIEND, new AddCommand(expectedPerson));"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "        // multiple emails - last email accepted"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseSuccess(parser, NAME_DESC_BOB + PHONE_DESC_BOB + EMAIL_DESC_AMY + EMAIL_DESC_BOB"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "                + ADDRESS_DESC_BOB + TAG_DESC_FRIEND, new AddCommand(expectedPerson));"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "        // multiple addresses - last address accepted"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseSuccess(parser, NAME_DESC_BOB + PHONE_DESC_BOB + EMAIL_DESC_BOB + ADDRESS_DESC_AMY"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "                + ADDRESS_DESC_BOB + TAG_DESC_FRIEND, new AddCommand(expectedPerson));"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "        // multiple tags - all accepted"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "nexolute"
        },
        "content": "        Person expectedPersonMultipleTags \u003d new PersonBuilder(PERSON_BOB).withTags(VALID_TAG_FRIEND, VALID_TAG_HUSBAND)"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "                .build();"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseSuccess(parser, NAME_DESC_BOB + PHONE_DESC_BOB + EMAIL_DESC_BOB + ADDRESS_DESC_BOB"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "                + TAG_DESC_HUSBAND + TAG_DESC_FRIEND, new AddCommand(expectedPersonMultipleTags));"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parse_optionalFieldsMissing_success() {"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "        // zero tags"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "nexolute"
        },
        "content": "        Person expectedPerson \u003d new PersonBuilder(PERSON_AMY).withTags().build();"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseSuccess(parser, NAME_DESC_AMY + PHONE_DESC_AMY + EMAIL_DESC_AMY + ADDRESS_DESC_AMY,"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "                new AddCommand(expectedPerson));"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parse_compulsoryFieldMissing_failure() {"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "        String expectedMessage \u003d String.format(MESSAGE_INVALID_COMMAND_FORMAT, AddCommand.MESSAGE_USAGE);"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "        // missing name prefix"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseFailure(parser, VALID_NAME_BOB + PHONE_DESC_BOB + EMAIL_DESC_BOB + ADDRESS_DESC_BOB,"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "                expectedMessage);"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "        // missing phone prefix"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseFailure(parser, NAME_DESC_BOB + VALID_PHONE_BOB + EMAIL_DESC_BOB + ADDRESS_DESC_BOB,"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "                expectedMessage);"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "        // missing email prefix"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseFailure(parser, NAME_DESC_BOB + PHONE_DESC_BOB + VALID_EMAIL_BOB + ADDRESS_DESC_BOB,"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "                expectedMessage);"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "        // missing address prefix"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseFailure(parser, NAME_DESC_BOB + PHONE_DESC_BOB + EMAIL_DESC_BOB + VALID_ADDRESS_BOB,"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "                expectedMessage);"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "        // all prefixes missing"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseFailure(parser, VALID_NAME_BOB + VALID_PHONE_BOB + VALID_EMAIL_BOB + VALID_ADDRESS_BOB,"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "                expectedMessage);"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parse_invalidValue_failure() {"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "        // invalid name"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseFailure(parser, INVALID_NAME_DESC + PHONE_DESC_BOB + EMAIL_DESC_BOB + ADDRESS_DESC_BOB"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "                + TAG_DESC_HUSBAND + TAG_DESC_FRIEND, Name.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "        // invalid phone"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseFailure(parser, NAME_DESC_BOB + INVALID_PHONE_DESC + EMAIL_DESC_BOB + ADDRESS_DESC_BOB"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "                + TAG_DESC_HUSBAND + TAG_DESC_FRIEND, Phone.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "        // invalid email"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseFailure(parser, NAME_DESC_BOB + PHONE_DESC_BOB + INVALID_EMAIL_DESC + ADDRESS_DESC_BOB"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "                + TAG_DESC_HUSBAND + TAG_DESC_FRIEND, Email.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "        // invalid address"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseFailure(parser, NAME_DESC_BOB + PHONE_DESC_BOB + EMAIL_DESC_BOB + INVALID_ADDRESS_DESC"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "                + TAG_DESC_HUSBAND + TAG_DESC_FRIEND, Address.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "        // invalid tag"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseFailure(parser, NAME_DESC_BOB + PHONE_DESC_BOB + EMAIL_DESC_BOB + ADDRESS_DESC_BOB"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "                + INVALID_TAG_DESC + VALID_TAG_FRIEND, Tag.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "        // two invalid values, only first invalid value reported"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseFailure(parser, INVALID_NAME_DESC + PHONE_DESC_BOB + EMAIL_DESC_BOB + INVALID_ADDRESS_DESC,"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "                Name.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "        // non-empty preamble"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseFailure(parser, PREAMBLE_NON_EMPTY + NAME_DESC_BOB + PHONE_DESC_BOB + EMAIL_DESC_BOB"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": "                + ADDRESS_DESC_BOB + TAG_DESC_HUSBAND + TAG_DESC_FRIEND,"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": "                String.format(MESSAGE_INVALID_COMMAND_FORMAT, AddCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "nexolute": 41,
      "-": 100
    }
  },
  {
    "path": "src/test/java/seedu/ichifund/logic/parser/ArgumentTokenizerTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "nexolute"
        },
        "content": "package seedu.ichifund.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertNotEquals;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "public class ArgumentTokenizerTest {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    private final Prefix unknownPrefix \u003d new Prefix(\"--u\");"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "    private final Prefix pSlash \u003d new Prefix(\"p/\");"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    private final Prefix dashT \u003d new Prefix(\"-t\");"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    private final Prefix hatQ \u003d new Prefix(\"^Q\");"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    public void tokenize_emptyArgsString_noValues() {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "        String argsString \u003d \"  \";"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "        ArgumentMultimap argMultimap \u003d ArgumentTokenizer.tokenize(argsString, pSlash);"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "        assertPreambleEmpty(argMultimap);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "        assertArgumentAbsent(argMultimap, pSlash);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertPreamblePresent(ArgumentMultimap argMultimap, String expectedPreamble) {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expectedPreamble, argMultimap.getPreamble());"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertPreambleEmpty(ArgumentMultimap argMultimap) {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(argMultimap.getPreamble().isEmpty());"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "     * Asserts all the arguments in {@code argMultimap} with {@code prefix} match the {@code expectedValues}"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "     * and only the last value is returned upon calling {@code ArgumentMultimap#getValue(Prefix)}."
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertArgumentPresent(ArgumentMultimap argMultimap, Prefix prefix, String... expectedValues) {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "        // Verify the last value is returned"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expectedValues[expectedValues.length - 1], argMultimap.getValue(prefix).get());"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        // Verify the number of values returned is as expected"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expectedValues.length, argMultimap.getAllValues(prefix).size());"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        // Verify all values returned are as expected and in order"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        for (int i \u003d 0; i \u003c expectedValues.length; i++) {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "            assertEquals(expectedValues[i], argMultimap.getAllValues(prefix).get(i));"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertArgumentAbsent(ArgumentMultimap argMultimap, Prefix prefix) {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(argMultimap.getValue(prefix).isPresent());"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    public void tokenize_noPrefixes_allTakenAsPreamble() {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "        String argsString \u003d \"  some random string /t tag with leading and trailing spaces \";"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "        ArgumentMultimap argMultimap \u003d ArgumentTokenizer.tokenize(argsString);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "        // Same string expected as preamble, but leading/trailing spaces should be trimmed"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "        assertPreamblePresent(argMultimap, argsString.trim());"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "    public void tokenize_oneArgument() {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "        // Preamble present"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "        String argsString \u003d \"  Some preamble string p/ Argument value \";"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "        ArgumentMultimap argMultimap \u003d ArgumentTokenizer.tokenize(argsString, pSlash);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "        assertPreamblePresent(argMultimap, \"Some preamble string\");"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "        assertArgumentPresent(argMultimap, pSlash, \"Argument value\");"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "        // No preamble"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "        argsString \u003d \" p/   Argument value \";"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "        argMultimap \u003d ArgumentTokenizer.tokenize(argsString, pSlash);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "        assertPreambleEmpty(argMultimap);"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "        assertArgumentPresent(argMultimap, pSlash, \"Argument value\");"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "    public void tokenize_multipleArguments() {"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "        // Only two arguments are present"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "        String argsString \u003d \"SomePreambleString -t dashT-Value p/pSlash value\";"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "        ArgumentMultimap argMultimap \u003d ArgumentTokenizer.tokenize(argsString, pSlash, dashT, hatQ);"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "        assertPreamblePresent(argMultimap, \"SomePreambleString\");"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "        assertArgumentPresent(argMultimap, pSlash, \"pSlash value\");"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "        assertArgumentPresent(argMultimap, dashT, \"dashT-Value\");"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "        assertArgumentAbsent(argMultimap, hatQ);"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "        // All three arguments are present"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "        argsString \u003d \"Different Preamble String ^Q111 -t dashT-Value p/pSlash value\";"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "        argMultimap \u003d ArgumentTokenizer.tokenize(argsString, pSlash, dashT, hatQ);"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "        assertPreamblePresent(argMultimap, \"Different Preamble String\");"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "        assertArgumentPresent(argMultimap, pSlash, \"pSlash value\");"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "        assertArgumentPresent(argMultimap, dashT, \"dashT-Value\");"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "        assertArgumentPresent(argMultimap, hatQ, \"111\");"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "        /* Also covers: Reusing of the tokenizer multiple times */"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "        // Reuse tokenizer on an empty string to ensure ArgumentMultimap is correctly reset"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "        // (i.e. no stale values from the previous tokenizing remain)"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "        argsString \u003d \"\";"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "        argMultimap \u003d ArgumentTokenizer.tokenize(argsString, pSlash, dashT, hatQ);"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "        assertPreambleEmpty(argMultimap);"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "        assertArgumentAbsent(argMultimap, pSlash);"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "        /** Also covers: testing for prefixes not specified as a prefix **/"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "        // Prefixes not previously given to the tokenizer should not return any values"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "        argsString \u003d unknownPrefix + \"some value\";"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "        argMultimap \u003d ArgumentTokenizer.tokenize(argsString, pSlash, dashT, hatQ);"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "        assertArgumentAbsent(argMultimap, unknownPrefix);"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "        assertPreamblePresent(argMultimap, argsString); // Unknown prefix is taken as part of preamble"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "    public void tokenize_multipleArgumentsWithRepeats() {"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "        // Two arguments repeated, some have empty values"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "        String argsString \u003d \"SomePreambleString -t dashT-Value ^Q ^Q -t another dashT value p/ pSlash value -t\";"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "        ArgumentMultimap argMultimap \u003d ArgumentTokenizer.tokenize(argsString, pSlash, dashT, hatQ);"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "        assertPreamblePresent(argMultimap, \"SomePreambleString\");"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "        assertArgumentPresent(argMultimap, pSlash, \"pSlash value\");"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "        assertArgumentPresent(argMultimap, dashT, \"dashT-Value\", \"another dashT value\", \"\");"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "        assertArgumentPresent(argMultimap, hatQ, \"\", \"\");"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "    public void tokenize_multipleArgumentsJoined() {"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "        String argsString \u003d \"SomePreambleStringp/ pSlash joined-tjoined -t not joined^Qjoined\";"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "        ArgumentMultimap argMultimap \u003d ArgumentTokenizer.tokenize(argsString, pSlash, dashT, hatQ);"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "        assertPreamblePresent(argMultimap, \"SomePreambleStringp/ pSlash joined-tjoined\");"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "        assertArgumentAbsent(argMultimap, pSlash);"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": "        assertArgumentPresent(argMultimap, dashT, \"not joined^Qjoined\");"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "        assertArgumentAbsent(argMultimap, hatQ);"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": "    public void equalsMethod() {"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": "        Prefix aaa \u003d new Prefix(\"aaa\");"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(aaa, aaa);"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(aaa, new Prefix(\"aaa\"));"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": "        assertNotEquals(aaa, \"aaa\");"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": "        assertNotEquals(aaa, new Prefix(\"aab\"));"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "nexolute": 1,
      "-": 149
    }
  },
  {
    "path": "src/test/java/seedu/ichifund/logic/parser/CommandParserTestUtil.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "nexolute"
        },
        "content": "package seedu.ichifund.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "nexolute"
        },
        "content": "import seedu.ichifund.logic.commands.Command;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "nexolute"
        },
        "content": "import seedu.ichifund.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": " * Contains helper methods for testing command parsers."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "public class CommandParserTestUtil {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "     * Asserts that the parsing of {@code userInput} by {@code parser} is successful and the command created"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "     * equals to {@code expectedCommand}."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    public static void assertParseSuccess(Parser parser, String userInput, Command expectedCommand) {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "            Command command \u003d parser.parse(userInput);"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "            assertEquals(expectedCommand, command);"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (ParseException pe) {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new IllegalArgumentException(\"Invalid userInput.\", pe);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "     * Asserts that the parsing of {@code userInput} by {@code parser} is unsuccessful and the error message"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "     * equals to {@code expectedMessage}."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    public static void assertParseFailure(Parser parser, String userInput, String expectedMessage) {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "            parser.parse(userInput);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"The expected ParseException was not thrown.\");"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (ParseException pe) {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "            assertEquals(expectedMessage, pe.getMessage());"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "nexolute": 3,
      "-": 35
    }
  },
  {
    "path": "src/test/java/seedu/ichifund/logic/parser/FindCommandParserTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "nexolute"
        },
        "content": "package seedu.ichifund.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "nexolute"
        },
        "content": "import static seedu.ichifund.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "nexolute"
        },
        "content": "import static seedu.ichifund.logic.parser.CommandParserTestUtil.assertParseFailure;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "nexolute"
        },
        "content": "import static seedu.ichifund.logic.parser.CommandParserTestUtil.assertParseSuccess;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "nexolute"
        },
        "content": "import seedu.ichifund.logic.commands.FindCommand;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "nexolute"
        },
        "content": "import seedu.ichifund.model.person.NameContainsKeywordsPredicate;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "public class FindCommandParserTest {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    private FindCommandParser parser \u003d new FindCommandParser();"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parse_emptyArg_throwsParseException() {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseFailure(parser, \"     \", String.format(MESSAGE_INVALID_COMMAND_FORMAT, FindCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parse_validArgs_returnsFindCommand() {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "        // no leading and trailing whitespaces"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "        FindCommand expectedFindCommand \u003d"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "                new FindCommand(new NameContainsKeywordsPredicate(Arrays.asList(\"Alice\", \"Bob\")));"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseSuccess(parser, \"Alice Bob\", expectedFindCommand);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "        // multiple whitespaces between keywords"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseSuccess(parser, \" \\n Alice \\n \\t Bob  \\t\", expectedFindCommand);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "nexolute": 6,
      "-": 28
    }
  },
  {
    "path": "src/test/java/seedu/ichifund/logic/parser/IchiFundParserTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "nexolute"
        },
        "content": "package seedu.ichifund.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "nexolute"
        },
        "content": "import static seedu.ichifund.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "nexolute"
        },
        "content": "import static seedu.ichifund.commons.core.Messages.MESSAGE_UNKNOWN_COMMAND;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "nexolute"
        },
        "content": "import static seedu.ichifund.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "import static seedu.ichifund.testutil.TypicalIndexes.INDEX_FIRST;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "nexolute"
        },
        "content": "import seedu.ichifund.logic.commands.ClearCommand;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "nexolute"
        },
        "content": "import seedu.ichifund.logic.commands.ExitCommand;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "nexolute"
        },
        "content": "import seedu.ichifund.logic.commands.HelpCommand;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "import seedu.ichifund.logic.commands.analytics.ExpenditureTrendCommand;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "import seedu.ichifund.logic.commands.budget.DeleteBudgetCommand;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "import seedu.ichifund.logic.commands.repeater.DeleteRepeaterCommand;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "import seedu.ichifund.logic.commands.transaction.DeleteTransactionCommand;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "import seedu.ichifund.logic.commands.transaction.EditTransactionCommand;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "import seedu.ichifund.logic.parser.analytics.AnalyticsFeatureParser;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "import seedu.ichifund.logic.parser.budget.BudgetFeatureParser;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "nexolute"
        },
        "content": "import seedu.ichifund.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "import seedu.ichifund.logic.parser.loan.LoanFeatureParser;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "import seedu.ichifund.logic.parser.repeater.RepeaterFeatureParser;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "import seedu.ichifund.logic.parser.transaction.TransactionFeatureParser;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "nexolute"
        },
        "content": "public class IchiFundParserTest {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "nexolute"
        },
        "content": "    private final IchiFundParser parser \u003d new IchiFundParser();"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseCommand_clear() throws Exception {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(parser.parseCommand(ClearCommand.COMMAND_WORD) instanceof ClearCommand);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(parser.parseCommand(ClearCommand.COMMAND_WORD + \" 3\") instanceof ClearCommand);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "    public void parseCommand_exit() throws Exception {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "        assertTrue(parser.parseCommand(ExitCommand.COMMAND_WORD) instanceof ExitCommand);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "        assertTrue(parser.parseCommand(ExitCommand.COMMAND_WORD + \" 3\") instanceof ExitCommand);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "    public void parseCommand_help() throws Exception {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "        assertTrue(parser.parseCommand(HelpCommand.COMMAND_WORD) instanceof HelpCommand);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "        assertTrue(parser.parseCommand(HelpCommand.COMMAND_WORD + \" 3\") instanceof HelpCommand);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "    public void parseCommand_tabSwitch() throws Exception {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "        parser.parseCommand(new RepeaterFeatureParser().getTabSwitchCommandWord());"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "        assertEquals(parser.getCurrentFeatureParserIndex().getValue(), new RepeaterFeatureParser().getTabIndex());"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "        parser.parseCommand(new BudgetFeatureParser().getTabSwitchCommandWord());"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "        assertEquals(parser.getCurrentFeatureParserIndex().getValue(), new BudgetFeatureParser().getTabIndex());"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "weiyang13"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "        parser.parseCommand(new LoanFeatureParser().getTabSwitchCommandWord());"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "        assertEquals(parser.getCurrentFeatureParserIndex().getValue(), new LoanFeatureParser().getTabIndex());"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "weiyang13"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "        parser.parseCommand(new AnalyticsFeatureParser().getTabSwitchCommandWord());"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "        assertEquals(parser.getCurrentFeatureParserIndex().getValue(), new AnalyticsFeatureParser().getTabIndex());"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "weiyang13"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "        parser.parseCommand(new TransactionFeatureParser().getTabSwitchCommandWord());"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "        assertEquals(parser.getCurrentFeatureParserIndex().getValue(), new TransactionFeatureParser().getTabIndex());"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "    public void parseCommand_validFeatureCommand() throws Exception {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "        parser.parseCommand(new TransactionFeatureParser().getTabSwitchCommandWord());"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "        assertEquals(parser.parseCommand(DeleteTransactionCommand.COMMAND_WORD + \" \""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "                        + INDEX_FIRST.getOneBased()), new DeleteTransactionCommand(INDEX_FIRST));"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "weiyang13"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "        parser.parseCommand(new RepeaterFeatureParser().getTabSwitchCommandWord());"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "        assertEquals(parser.parseCommand(DeleteRepeaterCommand.COMMAND_WORD + \" \""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "                + INDEX_FIRST.getOneBased()), new DeleteRepeaterCommand(INDEX_FIRST));"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "weiyang13"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "        parser.parseCommand(new BudgetFeatureParser().getTabSwitchCommandWord());"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "        assertEquals(parser.parseCommand(DeleteBudgetCommand.COMMAND_WORD + \" \""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "                + INDEX_FIRST.getOneBased()), new DeleteBudgetCommand(INDEX_FIRST));"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "weiyang13"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "        parser.parseCommand(new AnalyticsFeatureParser().getTabSwitchCommandWord());"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "        assertTrue(parser.parseCommand(ExpenditureTrendCommand.COMMAND_WORD) instanceof ExpenditureTrendCommand);"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "    public void parseCommand_unknownFeatureCommand() throws Exception {"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "        parser.parseCommand(new TransactionFeatureParser().getTabSwitchCommandWord());"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "        assertThrows(ParseException.class, String.format(MESSAGE_UNKNOWN_COMMAND), ()"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "            -\u003e parser.parseCommand(ExpenditureTrendCommand.COMMAND_WORD));"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "weiyang13"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "        parser.parseCommand(new RepeaterFeatureParser().getTabSwitchCommandWord());"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "        assertThrows(ParseException.class, String.format(MESSAGE_UNKNOWN_COMMAND), ()"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "            -\u003e parser.parseCommand(ExpenditureTrendCommand.COMMAND_WORD));"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "weiyang13"
        },
        "content": ""
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "        parser.parseCommand(new BudgetFeatureParser().getTabSwitchCommandWord());"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "        assertThrows(ParseException.class, String.format(MESSAGE_UNKNOWN_COMMAND), ()"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "            -\u003e parser.parseCommand(ExpenditureTrendCommand.COMMAND_WORD));"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "weiyang13"
        },
        "content": ""
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "        parser.parseCommand(new LoanFeatureParser().getTabSwitchCommandWord());"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "        assertThrows(ParseException.class, String.format(MESSAGE_UNKNOWN_COMMAND), ()"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "            -\u003e parser.parseCommand(ExpenditureTrendCommand.COMMAND_WORD));"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "weiyang13"
        },
        "content": ""
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "        parser.parseCommand(new AnalyticsFeatureParser().getTabSwitchCommandWord());"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "        assertThrows(ParseException.class, String.format(MESSAGE_UNKNOWN_COMMAND), ()"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "            -\u003e parser.parseCommand(EditTransactionCommand.COMMAND_WORD));"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseCommand_unrecognisedInput_throwsParseException() {"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(ParseException.class, String.format(MESSAGE_INVALID_COMMAND_FORMAT, HelpCommand.MESSAGE_USAGE), ()"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "            -\u003e parser.parseCommand(\"\"));"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "nexolute": 10,
      "weiyang13": 66,
      "-": 37
    }
  },
  {
    "path": "src/test/java/seedu/ichifund/logic/parser/ParserUtilTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "nexolute"
        },
        "content": "package seedu.ichifund.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "nexolute"
        },
        "content": "import static seedu.ichifund.logic.parser.ParserUtil.MESSAGE_INVALID_INDEX;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "nexolute"
        },
        "content": "import static seedu.ichifund.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "nexolute"
        },
        "content": "import static seedu.ichifund.testutil.TypicalIndexes.INDEX_FIRST_PERSON;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "nexolute"
        },
        "content": "import seedu.ichifund.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "import seedu.ichifund.model.Description;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "import seedu.ichifund.model.amount.Amount;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "import seedu.ichifund.model.date.Day;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "import seedu.ichifund.model.date.Month;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "import seedu.ichifund.model.date.Year;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "import seedu.ichifund.model.transaction.Category;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "import seedu.ichifund.model.transaction.TransactionType;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "public class ParserUtilTest {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "    public static final String INVALID_DESCRIPTION \u003d \"!?\";"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "    public static final String INVALID_AMOUNT \u003d \"0.0\";"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "    public static final String INVALID_POSITIVE_AMOUNT \u003d \"-50.00\";"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "    public static final String INVALID_CATEGORY \u003d \"?!\";"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "    public static final String INVALID_DAY \u003d \"32\";"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "    public static final String INVALID_MONTH \u003d \"13\";"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "    public static final String INVALID_YEAR \u003d \"99\";"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "    public static final String INVALID_TRANSACTION_TYPE \u003d \"hi\";"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "weiyang13"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "    public static final String VALID_DESCRIPTION \u003d \"Lunch\";"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "    public static final String VALID_AMOUNT \u003d \"100.20\";"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "    public static final String VALID_CATEGORY \u003d \"food\";"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "    public static final String VALID_DAY \u003d \"12\";"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "    public static final String VALID_MONTH \u003d \"6\";"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "    public static final String VALID_YEAR \u003d \"4999\";"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "    public static final String VALID_TRANSACTION_TYPE \u003d \"exp\";"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "weiyang13"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "    public static final String SPECIAL_ALL_CATEGORY \u003d \"!all\";"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "    public static final String SPECIAL_ALL_TRANSACTION_TYPE \u003d \"!all\";"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String WHITESPACE \u003d \" \\t\\r\\n\";"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseIndex_invalidInput_throwsParseException() {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(ParseException.class, () -\u003e ParserUtil.parseIndex(\"10 a\"));"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseIndex_outOfRangeInput_throwsParseException() {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(ParseException.class, MESSAGE_INVALID_INDEX, ()"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "            -\u003e ParserUtil.parseIndex(Long.toString(Integer.MAX_VALUE + 1)));"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseIndex_validInput_success() throws Exception {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "        // No whitespaces"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(INDEX_FIRST_PERSON, ParserUtil.parseIndex(\"1\"));"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "        // Leading and trailing whitespaces"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(INDEX_FIRST_PERSON, ParserUtil.parseIndex(\"  1  \"));"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "    public void parseDescription_null_throwsNullPointerException() {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e ParserUtil.parseDescription((String) null));"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "    }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "weiyang13"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "    public void parseDescription_invalidValue_throwsParseException() {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "        assertThrows(ParseException.class, () -\u003e ParserUtil.parseDescription(INVALID_DESCRIPTION));"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "    }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "weiyang13"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "    public void parseDescription_validValueWithoutWhitespace_returnsDescription() throws Exception {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "        Description expectedDescription \u003d new Description(VALID_DESCRIPTION);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "        assertEquals(expectedDescription, ParserUtil.parseDescription(VALID_DESCRIPTION));"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "    }"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "weiyang13"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "    public void parseDescription_validValueWithWhitespace_returnsTrimmedDescription() throws Exception {"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "        String descriptionWithWhitespace \u003d WHITESPACE + VALID_DESCRIPTION + WHITESPACE;"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "        Description expectedDescription \u003d new Description(VALID_DESCRIPTION);"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "        assertEquals(expectedDescription, ParserUtil.parseDescription(descriptionWithWhitespace));"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "    }"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "weiyang13"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "    public void parseAmount_null_throwsNullPointerException() {"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e ParserUtil.parseAmount((String) null));"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "    }"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "weiyang13"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "    public void parseAmount_invalidValue_throwsParseException() {"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "        assertThrows(ParseException.class, () -\u003e ParserUtil.parseAmount(INVALID_AMOUNT));"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "    }"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "weiyang13"
        },
        "content": ""
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "    public void parseAmount_validValueWithoutWhitespace_returnsAmount() throws Exception {"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "        Amount expectedAmount \u003d new Amount(VALID_AMOUNT);"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "        assertEquals(expectedAmount, ParserUtil.parseAmount(VALID_AMOUNT));"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "    }"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "weiyang13"
        },
        "content": ""
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "    public void parseAmount_validValueWithWhitespace_returnsTrimmedAmount() throws Exception {"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "        String amountWithWhitespace \u003d WHITESPACE + VALID_AMOUNT + WHITESPACE;"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "        Amount expectedAmount \u003d new Amount(VALID_AMOUNT);"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "        assertEquals(expectedAmount, ParserUtil.parseAmount(amountWithWhitespace));"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "    }"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "weiyang13"
        },
        "content": ""
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "    public void parsePositiveAmount_null_throwsNullPointerException() {"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e ParserUtil.parsePositiveAmount((String) null));"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "    }"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "weiyang13"
        },
        "content": ""
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "    public void parsePositiveAmount_invalidValue_throwsParseException() {"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "        assertThrows(ParseException.class, () -\u003e ParserUtil.parsePositiveAmount(INVALID_POSITIVE_AMOUNT));"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "    }"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "weiyang13"
        },
        "content": ""
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "    public void parsePositiveAmount_validValueWithoutWhitespace_returnsPositiveAmount() throws Exception {"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "        Amount expectedPositiveAmount \u003d new Amount(VALID_AMOUNT);"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "        assertEquals(expectedPositiveAmount, ParserUtil.parsePositiveAmount(VALID_AMOUNT));"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "    }"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "weiyang13"
        },
        "content": ""
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "    public void parsePositiveAmount_validValueWithWhitespace_returnsTrimmedPositiveAmount() throws Exception {"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "        String positiveAmountWithWhitespace \u003d WHITESPACE + VALID_AMOUNT + WHITESPACE;"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "        Amount expectedPositiveAmount \u003d new Amount(VALID_AMOUNT);"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "        assertEquals(expectedPositiveAmount, ParserUtil.parsePositiveAmount(positiveAmountWithWhitespace));"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "    }"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "weiyang13"
        },
        "content": ""
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "    public void parseCategory_null_throwsNullPointerException() {"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e ParserUtil.parseCategory((String) null));"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "    }"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "weiyang13"
        },
        "content": ""
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "    public void parseCategory_invalidValue_throwsParseException() {"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "        assertThrows(ParseException.class, () -\u003e ParserUtil.parseCategory(INVALID_CATEGORY));"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "        assertThrows(ParseException.class, () -\u003e ParserUtil.parseCategory(SPECIAL_ALL_CATEGORY));"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "    }"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "weiyang13"
        },
        "content": ""
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "    public void parseCategory_validValueWithoutWhitespace_returnsCategory() throws Exception {"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "        Category expectedCategory \u003d new Category(VALID_CATEGORY);"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "        assertEquals(expectedCategory, ParserUtil.parseCategory(VALID_CATEGORY));"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "    }"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "weiyang13"
        },
        "content": ""
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "    public void parseCategory_validValueWithWhitespace_returnsTrimmedCategory() throws Exception {"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "        String categoryWithWhitespace \u003d WHITESPACE + VALID_CATEGORY + WHITESPACE;"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "        Category expectedCategory \u003d new Category(VALID_CATEGORY);"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "        assertEquals(expectedCategory, ParserUtil.parseCategory(categoryWithWhitespace));"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "    public void parseTransactionType_null_throwsNullPointerException() {"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e ParserUtil.parseTransactionType((String) null));"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "    public void parseTransactionType_invalidValue_throwsParseException() {"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "        assertThrows(ParseException.class, () -\u003e ParserUtil.parseTransactionType(INVALID_TRANSACTION_TYPE));"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "        assertThrows(ParseException.class, () -\u003e ParserUtil.parseTransactionType(SPECIAL_ALL_TRANSACTION_TYPE));"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "    public void parseTransactionType_validValueWithoutWhitespace_returnsTransactionType() throws Exception {"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "        TransactionType expectedTransactionType \u003d new TransactionType(VALID_TRANSACTION_TYPE);"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "        assertEquals(expectedTransactionType, ParserUtil.parseTransactionType(VALID_TRANSACTION_TYPE));"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "    public void parseTransactionType_validValueWithWhitespace_returnsTrimmedTransactionType() throws Exception {"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "        String transactionTypeWithWhitespace \u003d WHITESPACE + VALID_TRANSACTION_TYPE + WHITESPACE;"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "        TransactionType expectedTransactionType \u003d new TransactionType(VALID_TRANSACTION_TYPE);"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "        assertEquals(expectedTransactionType, ParserUtil.parseTransactionType(transactionTypeWithWhitespace));"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "    public void parseDay_null_throwsNullPointerException() {"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e ParserUtil.parseDay((String) null));"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "    public void parseDay_invalidValue_throwsParseException() {"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "        assertThrows(ParseException.class, () -\u003e ParserUtil.parseDay(INVALID_DAY));"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "    public void parseDay_validValueWithoutWhitespace_returnsDay() throws Exception {"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "        Day expectedDay \u003d new Day(VALID_DAY);"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "        assertEquals(expectedDay, ParserUtil.parseDay(VALID_DAY));"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "    public void parseDay_validValueWithWhitespace_returnsTrimmedDay() throws Exception {"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "        String dayWithWhitespace \u003d WHITESPACE + VALID_DAY + WHITESPACE;"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "        Day expectedDay \u003d new Day(VALID_DAY);"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "        assertEquals(expectedDay, ParserUtil.parseDay(dayWithWhitespace));"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "    public void parseMonth_null_throwsNullPointerException() {"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e ParserUtil.parseMonth((String) null));"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "    public void parseMonth_invalidValue_throwsParseException() {"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "        assertThrows(ParseException.class, () -\u003e ParserUtil.parseMonth(INVALID_MONTH));"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "    public void parseMonth_validValueWithoutWhitespace_returnsMonth() throws Exception {"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "        Month expectedMonth \u003d new Month(VALID_MONTH);"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "        assertEquals(expectedMonth, ParserUtil.parseMonth(VALID_MONTH));"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "    public void parseMonth_validValueWithWhitespace_returnsTrimmedMonth() throws Exception {"
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "        String monthWithWhitespace \u003d WHITESPACE + VALID_MONTH + WHITESPACE;"
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "        Month expectedMonth \u003d new Month(VALID_MONTH);"
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "        assertEquals(expectedMonth, ParserUtil.parseMonth(monthWithWhitespace));"
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "    public void parseYear_null_throwsNullPointerException() {"
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e ParserUtil.parseYear((String) null));"
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "    public void parseYear_invalidValue_throwsParseException() {"
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "        assertThrows(ParseException.class, () -\u003e ParserUtil.parseYear(INVALID_YEAR));"
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "    public void parseYear_validValueWithoutWhitespace_returnsYear() throws Exception {"
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "        Year expectedYear \u003d new Year(VALID_YEAR);"
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "        assertEquals(expectedYear, ParserUtil.parseYear(VALID_YEAR));"
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "    public void parseYear_validValueWithWhitespace_returnsTrimmedYear() throws Exception {"
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "        String yearWithWhitespace \u003d WHITESPACE + VALID_YEAR + WHITESPACE;"
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "        Year expectedYear \u003d new Year(VALID_YEAR);"
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "        assertEquals(expectedYear, ParserUtil.parseYear(yearWithWhitespace));"
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 248,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 249,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "    public void parseCategoryWithAll_null_throwsNullPointerException() {"
      },
      {
        "lineNumber": 250,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e ParserUtil.parseCategoryWithAll((String) null));"
      },
      {
        "lineNumber": 251,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 252,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 253,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 254,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "    public void parseCategoryWithAll_invalidValue_throwsParseException() {"
      },
      {
        "lineNumber": 255,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "        assertThrows(ParseException.class, () -\u003e ParserUtil.parseCategoryWithAll(INVALID_CATEGORY));"
      },
      {
        "lineNumber": 256,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 257,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 258,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 259,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "    public void parseCategoryWithAll_validValueWithoutWhitespace_returnsCategory() throws Exception {"
      },
      {
        "lineNumber": 260,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "        Category expectedCategory \u003d new Category(VALID_CATEGORY);"
      },
      {
        "lineNumber": 261,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "        assertEquals(expectedCategory, ParserUtil.parseCategoryWithAll(VALID_CATEGORY));"
      },
      {
        "lineNumber": 262,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "        assertEquals(Category.CATEGORY_ALL, ParserUtil.parseCategoryWithAll(SPECIAL_ALL_CATEGORY));"
      },
      {
        "lineNumber": 263,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 264,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 265,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 266,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "    public void parseCategoryWithAll_validValueWithWhitespace_returnsTrimmedCategory() throws Exception {"
      },
      {
        "lineNumber": 267,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "        String categoryWithWhitespace \u003d WHITESPACE + VALID_CATEGORY + WHITESPACE;"
      },
      {
        "lineNumber": 268,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "        Category expectedCategory \u003d new Category(VALID_CATEGORY);"
      },
      {
        "lineNumber": 269,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "        assertEquals(expectedCategory, ParserUtil.parseCategoryWithAll(categoryWithWhitespace));"
      },
      {
        "lineNumber": 270,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 271,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 272,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 273,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "    public void parseTransactionTypeWithAll_null_throwsNullPointerException() {"
      },
      {
        "lineNumber": 274,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e ParserUtil.parseTransactionTypeWithAll((String) null));"
      },
      {
        "lineNumber": 275,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 276,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 277,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 278,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "    public void parseTransactionTypeWithAll_invalidValue_throwsParseException() {"
      },
      {
        "lineNumber": 279,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "        assertThrows(ParseException.class, () -\u003e ParserUtil.parseTransactionTypeWithAll(INVALID_TRANSACTION_TYPE));"
      },
      {
        "lineNumber": 280,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 281,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 282,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 283,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "    public void parseTransactionTypeWithAll_validValueWithoutWhitespace_returnsTransactionType() throws Exception {"
      },
      {
        "lineNumber": 284,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "        TransactionType expectedTransactionType \u003d new TransactionType(VALID_TRANSACTION_TYPE);"
      },
      {
        "lineNumber": 285,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "        assertEquals(expectedTransactionType, ParserUtil.parseTransactionTypeWithAll(VALID_TRANSACTION_TYPE));"
      },
      {
        "lineNumber": 286,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "        assertEquals(TransactionType.TRANSACTION_TYPE_ALL,"
      },
      {
        "lineNumber": 287,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "                ParserUtil.parseTransactionTypeWithAll(SPECIAL_ALL_TRANSACTION_TYPE));"
      },
      {
        "lineNumber": 288,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "    }"
      },
      {
        "lineNumber": 289,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 290,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 291,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "    public void parseTransactionTypeWithAll_validValueWithWhitespace_returnsTrimmedTransactionType() throws Exception {"
      },
      {
        "lineNumber": 292,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "        String transactionTypeWithWhitespace \u003d WHITESPACE + VALID_TRANSACTION_TYPE + WHITESPACE;"
      },
      {
        "lineNumber": 293,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "        TransactionType expectedTransactionType \u003d new TransactionType(VALID_TRANSACTION_TYPE);"
      },
      {
        "lineNumber": 294,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "        assertEquals(expectedTransactionType, ParserUtil.parseTransactionTypeWithAll(transactionTypeWithWhitespace));"
      },
      {
        "lineNumber": 295,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 296,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "nexolute": 5,
      "weiyang13": 188,
      "-": 103
    }
  },
  {
    "path": "src/test/java/seedu/ichifund/logic/parser/transaction/AddTransactionCommandParserTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "package seedu.ichifund.logic.parser.transaction;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "weiyang13"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "import static seedu.ichifund.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "import static seedu.ichifund.logic.commands.CommandTestUtil.AMOUNT_DESC_ALLOWANCE;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "import static seedu.ichifund.logic.commands.CommandTestUtil.AMOUNT_DESC_BUS;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "import static seedu.ichifund.logic.commands.CommandTestUtil.CATEGORY_DESC_ALLOWANCE;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "import static seedu.ichifund.logic.commands.CommandTestUtil.CATEGORY_DESC_BUS;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "import static seedu.ichifund.logic.commands.CommandTestUtil.DAY_DESC_ALLOWANCE;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "import static seedu.ichifund.logic.commands.CommandTestUtil.DAY_DESC_BUS;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "import static seedu.ichifund.logic.commands.CommandTestUtil.DESCRIPTION_DESC_ALLOWANCE;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "import static seedu.ichifund.logic.commands.CommandTestUtil.DESCRIPTION_DESC_BUS;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "import static seedu.ichifund.logic.commands.CommandTestUtil.INVALID_AMOUNT_DESC;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "import static seedu.ichifund.logic.commands.CommandTestUtil.INVALID_CATEGORY_DESC;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "import static seedu.ichifund.logic.commands.CommandTestUtil.INVALID_DAY_DESC;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "import static seedu.ichifund.logic.commands.CommandTestUtil.INVALID_DESCRIPTION_DESC;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "import static seedu.ichifund.logic.commands.CommandTestUtil.INVALID_MONTH_DESC;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "import static seedu.ichifund.logic.commands.CommandTestUtil.INVALID_TRANSACTION_TYPE_DESC;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "import static seedu.ichifund.logic.commands.CommandTestUtil.INVALID_YEAR_DESC;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "import static seedu.ichifund.logic.commands.CommandTestUtil.MONTH_DESC_ALLOWANCE;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "import static seedu.ichifund.logic.commands.CommandTestUtil.MONTH_DESC_BUS;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "import static seedu.ichifund.logic.commands.CommandTestUtil.PREAMBLE_NON_EMPTY;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "import static seedu.ichifund.logic.commands.CommandTestUtil.PREAMBLE_WHITESPACE;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "import static seedu.ichifund.logic.commands.CommandTestUtil.TRANSACTION_TYPE_DESC_ALLOWANCE;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "import static seedu.ichifund.logic.commands.CommandTestUtil.TRANSACTION_TYPE_DESC_BUS;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "import static seedu.ichifund.logic.commands.CommandTestUtil.VALID_AMOUNT_ALLOWANCE;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "import static seedu.ichifund.logic.commands.CommandTestUtil.VALID_DAY_ALLOWANCE;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "import static seedu.ichifund.logic.commands.CommandTestUtil.VALID_DESCRIPTION_ALLOWANCE;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "import static seedu.ichifund.logic.commands.CommandTestUtil.VALID_MONTH_ALLOWANCE;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "import static seedu.ichifund.logic.commands.CommandTestUtil.YEAR_DESC_ALLOWANCE;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "import static seedu.ichifund.logic.commands.CommandTestUtil.YEAR_DESC_BUS;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "import static seedu.ichifund.logic.parser.CommandParserTestUtil.assertParseFailure;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "import static seedu.ichifund.logic.parser.CommandParserTestUtil.assertParseSuccess;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "import static seedu.ichifund.testutil.TypicalFundBook.TRANSACTION_ALLOWANCE;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "weiyang13"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "weiyang13"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "weiyang13"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "import seedu.ichifund.logic.commands.transaction.AddTransactionCommand;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "import seedu.ichifund.model.Description;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "import seedu.ichifund.model.amount.Amount;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "import seedu.ichifund.model.date.Day;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "import seedu.ichifund.model.date.Month;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "import seedu.ichifund.model.date.Year;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "import seedu.ichifund.model.transaction.Category;"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "import seedu.ichifund.model.transaction.Transaction;"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "import seedu.ichifund.model.transaction.TransactionType;"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "import seedu.ichifund.testutil.TransactionBuilder;"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "weiyang13"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "public class AddTransactionCommandParserTest {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "    private AddTransactionCommandParser parser \u003d new AddTransactionCommandParser();"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "weiyang13"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "    public void parse_allFieldsPresent_success() {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "        Transaction transaction \u003d new TransactionBuilder(TRANSACTION_ALLOWANCE).build();"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "        AddTransactionCommand expectedCommand \u003d new AddTransactionCommand(transaction.getDescription(),"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "                transaction.getAmount(), Optional.of(transaction.getCategory()),"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "                Optional.of(transaction.getDay()), Optional.of(transaction.getMonth()),"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "                Optional.of(transaction.getYear()), Optional.of(transaction.getTransactionType()));"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "weiyang13"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "        // whitespace only preamble"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "        assertParseSuccess(parser, PREAMBLE_WHITESPACE + DESCRIPTION_DESC_ALLOWANCE + AMOUNT_DESC_ALLOWANCE"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "                + DAY_DESC_ALLOWANCE + MONTH_DESC_ALLOWANCE + YEAR_DESC_ALLOWANCE + CATEGORY_DESC_ALLOWANCE"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "                + TRANSACTION_TYPE_DESC_ALLOWANCE, expectedCommand);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "weiyang13"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "        // multiple descriptions - last description accepted"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "        assertParseSuccess(parser, DESCRIPTION_DESC_BUS + DESCRIPTION_DESC_ALLOWANCE + AMOUNT_DESC_ALLOWANCE"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "                + DAY_DESC_ALLOWANCE + MONTH_DESC_ALLOWANCE + YEAR_DESC_ALLOWANCE + CATEGORY_DESC_ALLOWANCE"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "                + TRANSACTION_TYPE_DESC_ALLOWANCE, expectedCommand);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "weiyang13"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "        // multiple amounts - last amount accepted"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "        assertParseSuccess(parser, DESCRIPTION_DESC_ALLOWANCE + AMOUNT_DESC_BUS + AMOUNT_DESC_ALLOWANCE"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "                + DAY_DESC_ALLOWANCE + MONTH_DESC_ALLOWANCE + YEAR_DESC_ALLOWANCE + CATEGORY_DESC_ALLOWANCE"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "                + TRANSACTION_TYPE_DESC_ALLOWANCE, expectedCommand);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "weiyang13"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "        // multiple days - last day accepted"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "        assertParseSuccess(parser, DESCRIPTION_DESC_ALLOWANCE + AMOUNT_DESC_ALLOWANCE + DAY_DESC_BUS"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "                + DAY_DESC_ALLOWANCE + MONTH_DESC_ALLOWANCE + YEAR_DESC_ALLOWANCE + CATEGORY_DESC_ALLOWANCE"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "                + TRANSACTION_TYPE_DESC_ALLOWANCE, expectedCommand);"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "weiyang13"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "        // multiple months - last month accepted"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "        assertParseSuccess(parser, DESCRIPTION_DESC_ALLOWANCE + AMOUNT_DESC_ALLOWANCE + DAY_DESC_ALLOWANCE"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "                + MONTH_DESC_BUS + MONTH_DESC_ALLOWANCE + YEAR_DESC_ALLOWANCE + CATEGORY_DESC_ALLOWANCE"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "                + TRANSACTION_TYPE_DESC_ALLOWANCE, expectedCommand);"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "weiyang13"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "        // multiple years - last year accepted"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "        assertParseSuccess(parser, DESCRIPTION_DESC_ALLOWANCE + AMOUNT_DESC_ALLOWANCE + DAY_DESC_ALLOWANCE"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "                + MONTH_DESC_ALLOWANCE + YEAR_DESC_BUS + YEAR_DESC_ALLOWANCE + CATEGORY_DESC_ALLOWANCE"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "                + TRANSACTION_TYPE_DESC_ALLOWANCE, expectedCommand);"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "weiyang13"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "        // multiple categories - last category accepted"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "        assertParseSuccess(parser, DESCRIPTION_DESC_ALLOWANCE + AMOUNT_DESC_ALLOWANCE + DAY_DESC_ALLOWANCE"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "                + MONTH_DESC_ALLOWANCE + YEAR_DESC_ALLOWANCE + CATEGORY_DESC_BUS + CATEGORY_DESC_ALLOWANCE"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "                + TRANSACTION_TYPE_DESC_ALLOWANCE, expectedCommand);"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "weiyang13"
        },
        "content": ""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "        // multiple transaction types - last transaction type accepted"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "        assertParseSuccess(parser, DESCRIPTION_DESC_ALLOWANCE + AMOUNT_DESC_ALLOWANCE + DAY_DESC_ALLOWANCE"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "                + MONTH_DESC_ALLOWANCE + YEAR_DESC_ALLOWANCE + CATEGORY_DESC_ALLOWANCE + TRANSACTION_TYPE_DESC_BUS"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "                + TRANSACTION_TYPE_DESC_ALLOWANCE, expectedCommand);"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "    }"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "weiyang13"
        },
        "content": ""
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "    public void parse_optionalFieldsMissing_success() {"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "        Transaction transaction \u003d new TransactionBuilder(TRANSACTION_ALLOWANCE).build();"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "        AddTransactionCommand expectedCommand \u003d new AddTransactionCommand(transaction.getDescription(),"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "                transaction.getAmount(), Optional.empty(), Optional.empty(), Optional.empty(),"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "                Optional.empty(), Optional.empty());"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "        assertParseSuccess(parser, DESCRIPTION_DESC_ALLOWANCE + AMOUNT_DESC_ALLOWANCE, expectedCommand);"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "    }"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "weiyang13"
        },
        "content": ""
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "    public void parse_compulsoryFieldMissing_failure() {"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "        String expectedMessage \u003d String.format(MESSAGE_INVALID_COMMAND_FORMAT, AddTransactionCommand.MESSAGE_USAGE);"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "weiyang13"
        },
        "content": ""
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "        // missing description prefix"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "        assertParseFailure(parser, VALID_DESCRIPTION_ALLOWANCE + AMOUNT_DESC_ALLOWANCE"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "                        + DAY_DESC_ALLOWANCE + MONTH_DESC_ALLOWANCE + CATEGORY_DESC_ALLOWANCE,"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "                expectedMessage);"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "weiyang13"
        },
        "content": ""
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "        // missing amount prefix"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "        assertParseFailure(parser, DESCRIPTION_DESC_ALLOWANCE + VALID_AMOUNT_ALLOWANCE"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "                        + DAY_DESC_ALLOWANCE + MONTH_DESC_ALLOWANCE + YEAR_DESC_ALLOWANCE,"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "                expectedMessage);"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "weiyang13"
        },
        "content": ""
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "        // all prefixes missing"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "        assertParseFailure(parser, VALID_DESCRIPTION_ALLOWANCE + VALID_AMOUNT_ALLOWANCE"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "                        + VALID_DAY_ALLOWANCE + VALID_MONTH_ALLOWANCE + TRANSACTION_TYPE_DESC_ALLOWANCE,"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "                expectedMessage);"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "    }"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "weiyang13"
        },
        "content": ""
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "    public void parse_invalidValue_failure() {"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "        // invalid description"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "        assertParseFailure(parser, INVALID_DESCRIPTION_DESC + AMOUNT_DESC_ALLOWANCE + DAY_DESC_ALLOWANCE"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "                + MONTH_DESC_ALLOWANCE + YEAR_DESC_ALLOWANCE + CATEGORY_DESC_ALLOWANCE"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "                + TRANSACTION_TYPE_DESC_ALLOWANCE, Description.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "weiyang13"
        },
        "content": ""
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "        // invalid amount"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "        assertParseFailure(parser, DESCRIPTION_DESC_ALLOWANCE + INVALID_AMOUNT_DESC + DAY_DESC_ALLOWANCE"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "                + MONTH_DESC_ALLOWANCE + YEAR_DESC_ALLOWANCE + CATEGORY_DESC_ALLOWANCE"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "                + TRANSACTION_TYPE_DESC_ALLOWANCE, Amount.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "weiyang13"
        },
        "content": ""
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "        // invalid day"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "        assertParseFailure(parser, DESCRIPTION_DESC_ALLOWANCE + AMOUNT_DESC_ALLOWANCE + INVALID_DAY_DESC"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "                + MONTH_DESC_ALLOWANCE + YEAR_DESC_ALLOWANCE + CATEGORY_DESC_ALLOWANCE"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "                + TRANSACTION_TYPE_DESC_ALLOWANCE, Day.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "weiyang13"
        },
        "content": ""
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "        // invalid month"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "        assertParseFailure(parser, DESCRIPTION_DESC_ALLOWANCE + AMOUNT_DESC_ALLOWANCE + DAY_DESC_ALLOWANCE"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "                + INVALID_MONTH_DESC + YEAR_DESC_ALLOWANCE + CATEGORY_DESC_ALLOWANCE"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "                + TRANSACTION_TYPE_DESC_ALLOWANCE, Month.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "weiyang13"
        },
        "content": ""
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "        // invalid year"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "        assertParseFailure(parser, DESCRIPTION_DESC_ALLOWANCE + AMOUNT_DESC_ALLOWANCE + DAY_DESC_ALLOWANCE"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "                + MONTH_DESC_ALLOWANCE + INVALID_YEAR_DESC + CATEGORY_DESC_ALLOWANCE"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "                + TRANSACTION_TYPE_DESC_ALLOWANCE, Year.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "weiyang13"
        },
        "content": ""
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "        // invalid category"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "        assertParseFailure(parser, DESCRIPTION_DESC_ALLOWANCE + AMOUNT_DESC_ALLOWANCE + DAY_DESC_ALLOWANCE"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "                + MONTH_DESC_ALLOWANCE + YEAR_DESC_ALLOWANCE + INVALID_CATEGORY_DESC"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "                + TRANSACTION_TYPE_DESC_ALLOWANCE, Category.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "weiyang13"
        },
        "content": ""
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "        // invalid transaction type"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "        assertParseFailure(parser, DESCRIPTION_DESC_ALLOWANCE + AMOUNT_DESC_ALLOWANCE + DAY_DESC_ALLOWANCE"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "                + MONTH_DESC_ALLOWANCE + YEAR_DESC_ALLOWANCE + CATEGORY_DESC_ALLOWANCE"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "                + INVALID_TRANSACTION_TYPE_DESC, TransactionType.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "weiyang13"
        },
        "content": ""
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "        // two invalid values, only first invalid value reported"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "        assertParseFailure(parser, INVALID_DESCRIPTION_DESC + AMOUNT_DESC_ALLOWANCE + DAY_DESC_ALLOWANCE"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "                        + INVALID_MONTH_DESC + YEAR_DESC_ALLOWANCE + CATEGORY_DESC_ALLOWANCE,"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "                Description.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "weiyang13"
        },
        "content": ""
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "        // non-empty preamble"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "        assertParseFailure(parser, PREAMBLE_NON_EMPTY + DESCRIPTION_DESC_ALLOWANCE + AMOUNT_DESC_ALLOWANCE"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "                        + DAY_DESC_ALLOWANCE + MONTH_DESC_ALLOWANCE + YEAR_DESC_ALLOWANCE"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "                        + TRANSACTION_TYPE_DESC_ALLOWANCE,"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "                String.format(MESSAGE_INVALID_COMMAND_FORMAT, AddTransactionCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "    }"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "weiyang13": 179
    }
  },
  {
    "path": "src/test/java/seedu/ichifund/logic/parser/transaction/DeleteTransactionCommandParserTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "package seedu.ichifund.logic.parser.transaction;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "weiyang13"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "import static seedu.ichifund.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "import static seedu.ichifund.logic.parser.CommandParserTestUtil.assertParseFailure;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "import static seedu.ichifund.logic.parser.CommandParserTestUtil.assertParseSuccess;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "import static seedu.ichifund.testutil.TypicalIndexes.INDEX_FIRST;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "weiyang13"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "weiyang13"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "import seedu.ichifund.logic.commands.transaction.DeleteTransactionCommand;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "weiyang13"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "/**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "weiyang13"
        },
        "content": " * As we are only doing white-box testing, our test cases do not cover path variations"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "weiyang13"
        },
        "content": " * outside of the DeleteTransactionCommand code. For example, inputs \"1\" and \"1 abc\" take the"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "weiyang13"
        },
        "content": " * same path through the DeleteTransactionCommand, and therefore we test only one of them."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "weiyang13"
        },
        "content": " * The path variation for those two cases occur inside the ParserUtil, and"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "weiyang13"
        },
        "content": " * therefore should be covered by the ParserUtilTest."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "weiyang13"
        },
        "content": " */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "public class DeleteTransactionCommandParserTest {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "weiyang13"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "    private DeleteTransactionCommandParser parser \u003d new DeleteTransactionCommandParser();"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "weiyang13"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "    public void parse_validArgs_returnsDeleteTransactionCommand() {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "        assertParseSuccess(parser, \"1\", new DeleteTransactionCommand(INDEX_FIRST));"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "    }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "weiyang13"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "    public void parse_invalidArgs_throwsParseException() {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "        assertParseFailure(parser, \"-1\", String.format(MESSAGE_INVALID_COMMAND_FORMAT,"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "                DeleteTransactionCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "        assertParseFailure(parser, \"a\", String.format(MESSAGE_INVALID_COMMAND_FORMAT,"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "                DeleteTransactionCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "weiyang13": 35
    }
  },
  {
    "path": "src/test/java/seedu/ichifund/logic/parser/transaction/EditTransactionCommandParserTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "package seedu.ichifund.logic.parser.transaction;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "weiyang13"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "import static seedu.ichifund.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "import static seedu.ichifund.logic.commands.CommandTestUtil.AMOUNT_DESC_ALLOWANCE;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "import static seedu.ichifund.logic.commands.CommandTestUtil.AMOUNT_DESC_BUS;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "import static seedu.ichifund.logic.commands.CommandTestUtil.CATEGORY_DESC_ALLOWANCE;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "import static seedu.ichifund.logic.commands.CommandTestUtil.CATEGORY_DESC_BUS;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "import static seedu.ichifund.logic.commands.CommandTestUtil.DAY_DESC_ALLOWANCE;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "import static seedu.ichifund.logic.commands.CommandTestUtil.DAY_DESC_BUS;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "import static seedu.ichifund.logic.commands.CommandTestUtil.DESCRIPTION_DESC_ALLOWANCE;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "import static seedu.ichifund.logic.commands.CommandTestUtil.DESCRIPTION_DESC_BUS;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "import static seedu.ichifund.logic.commands.CommandTestUtil.INVALID_AMOUNT_DESC;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "import static seedu.ichifund.logic.commands.CommandTestUtil.INVALID_CATEGORY_DESC;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "import static seedu.ichifund.logic.commands.CommandTestUtil.INVALID_DAY_DESC;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "import static seedu.ichifund.logic.commands.CommandTestUtil.INVALID_DESCRIPTION_DESC;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "import static seedu.ichifund.logic.commands.CommandTestUtil.INVALID_MONTH_DESC;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "import static seedu.ichifund.logic.commands.CommandTestUtil.INVALID_TRANSACTION_TYPE_DESC;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "import static seedu.ichifund.logic.commands.CommandTestUtil.INVALID_YEAR_DESC;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "import static seedu.ichifund.logic.commands.CommandTestUtil.MONTH_DESC_ALLOWANCE;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "import static seedu.ichifund.logic.commands.CommandTestUtil.MONTH_DESC_BUS;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "import static seedu.ichifund.logic.commands.CommandTestUtil.TRANSACTION_TYPE_DESC_ALLOWANCE;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "import static seedu.ichifund.logic.commands.CommandTestUtil.TRANSACTION_TYPE_DESC_BUS;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "import static seedu.ichifund.logic.commands.CommandTestUtil.VALID_AMOUNT_ALLOWANCE;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "import static seedu.ichifund.logic.commands.CommandTestUtil.VALID_AMOUNT_BUS;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "import static seedu.ichifund.logic.commands.CommandTestUtil.VALID_CATEGORY_ALLOWANCE;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "import static seedu.ichifund.logic.commands.CommandTestUtil.VALID_CATEGORY_BUS;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "import static seedu.ichifund.logic.commands.CommandTestUtil.VALID_DAY_ALLOWANCE;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "import static seedu.ichifund.logic.commands.CommandTestUtil.VALID_DAY_BUS;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "import static seedu.ichifund.logic.commands.CommandTestUtil.VALID_DESCRIPTION_ALLOWANCE;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "import static seedu.ichifund.logic.commands.CommandTestUtil.VALID_DESCRIPTION_BUS;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "import static seedu.ichifund.logic.commands.CommandTestUtil.VALID_MONTH_ALLOWANCE;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "import static seedu.ichifund.logic.commands.CommandTestUtil.VALID_MONTH_BUS;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "import static seedu.ichifund.logic.commands.CommandTestUtil.VALID_TRANSACTION_TYPE_ALLOWANCE;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "import static seedu.ichifund.logic.commands.CommandTestUtil.VALID_TRANSACTION_TYPE_BUS;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "import static seedu.ichifund.logic.commands.CommandTestUtil.VALID_YEAR_ALLOWANCE;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "import static seedu.ichifund.logic.commands.CommandTestUtil.VALID_YEAR_BUS;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "import static seedu.ichifund.logic.commands.CommandTestUtil.YEAR_DESC_ALLOWANCE;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "import static seedu.ichifund.logic.commands.CommandTestUtil.YEAR_DESC_BUS;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "import static seedu.ichifund.logic.parser.CommandParserTestUtil.assertParseFailure;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "import static seedu.ichifund.logic.parser.CommandParserTestUtil.assertParseSuccess;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "import static seedu.ichifund.testutil.TypicalIndexes.INDEX_FIRST;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "import static seedu.ichifund.testutil.TypicalIndexes.INDEX_SECOND;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "import static seedu.ichifund.testutil.TypicalIndexes.INDEX_THIRD;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "weiyang13"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "weiyang13"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "import seedu.ichifund.commons.core.index.Index;"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "import seedu.ichifund.logic.commands.transaction.EditTransactionCommand;"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "import seedu.ichifund.logic.commands.transaction.EditTransactionCommand.EditTransactionDescriptor;"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "import seedu.ichifund.model.Description;"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "import seedu.ichifund.model.amount.Amount;"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "import seedu.ichifund.model.date.Day;"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "import seedu.ichifund.model.date.Month;"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "import seedu.ichifund.model.date.Year;"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "import seedu.ichifund.model.transaction.Category;"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "import seedu.ichifund.model.transaction.TransactionType;"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "import seedu.ichifund.testutil.EditTransactionDescriptorBuilder;"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "weiyang13"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "public class EditTransactionCommandParserTest {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "weiyang13"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "    private static final String MESSAGE_INVALID_FORMAT \u003d"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "            String.format(MESSAGE_INVALID_COMMAND_FORMAT, EditTransactionCommand.MESSAGE_USAGE);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "weiyang13"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "    private EditTransactionCommandParser parser \u003d new EditTransactionCommandParser();"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "weiyang13"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "    public void parse_missingParts_failure() {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "        // no index specified"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "        assertParseFailure(parser, VALID_DESCRIPTION_ALLOWANCE, MESSAGE_INVALID_FORMAT);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "weiyang13"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "        // no field specified"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "        assertParseFailure(parser, \"1\", EditTransactionCommand.MESSAGE_NOT_EDITED);"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "weiyang13"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "        // no index and no field specified"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "        assertParseFailure(parser, \"\", MESSAGE_INVALID_FORMAT);"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "    }"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "weiyang13"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "    public void parse_invalidPreamble_failure() {"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "        // negative index"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "        assertParseFailure(parser, \"-5\" + DESCRIPTION_DESC_ALLOWANCE, MESSAGE_INVALID_FORMAT);"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "weiyang13"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "        // zero index"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "        assertParseFailure(parser, \"0\" + TRANSACTION_TYPE_DESC_ALLOWANCE, MESSAGE_INVALID_FORMAT);"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "weiyang13"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "        // invalid arguments being parsed as preamble"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "        assertParseFailure(parser, \"1 some random string\", MESSAGE_INVALID_FORMAT);"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "weiyang13"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "        // invalid prefix being parsed as preamble"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "        assertParseFailure(parser, \"1 i/ string\", MESSAGE_INVALID_FORMAT);"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "    }"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "weiyang13"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "    public void parse_invalidValue_failure() {"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "        assertParseFailure(parser, \"1\" + INVALID_DESCRIPTION_DESC,"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "                Description.MESSAGE_CONSTRAINTS); // invalid description"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "        assertParseFailure(parser, \"1\" + INVALID_AMOUNT_DESC, Amount.MESSAGE_CONSTRAINTS); // invalid amount"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "        assertParseFailure(parser, \"1\" + INVALID_DAY_DESC, Day.MESSAGE_CONSTRAINTS); // invalid day"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "        assertParseFailure(parser, \"1\" + INVALID_MONTH_DESC, Month.MESSAGE_CONSTRAINTS); // invalid month"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "        assertParseFailure(parser, \"1\" + INVALID_YEAR_DESC, Year.MESSAGE_CONSTRAINTS); // invalid year"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "        assertParseFailure(parser, \"1\" + INVALID_CATEGORY_DESC,"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "                Category.MESSAGE_CONSTRAINTS); // invalid category"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "        assertParseFailure(parser, \"1\" + INVALID_TRANSACTION_TYPE_DESC,"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "                TransactionType.MESSAGE_CONSTRAINTS); // invalid transaction type"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "weiyang13"
        },
        "content": ""
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "        // invalid amount followed by valid day"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "        assertParseFailure(parser, \"1\" + INVALID_AMOUNT_DESC + DAY_DESC_ALLOWANCE,"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "                Amount.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "weiyang13"
        },
        "content": ""
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "        // valid amount followed by invalid amount."
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "        assertParseFailure(parser, \"1\" + AMOUNT_DESC_BUS + INVALID_AMOUNT_DESC, Amount.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "weiyang13"
        },
        "content": ""
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "        // multiple invalid values, but only the first invalid value is captured"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "        assertParseFailure(parser, \"1\" + INVALID_DESCRIPTION_DESC + INVALID_DAY_DESC + VALID_MONTH_ALLOWANCE"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "                        + INVALID_TRANSACTION_TYPE_DESC + VALID_AMOUNT_ALLOWANCE, Description.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "    }"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "weiyang13"
        },
        "content": ""
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "    public void parse_allFieldsSpecified_success() {"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "        Index targetIndex \u003d INDEX_SECOND;"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "        String userInput \u003d targetIndex.getOneBased() + AMOUNT_DESC_BUS + YEAR_DESC_ALLOWANCE"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "                + DAY_DESC_ALLOWANCE + MONTH_DESC_ALLOWANCE + DESCRIPTION_DESC_ALLOWANCE + CATEGORY_DESC_BUS"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "                + TRANSACTION_TYPE_DESC_ALLOWANCE;"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "weiyang13"
        },
        "content": ""
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "        EditTransactionDescriptor descriptor \u003d new EditTransactionDescriptorBuilder()"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "                .withDescription(VALID_DESCRIPTION_ALLOWANCE).withAmount(VALID_AMOUNT_BUS)"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "                .withDay(VALID_DAY_ALLOWANCE).withMonth(VALID_MONTH_ALLOWANCE).withYear(VALID_YEAR_ALLOWANCE)"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "                .withCategory(VALID_CATEGORY_BUS).withTransactionType(VALID_TRANSACTION_TYPE_ALLOWANCE).build();"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "        EditTransactionCommand expectedTransactionCommand \u003d new EditTransactionCommand(targetIndex, descriptor);"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "weiyang13"
        },
        "content": ""
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "        assertParseSuccess(parser, userInput, expectedTransactionCommand);"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "    }"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "weiyang13"
        },
        "content": ""
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "    public void parse_someFieldsSpecified_success() {"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "        Index targetIndex \u003d INDEX_FIRST;"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "        String userInput \u003d targetIndex.getOneBased() + DESCRIPTION_DESC_BUS"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "                + DAY_DESC_ALLOWANCE + CATEGORY_DESC_ALLOWANCE;"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "weiyang13"
        },
        "content": ""
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "        EditTransactionDescriptor descriptor \u003d new EditTransactionDescriptorBuilder()"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "                .withDescription(VALID_DESCRIPTION_BUS)"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "                .withDay(VALID_DAY_ALLOWANCE).withCategory(VALID_CATEGORY_ALLOWANCE).build();"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "        EditTransactionCommand expectedTransactionCommand \u003d new EditTransactionCommand(targetIndex, descriptor);"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "weiyang13"
        },
        "content": ""
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "        assertParseSuccess(parser, userInput, expectedTransactionCommand);"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "    }"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "weiyang13"
        },
        "content": ""
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "    public void parse_oneFieldSpecified_success() {"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "        // description"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "        Index targetIndex \u003d INDEX_THIRD;"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "        String userInput \u003d targetIndex.getOneBased() + DESCRIPTION_DESC_ALLOWANCE;"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "        EditTransactionDescriptor descriptor \u003d new EditTransactionDescriptorBuilder()"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "                .withDescription(VALID_DESCRIPTION_ALLOWANCE).build();"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "        EditTransactionCommand expectedTransactionCommand \u003d new EditTransactionCommand(targetIndex, descriptor);"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "        assertParseSuccess(parser, userInput, expectedTransactionCommand);"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "weiyang13"
        },
        "content": ""
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "        // amount"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "        userInput \u003d targetIndex.getOneBased() + AMOUNT_DESC_ALLOWANCE;"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "        descriptor \u003d new EditTransactionDescriptorBuilder().withAmount(VALID_AMOUNT_ALLOWANCE).build();"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "        expectedTransactionCommand \u003d new EditTransactionCommand(targetIndex, descriptor);"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "        assertParseSuccess(parser, userInput, expectedTransactionCommand);"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "weiyang13"
        },
        "content": ""
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "        // day"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "        userInput \u003d targetIndex.getOneBased() + DAY_DESC_ALLOWANCE;"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "        descriptor \u003d new EditTransactionDescriptorBuilder().withDay(VALID_DAY_ALLOWANCE).build();"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "        expectedTransactionCommand \u003d new EditTransactionCommand(targetIndex, descriptor);"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "        assertParseSuccess(parser, userInput, expectedTransactionCommand);"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "weiyang13"
        },
        "content": ""
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "        // month"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "        userInput \u003d targetIndex.getOneBased() + MONTH_DESC_ALLOWANCE;"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "        descriptor \u003d new EditTransactionDescriptorBuilder().withMonth(VALID_MONTH_ALLOWANCE).build();"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "        expectedTransactionCommand \u003d new EditTransactionCommand(targetIndex, descriptor);"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "        assertParseSuccess(parser, userInput, expectedTransactionCommand);"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "weiyang13"
        },
        "content": ""
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "        // year"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "        userInput \u003d targetIndex.getOneBased() + YEAR_DESC_BUS;"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "        descriptor \u003d new EditTransactionDescriptorBuilder().withYear(VALID_YEAR_BUS).build();"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "        expectedTransactionCommand \u003d new EditTransactionCommand(targetIndex, descriptor);"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "        assertParseSuccess(parser, userInput, expectedTransactionCommand);"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "weiyang13"
        },
        "content": ""
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "        // category"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "        userInput \u003d targetIndex.getOneBased() + CATEGORY_DESC_BUS;"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "        descriptor \u003d new EditTransactionDescriptorBuilder().withCategory(VALID_CATEGORY_BUS).build();"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "        expectedTransactionCommand \u003d new EditTransactionCommand(targetIndex, descriptor);"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "        assertParseSuccess(parser, userInput, expectedTransactionCommand);"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "weiyang13"
        },
        "content": ""
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "        // transaction type"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "        userInput \u003d targetIndex.getOneBased() + TRANSACTION_TYPE_DESC_BUS;"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "        descriptor \u003d new EditTransactionDescriptorBuilder().withTransactionType(VALID_TRANSACTION_TYPE_BUS).build();"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "        expectedTransactionCommand \u003d new EditTransactionCommand(targetIndex, descriptor);"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "        assertParseSuccess(parser, userInput, expectedTransactionCommand);"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "    }"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "weiyang13"
        },
        "content": ""
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "    public void parse_multipleRepeatedFields_acceptsLast() {"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "        Index targetIndex \u003d INDEX_FIRST;"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "        String userInput \u003d targetIndex.getOneBased() + DESCRIPTION_DESC_ALLOWANCE + AMOUNT_DESC_ALLOWANCE"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "                + MONTH_DESC_ALLOWANCE + DAY_DESC_ALLOWANCE + CATEGORY_DESC_BUS + TRANSACTION_TYPE_DESC_BUS"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "                + YEAR_DESC_BUS + AMOUNT_DESC_ALLOWANCE + MONTH_DESC_ALLOWANCE + DAY_DESC_ALLOWANCE + YEAR_DESC_BUS"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "                + AMOUNT_DESC_BUS + MONTH_DESC_BUS + DAY_DESC_BUS + YEAR_DESC_ALLOWANCE + DESCRIPTION_DESC_BUS"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "                + CATEGORY_DESC_ALLOWANCE + TRANSACTION_TYPE_DESC_ALLOWANCE;"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "weiyang13"
        },
        "content": ""
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "        EditTransactionDescriptor descriptor \u003d new EditTransactionDescriptorBuilder()"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "                .withDescription(VALID_DESCRIPTION_BUS).withAmount(VALID_AMOUNT_BUS)"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "                .withDay(VALID_DAY_BUS).withMonth(VALID_MONTH_BUS).withYear(VALID_YEAR_ALLOWANCE)"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "                .withCategory(VALID_CATEGORY_ALLOWANCE).withTransactionType(VALID_TRANSACTION_TYPE_ALLOWANCE)"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "                .build();"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "        EditTransactionCommand expectedTransactionCommand \u003d new EditTransactionCommand(targetIndex, descriptor);"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "weiyang13"
        },
        "content": ""
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "        assertParseSuccess(parser, userInput, expectedTransactionCommand);"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "    }"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "weiyang13"
        },
        "content": ""
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "    public void parse_invalidValueFollowedByValidValue_success() {"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "        // no other valid values specified"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "        Index targetIndex \u003d INDEX_FIRST;"
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "        String userInput \u003d targetIndex.getOneBased() + INVALID_AMOUNT_DESC + AMOUNT_DESC_BUS;"
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "        EditTransactionDescriptor descriptor \u003d new EditTransactionDescriptorBuilder()"
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "                .withAmount(VALID_AMOUNT_BUS).build();"
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "        EditTransactionCommand expectedTransactionCommand \u003d new EditTransactionCommand(targetIndex, descriptor);"
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "        assertParseSuccess(parser, userInput, expectedTransactionCommand);"
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "weiyang13"
        },
        "content": ""
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "        // other valid values specified"
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "        userInput \u003d targetIndex.getOneBased() + DAY_DESC_BUS + INVALID_AMOUNT_DESC + MONTH_DESC_BUS"
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "                + AMOUNT_DESC_BUS;"
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "        descriptor \u003d new EditTransactionDescriptorBuilder().withAmount(VALID_AMOUNT_BUS).withDay(VALID_DAY_BUS)"
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "                .withMonth(VALID_MONTH_BUS).build();"
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "        expectedTransactionCommand \u003d new EditTransactionCommand(targetIndex, descriptor);"
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "        assertParseSuccess(parser, userInput, expectedTransactionCommand);"
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "    }"
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "weiyang13": 232
    }
  },
  {
    "path": "src/test/java/seedu/ichifund/logic/parser/transaction/FilterTransactionCommandParserTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "package seedu.ichifund.logic.parser.transaction;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "weiyang13"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "import static seedu.ichifund.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "import static seedu.ichifund.logic.commands.CommandTestUtil.CATEGORY_DESC_ALLOWANCE;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "import static seedu.ichifund.logic.commands.CommandTestUtil.CATEGORY_DESC_BUS;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "import static seedu.ichifund.logic.commands.CommandTestUtil.INVALID_CATEGORY_DESC;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "import static seedu.ichifund.logic.commands.CommandTestUtil.INVALID_MONTH_DESC;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "import static seedu.ichifund.logic.commands.CommandTestUtil.INVALID_TRANSACTION_TYPE_DESC;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "import static seedu.ichifund.logic.commands.CommandTestUtil.INVALID_YEAR_DESC;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "import static seedu.ichifund.logic.commands.CommandTestUtil.MONTH_DESC_ALLOWANCE;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "import static seedu.ichifund.logic.commands.CommandTestUtil.MONTH_DESC_BUS;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "import static seedu.ichifund.logic.commands.CommandTestUtil.PREAMBLE_NON_EMPTY;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "import static seedu.ichifund.logic.commands.CommandTestUtil.PREAMBLE_WHITESPACE;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "import static seedu.ichifund.logic.commands.CommandTestUtil.TRANSACTION_TYPE_DESC_ALLOWANCE;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "import static seedu.ichifund.logic.commands.CommandTestUtil.TRANSACTION_TYPE_DESC_BUS;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "import static seedu.ichifund.logic.commands.CommandTestUtil.YEAR_DESC_ALLOWANCE;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "import static seedu.ichifund.logic.commands.CommandTestUtil.YEAR_DESC_BUS;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "import static seedu.ichifund.logic.parser.CommandParserTestUtil.assertParseFailure;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "import static seedu.ichifund.logic.parser.CommandParserTestUtil.assertParseSuccess;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "import static seedu.ichifund.testutil.TypicalFundBook.TRANSACTION_ALLOWANCE;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "weiyang13"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "weiyang13"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "weiyang13"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "import seedu.ichifund.logic.commands.transaction.FilterTransactionCommand;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "import seedu.ichifund.model.date.Month;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "import seedu.ichifund.model.date.Year;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "import seedu.ichifund.model.transaction.Category;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "import seedu.ichifund.model.transaction.Transaction;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "import seedu.ichifund.model.transaction.TransactionType;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "import seedu.ichifund.testutil.TransactionBuilder;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "weiyang13"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "public class FilterTransactionCommandParserTest {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "    private FilterTransactionCommandParser parser \u003d new FilterTransactionCommandParser();"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "weiyang13"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "    public void parse_allFieldsPresent_success() {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "        Transaction transaction \u003d new TransactionBuilder(TRANSACTION_ALLOWANCE).build();"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "        FilterTransactionCommand expectedCommand \u003d new FilterTransactionCommand(Optional.of(transaction.getMonth()),"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "                Optional.of(transaction.getYear()), Optional.of(transaction.getCategory()),"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "                Optional.of(transaction.getTransactionType()));"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "weiyang13"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "        // whitespace only preamble"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "        assertParseSuccess(parser, PREAMBLE_WHITESPACE + MONTH_DESC_ALLOWANCE + YEAR_DESC_ALLOWANCE"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "                + CATEGORY_DESC_ALLOWANCE + TRANSACTION_TYPE_DESC_ALLOWANCE, expectedCommand);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "weiyang13"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "        // multiple months - last month accepted"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "        assertParseSuccess(parser, MONTH_DESC_BUS + MONTH_DESC_ALLOWANCE + YEAR_DESC_ALLOWANCE"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "                + CATEGORY_DESC_ALLOWANCE + TRANSACTION_TYPE_DESC_ALLOWANCE, expectedCommand);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "weiyang13"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "        // multiple years - last year accepted"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "        assertParseSuccess(parser, MONTH_DESC_ALLOWANCE + YEAR_DESC_BUS + YEAR_DESC_ALLOWANCE"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "                + CATEGORY_DESC_ALLOWANCE + TRANSACTION_TYPE_DESC_ALLOWANCE, expectedCommand);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "weiyang13"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "        // multiple categories - last category accepted"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "        assertParseSuccess(parser, MONTH_DESC_ALLOWANCE + YEAR_DESC_ALLOWANCE + CATEGORY_DESC_BUS"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "                + CATEGORY_DESC_ALLOWANCE + TRANSACTION_TYPE_DESC_ALLOWANCE, expectedCommand);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "weiyang13"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "        // multiple transaction types - last transaction type accepted"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "        assertParseSuccess(parser, MONTH_DESC_ALLOWANCE + YEAR_DESC_ALLOWANCE + CATEGORY_DESC_ALLOWANCE"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "                + TRANSACTION_TYPE_DESC_BUS + TRANSACTION_TYPE_DESC_ALLOWANCE, expectedCommand);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "    }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "weiyang13"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "    public void parse_allFieldsMissing_failure() {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "        assertParseFailure(parser, \"\","
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "                String.format(MESSAGE_INVALID_COMMAND_FORMAT, FilterTransactionCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "    }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "weiyang13"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "    public void parse_invalidValue_failure() {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "        // invalid month"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "        assertParseFailure(parser, INVALID_MONTH_DESC + YEAR_DESC_ALLOWANCE + CATEGORY_DESC_ALLOWANCE"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "                + TRANSACTION_TYPE_DESC_ALLOWANCE, Month.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "weiyang13"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "        // invalid year"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "        assertParseFailure(parser, MONTH_DESC_ALLOWANCE + INVALID_YEAR_DESC + CATEGORY_DESC_ALLOWANCE"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "                + TRANSACTION_TYPE_DESC_ALLOWANCE, Year.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "weiyang13"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "        // invalid category"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "        assertParseFailure(parser, MONTH_DESC_ALLOWANCE + YEAR_DESC_ALLOWANCE + INVALID_CATEGORY_DESC"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "                + TRANSACTION_TYPE_DESC_ALLOWANCE, Category.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "weiyang13"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "        // invalid transaction type"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "        assertParseFailure(parser, MONTH_DESC_ALLOWANCE + YEAR_DESC_ALLOWANCE + CATEGORY_DESC_ALLOWANCE"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "                + INVALID_TRANSACTION_TYPE_DESC, TransactionType.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "weiyang13"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "        // two invalid values, only first invalid value reported"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "        assertParseFailure(parser, INVALID_MONTH_DESC + YEAR_DESC_ALLOWANCE + CATEGORY_DESC_ALLOWANCE"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "                + INVALID_TRANSACTION_TYPE_DESC, Month.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "weiyang13"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "        // non-empty preamble"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "        assertParseFailure(parser, PREAMBLE_NON_EMPTY + MONTH_DESC_ALLOWANCE + YEAR_DESC_ALLOWANCE"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "                        + TRANSACTION_TYPE_DESC_ALLOWANCE,"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "                String.format(MESSAGE_INVALID_COMMAND_FORMAT, FilterTransactionCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "    }"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "weiyang13": 98
    }
  },
  {
    "path": "src/test/java/seedu/ichifund/logic/parser/transaction/TransactionFeatureParserTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "package seedu.ichifund.logic.parser.transaction;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "weiyang13"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "import static seedu.ichifund.commons.core.Messages.MESSAGE_UNKNOWN_COMMAND;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "import static seedu.ichifund.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "import static seedu.ichifund.testutil.TypicalIndexes.INDEX_FIRST;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "import static seedu.ichifund.testutil.TypicalIndexes.INDEX_FIRST_PERSON;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "weiyang13"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "weiyang13"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "weiyang13"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "import seedu.ichifund.logic.commands.transaction.AddTransactionCommand;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "import seedu.ichifund.logic.commands.transaction.DeleteTransactionCommand;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "import seedu.ichifund.logic.commands.transaction.EditTransactionCommand;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "import seedu.ichifund.logic.commands.transaction.EditTransactionCommand.EditTransactionDescriptor;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "import seedu.ichifund.logic.commands.transaction.FilterTransactionCommand;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "import seedu.ichifund.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "import seedu.ichifund.model.transaction.Transaction;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "import seedu.ichifund.testutil.ArgumentBuilder;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "import seedu.ichifund.testutil.EditTransactionDescriptorBuilder;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "import seedu.ichifund.testutil.TransactionBuilder;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "import seedu.ichifund.testutil.TransactionUtil;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "weiyang13"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "public class TransactionFeatureParserTest {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "weiyang13"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "    private final TransactionFeatureParser parser \u003d new TransactionFeatureParser();"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "weiyang13"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "    public void parseCommand_filterTransaction() throws Exception {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "        Transaction transaction \u003d new TransactionBuilder().build();"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "        String commandArguments \u003d new ArgumentBuilder()"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "                .withMonth(transaction.getMonth().toString())"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "                .build();"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "        FilterTransactionCommand command \u003d new FilterTransactionCommand(Optional.of(transaction.getMonth()),"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "                Optional.empty(), Optional.empty(), Optional.empty());"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "        assertEquals(command, (FilterTransactionCommand) parser"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "                .parseCommand(FilterTransactionCommand.COMMAND_WORD, commandArguments));"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "weiyang13"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "    public void parseCommand_addTransaction() throws Exception {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "        Transaction transaction \u003d new TransactionBuilder().build();"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "        String commandArguments \u003d new ArgumentBuilder()"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "                .withDescription(transaction.getDescription().toString())"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "                .withAmount(transaction.getAmount().toString())"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "                .build();"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "        AddTransactionCommand command \u003d new AddTransactionCommand(transaction.getDescription(),"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "                transaction.getAmount(), Optional.empty(), Optional.empty(), Optional.empty(), Optional.empty(),"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "                Optional.empty());"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "        assertEquals(command, (AddTransactionCommand) parser"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "                .parseCommand(AddTransactionCommand.COMMAND_WORD, commandArguments));"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "    }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "weiyang13"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "    public void parseCommand_editTransaction() throws Exception {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "        Transaction transaction \u003d new TransactionBuilder().build();"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "        EditTransactionDescriptor descriptor \u003d new EditTransactionDescriptorBuilder(transaction).build();"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "        EditTransactionCommand command \u003d (EditTransactionCommand) parser"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "                .parseCommand(EditTransactionCommand.COMMAND_WORD,"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "                        INDEX_FIRST_PERSON.getOneBased() + \" \""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "                        + TransactionUtil.getEditTransactionDescriptorDetails(descriptor));"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "        assertEquals(new EditTransactionCommand(INDEX_FIRST_PERSON, descriptor), command);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "    }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "weiyang13"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "    public void parseCommand_deleteTransaction() throws Exception {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "        DeleteTransactionCommand command \u003d (DeleteTransactionCommand) parser.parseCommand("
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "                DeleteTransactionCommand.COMMAND_WORD, \"\" + INDEX_FIRST.getOneBased());"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "        assertEquals(new DeleteTransactionCommand(INDEX_FIRST), command);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "    }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "weiyang13"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "    public void parseCommand_unknownCommand_throwsParseException() {"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "        assertThrows(ParseException.class, MESSAGE_UNKNOWN_COMMAND, () -\u003e parser.parseCommand(\"unknownCommand\", \"\"));"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "    }"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "weiyang13": 77
    }
  },
  {
    "path": "src/test/java/seedu/ichifund/model/DescriptionTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "package seedu.ichifund.model;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "weiyang13"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "import static seedu.ichifund.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "weiyang13"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "weiyang13"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "public class DescriptionTest {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "    public void constructor_null_throwsNullPointerException() {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e new Description(null));"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "    }"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "weiyang13"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "    public void constructor_invalidName_throwsIllegalArgumentException() {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "        String invalidDescription \u003d \"\";"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "        assertThrows(IllegalArgumentException.class, () -\u003e new Description(invalidDescription));"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "    }"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "weiyang13"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "    public void isValidDescription() {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "        // null description"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e Description.isValidDescription(null));"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "weiyang13"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "        // invalid description"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "        assertFalse(Description.isValidDescription(\"\")); // empty string"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "        assertFalse(Description.isValidDescription(\" \")); // spaces only"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "        assertFalse(Description.isValidDescription(\"^\")); // only non-alphanumeric characters"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "        assertFalse(Description.isValidDescription(\"dinner*\")); // contains non-alphanumeric characters"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "weiyang13"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "        // valid description"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "        assertTrue(Description.isValidDescription(\"dinner with myself\")); // alphabets only"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "        assertTrue(Description.isValidDescription(\"000\")); // numbers only"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "        assertTrue(Description.isValidDescription(\"2nd lunch\")); // alphanumeric characters"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "        assertTrue(Description.isValidDescription(\"Breakfast with Tiffany\")); // with capital letters"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "        assertTrue(Description.isValidDescription(\"Breakfast with Tiffany because Sabrina disappeared\"));"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "weiyang13": 39
    }
  },
  {
    "path": "src/test/java/seedu/ichifund/model/FundBookTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "nexolute"
        },
        "content": "package seedu.ichifund.model;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "nexolute"
        },
        "content": "import static seedu.ichifund.logic.commands.CommandTestUtil.VALID_ADDRESS_BOB;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "nexolute"
        },
        "content": "import static seedu.ichifund.logic.commands.CommandTestUtil.VALID_TAG_HUSBAND;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "nexolute"
        },
        "content": "import static seedu.ichifund.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "nexolute"
        },
        "content": "import static seedu.ichifund.testutil.TypicalFundBook.PERSON_ALICE;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "nexolute"
        },
        "content": "import static seedu.ichifund.testutil.TypicalFundBook.getTypicalFundBook;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Collection;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Collections;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.collections.FXCollections;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Alaete"
        },
        "content": "import seedu.ichifund.model.analytics.Data;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "nexolute"
        },
        "content": "import seedu.ichifund.model.budget.Budget;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "nexolute"
        },
        "content": "import seedu.ichifund.model.person.Person;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "nexolute"
        },
        "content": "import seedu.ichifund.model.person.exceptions.DuplicatePersonException;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "LeeYiyuan"
        },
        "content": "import seedu.ichifund.model.repeater.Repeater;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "LeeYiyuan"
        },
        "content": "import seedu.ichifund.model.repeater.RepeaterUniqueId;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "import seedu.ichifund.model.transaction.Transaction;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "nexolute"
        },
        "content": "import seedu.ichifund.testutil.BudgetBuilder;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "nexolute"
        },
        "content": "import seedu.ichifund.testutil.PersonBuilder;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "LeeYiyuan"
        },
        "content": "import seedu.ichifund.testutil.RepeaterBuilder;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "import seedu.ichifund.testutil.TransactionBuilder;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "nexolute"
        },
        "content": "public class FundBookTest {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "nexolute"
        },
        "content": "    private final FundBook fundBook \u003d new FundBook();"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    public void constructor() {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "nexolute"
        },
        "content": "        assertEquals(Collections.emptyList(), fundBook.getPersonList());"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    public void resetData_null_throwsNullPointerException() {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "nexolute"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e fundBook.resetData(null));"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "nexolute"
        },
        "content": "    public void resetData_withValidReadOnlyFundBook_replacesData() {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "nexolute"
        },
        "content": "        FundBook newData \u003d getTypicalFundBook();"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "nexolute"
        },
        "content": "        fundBook.resetData(newData);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "nexolute"
        },
        "content": "        assertEquals(newData, fundBook);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    public void resetData_withDuplicatePersons_throwsDuplicatePersonException() {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "        // Two persons with the same identity fields"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "nexolute"
        },
        "content": "        Person editedAlice \u003d new PersonBuilder(PERSON_ALICE).withAddress(VALID_ADDRESS_BOB).withTags(VALID_TAG_HUSBAND)"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "                .build();"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "LeeYiyuan"
        },
        "content": "        Repeater repeater \u003d new RepeaterBuilder().build();"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "nexolute"
        },
        "content": "        Budget budget \u003d new BudgetBuilder().build();"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "        Transaction transaction \u003d new TransactionBuilder().build();"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "LeeYiyuan"
        },
        "content": "        RepeaterUniqueId currentRepeaterUniqueId \u003d new RepeaterUniqueId(\"0\");"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "nexolute"
        },
        "content": "        List\u003cPerson\u003e newPersons \u003d Arrays.asList(PERSON_ALICE, editedAlice);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "LeeYiyuan"
        },
        "content": "        List\u003cRepeater\u003e repeaters \u003d Collections.singletonList(repeater);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "nexolute"
        },
        "content": "        List\u003cBudget\u003e budgets \u003d Collections.singletonList(budget);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "        List\u003cTransaction\u003e transactions \u003d Collections.singletonList(transaction);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "LeeYiyuan"
        },
        "content": "        FundBookStub newData \u003d new FundBookStub(currentRepeaterUniqueId, newPersons, repeaters, budgets, transactions);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "nexolute"
        },
        "content": "        assertThrows(DuplicatePersonException.class, () -\u003e fundBook.resetData(newData));"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "    public void hasPerson_nullPerson_throwsNullPointerException() {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "nexolute"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e fundBook.hasPerson(null));"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "nexolute"
        },
        "content": "    public void hasPerson_personNotInFundBook_returnsFalse() {"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "nexolute"
        },
        "content": "        assertFalse(fundBook.hasPerson(PERSON_ALICE));"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "nexolute"
        },
        "content": "    public void hasPerson_personInFundBook_returnsTrue() {"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "nexolute"
        },
        "content": "        fundBook.addPerson(PERSON_ALICE);"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "nexolute"
        },
        "content": "        assertTrue(fundBook.hasPerson(PERSON_ALICE));"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "nexolute"
        },
        "content": "    public void hasPerson_personWithSameIdentityFieldsInFundBook_returnsTrue() {"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "nexolute"
        },
        "content": "        fundBook.addPerson(PERSON_ALICE);"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "nexolute"
        },
        "content": "        Person editedAlice \u003d new PersonBuilder(PERSON_ALICE).withAddress(VALID_ADDRESS_BOB).withTags(VALID_TAG_HUSBAND)"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "                .build();"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "nexolute"
        },
        "content": "        assertTrue(fundBook.hasPerson(editedAlice));"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "    public void getPersonList_modifyList_throwsUnsupportedOperationException() {"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "nexolute"
        },
        "content": "        assertThrows(UnsupportedOperationException.class, () -\u003e fundBook.getPersonList().remove(0));"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "nexolute"
        },
        "content": "     * A stub ReadOnlyFundBook whose persons list can violate interface constraints."
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "nexolute"
        },
        "content": "    private static class FundBookStub implements ReadOnlyFundBook {"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "LeeYiyuan"
        },
        "content": "        private RepeaterUniqueId currentRepeaterUniqueId \u003d new RepeaterUniqueId(\"0\");"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "        private final ObservableList\u003cPerson\u003e persons \u003d FXCollections.observableArrayList();"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "LeeYiyuan"
        },
        "content": "        private final ObservableList\u003cRepeater\u003e repeaters \u003d FXCollections.observableArrayList();"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "nexolute"
        },
        "content": "        private final ObservableList\u003cBudget\u003e budgets \u003d FXCollections.observableArrayList();"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "        private final ObservableList\u003cTransaction\u003e transactions \u003d FXCollections.observableArrayList();"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "Alaete"
        },
        "content": "        private final ObservableList\u003cData\u003e datas \u003d FXCollections.observableArrayList();"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "LeeYiyuan"
        },
        "content": "        FundBookStub(RepeaterUniqueId currentRepeaterUniqueId, Collection\u003cPerson\u003e persons,"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "LeeYiyuan"
        },
        "content": "                Collection\u003cRepeater\u003e repeaters, Collection\u003cBudget\u003e budgets, Collection\u003cTransaction\u003e transactions) {"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "LeeYiyuan"
        },
        "content": "            this.currentRepeaterUniqueId \u003d currentRepeaterUniqueId;"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "            this.persons.setAll(persons);"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "LeeYiyuan"
        },
        "content": "            this.repeaters.setAll(repeaters);"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "nexolute"
        },
        "content": "            this.budgets.setAll(budgets);"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "            this.transactions.setAll(transactions);"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "LeeYiyuan"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "LeeYiyuan"
        },
        "content": "        public RepeaterUniqueId getCurrentRepeaterUniqueId() {"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "LeeYiyuan"
        },
        "content": "            return currentRepeaterUniqueId;"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "LeeYiyuan"
        },
        "content": "        }"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "LeeYiyuan"
        },
        "content": ""
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "        public ObservableList\u003cPerson\u003e getPersonList() {"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "            return persons;"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "nexolute"
        },
        "content": ""
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "LeeYiyuan"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "LeeYiyuan"
        },
        "content": "        public ObservableList\u003cRepeater\u003e getRepeaterList() {"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "LeeYiyuan"
        },
        "content": "            return repeaters;"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "LeeYiyuan"
        },
        "content": "        }"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "LeeYiyuan"
        },
        "content": ""
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "nexolute"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "nexolute"
        },
        "content": "        public ObservableList\u003cBudget\u003e getBudgetList() {"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "nexolute"
        },
        "content": "            return budgets;"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "nexolute"
        },
        "content": "        }"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "weiyang13"
        },
        "content": ""
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "        public ObservableList\u003cTransaction\u003e getTransactionList() {"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "            return transactions;"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "        }"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "Alaete"
        },
        "content": ""
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "Alaete"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "Alaete"
        },
        "content": "        public ObservableList\u003cData\u003e getDataList() {"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "Alaete"
        },
        "content": "            return datas;"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "Alaete"
        },
        "content": "        }"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "LeeYiyuan": 23,
      "nexolute": 44,
      "Alaete": 7,
      "weiyang13": 11,
      "-": 67
    }
  },
  {
    "path": "src/test/java/seedu/ichifund/model/ModelManagerTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "nexolute"
        },
        "content": "package seedu.ichifund.model;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "nexolute"
        },
        "content": "import static seedu.ichifund.model.Model.PREDICATE_SHOW_ALL_PERSONS;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "nexolute"
        },
        "content": "import static seedu.ichifund.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "nexolute"
        },
        "content": "import static seedu.ichifund.testutil.TypicalFundBook.PERSON_ALICE;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "nexolute"
        },
        "content": "import static seedu.ichifund.testutil.TypicalFundBook.PERSON_BENSON;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Paths;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "nexolute"
        },
        "content": "import seedu.ichifund.commons.core.GuiSettings;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "nexolute"
        },
        "content": "import seedu.ichifund.model.person.NameContainsKeywordsPredicate;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "nexolute"
        },
        "content": "import seedu.ichifund.testutil.FundBookBuilder;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "public class ModelManagerTest {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    private ModelManager modelManager \u003d new ModelManager();"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    public void constructor() {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(new UserPrefs(), modelManager.getUserPrefs());"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(new GuiSettings(), modelManager.getGuiSettings());"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "nexolute"
        },
        "content": "        assertEquals(new FundBook(), new FundBook(modelManager.getFundBook()));"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setUserPrefs_nullUserPrefs_throwsNullPointerException() {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e modelManager.setUserPrefs(null));"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setUserPrefs_validUserPrefs_copiesUserPrefs() {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs userPrefs \u003d new UserPrefs();"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "nexolute"
        },
        "content": "        userPrefs.setFundBookFilePath(Paths.get(\"fund/book/file/path\"));"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "        userPrefs.setGuiSettings(new GuiSettings(1, 2, 3, 4));"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "        modelManager.setUserPrefs(userPrefs);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(userPrefs, modelManager.getUserPrefs());"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        // Modifying userPrefs should not modify modelManager\u0027s userPrefs"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs oldUserPrefs \u003d new UserPrefs(userPrefs);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "nexolute"
        },
        "content": "        userPrefs.setFundBookFilePath(Paths.get(\"new/fund/book/file/path\"));"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(oldUserPrefs, modelManager.getUserPrefs());"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setGuiSettings_nullGuiSettings_throwsNullPointerException() {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e modelManager.setGuiSettings(null));"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setGuiSettings_validGuiSettings_setsGuiSettings() {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "        GuiSettings guiSettings \u003d new GuiSettings(1, 2, 3, 4);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "        modelManager.setGuiSettings(guiSettings);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(guiSettings, modelManager.getGuiSettings());"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "nexolute"
        },
        "content": "    public void setFundBookFilePath_nullPath_throwsNullPointerException() {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "nexolute"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e modelManager.setFundBookFilePath(null));"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "nexolute"
        },
        "content": "    public void setFundBookFilePath_validPath_setsFundBookFilePath() {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "nexolute"
        },
        "content": "        Path path \u003d Paths.get(\"fund/book/file/path\");"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "nexolute"
        },
        "content": "        modelManager.setFundBookFilePath(path);"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "nexolute"
        },
        "content": "        assertEquals(path, modelManager.getFundBookFilePath());"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "    public void hasPerson_nullPerson_throwsNullPointerException() {"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e modelManager.hasPerson(null));"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "nexolute"
        },
        "content": "    public void hasPerson_personNotInFundBook_returnsFalse() {"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "nexolute"
        },
        "content": "        assertFalse(modelManager.hasPerson(PERSON_ALICE));"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "nexolute"
        },
        "content": "    public void hasPerson_personInFundBook_returnsTrue() {"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "nexolute"
        },
        "content": "        modelManager.addPerson(PERSON_ALICE);"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "nexolute"
        },
        "content": "        assertTrue(modelManager.hasPerson(PERSON_ALICE));"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "    public void getFilteredPersonList_modifyList_throwsUnsupportedOperationException() {"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(UnsupportedOperationException.class, () -\u003e modelManager.getFilteredPersonList().remove(0));"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "nexolute"
        },
        "content": "        FundBook fundBook \u003d new FundBookBuilder().withPerson(PERSON_ALICE).withPerson(PERSON_BENSON).build();"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "nexolute"
        },
        "content": "        FundBook differentFundBook \u003d new FundBook();"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs userPrefs \u003d new UserPrefs();"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "        // same values -\u003e returns true"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "nexolute"
        },
        "content": "        modelManager \u003d new ModelManager(fundBook, userPrefs);"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "nexolute"
        },
        "content": "        ModelManager modelManagerCopy \u003d new ModelManager(fundBook, userPrefs);"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(modelManager.equals(modelManagerCopy));"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(modelManager.equals(modelManager));"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(modelManager.equals(null));"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "        // different types -\u003e returns false"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(modelManager.equals(5));"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "nexolute"
        },
        "content": "        // different fundBook -\u003e returns false"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "nexolute"
        },
        "content": "        assertFalse(modelManager.equals(new ModelManager(differentFundBook, userPrefs)));"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "        // different filteredList -\u003e returns false"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "nexolute"
        },
        "content": "        String[] keywords \u003d PERSON_ALICE.getName().fullName.split(\"\\\\s+\");"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "        modelManager.updateFilteredPersonList(new NameContainsKeywordsPredicate(Arrays.asList(keywords)));"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "nexolute"
        },
        "content": "        assertFalse(modelManager.equals(new ModelManager(fundBook, userPrefs)));"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "        // resets modelManager to initial state for upcoming tests"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "        modelManager.updateFilteredPersonList(PREDICATE_SHOW_ALL_PERSONS);"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "        // different userPrefs -\u003e returns false"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs differentUserPrefs \u003d new UserPrefs();"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "nexolute"
        },
        "content": "        differentUserPrefs.setFundBookFilePath(Paths.get(\"differentFilePath\"));"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "nexolute"
        },
        "content": "        assertFalse(modelManager.equals(new ModelManager(fundBook, differentUserPrefs)));"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "nexolute": 32,
      "-": 100
    }
  },
  {
    "path": "src/test/java/seedu/ichifund/model/UserPrefsTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "nexolute"
        },
        "content": "package seedu.ichifund.model;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "nexolute"
        },
        "content": "import static seedu.ichifund.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "public class UserPrefsTest {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setGuiSettings_nullGuiSettings_throwsNullPointerException() {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs userPref \u003d new UserPrefs();"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e userPref.setGuiSettings(null));"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "nexolute"
        },
        "content": "    public void setFundBookFilePath_nullPath_throwsNullPointerException() {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs userPrefs \u003d new UserPrefs();"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "nexolute"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e userPrefs.setFundBookFilePath(null));"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "nexolute": 4,
      "-": 17
    }
  },
  {
    "path": "src/test/java/seedu/ichifund/model/amount/AmountTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "package seedu.ichifund.model.amount;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "weiyang13"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "import static seedu.ichifund.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "weiyang13"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "weiyang13"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "weiyang13"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "public class AmountTest {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "    public static final Amount AMOUNT_POSITIVE_1 \u003d new Amount(\"10.20\");"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "    public static final Amount AMOUNT_POSITIVE_2 \u003d new Amount(\"0.50\");"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "    public static final Amount AMOUNT_POSITIVE_3 \u003d new Amount(\"5\");"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "    public static final Amount AMOUNT_NEGATIVE_1 \u003d new Amount(\"-6.20\");"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "    public static final Amount AMOUNT_NEGATIVE_2 \u003d new Amount(\"-0.90\");"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "weiyang13"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "    public void constructor_null_throwsNullPointerException() {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e new Amount(null));"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "    }"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "weiyang13"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "    public void constructor_invalidAmount_throwsIllegalArgumentException() {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "        String invalidAmount \u003d \"\";"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "        assertThrows(IllegalArgumentException.class, () -\u003e new Amount(invalidAmount));"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "weiyang13"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "    public void isValidAmount() {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "        // null amount"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e Amount.isValidAmount(null));"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "weiyang13"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "        // invalid amount"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "        assertFalse(Amount.isValidAmount(\"ab.cd\"));"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "        assertFalse(Amount.isValidAmount(\"\"));"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "        assertFalse(Amount.isValidAmount(\" \"));"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "weiyang13"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "        // invalid amount - dollars and cents format"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "        assertFalse(Amount.isValidAmount(\"50.0\"));"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "        assertFalse(Amount.isValidAmount(\"50.\"));"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "        assertFalse(Amount.isValidAmount(\".05\"));"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "weiyang13"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "        // invalid amount - leading zeroes"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "        assertFalse(Amount.isValidAmount(\"050\"));"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "        assertFalse(Amount.isValidAmount(\"050.00\"));"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "        assertFalse(Amount.isValidAmount(\"00.00\"));"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "weiyang13"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "        // valid amount - positive"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "        assertTrue(Amount.isValidAmount(\"50.00\"));"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "        assertTrue(Amount.isValidAmount(\"50\"));"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "        assertTrue(Amount.isValidAmount(\"0.50\"));"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "        assertTrue(Amount.isValidAmount(\"0.00\"));"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "        assertTrue(Amount.isValidAmount(\"0\"));"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "weiyang13"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "        // valid amount - negative"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "        assertTrue(Amount.isValidAmount(\"-49.70\"));"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "        assertTrue(Amount.isValidAmount(\"-50\"));"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "        assertTrue(Amount.isValidAmount(\"-0.50\"));"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "    }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "weiyang13"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "    public void getValueInCents() {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "        Amount amount \u003d new Amount(\"-5.70\");"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "        assertEquals(amount.getValueInCents(), -570);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "weiyang13"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "        amount \u003d new Amount(\"5.70\");"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "        assertEquals(amount.getValueInCents(), 570);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "    }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "weiyang13"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "    public void isNegative() {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "        // negative amount"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "        assertTrue(Amount.isNegative(\"-0.50\"));"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "        assertTrue(Amount.isNegative(\"-10.50\"));"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "        assertTrue(Amount.isNegative(\"-50\"));"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "weiyang13"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "        // positive amount"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "        assertFalse(Amount.isNegative(\"0.50\"));"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "        assertFalse(Amount.isNegative(\"10.50\"));"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "        assertFalse(Amount.isNegative(\"50\"));"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "    }"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "weiyang13"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "    public void testToString() {"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "        assertEquals(new Amount(\"0\").toString(), \"0.00\");"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "        assertEquals(new Amount(\"1\").toString(), \"1.00\");"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "        assertEquals(new Amount(\"1.05\").toString(), \"1.05\");"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "        assertEquals(new Amount(\"0.09\").toString(), \"0.09\");"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "        assertEquals(new Amount(\"-1\").toString(), \"-1.00\");"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "        assertEquals(new Amount(\"-1.05\").toString(), \"-1.05\");"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "        assertEquals(new Amount(\"-0.09\").toString(), \"-0.09\");"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "    }"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "weiyang13"
        },
        "content": ""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "    public void negate() {"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "        assertEquals(Amount.negate(new Amount(\"1.50\")), new Amount (\"-1.50\"));"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "    }"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "weiyang13"
        },
        "content": ""
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "    public void add() {"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "        assertEquals(Amount.add(AMOUNT_POSITIVE_2, AMOUNT_POSITIVE_1).getValueInCents(),"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "                AMOUNT_POSITIVE_2.getValueInCents() + AMOUNT_POSITIVE_1.getValueInCents());"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "        assertEquals(Amount.add(AMOUNT_POSITIVE_2, AMOUNT_NEGATIVE_1).getValueInCents(),"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "                AMOUNT_POSITIVE_2.getValueInCents() + AMOUNT_NEGATIVE_1.getValueInCents());"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "        assertEquals(Amount.add(AMOUNT_NEGATIVE_2, AMOUNT_NEGATIVE_1).getValueInCents(),"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "                AMOUNT_NEGATIVE_2.getValueInCents() + AMOUNT_NEGATIVE_1.getValueInCents());"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "    }"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "weiyang13"
        },
        "content": ""
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "    public void subtract() {"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "        assertEquals(Amount.subtract(AMOUNT_POSITIVE_2, AMOUNT_POSITIVE_1).getValueInCents(),"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "                AMOUNT_POSITIVE_2.getValueInCents() - AMOUNT_POSITIVE_1.getValueInCents());"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "        assertEquals(Amount.subtract(AMOUNT_POSITIVE_2, AMOUNT_NEGATIVE_1).getValueInCents(),"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "                AMOUNT_POSITIVE_2.getValueInCents() - AMOUNT_NEGATIVE_1.getValueInCents());"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "        assertEquals(Amount.subtract(AMOUNT_NEGATIVE_2, AMOUNT_NEGATIVE_1).getValueInCents(),"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "                AMOUNT_NEGATIVE_2.getValueInCents() - AMOUNT_NEGATIVE_1.getValueInCents());"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "    }"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "weiyang13"
        },
        "content": ""
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "    public void addAll() {"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "        ArrayList\u003cAmount\u003e amounts \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "        amounts.add(AMOUNT_POSITIVE_1);"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "        amounts.add(AMOUNT_POSITIVE_2);"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "        amounts.add(AMOUNT_POSITIVE_3);"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "        amounts.add(AMOUNT_NEGATIVE_1);"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "        amounts.add(AMOUNT_NEGATIVE_2);"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "        assertEquals(Amount.addAll(amounts).getValueInCents(),"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "                AMOUNT_POSITIVE_1.getValueInCents()"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "                        + AMOUNT_POSITIVE_2.getValueInCents()"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "                        + AMOUNT_POSITIVE_3.getValueInCents()"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "                        + AMOUNT_NEGATIVE_1.getValueInCents()"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "                        + AMOUNT_NEGATIVE_2.getValueInCents());"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "    }"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "weiyang13": 136
    }
  },
  {
    "path": "src/test/java/seedu/ichifund/model/context/TransactionContextTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "package seedu.ichifund.model.context;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "weiyang13"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "import static seedu.ichifund.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "weiyang13"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "weiyang13"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "weiyang13"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "import seedu.ichifund.model.date.Month;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "import seedu.ichifund.model.date.Year;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "import seedu.ichifund.model.transaction.Category;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "import seedu.ichifund.model.transaction.TransactionType;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "import seedu.ichifund.testutil.DateBuilder;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "import seedu.ichifund.testutil.TransactionBuilder;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "weiyang13"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "public class TransactionContextTest {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "weiyang13"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "    public void constructor_fromTransaction_correctFields() {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "        TransactionContext transactionContext \u003d new TransactionContext(Optional.of(new TransactionBuilder().build()));"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "        assertFalse(transactionContext.hasCategory());"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "        assertFalse(transactionContext.hasTransactionType());"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "        assertTrue(transactionContext.getMonth().equals(new Month(DateBuilder.DEFAULT_MONTH)));"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "        assertTrue(transactionContext.getYear().equals(new Year(DateBuilder.DEFAULT_YEAR)));"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "weiyang13"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "    public void constructor_nullArguments_throwsNullPointerException() {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e new TransactionContext(null));"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "                new TransactionContext(null, new Year(\"2019\"), Optional.empty(), Optional.empty()));"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "                new TransactionContext(new Month(\"1\"), null, Optional.empty(), Optional.empty()));"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "                new TransactionContext(new Month(\"1\"), new Year(\"2019\"), null, Optional.empty()));"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "                new TransactionContext(new Month(\"1\"), new Year(\"2019\"), Optional.empty(), null));"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "weiyang13"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "    public void getCategory_emptyCategory() {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "        TransactionContext transactionContext \u003d new TransactionContext(Optional.of(new TransactionBuilder().build()));"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "        assertTrue(transactionContext.getCategory().equals(Category.CATEGORY_DEFAULT));"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "weiyang13"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "    public void getTransactionType_emptyTransactionType() {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "        TransactionContext transactionContext \u003d new TransactionContext(Optional.of(new TransactionBuilder().build()));"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "        assertTrue(transactionContext.getTransactionType().equals(TransactionType.TRANSACTION_TYPE_DEFAULT));"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "weiyang13"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "    public void getAccommodatingContext() {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "        TransactionContext transactionContext \u003d new TransactionContext(new Month(\"1\"), new Year(\"2000\"),"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "                Optional.of(new Category(\"food\")), Optional.of(new TransactionType(\"in\")));"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "        TransactionContext newTransactionContext \u003d transactionContext.getAccommodatingContext(new TransactionBuilder()"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "                .withDate(new DateBuilder()"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "                        .withMonth(\"5\")"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "                        .withYear(\"3000\")"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "                        .build())"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "                .withCategory(\"transportation\")"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "                .withTransactionType(\"exp\")"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "                .build());"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "        assertTrue(newTransactionContext.getMonth().equals(new Month(\"5\")));"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "        assertTrue(newTransactionContext.getYear().equals(new Year(\"3000\")));"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "        assertTrue(newTransactionContext.getCategory().equals(Category.CATEGORY_DEFAULT));"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "        assertTrue(newTransactionContext.getTransactionType().equals(TransactionType.TRANSACTION_TYPE_DEFAULT));"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "    }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "weiyang13": 71
    }
  },
  {
    "path": "src/test/java/seedu/ichifund/model/date/DateTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "package seedu.ichifund.model.date;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "weiyang13"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "import static seedu.ichifund.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "weiyang13"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "weiyang13"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "public class DateTest {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "    public void constructor_nullArguments_throwsNullPointerException() {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e new Date(null, new Month(\"12\"), new Year(\"2009\")));"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e new Date(new Day(\"28\"), null, new Year(\"2009\")));"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e new Date(new Day(\"28\"), new Month(\"12\"), null));"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "    }"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "weiyang13"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "    public void isValidDate() {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "        // invalid: February in non-leap years"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "        assertFalse(Date.isValidDate(new Day(\"29\"), new Month(\"2\"), new Year(\"2005\")));"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "        assertFalse(Date.isValidDate(new Day(\"29\"), new Month(\"2\"), new Year(\"2100\")));"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "weiyang13"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "        // invalid: 31 days in months with 30 days"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "        assertFalse(Date.isValidDate(new Day(\"31\"), new Month(\"4\"), new Year(\"2219\")));"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "        assertFalse(Date.isValidDate(new Day(\"31\"), new Month(\"9\"), new Year(\"9999\")));"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "weiyang13"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "        // valid: February in leap years"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "        assertTrue(Date.isValidDate(new Day(\"29\"), new Month(\"2\"), new Year(\"2000\")));"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "        assertTrue(Date.isValidDate(new Day(\"29\"), new Month(\"2\"), new Year(\"2400\")));"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "        assertTrue(Date.isValidDate(new Day(\"29\"), new Month(\"2\"), new Year(\"2008\")));"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "weiyang13"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "        // valid: months with 31 days"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "        assertTrue(Date.isValidDate(new Day(\"31\"), new Month(\"1\"), new Year(\"5487\")));"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "        assertTrue(Date.isValidDate(new Day(\"31\"), new Month(\"10\"), new Year(\"6283\")));"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "weiyang13"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "        // valid: months with 30 days"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "        assertTrue(Date.isValidDate(new Day(\"30\"), new Month(\"6\"), new Year(\"2219\")));"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "        assertTrue(Date.isValidDate(new Day(\"30\"), new Month(\"11\"), new Year(\"9999\")));"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "weiyang13"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "        // valid: other cases"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "        assertTrue(Date.isValidDate(new Day(\"1\"), new Month(\"7\"), new Year(\"3489\")));"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "        assertTrue(Date.isValidDate(new Day(\"15\"), new Month(\"5\"), new Year(\"3102\")));"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "        assertTrue(Date.isValidDate(new Day(\"27\"), new Month(\"12\"), new Year(\"8409\")));"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "        assertTrue(Date.isValidDate(new Day(\"7\"), new Month(\"3\"), new Year(\"8293\")));"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "weiyang13"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "    public void compareTo() {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "        assertTrue(new Date(new Day(\"1\"), new Month(\"12\"), new Year(\"2019\"))"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "                .compareTo(new Date(new Day(\"5\"), new Month(\"10\"), new Year(\"3000\"))) \u003e 0);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "    }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "weiyang13": 52
    }
  },
  {
    "path": "src/test/java/seedu/ichifund/model/date/DayTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "package seedu.ichifund.model.date;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "weiyang13"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "import static seedu.ichifund.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "weiyang13"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "weiyang13"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "public class DayTest {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "    public void constructor_null_throwsNullPointerException() {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e new Day(null));"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "    }"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "weiyang13"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "    public void constructor_invalidDay_throwsIllegalArgumentException() {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "        String invalidDay \u003d \"\";"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "        assertThrows(IllegalArgumentException.class, () -\u003e new Day(invalidDay));"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "    }"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "weiyang13"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "    public void isValidDay() {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "        // null day"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e Day.isValidDay(null));"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "weiyang13"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "        // invalid day"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "        assertFalse(Day.isValidDay(\"32\"));"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "        assertFalse(Day.isValidDay(\"0\"));"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "        assertFalse(Day.isValidDay(\"\"));"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "        assertFalse(Day.isValidDay(\" \"));"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "weiyang13"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "weiyang13"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "        assertTrue(Day.isValidDay(\"1\"));"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "        assertTrue(Day.isValidDay(\"31\"));"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "        assertTrue(Day.isValidDay(\"15\"));"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "weiyang13"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "    public void compareTo() {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "        assertTrue(new Day(\"12\").compareTo(new Day(\"6\")) \u003c 0);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "weiyang13": 42
    }
  },
  {
    "path": "src/test/java/seedu/ichifund/model/date/MonthTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "package seedu.ichifund.model.date;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "weiyang13"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "import static seedu.ichifund.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "weiyang13"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "weiyang13"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "public class MonthTest {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "    public void constructor_null_throwsNullPointerException() {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e new Month(null));"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "    }"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "weiyang13"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "    public void constructor_invalidMonth_throwsIllegalArgumentException() {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "        String invalidMonth \u003d \"\";"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "        assertThrows(IllegalArgumentException.class, () -\u003e new Month(invalidMonth));"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "    }"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "weiyang13"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "    public void isValidMonth() {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "        // null month"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e Month.isValidMonth(null));"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "weiyang13"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "        // invalid month"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "        assertFalse(Month.isValidMonth(\"13\"));"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "        assertFalse(Month.isValidMonth(\"0\"));"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "        assertFalse(Month.isValidMonth(\"\"));"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "        assertFalse(Month.isValidMonth(\" \"));"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "        assertFalse(Month.isValidMonth(\"Jan\"));"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "weiyang13"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "weiyang13"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "        assertTrue(Month.isValidMonth(\"1\"));"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "        assertTrue(Month.isValidMonth(\"12\"));"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "        assertTrue(Month.isValidMonth(\"6\"));"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "weiyang13"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "    public void has30Days() {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "        assertFalse(new Month(\"1\").has30Days());"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "        assertFalse(new Month(\"2\").has30Days());"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "        assertFalse(new Month(\"12\").has30Days());"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "weiyang13"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "        assertTrue(new Month(\"9\").has30Days());"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "        assertTrue(new Month(\"4\").has30Days());"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "        assertTrue(new Month(\"11\").has30Days());"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "weiyang13"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "    public void has31Days() {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "        assertFalse(new Month(\"2\").has31Days());"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "        assertFalse(new Month(\"4\").has31Days());"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "        assertFalse(new Month(\"6\").has31Days());"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "weiyang13"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "        assertTrue(new Month(\"1\").has31Days());"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "        assertTrue(new Month(\"8\").has31Days());"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "        assertTrue(new Month(\"12\").has31Days());"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "    }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "weiyang13"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "    public void compareTo() {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "        assertTrue(new Month(\"12\").compareTo(new Month(\"6\")) \u003c 0);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "    }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "weiyang13": 65
    }
  },
  {
    "path": "src/test/java/seedu/ichifund/model/date/YearTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "package seedu.ichifund.model.date;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "weiyang13"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "import static seedu.ichifund.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "weiyang13"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "weiyang13"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "public class YearTest {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "    public void constructor_null_throwsNullPointerException() {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e new Year(null));"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "    }"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "weiyang13"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "    public void constructor_invalidYear_throwsIllegalArgumentException() {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "        String invalidYear \u003d \"\";"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "        assertThrows(IllegalArgumentException.class, () -\u003e new Year(invalidYear));"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "    }"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "weiyang13"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "    public void isValidYear() {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "        // null year"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e Year.isValidYear(null));"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "weiyang13"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "        // invalid year"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "        assertFalse(Year.isValidYear(\"1999\"));"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "        assertFalse(Year.isValidYear(\"10000\"));"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "        assertFalse(Year.isValidYear(\"999\"));"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "        assertFalse(Year.isValidYear(\"\"));"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "        assertFalse(Year.isValidYear(\" \"));"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "        assertFalse(Year.isValidYear(\"abcd\"));"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "weiyang13"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "weiyang13"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "        assertTrue(Year.isValidYear(\"2000\"));"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "        assertTrue(Year.isValidYear(\"9999\"));"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "        assertTrue(Year.isValidYear(\"3487\"));"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "weiyang13"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "    public void isLeapYear() {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "        assertFalse(new Year(\"2100\").isLeapYear());"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "        assertFalse(new Year(\"2005\").isLeapYear());"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "        assertFalse(new Year(\"2009\").isLeapYear());"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "weiyang13"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "        assertTrue(new Year(\"2000\").isLeapYear());"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "        assertTrue(new Year(\"2400\").isLeapYear());"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "        assertTrue(new Year(\"2008\").isLeapYear());"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "    }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "weiyang13"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "    public void compareTo() {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "        assertTrue(new Year(\"2008\").compareTo(new Year(\"2007\")) \u003c 0);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "    }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "weiyang13": 55
    }
  },
  {
    "path": "src/test/java/seedu/ichifund/model/person/NameContainsKeywordsPredicateTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "nexolute"
        },
        "content": "package seedu.ichifund.model.person;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Collections;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "nexolute"
        },
        "content": "import seedu.ichifund.testutil.PersonBuilder;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "public class NameContainsKeywordsPredicateTest {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "        List\u003cString\u003e firstPredicateKeywordList \u003d Collections.singletonList(\"first\");"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "        List\u003cString\u003e secondPredicateKeywordList \u003d Arrays.asList(\"first\", \"second\");"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "        NameContainsKeywordsPredicate firstPredicate \u003d new NameContainsKeywordsPredicate(firstPredicateKeywordList);"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "        NameContainsKeywordsPredicate secondPredicate \u003d new NameContainsKeywordsPredicate(secondPredicateKeywordList);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(firstPredicate.equals(firstPredicate));"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        // same values -\u003e returns true"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        NameContainsKeywordsPredicate firstPredicateCopy \u003d new NameContainsKeywordsPredicate(firstPredicateKeywordList);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(firstPredicate.equals(firstPredicateCopy));"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        // different types -\u003e returns false"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(firstPredicate.equals(1));"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(firstPredicate.equals(null));"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        // different person -\u003e returns false"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(firstPredicate.equals(secondPredicate));"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    public void test_nameContainsKeywords_returnsTrue() {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        // One keyword"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        NameContainsKeywordsPredicate predicate \u003d new NameContainsKeywordsPredicate(Collections.singletonList(\"Alice\"));"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(predicate.test(new PersonBuilder().withName(\"Alice Bob\").build()));"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        // Multiple keywords"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        predicate \u003d new NameContainsKeywordsPredicate(Arrays.asList(\"Alice\", \"Bob\"));"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(predicate.test(new PersonBuilder().withName(\"Alice Bob\").build()));"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        // Only one matching keyword"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        predicate \u003d new NameContainsKeywordsPredicate(Arrays.asList(\"Bob\", \"Carol\"));"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(predicate.test(new PersonBuilder().withName(\"Alice Carol\").build()));"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "        // Mixed-case keywords"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "        predicate \u003d new NameContainsKeywordsPredicate(Arrays.asList(\"aLIce\", \"bOB\"));"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(predicate.test(new PersonBuilder().withName(\"Alice Bob\").build()));"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    public void test_nameDoesNotContainKeywords_returnsFalse() {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "        // Zero keywords"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "        NameContainsKeywordsPredicate predicate \u003d new NameContainsKeywordsPredicate(Collections.emptyList());"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(predicate.test(new PersonBuilder().withName(\"Alice\").build()));"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "        // Non-matching keyword"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "        predicate \u003d new NameContainsKeywordsPredicate(Arrays.asList(\"Carol\"));"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(predicate.test(new PersonBuilder().withName(\"Alice Bob\").build()));"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "        // Keywords match phone, email and address, but does not match name"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "        predicate \u003d new NameContainsKeywordsPredicate(Arrays.asList(\"12345\", \"alice@email.com\", \"Main\", \"Street\"));"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(predicate.test(new PersonBuilder().withName(\"Alice\").withPhone(\"12345\")"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "                .withEmail(\"alice@email.com\").withAddress(\"Main Street\").build()));"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "nexolute": 2,
      "-": 73
    }
  },
  {
    "path": "src/test/java/seedu/ichifund/model/person/PersonTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "nexolute"
        },
        "content": "package seedu.ichifund.model.person;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "nexolute"
        },
        "content": "import static seedu.ichifund.logic.commands.CommandTestUtil.VALID_ADDRESS_BOB;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "nexolute"
        },
        "content": "import static seedu.ichifund.logic.commands.CommandTestUtil.VALID_EMAIL_BOB;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "nexolute"
        },
        "content": "import static seedu.ichifund.logic.commands.CommandTestUtil.VALID_NAME_BOB;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "nexolute"
        },
        "content": "import static seedu.ichifund.logic.commands.CommandTestUtil.VALID_PHONE_BOB;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "nexolute"
        },
        "content": "import static seedu.ichifund.logic.commands.CommandTestUtil.VALID_TAG_HUSBAND;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "nexolute"
        },
        "content": "import static seedu.ichifund.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "nexolute"
        },
        "content": "import static seedu.ichifund.testutil.TypicalFundBook.PERSON_ALICE;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "nexolute"
        },
        "content": "import static seedu.ichifund.testutil.TypicalFundBook.PERSON_BOB;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "nexolute"
        },
        "content": "import seedu.ichifund.testutil.PersonBuilder;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "public class PersonTest {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    public void asObservableList_modifyList_throwsUnsupportedOperationException() {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "        Person person \u003d new PersonBuilder().build();"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(UnsupportedOperationException.class, () -\u003e person.getTags().remove(0));"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    public void isSamePerson() {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "nexolute"
        },
        "content": "        assertTrue(PERSON_ALICE.isSamePerson(PERSON_ALICE));"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "nexolute"
        },
        "content": "        assertFalse(PERSON_ALICE.isSamePerson(null));"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        // different phone and email -\u003e returns false"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "nexolute"
        },
        "content": "        Person editedAlice \u003d new PersonBuilder(PERSON_ALICE).withPhone(VALID_PHONE_BOB)"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "nexolute"
        },
        "content": "                .withEmail(VALID_EMAIL_BOB).build();"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "nexolute"
        },
        "content": "        assertFalse(PERSON_ALICE.isSamePerson(editedAlice));"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        // different name -\u003e returns false"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "nexolute"
        },
        "content": "        editedAlice \u003d new PersonBuilder(PERSON_ALICE).withName(VALID_NAME_BOB).build();"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "nexolute"
        },
        "content": "        assertFalse(PERSON_ALICE.isSamePerson(editedAlice));"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        // same name, same phone, different attributes -\u003e returns true"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "nexolute"
        },
        "content": "        editedAlice \u003d new PersonBuilder(PERSON_ALICE).withEmail(VALID_EMAIL_BOB).withAddress(VALID_ADDRESS_BOB)"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "                .withTags(VALID_TAG_HUSBAND).build();"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "nexolute"
        },
        "content": "        assertTrue(PERSON_ALICE.isSamePerson(editedAlice));"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        // same name, same email, different attributes -\u003e returns true"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "nexolute"
        },
        "content": "        editedAlice \u003d new PersonBuilder(PERSON_ALICE).withPhone(VALID_PHONE_BOB).withAddress(VALID_ADDRESS_BOB)"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "                .withTags(VALID_TAG_HUSBAND).build();"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "nexolute"
        },
        "content": "        assertTrue(PERSON_ALICE.isSamePerson(editedAlice));"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "        // same name, same phone, same email, different attributes -\u003e returns true"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "nexolute"
        },
        "content": "        editedAlice \u003d new PersonBuilder(PERSON_ALICE).withAddress(VALID_ADDRESS_BOB)"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "nexolute"
        },
        "content": "                .withTags(VALID_TAG_HUSBAND).build();"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "nexolute"
        },
        "content": "        assertTrue(PERSON_ALICE.isSamePerson(editedAlice));"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "        // same values -\u003e returns true"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "nexolute"
        },
        "content": "        Person aliceCopy \u003d new PersonBuilder(PERSON_ALICE).build();"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "nexolute"
        },
        "content": "        assertTrue(PERSON_ALICE.equals(aliceCopy));"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "nexolute"
        },
        "content": "        assertTrue(PERSON_ALICE.equals(PERSON_ALICE));"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "nexolute"
        },
        "content": "        assertFalse(PERSON_ALICE.equals(null));"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "        // different type -\u003e returns false"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "nexolute"
        },
        "content": "        assertFalse(PERSON_ALICE.equals(5));"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "        // different person -\u003e returns false"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "nexolute"
        },
        "content": "        assertFalse(PERSON_ALICE.equals(PERSON_BOB));"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "        // different name -\u003e returns false"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "nexolute"
        },
        "content": "        Person editedAlice \u003d new PersonBuilder(PERSON_ALICE).withName(VALID_NAME_BOB).build();"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "nexolute"
        },
        "content": "        assertFalse(PERSON_ALICE.equals(editedAlice));"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "        // different phone -\u003e returns false"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "nexolute"
        },
        "content": "        editedAlice \u003d new PersonBuilder(PERSON_ALICE).withPhone(VALID_PHONE_BOB).build();"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "nexolute"
        },
        "content": "        assertFalse(PERSON_ALICE.equals(editedAlice));"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "        // different email -\u003e returns false"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "nexolute"
        },
        "content": "        editedAlice \u003d new PersonBuilder(PERSON_ALICE).withEmail(VALID_EMAIL_BOB).build();"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "nexolute"
        },
        "content": "        assertFalse(PERSON_ALICE.equals(editedAlice));"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "        // different address -\u003e returns false"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "nexolute"
        },
        "content": "        editedAlice \u003d new PersonBuilder(PERSON_ALICE).withAddress(VALID_ADDRESS_BOB).build();"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "nexolute"
        },
        "content": "        assertFalse(PERSON_ALICE.equals(editedAlice));"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "        // different tags -\u003e returns false"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "nexolute"
        },
        "content": "        editedAlice \u003d new PersonBuilder(PERSON_ALICE).withTags(VALID_TAG_HUSBAND).build();"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "nexolute"
        },
        "content": "        assertFalse(PERSON_ALICE.equals(editedAlice));"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "nexolute": 40,
      "-": 57
    }
  },
  {
    "path": "src/test/java/seedu/ichifund/model/person/UniquePersonListTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "nexolute"
        },
        "content": "package seedu.ichifund.model.person;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "nexolute"
        },
        "content": "import static seedu.ichifund.logic.commands.CommandTestUtil.VALID_ADDRESS_BOB;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "nexolute"
        },
        "content": "import static seedu.ichifund.logic.commands.CommandTestUtil.VALID_TAG_HUSBAND;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "nexolute"
        },
        "content": "import static seedu.ichifund.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "nexolute"
        },
        "content": "import static seedu.ichifund.testutil.TypicalFundBook.PERSON_ALICE;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "nexolute"
        },
        "content": "import static seedu.ichifund.testutil.TypicalFundBook.PERSON_BOB;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Collections;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "nexolute"
        },
        "content": "import seedu.ichifund.model.person.exceptions.DuplicatePersonException;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "nexolute"
        },
        "content": "import seedu.ichifund.model.person.exceptions.PersonNotFoundException;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "nexolute"
        },
        "content": "import seedu.ichifund.testutil.PersonBuilder;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "public class UniquePersonListTest {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    private final UniquePersonList uniquePersonList \u003d new UniquePersonList();"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    public void contains_nullPerson_throwsNullPointerException() {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e uniquePersonList.contains(null));"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    public void contains_personNotInList_returnsFalse() {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "nexolute"
        },
        "content": "        assertFalse(uniquePersonList.contains(PERSON_ALICE));"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    public void contains_personInList_returnsTrue() {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "nexolute"
        },
        "content": "        uniquePersonList.add(PERSON_ALICE);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "nexolute"
        },
        "content": "        assertTrue(uniquePersonList.contains(PERSON_ALICE));"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    public void contains_personWithSameIdentityFieldsInList_returnsTrue() {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "nexolute"
        },
        "content": "        uniquePersonList.add(PERSON_ALICE);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "nexolute"
        },
        "content": "        Person editedAlice \u003d new PersonBuilder(PERSON_ALICE).withAddress(VALID_ADDRESS_BOB).withTags(VALID_TAG_HUSBAND)"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "                .build();"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(uniquePersonList.contains(editedAlice));"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    public void add_nullPerson_throwsNullPointerException() {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e uniquePersonList.add(null));"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    public void add_duplicatePerson_throwsDuplicatePersonException() {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "nexolute"
        },
        "content": "        uniquePersonList.add(PERSON_ALICE);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "nexolute"
        },
        "content": "        assertThrows(DuplicatePersonException.class, () -\u003e uniquePersonList.add(PERSON_ALICE));"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setPerson_nullTargetPerson_throwsNullPointerException() {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "nexolute"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e uniquePersonList.setPerson(null, PERSON_ALICE));"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setPerson_nullEditedPerson_throwsNullPointerException() {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "nexolute"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e uniquePersonList.setPerson(PERSON_ALICE, null));"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setPerson_targetPersonNotInList_throwsPersonNotFoundException() {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "nexolute"
        },
        "content": "        assertThrows(PersonNotFoundException.class, () -\u003e uniquePersonList.setPerson(PERSON_ALICE, PERSON_ALICE));"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setPerson_editedPersonIsSamePerson_success() {"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "nexolute"
        },
        "content": "        uniquePersonList.add(PERSON_ALICE);"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "nexolute"
        },
        "content": "        uniquePersonList.setPerson(PERSON_ALICE, PERSON_ALICE);"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "        UniquePersonList expectedUniquePersonList \u003d new UniquePersonList();"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "nexolute"
        },
        "content": "        expectedUniquePersonList.add(PERSON_ALICE);"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expectedUniquePersonList, uniquePersonList);"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setPerson_editedPersonHasSameIdentity_success() {"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "nexolute"
        },
        "content": "        uniquePersonList.add(PERSON_ALICE);"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "nexolute"
        },
        "content": "        Person editedAlice \u003d new PersonBuilder(PERSON_ALICE).withAddress(VALID_ADDRESS_BOB).withTags(VALID_TAG_HUSBAND)"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "                .build();"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "nexolute"
        },
        "content": "        uniquePersonList.setPerson(PERSON_ALICE, editedAlice);"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "        UniquePersonList expectedUniquePersonList \u003d new UniquePersonList();"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "        expectedUniquePersonList.add(editedAlice);"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expectedUniquePersonList, uniquePersonList);"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setPerson_editedPersonHasDifferentIdentity_success() {"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "nexolute"
        },
        "content": "        uniquePersonList.add(PERSON_ALICE);"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "nexolute"
        },
        "content": "        uniquePersonList.setPerson(PERSON_ALICE, PERSON_BOB);"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "        UniquePersonList expectedUniquePersonList \u003d new UniquePersonList();"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "nexolute"
        },
        "content": "        expectedUniquePersonList.add(PERSON_BOB);"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expectedUniquePersonList, uniquePersonList);"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setPerson_editedPersonHasNonUniqueIdentity_throwsDuplicatePersonException() {"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "nexolute"
        },
        "content": "        uniquePersonList.add(PERSON_ALICE);"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "nexolute"
        },
        "content": "        uniquePersonList.add(PERSON_BOB);"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "nexolute"
        },
        "content": "        assertThrows(DuplicatePersonException.class, () -\u003e uniquePersonList.setPerson(PERSON_ALICE, PERSON_BOB));"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "    public void remove_nullPerson_throwsNullPointerException() {"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e uniquePersonList.remove(null));"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "    public void remove_personDoesNotExist_throwsPersonNotFoundException() {"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "nexolute"
        },
        "content": "        assertThrows(PersonNotFoundException.class, () -\u003e uniquePersonList.remove(PERSON_ALICE));"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "    public void remove_existingPerson_removesPerson() {"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "nexolute"
        },
        "content": "        uniquePersonList.add(PERSON_ALICE);"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "nexolute"
        },
        "content": "        uniquePersonList.remove(PERSON_ALICE);"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "        UniquePersonList expectedUniquePersonList \u003d new UniquePersonList();"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expectedUniquePersonList, uniquePersonList);"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setPersons_nullUniquePersonList_throwsNullPointerException() {"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e uniquePersonList.setPersons((UniquePersonList) null));"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setPersons_uniquePersonList_replacesOwnListWithProvidedUniquePersonList() {"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "nexolute"
        },
        "content": "        uniquePersonList.add(PERSON_ALICE);"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": "        UniquePersonList expectedUniquePersonList \u003d new UniquePersonList();"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "nexolute"
        },
        "content": "        expectedUniquePersonList.add(PERSON_BOB);"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": "        uniquePersonList.setPersons(expectedUniquePersonList);"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expectedUniquePersonList, uniquePersonList);"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setPersons_nullList_throwsNullPointerException() {"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e uniquePersonList.setPersons((List\u003cPerson\u003e) null));"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setPersons_list_replacesOwnListWithProvidedList() {"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "nexolute"
        },
        "content": "        uniquePersonList.add(PERSON_ALICE);"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "nexolute"
        },
        "content": "        List\u003cPerson\u003e personList \u003d Collections.singletonList(PERSON_BOB);"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": "        uniquePersonList.setPersons(personList);"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "-"
        },
        "content": "        UniquePersonList expectedUniquePersonList \u003d new UniquePersonList();"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "nexolute"
        },
        "content": "        expectedUniquePersonList.add(PERSON_BOB);"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expectedUniquePersonList, uniquePersonList);"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setPersons_listWithDuplicatePersons_throwsDuplicatePersonException() {"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "nexolute"
        },
        "content": "        List\u003cPerson\u003e listWithDuplicatePersons \u003d Arrays.asList(PERSON_ALICE, PERSON_ALICE);"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(DuplicatePersonException.class, () -\u003e uniquePersonList.setPersons(listWithDuplicatePersons));"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "-"
        },
        "content": "    public void asUnmodifiableObservableList_modifyList_throwsUnsupportedOperationException() {"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(UnsupportedOperationException.class, ()"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "-"
        },
        "content": "            -\u003e uniquePersonList.asUnmodifiableObservableList().remove(0));"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "nexolute": 40,
      "-": 130
    }
  },
  {
    "path": "src/test/java/seedu/ichifund/model/tag/TagTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "nexolute"
        },
        "content": "package seedu.ichifund.model.tag;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "nexolute"
        },
        "content": "import static seedu.ichifund.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "public class TagTest {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "    public void constructor_null_throwsNullPointerException() {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e new Tag(null));"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    public void constructor_invalidTagName_throwsIllegalArgumentException() {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "        String invalidTagName \u003d \"\";"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(IllegalArgumentException.class, () -\u003e new Tag(invalidTagName));"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    public void isValidTagName() {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "        // null tag name"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e Tag.isValidTagName(null));"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "nexolute": 2,
      "-": 24
    }
  },
  {
    "path": "src/test/java/seedu/ichifund/model/transaction/CategoryTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "package seedu.ichifund.model.transaction;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "weiyang13"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "import static seedu.ichifund.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "weiyang13"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "weiyang13"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "public class CategoryTest {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "    public void constructor_null_throwsNullPointerException() {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e new Category(null));"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "    }"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "weiyang13"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "    public void constructor_invalidName_throwsIllegalArgumentException() {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "        String invalidDescription \u003d \"\";"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "        assertThrows(IllegalArgumentException.class, () -\u003e new Category(invalidDescription));"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "    }"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "weiyang13"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "    public void isValidCategory() {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "        // null category"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e Category.isValidCategory(null));"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "weiyang13"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "        // invalid category"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "        assertFalse(Category.isValidCategory(\"\")); // empty string"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "        assertFalse(Category.isValidCategory(\" \")); // spaces only"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "        assertFalse(Category.isValidCategory(\"^\")); // only non-alphanumeric characters"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "        assertFalse(Category.isValidCategory(\"food*\")); // contains non-alphanumeric characters"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "weiyang13"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "        // valid category"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "        assertTrue(Category.isValidCategory(\"food\")); // alphabets only"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "        assertTrue(Category.isValidCategory(\"000\")); // numbers only"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "        assertTrue(Category.isValidCategory(\"food1\")); // alphanumeric characters"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "        assertTrue(Category.isValidCategory(\"Breakfast with Tiffany\")); // with capital letters"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "        assertTrue(Category.isValidCategory(\"Breakfast with Tiffany because Sabrina disappeared\"));"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "weiyang13"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "    public void testEquals() {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "        // case-insensitivity"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "        assertTrue(new Category(\"food\").equals(new Category(\"FOOD\")));"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "weiyang13": 45
    }
  },
  {
    "path": "src/test/java/seedu/ichifund/model/transaction/TransactionTypeTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "package seedu.ichifund.model.transaction;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "weiyang13"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "import static seedu.ichifund.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "weiyang13"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "weiyang13"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "public class TransactionTypeTest {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "    public void constructor_null_throwsNullPointerException() {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e new TransactionType(null));"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "    }"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "weiyang13"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "    public void constructor_invalidTransactionType_throwsIllegalArgumentException() {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "        String invalidTransactionType \u003d \"\";"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "        assertThrows(IllegalArgumentException.class, () -\u003e new TransactionType(invalidTransactionType));"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "    }"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "weiyang13"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "    public void isValidTransactionType() {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "        // null transaction type"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e TransactionType.isValidTransactionType(null));"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "weiyang13"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "        // invalid transaction type"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "        assertFalse(TransactionType.isValidTransactionType(\"\")); // empty string"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "        assertFalse(TransactionType.isValidTransactionType(\" \")); // spaces only"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "        assertFalse(TransactionType.isValidTransactionType(\"^\")); // only non-alphanumeric characters"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "        assertFalse(TransactionType.isValidTransactionType(\"dinner*\")); // contains non-alphanumeric characters"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "        assertFalse(TransactionType.isValidTransactionType(\"inc\")); // characters only, invalid string"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "weiyang13"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "        // valid transaction type"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "        assertTrue(TransactionType.isValidTransactionType(\"in\"));"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "        assertTrue(TransactionType.isValidTransactionType(\"exp\"));"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "weiyang13": 37
    }
  },
  {
    "path": "src/test/java/seedu/ichifund/storage/JsonAdaptedPersonTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "nexolute"
        },
        "content": "package seedu.ichifund.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "nexolute"
        },
        "content": "import static seedu.ichifund.storage.JsonAdaptedPerson.MISSING_FIELD_MESSAGE_FORMAT;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "nexolute"
        },
        "content": "import static seedu.ichifund.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "nexolute"
        },
        "content": "import static seedu.ichifund.testutil.TypicalFundBook.PERSON_BENSON;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.stream.Collectors;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "nexolute"
        },
        "content": "import seedu.ichifund.commons.exceptions.IllegalValueException;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "nexolute"
        },
        "content": "import seedu.ichifund.model.person.Address;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "nexolute"
        },
        "content": "import seedu.ichifund.model.person.Email;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "nexolute"
        },
        "content": "import seedu.ichifund.model.person.Name;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "nexolute"
        },
        "content": "import seedu.ichifund.model.person.Phone;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "public class JsonAdaptedPersonTest {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String INVALID_NAME \u003d \"R@chel\";"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String INVALID_PHONE \u003d \"+651234\";"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String INVALID_ADDRESS \u003d \" \";"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String INVALID_EMAIL \u003d \"example.com\";"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String INVALID_TAG \u003d \"#friend\";"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "nexolute"
        },
        "content": "    private static final String VALID_NAME \u003d PERSON_BENSON.getName().toString();"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "nexolute"
        },
        "content": "    private static final String VALID_PHONE \u003d PERSON_BENSON.getPhone().toString();"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "nexolute"
        },
        "content": "    private static final String VALID_EMAIL \u003d PERSON_BENSON.getEmail().toString();"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "nexolute"
        },
        "content": "    private static final String VALID_ADDRESS \u003d PERSON_BENSON.getAddress().toString();"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "nexolute"
        },
        "content": "    private static final List\u003cJsonAdaptedTag\u003e VALID_TAGS \u003d PERSON_BENSON.getTags().stream()"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "            .map(JsonAdaptedTag::new)"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "            .collect(Collectors.toList());"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    public void toModelType_validPersonDetails_returnsPerson() throws Exception {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "nexolute"
        },
        "content": "        JsonAdaptedPerson person \u003d new JsonAdaptedPerson(PERSON_BENSON);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "nexolute"
        },
        "content": "        assertEquals(PERSON_BENSON, person.toModelType());"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    public void toModelType_invalidName_throwsIllegalValueException() {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        JsonAdaptedPerson person \u003d"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "                new JsonAdaptedPerson(INVALID_NAME, VALID_PHONE, VALID_EMAIL, VALID_ADDRESS, VALID_TAGS);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        String expectedMessage \u003d Name.MESSAGE_CONSTRAINTS;"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(IllegalValueException.class, expectedMessage, person::toModelType);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    public void toModelType_nullName_throwsIllegalValueException() {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        JsonAdaptedPerson person \u003d new JsonAdaptedPerson(null, VALID_PHONE, VALID_EMAIL, VALID_ADDRESS, VALID_TAGS);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        String expectedMessage \u003d String.format(MISSING_FIELD_MESSAGE_FORMAT, Name.class.getSimpleName());"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(IllegalValueException.class, expectedMessage, person::toModelType);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    public void toModelType_invalidPhone_throwsIllegalValueException() {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "        JsonAdaptedPerson person \u003d"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "                new JsonAdaptedPerson(VALID_NAME, INVALID_PHONE, VALID_EMAIL, VALID_ADDRESS, VALID_TAGS);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "        String expectedMessage \u003d Phone.MESSAGE_CONSTRAINTS;"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(IllegalValueException.class, expectedMessage, person::toModelType);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "    public void toModelType_nullPhone_throwsIllegalValueException() {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "        JsonAdaptedPerson person \u003d new JsonAdaptedPerson(VALID_NAME, null, VALID_EMAIL, VALID_ADDRESS, VALID_TAGS);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "        String expectedMessage \u003d String.format(MISSING_FIELD_MESSAGE_FORMAT, Phone.class.getSimpleName());"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(IllegalValueException.class, expectedMessage, person::toModelType);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "    public void toModelType_invalidEmail_throwsIllegalValueException() {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "        JsonAdaptedPerson person \u003d"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "                new JsonAdaptedPerson(VALID_NAME, VALID_PHONE, INVALID_EMAIL, VALID_ADDRESS, VALID_TAGS);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "        String expectedMessage \u003d Email.MESSAGE_CONSTRAINTS;"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(IllegalValueException.class, expectedMessage, person::toModelType);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "    public void toModelType_nullEmail_throwsIllegalValueException() {"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "        JsonAdaptedPerson person \u003d new JsonAdaptedPerson(VALID_NAME, VALID_PHONE, null, VALID_ADDRESS, VALID_TAGS);"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "        String expectedMessage \u003d String.format(MISSING_FIELD_MESSAGE_FORMAT, Email.class.getSimpleName());"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(IllegalValueException.class, expectedMessage, person::toModelType);"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "    public void toModelType_invalidAddress_throwsIllegalValueException() {"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "        JsonAdaptedPerson person \u003d"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "                new JsonAdaptedPerson(VALID_NAME, VALID_PHONE, VALID_EMAIL, INVALID_ADDRESS, VALID_TAGS);"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "        String expectedMessage \u003d Address.MESSAGE_CONSTRAINTS;"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(IllegalValueException.class, expectedMessage, person::toModelType);"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "    public void toModelType_nullAddress_throwsIllegalValueException() {"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "        JsonAdaptedPerson person \u003d new JsonAdaptedPerson(VALID_NAME, VALID_PHONE, VALID_EMAIL, null, VALID_TAGS);"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "        String expectedMessage \u003d String.format(MISSING_FIELD_MESSAGE_FORMAT, Address.class.getSimpleName());"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(IllegalValueException.class, expectedMessage, person::toModelType);"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "    public void toModelType_invalidTags_throwsIllegalValueException() {"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "        List\u003cJsonAdaptedTag\u003e invalidTags \u003d new ArrayList\u003c\u003e(VALID_TAGS);"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "        invalidTags.add(new JsonAdaptedTag(INVALID_TAG));"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "        JsonAdaptedPerson person \u003d"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "                new JsonAdaptedPerson(VALID_NAME, VALID_PHONE, VALID_EMAIL, VALID_ADDRESS, invalidTags);"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(IllegalValueException.class, person::toModelType);"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "nexolute": 16,
      "-": 94
    }
  },
  {
    "path": "src/test/java/seedu/ichifund/storage/JsonFundBookStorageTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "nexolute"
        },
        "content": "package seedu.ichifund.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "nexolute"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "nexolute"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "nexolute"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "nexolute"
        },
        "content": "import static seedu.ichifund.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "nexolute"
        },
        "content": "import static seedu.ichifund.testutil.TypicalFundBook.PERSON_ALICE;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "nexolute"
        },
        "content": "import static seedu.ichifund.testutil.TypicalFundBook.PERSON_HOON;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "nexolute"
        },
        "content": "import static seedu.ichifund.testutil.TypicalFundBook.PERSON_IDA;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "nexolute"
        },
        "content": "import static seedu.ichifund.testutil.TypicalFundBook.getTypicalFundBook;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "nexolute"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "nexolute"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "nexolute"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "nexolute"
        },
        "content": "import java.nio.file.Paths;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "nexolute"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "nexolute"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "nexolute"
        },
        "content": "import org.junit.jupiter.api.io.TempDir;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "nexolute"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "nexolute"
        },
        "content": "import seedu.ichifund.commons.exceptions.DataConversionException;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "nexolute"
        },
        "content": "import seedu.ichifund.model.FundBook;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "nexolute"
        },
        "content": "import seedu.ichifund.model.ReadOnlyFundBook;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "nexolute"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "nexolute"
        },
        "content": "public class JsonFundBookStorageTest {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "nexolute"
        },
        "content": "    private static final Path TEST_DATA_FOLDER \u003d Paths.get(\"src\", \"test\", \"data\", \"JsonFundBookStorageTest\");"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "nexolute"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "nexolute"
        },
        "content": "    @TempDir"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "nexolute"
        },
        "content": "    public Path testFolder;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "nexolute"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "nexolute"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "nexolute"
        },
        "content": "    public void readFundBook_nullFilePath_throwsNullPointerException() {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "nexolute"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e readFundBook(null));"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "nexolute"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "nexolute"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "nexolute"
        },
        "content": "    private java.util.Optional\u003cReadOnlyFundBook\u003e readFundBook(String filePath) throws Exception {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "nexolute"
        },
        "content": "        return new JsonFundBookStorage(Paths.get(filePath)).readFundBook(addToTestDataPathIfNotNull(filePath));"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "nexolute"
        },
        "content": "    }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "nexolute"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "nexolute"
        },
        "content": "    private Path addToTestDataPathIfNotNull(String prefsFileInTestDataFolder) {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "nexolute"
        },
        "content": "        return prefsFileInTestDataFolder !\u003d null"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "nexolute"
        },
        "content": "                ? TEST_DATA_FOLDER.resolve(prefsFileInTestDataFolder)"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "nexolute"
        },
        "content": "                : null;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "nexolute"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "nexolute"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "nexolute"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "nexolute"
        },
        "content": "    public void read_missingFile_emptyResult() throws Exception {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "nexolute"
        },
        "content": "        assertFalse(readFundBook(\"NonExistentFile.json\").isPresent());"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "nexolute"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "nexolute"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "nexolute"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "nexolute"
        },
        "content": "    public void read_notJsonFormat_exceptionThrown() {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "nexolute"
        },
        "content": "        assertThrows(DataConversionException.class, () -\u003e readFundBook(\"notJsonFormatFundBook.json\"));"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "nexolute"
        },
        "content": "    }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "nexolute"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "nexolute"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "nexolute"
        },
        "content": "    public void readFundBook_invalidPersonFundBook_throwDataConversionException() {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "nexolute"
        },
        "content": "        assertThrows(DataConversionException.class, () -\u003e readFundBook(\"invalidFundBook.json\"));"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "nexolute"
        },
        "content": "    }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "nexolute"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "nexolute"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "nexolute"
        },
        "content": "    public void readFundBook_invalidAndValidPersonFundBook_throwDataConversionException() {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "nexolute"
        },
        "content": "        assertThrows(DataConversionException.class, () -\u003e readFundBook(\"invalidAndValidFundBook.json\"));"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "nexolute"
        },
        "content": "    }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "nexolute"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "nexolute"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "nexolute"
        },
        "content": "    public void readAndSaveFundBook_allInOrder_success() throws Exception {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "nexolute"
        },
        "content": "        Path filePath \u003d testFolder.resolve(\"TempFundBook.json\");"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "nexolute"
        },
        "content": "        FundBook original \u003d getTypicalFundBook();"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "nexolute"
        },
        "content": "        JsonFundBookStorage jsonFundBookStorage \u003d new JsonFundBookStorage(filePath);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "nexolute"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "nexolute"
        },
        "content": "        // Save in new file and read back"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "nexolute"
        },
        "content": "        jsonFundBookStorage.saveFundBook(original, filePath);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "nexolute"
        },
        "content": "        ReadOnlyFundBook readBack \u003d jsonFundBookStorage.readFundBook(filePath).get();"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "nexolute"
        },
        "content": "        assertEquals(original, new FundBook(readBack));"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "nexolute"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "nexolute"
        },
        "content": "        // Modify data, overwrite exiting file, and read back"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "nexolute"
        },
        "content": "        original.addPerson(PERSON_HOON);"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "nexolute"
        },
        "content": "        original.removePerson(PERSON_ALICE);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "nexolute"
        },
        "content": "        jsonFundBookStorage.saveFundBook(original, filePath);"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "nexolute"
        },
        "content": "        readBack \u003d jsonFundBookStorage.readFundBook(filePath).get();"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "nexolute"
        },
        "content": "        assertEquals(original, new FundBook(readBack));"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "nexolute"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "nexolute"
        },
        "content": "        // Save and read without specifying file path"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "nexolute"
        },
        "content": "        original.addPerson(PERSON_IDA);"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "nexolute"
        },
        "content": "        jsonFundBookStorage.saveFundBook(original); // file path not specified"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "nexolute"
        },
        "content": "        readBack \u003d jsonFundBookStorage.readFundBook().get(); // file path not specified"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "nexolute"
        },
        "content": "        assertEquals(original, new FundBook(readBack));"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "nexolute"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "nexolute"
        },
        "content": "    }"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "nexolute"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "nexolute"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "nexolute"
        },
        "content": "    public void saveFundBook_nullFundBook_throwsNullPointerException() {"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "nexolute"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e saveFundBook(null, \"SomeFile.json\"));"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "nexolute"
        },
        "content": "    }"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "nexolute"
        },
        "content": ""
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "nexolute"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "nexolute"
        },
        "content": "     * Saves {@code fundBook} at the specified {@code filePath}."
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "nexolute"
        },
        "content": "     */"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "nexolute"
        },
        "content": "    private void saveFundBook(ReadOnlyFundBook fundBook, String filePath) {"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "nexolute"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "nexolute"
        },
        "content": "            new JsonFundBookStorage(Paths.get(filePath))"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "nexolute"
        },
        "content": "                    .saveFundBook(fundBook, addToTestDataPathIfNotNull(filePath));"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "nexolute"
        },
        "content": "        } catch (IOException ioe) {"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "nexolute"
        },
        "content": "            throw new AssertionError(\"There should not be an error writing to the file.\", ioe);"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "nexolute"
        },
        "content": "        }"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "nexolute"
        },
        "content": "    }"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "nexolute"
        },
        "content": ""
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "nexolute"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "nexolute"
        },
        "content": "    public void saveFundBook_nullFilePath_throwsNullPointerException() {"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "nexolute"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e saveFundBook(new FundBook(), null));"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "nexolute"
        },
        "content": "    }"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "nexolute"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "nexolute": 110
    }
  },
  {
    "path": "src/test/java/seedu/ichifund/storage/JsonSerializableFundBookTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "nexolute"
        },
        "content": "package seedu.ichifund.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "nexolute"
        },
        "content": "import static seedu.ichifund.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Paths;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "nexolute"
        },
        "content": "import seedu.ichifund.commons.exceptions.IllegalValueException;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "nexolute"
        },
        "content": "import seedu.ichifund.commons.util.JsonUtil;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "nexolute"
        },
        "content": "import seedu.ichifund.model.FundBook;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "nexolute"
        },
        "content": "import seedu.ichifund.testutil.TypicalFundBook;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "nexolute"
        },
        "content": "public class JsonSerializableFundBookTest {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "nexolute"
        },
        "content": "    private static final Path TEST_DATA_FOLDER \u003d Paths.get(\"src\", \"test\", \"data\", \"JsonSerializableFundBookTest\");"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "nexolute"
        },
        "content": "    private static final Path TYPICAL_FUNDBOOK_FILE \u003d TEST_DATA_FOLDER.resolve(\"typicalFundBook.json\");"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "nexolute"
        },
        "content": "    private static final Path INVALID_FUNDBOOK_FILE \u003d TEST_DATA_FOLDER.resolve(\"invalidFundBook.json\");"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "nexolute"
        },
        "content": "    private static final Path DUPLICATE_PERSON_FILE \u003d TEST_DATA_FOLDER.resolve(\"duplicateFundBook.json\");"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "nexolute"
        },
        "content": "    public void toModelType_typicalFundBookFile_success() throws Exception {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "nexolute"
        },
        "content": "        JsonSerializableFundBook dataFromFile \u003d JsonUtil.readJsonFile(TYPICAL_FUNDBOOK_FILE,"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "nexolute"
        },
        "content": "                JsonSerializableFundBook.class).get();"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "nexolute"
        },
        "content": "        FundBook fundBookFromFile \u003d dataFromFile.toModelType();"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "nexolute"
        },
        "content": "        FundBook typicalFundBook \u003d TypicalFundBook.getTypicalFundBook();"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "nexolute"
        },
        "content": "        assertEquals(fundBookFromFile, typicalFundBook);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "nexolute"
        },
        "content": "    public void toModelType_invalidFundBookFile_throwsIllegalValueException() throws Exception {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "nexolute"
        },
        "content": "        JsonSerializableFundBook dataFromFile \u003d JsonUtil.readJsonFile(INVALID_FUNDBOOK_FILE,"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "nexolute"
        },
        "content": "                JsonSerializableFundBook.class).get();"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(IllegalValueException.class, dataFromFile::toModelType);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    public void toModelType_duplicatePersons_throwsIllegalValueException() throws Exception {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "nexolute"
        },
        "content": "        JsonSerializableFundBook dataFromFile \u003d JsonUtil.readJsonFile(DUPLICATE_PERSON_FILE,"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "nexolute"
        },
        "content": "                JsonSerializableFundBook.class).get();"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "nexolute"
        },
        "content": "        assertThrows(IllegalValueException.class, JsonSerializableFundBook.MESSAGE_DUPLICATE_PERSON,"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "                dataFromFile::toModelType);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "nexolute": 23,
      "-": 24
    }
  },
  {
    "path": "src/test/java/seedu/ichifund/storage/JsonUserPrefsStorageTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "nexolute"
        },
        "content": "package seedu.ichifund.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "nexolute"
        },
        "content": "import static seedu.ichifund.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Paths;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.io.TempDir;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "nexolute"
        },
        "content": "import seedu.ichifund.commons.core.GuiSettings;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "nexolute"
        },
        "content": "import seedu.ichifund.commons.exceptions.DataConversionException;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "nexolute"
        },
        "content": "import seedu.ichifund.model.UserPrefs;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "public class JsonUserPrefsStorageTest {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final Path TEST_DATA_FOLDER \u003d Paths.get(\"src\", \"test\", \"data\", \"JsonUserPrefsStorageTest\");"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    @TempDir"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    public Path testFolder;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    public void readUserPrefs_nullFilePath_throwsNullPointerException() {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e readUserPrefs(null));"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    private Optional\u003cUserPrefs\u003e readUserPrefs(String userPrefsFileInTestDataFolder) throws DataConversionException {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        Path prefsFilePath \u003d addToTestDataPathIfNotNull(userPrefsFileInTestDataFolder);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "        return new JsonUserPrefsStorage(prefsFilePath).readUserPrefs(prefsFilePath);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    public void readUserPrefs_missingFile_emptyResult() throws DataConversionException {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(readUserPrefs(\"NonExistentFile.json\").isPresent());"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    public void readUserPrefs_notJsonFormat_exceptionThrown() {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(DataConversionException.class, () -\u003e readUserPrefs(\"NotJsonFormatUserPrefs.json\"));"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    private Path addToTestDataPathIfNotNull(String userPrefsFileInTestDataFolder) {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        return userPrefsFileInTestDataFolder !\u003d null"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "                ? TEST_DATA_FOLDER.resolve(userPrefsFileInTestDataFolder)"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "                : null;"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    public void readUserPrefs_fileInOrder_successfullyRead() throws DataConversionException {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs expected \u003d getTypicalUserPrefs();"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs actual \u003d readUserPrefs(\"TypicalUserPref.json\").get();"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expected, actual);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    public void readUserPrefs_valuesMissingFromFile_defaultValuesUsed() throws DataConversionException {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs actual \u003d readUserPrefs(\"EmptyUserPrefs.json\").get();"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(new UserPrefs(), actual);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "    public void readUserPrefs_extraValuesInFile_extraValuesIgnored() throws DataConversionException {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs expected \u003d getTypicalUserPrefs();"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs actual \u003d readUserPrefs(\"ExtraValuesUserPref.json\").get();"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expected, actual);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "    private UserPrefs getTypicalUserPrefs() {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs userPrefs \u003d new UserPrefs();"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "        userPrefs.setGuiSettings(new GuiSettings(1000, 500, 300, 100));"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "nexolute"
        },
        "content": "        userPrefs.setFundBookFilePath(Paths.get(\"fundbook.json\"));"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "        return userPrefs;"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "    public void savePrefs_nullPrefs_throwsNullPointerException() {"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e saveUserPrefs(null, \"SomeFile.json\"));"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "    public void saveUserPrefs_nullFilePath_throwsNullPointerException() {"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e saveUserPrefs(new UserPrefs(), null));"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "     * Saves {@code userPrefs} at the specified {@code prefsFileInTestDataFolder} filepath."
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "    private void saveUserPrefs(UserPrefs userPrefs, String prefsFileInTestDataFolder) {"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "            new JsonUserPrefsStorage(addToTestDataPathIfNotNull(prefsFileInTestDataFolder))"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "                    .saveUserPrefs(userPrefs);"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (IOException ioe) {"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"There should not be an error writing to the file\", ioe);"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "    public void saveUserPrefs_allInOrder_success() throws DataConversionException, IOException {"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs original \u003d new UserPrefs();"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "        original.setGuiSettings(new GuiSettings(1200, 200, 0, 2));"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "        Path pefsFilePath \u003d testFolder.resolve(\"TempPrefs.json\");"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "        JsonUserPrefsStorage jsonUserPrefsStorage \u003d new JsonUserPrefsStorage(pefsFilePath);"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "        //Try writing when the file doesn\u0027t exist"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "        jsonUserPrefsStorage.saveUserPrefs(original);"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs readBack \u003d jsonUserPrefsStorage.readUserPrefs().get();"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(original, readBack);"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "        //Try saving when the file exists"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "        original.setGuiSettings(new GuiSettings(5, 5, 5, 5));"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "        jsonUserPrefsStorage.saveUserPrefs(original);"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "        readBack \u003d jsonUserPrefsStorage.readUserPrefs().get();"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(original, readBack);"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "nexolute": 6,
      "-": 117
    }
  },
  {
    "path": "src/test/java/seedu/ichifund/storage/StorageManagerTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "nexolute"
        },
        "content": "package seedu.ichifund.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertNotNull;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "nexolute"
        },
        "content": "import static seedu.ichifund.testutil.TypicalFundBook.getTypicalFundBook;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.BeforeEach;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.io.TempDir;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "nexolute"
        },
        "content": "import seedu.ichifund.commons.core.GuiSettings;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "nexolute"
        },
        "content": "import seedu.ichifund.model.FundBook;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "nexolute"
        },
        "content": "import seedu.ichifund.model.ReadOnlyFundBook;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "nexolute"
        },
        "content": "import seedu.ichifund.model.UserPrefs;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "public class StorageManagerTest {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    @TempDir"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    public Path testFolder;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    private StorageManager storageManager;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    @BeforeEach"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setUp() {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "nexolute"
        },
        "content": "        JsonFundBookStorage fundBookStorage \u003d new JsonFundBookStorage(getTempFilePath(\"ab\"));"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        JsonUserPrefsStorage userPrefsStorage \u003d new JsonUserPrefsStorage(getTempFilePath(\"prefs\"));"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "nexolute"
        },
        "content": "        storageManager \u003d new StorageManager(fundBookStorage, userPrefsStorage);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    private Path getTempFilePath(String fileName) {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "        return testFolder.resolve(fileName);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    public void prefsReadSave() throws Exception {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        /*"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "         * Note: This is an integration test that verifies the StorageManager is properly wired to the"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "         * {@link JsonUserPrefsStorage} class."
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "         * More extensive testing of UserPref saving/reading is done in {@link JsonUserPrefsStorageTest} class."
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "         */"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs original \u003d new UserPrefs();"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        original.setGuiSettings(new GuiSettings(300, 600, 4, 6));"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        storageManager.saveUserPrefs(original);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs retrieved \u003d storageManager.readUserPrefs().get();"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(original, retrieved);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "nexolute"
        },
        "content": "    public void fundBookReadSave() throws Exception {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        /*"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "         * Note: This is an integration test that verifies the StorageManager is properly wired to the"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "nexolute"
        },
        "content": "         * {@link JsonFundBookStorage} class."
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "nexolute"
        },
        "content": "         * More extensive testing of UserPref saving/reading is done in {@link JsonFundBookStorageTest} class."
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "         */"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "nexolute"
        },
        "content": "        FundBook original \u003d getTypicalFundBook();"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "nexolute"
        },
        "content": "        storageManager.saveFundBook(original);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "nexolute"
        },
        "content": "        ReadOnlyFundBook retrieved \u003d storageManager.readFundBook().get();"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "nexolute"
        },
        "content": "        assertEquals(original, new FundBook(retrieved));"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "nexolute"
        },
        "content": "    public void getFundBookFilePath() {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "nexolute"
        },
        "content": "        assertNotNull(storageManager.getFundBookFilePath());"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "nexolute": 17,
      "-": 51
    }
  },
  {
    "path": "src/test/java/seedu/ichifund/testutil/ArgumentBuilder.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "package seedu.ichifund.testutil;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "weiyang13"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "import static seedu.ichifund.logic.parser.CliSyntax.PREFIX_AMOUNT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "import static seedu.ichifund.logic.parser.CliSyntax.PREFIX_CATEGORY;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "import static seedu.ichifund.logic.parser.CliSyntax.PREFIX_DAY;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "import static seedu.ichifund.logic.parser.CliSyntax.PREFIX_DESCRIPTION;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "import static seedu.ichifund.logic.parser.CliSyntax.PREFIX_MONTH;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "import static seedu.ichifund.logic.parser.CliSyntax.PREFIX_TRANSACTION_TYPE;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "import static seedu.ichifund.logic.parser.CliSyntax.PREFIX_YEAR;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "weiyang13"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "/**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "weiyang13"
        },
        "content": " * A utility class to build arguments"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "weiyang13"
        },
        "content": " */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "public class ArgumentBuilder {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "    private String argument;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "weiyang13"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "    public ArgumentBuilder() {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "        argument \u003d \"\";"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "    }"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "weiyang13"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "     * Adds a description argument to the string being built."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "     */"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "    public ArgumentBuilder withDescription(String description) {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "        argument +\u003d \" \" + PREFIX_DESCRIPTION + description;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "weiyang13"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "     * Adds an amount argument to the string being built."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "     */"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "    public ArgumentBuilder withAmount(String amount) {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "        argument +\u003d \" \" + PREFIX_AMOUNT + amount;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "    }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "weiyang13"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "     * Adds a category argument to the string being built."
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "     */"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "    public ArgumentBuilder withCategory(String category) {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "        argument +\u003d \" \" + PREFIX_CATEGORY + category;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "weiyang13"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "     * Adds a day argument to the string being built."
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "     */"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "    public ArgumentBuilder withDay(String day) {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "        argument +\u003d \" \" + PREFIX_DAY + day;"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "    }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "weiyang13"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "     * Adds a month argument to the string being built."
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "     */"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "    public ArgumentBuilder withMonth(String month) {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "        argument +\u003d \" \" + PREFIX_MONTH + month;"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "    }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "weiyang13"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "     * Adds a year argument to the string being built."
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "     */"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "    public ArgumentBuilder withYear(String year) {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "        argument +\u003d \" \" + PREFIX_YEAR + year;"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "    }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "weiyang13"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "     * Adds a transactionType argument to the string being built."
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "     */"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "    public ArgumentBuilder withTransactionType(String transactionType) {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "        argument +\u003d \" \" + PREFIX_TRANSACTION_TYPE + transactionType;"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "    }"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "weiyang13"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "    public String build() {"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "        return argument;"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "    }"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "weiyang13": 80
    }
  },
  {
    "path": "src/test/java/seedu/ichifund/testutil/Assert.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "nexolute"
        },
        "content": "package seedu.ichifund.testutil;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Assertions;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.function.Executable;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": " * A set of assertion methods useful for writing tests."
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "public class Assert {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "     * Asserts that the {@code executable} throws the {@code expectedType} Exception."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "     * This is a wrapper method that invokes {@link Assertions#assertThrows(Class, Executable)}, to maintain consistency"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "     * with our custom {@link #assertThrows(Class, String, Executable)} method."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "     * To standardize API calls in this project, users should use this method instead of"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "     * {@link Assertions#assertThrows(Class, Executable)}."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    public static void assertThrows(Class\u003c? extends Throwable\u003e expectedType, Executable executable) {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "        Assertions.assertThrows(expectedType, executable);"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "     * Asserts that the {@code executable} throws the {@code expectedType} Exception with the {@code expectedMessage}."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "     * If there\u0027s no need for the verification of the exception\u0027s error message, call"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "     * {@link #assertThrows(Class, Executable)} instead."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "     * @see #assertThrows(Class, Executable)"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    public static void assertThrows(Class\u003c? extends Throwable\u003e expectedType, String expectedMessage,"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "            Executable executable) {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        Throwable thrownException \u003d Assertions.assertThrows(expectedType, executable);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        Assertions.assertEquals(expectedMessage, thrownException.getMessage());"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "nexolute": 1,
      "-": 33
    }
  },
  {
    "path": "src/test/java/seedu/ichifund/testutil/BudgetBuilder.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "nexolute"
        },
        "content": "package seedu.ichifund.testutil;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "nexolute"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "import seedu.ichifund.model.Description;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "import seedu.ichifund.model.amount.Amount;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "nexolute"
        },
        "content": "import seedu.ichifund.model.budget.Budget;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "nexolute"
        },
        "content": "import seedu.ichifund.model.date.Month;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "nexolute"
        },
        "content": "import seedu.ichifund.model.date.Year;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "nexolute"
        },
        "content": "import seedu.ichifund.model.transaction.Category;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "nexolute"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "nexolute"
        },
        "content": "/**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "nexolute"
        },
        "content": " * A utility class to help with building Budget objects."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "nexolute"
        },
        "content": " */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "nexolute"
        },
        "content": "public class BudgetBuilder {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "nexolute"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "nexolute"
        },
        "content": "    public static final String DEFAULT_DESCRIPTION \u003d \"Saving for my future\";"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "nexolute"
        },
        "content": "    public static final String DEFAULT_AMOUNT \u003d \"13.37\";"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "nexolute"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "nexolute"
        },
        "content": "    private Description description;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "nexolute"
        },
        "content": "    private Amount amount;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "nexolute"
        },
        "content": "    private Month month;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "nexolute"
        },
        "content": "    private Year year;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "nexolute"
        },
        "content": "    private Category category;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "nexolute"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "nexolute"
        },
        "content": "    public BudgetBuilder() {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "nexolute"
        },
        "content": "        description \u003d new Description(DEFAULT_DESCRIPTION);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "nexolute"
        },
        "content": "        amount \u003d new Amount(DEFAULT_AMOUNT);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "nexolute"
        },
        "content": "        month \u003d null;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "nexolute"
        },
        "content": "        year \u003d null;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "nexolute"
        },
        "content": "        category \u003d null;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "nexolute"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "nexolute"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "nexolute"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "nexolute"
        },
        "content": "     * Initializes the BudgetBuilder with the data of {@code budgetToCopy}."
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "nexolute"
        },
        "content": "     */"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "nexolute"
        },
        "content": "    public BudgetBuilder(Budget budgetToCopy) {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "nexolute"
        },
        "content": "        description \u003d budgetToCopy.getDescription();"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "nexolute"
        },
        "content": "        amount \u003d budgetToCopy.getAmount();"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "nexolute"
        },
        "content": "        month \u003d budgetToCopy.getMonth();"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "nexolute"
        },
        "content": "        year \u003d budgetToCopy.getYear();"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "nexolute"
        },
        "content": "        category \u003d budgetToCopy.getCategory();"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "nexolute"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "nexolute"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "nexolute"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "nexolute"
        },
        "content": "     * Sets the {@code Description} of the {@code Budget} that we are building."
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "nexolute"
        },
        "content": "     */"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "nexolute"
        },
        "content": "    public BudgetBuilder withDescription(String description) {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "nexolute"
        },
        "content": "        this.description \u003d new Description(description);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "nexolute"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "nexolute"
        },
        "content": "    }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "nexolute"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "nexolute"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "nexolute"
        },
        "content": "     * Sets the {@code Amount} of the {@code Budget} that we are building."
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "nexolute"
        },
        "content": "     */"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "nexolute"
        },
        "content": "    public BudgetBuilder withAmount(String amount) {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "nexolute"
        },
        "content": "        this.amount \u003d new Amount(amount);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "nexolute"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "nexolute"
        },
        "content": "    }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "nexolute"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "nexolute"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "nexolute"
        },
        "content": "     * Sets the {@code Month} and {@code Year} of the {@code Budget} that we are building."
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "nexolute"
        },
        "content": "     */"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "nexolute"
        },
        "content": "    public BudgetBuilder withMonthAndYear(String month, String year) {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "nexolute"
        },
        "content": "        this.month \u003d new Month(month);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "nexolute"
        },
        "content": "        this.year \u003d new Year(year);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "nexolute"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "nexolute"
        },
        "content": "    }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "nexolute"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "nexolute"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "nexolute"
        },
        "content": "     * Sets the {@code Category} of the {@code Budget} that we are building."
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "nexolute"
        },
        "content": "     */"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "nexolute"
        },
        "content": "    public BudgetBuilder withCategory(String category) {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "nexolute"
        },
        "content": "        this.category \u003d new Category(category);"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "nexolute"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "nexolute"
        },
        "content": "    }"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "nexolute"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "nexolute"
        },
        "content": "    public Budget build() {"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "nexolute"
        },
        "content": "        return new Budget(description, amount, month, year, category);"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "nexolute"
        },
        "content": "    }"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "nexolute"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "nexolute"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "nexolute": 78,
      "weiyang13": 2
    }
  },
  {
    "path": "src/test/java/seedu/ichifund/testutil/DateBuilder.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "package seedu.ichifund.testutil;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "weiyang13"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "import seedu.ichifund.model.date.Date;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "import seedu.ichifund.model.date.Day;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "import seedu.ichifund.model.date.Month;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "import seedu.ichifund.model.date.Year;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "weiyang13"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "/**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "weiyang13"
        },
        "content": " * A utility class to help with building Date objects."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "weiyang13"
        },
        "content": " */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "public class DateBuilder {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "    public static final String DEFAULT_DAY \u003d \"10\";"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "    public static final String DEFAULT_MONTH \u003d \"1\";"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "    public static final String DEFAULT_YEAR \u003d \"2019\";"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "weiyang13"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "    private Day day;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "    private Month month;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "    private Year year;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "weiyang13"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "    public DateBuilder() {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "        day \u003d new Day(DEFAULT_DAY);"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "        month \u003d new Month(DEFAULT_MONTH);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "        year \u003d new Year(DEFAULT_YEAR);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "    }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "weiyang13"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "     * Initializes the DateBuilder with the data of {@code dateToCopy}."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "     */"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "    public DateBuilder(Date dateToCopy) {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "        day \u003d dateToCopy.getDay();"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "        month \u003d dateToCopy.getMonth();"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "        year \u003d dateToCopy.getYear();"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "weiyang13"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "     * Sets the {@code Day} of the {@code Date} that we are building."
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "     */"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "    public DateBuilder withDay(String day) {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "        this.day \u003d new Day(day);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "weiyang13"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "     * Sets the {@code Month} of the {@code Date} that we are building."
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "     */"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "    public DateBuilder withMonth(String month) {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "        this.month \u003d new Month(month);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "    }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "weiyang13"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "     * Sets the {@code Year} of the {@code Date} that we are building."
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "     */"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "    public DateBuilder withYear(String year) {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "        this.year \u003d new Year(year);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "    }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "weiyang13"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "weiyang13"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "    public Date build() {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "        return new Date(day, month, year);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "    }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "weiyang13"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "weiyang13": 64
    }
  },
  {
    "path": "src/test/java/seedu/ichifund/testutil/EditPersonDescriptorBuilder.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "nexolute"
        },
        "content": "package seedu.ichifund.testutil;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.stream.Collectors;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.stream.Stream;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "nexolute"
        },
        "content": "import seedu.ichifund.logic.commands.EditCommand.EditPersonDescriptor;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "nexolute"
        },
        "content": "import seedu.ichifund.model.person.Address;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "nexolute"
        },
        "content": "import seedu.ichifund.model.person.Email;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "nexolute"
        },
        "content": "import seedu.ichifund.model.person.Name;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "nexolute"
        },
        "content": "import seedu.ichifund.model.person.Person;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "nexolute"
        },
        "content": "import seedu.ichifund.model.person.Phone;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "nexolute"
        },
        "content": "import seedu.ichifund.model.tag.Tag;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": " * A utility class to help with building EditPersonDescriptor objects."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "public class EditPersonDescriptorBuilder {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    private EditPersonDescriptor descriptor;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    public EditPersonDescriptorBuilder() {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "        descriptor \u003d new EditPersonDescriptor();"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    public EditPersonDescriptorBuilder(EditPersonDescriptor descriptor) {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        this.descriptor \u003d new EditPersonDescriptor(descriptor);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns an {@code EditPersonDescriptor} with fields containing {@code person}\u0027s details"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    public EditPersonDescriptorBuilder(Person person) {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        descriptor \u003d new EditPersonDescriptor();"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "        descriptor.setName(person.getName());"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        descriptor.setPhone(person.getPhone());"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        descriptor.setEmail(person.getEmail());"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        descriptor.setAddress(person.getAddress());"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        descriptor.setTags(person.getTags());"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "     * Sets the {@code Name} of the {@code EditPersonDescriptor} that we are building."
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    public EditPersonDescriptorBuilder withName(String name) {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        descriptor.setName(new Name(name));"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "     * Sets the {@code Phone} of the {@code EditPersonDescriptor} that we are building."
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    public EditPersonDescriptorBuilder withPhone(String phone) {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "        descriptor.setPhone(new Phone(phone));"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "     * Sets the {@code Email} of the {@code EditPersonDescriptor} that we are building."
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    public EditPersonDescriptorBuilder withEmail(String email) {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "        descriptor.setEmail(new Email(email));"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "     * Sets the {@code Address} of the {@code EditPersonDescriptor} that we are building."
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "    public EditPersonDescriptorBuilder withAddress(String address) {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "        descriptor.setAddress(new Address(address));"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "     * Parses the {@code tags} into a {@code Set\u003cTag\u003e} and set it to the {@code EditPersonDescriptor}"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "     * that we are building."
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "    public EditPersonDescriptorBuilder withTags(String... tags) {"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "        Set\u003cTag\u003e tagSet \u003d Stream.of(tags).map(Tag::new).collect(Collectors.toSet());"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "        descriptor.setTags(tagSet);"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "    public EditPersonDescriptor build() {"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "        return descriptor;"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "nexolute": 8,
      "-": 79
    }
  },
  {
    "path": "src/test/java/seedu/ichifund/testutil/EditTransactionDescriptorBuilder.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "package seedu.ichifund.testutil;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "weiyang13"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "import seedu.ichifund.logic.commands.transaction.EditTransactionCommand.EditTransactionDescriptor;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "import seedu.ichifund.model.Description;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "import seedu.ichifund.model.amount.Amount;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "import seedu.ichifund.model.date.Day;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "import seedu.ichifund.model.date.Month;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "import seedu.ichifund.model.date.Year;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "import seedu.ichifund.model.transaction.Category;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "import seedu.ichifund.model.transaction.Transaction;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "import seedu.ichifund.model.transaction.TransactionType;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "weiyang13"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "/**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "weiyang13"
        },
        "content": " * A utility class to help with building EditTransactionDescriptor objects."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "weiyang13"
        },
        "content": " */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "public class EditTransactionDescriptorBuilder {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "weiyang13"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "    private EditTransactionDescriptor descriptor;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "weiyang13"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "    public EditTransactionDescriptorBuilder() {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "        descriptor \u003d new EditTransactionDescriptor();"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "    }"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "weiyang13"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "    public EditTransactionDescriptorBuilder(EditTransactionDescriptor descriptor) {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "        this.descriptor \u003d new EditTransactionDescriptor(descriptor);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "    }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "weiyang13"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "     * Returns an {@code EditTransactionDescriptor} with fields containing {@code transaction}\u0027s details"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "     */"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "    public EditTransactionDescriptorBuilder(Transaction transaction) {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "        descriptor \u003d new EditTransactionDescriptor();"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "        descriptor.setDescription(transaction.getDescription());"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "        descriptor.setAmount(transaction.getAmount());"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "        descriptor.setDay(transaction.getDay());"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "        descriptor.setMonth(transaction.getMonth());"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "        descriptor.setYear(transaction.getYear());"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "        descriptor.setCategory(transaction.getCategory());"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "        descriptor.setTransactionType(transaction.getTransactionType());"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "weiyang13"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "     * Sets the {@code Description} of the {@code EditTransactionDescriptor} that we are building."
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "     */"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "    public EditTransactionDescriptorBuilder withDescription(String description) {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "        descriptor.setDescription(new Description(description));"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "weiyang13"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "     * Sets the {@code Amount} of the {@code EditTransactionDescriptor} that we are building."
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "     */"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "    public EditTransactionDescriptorBuilder withAmount(String amount) {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "        descriptor.setAmount(new Amount(amount));"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "    }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "weiyang13"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "     * Sets the {@code Category} of the {@code EditTransactionDescriptor} that we are building."
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "     */"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "    public EditTransactionDescriptorBuilder withCategory(String category) {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "        descriptor.setCategory(new Category(category));"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "    }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "weiyang13"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "     * Sets the {@code Day} of the {@code EditTransactionDescriptor} that we are building."
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "     */"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "    public EditTransactionDescriptorBuilder withDay(String day) {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "        descriptor.setDay(new Day(day));"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "    }"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "weiyang13"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "     * Sets the {@code Month} of the {@code EditTransactionDescriptor} that we are building."
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "     */"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "    public EditTransactionDescriptorBuilder withMonth(String month) {"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "        descriptor.setMonth(new Month(month));"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "    }"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "weiyang13"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "     * Sets the {@code Year} of the {@code EditTransactionDescriptor} that we are building."
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "     */"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "    public EditTransactionDescriptorBuilder withYear(String year) {"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "        descriptor.setYear(new Year(year));"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "    }"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "weiyang13"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "     * Sets the {@code TransactionType} of the {@code EditTransactionDescriptor} that we are building."
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "     */"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "    public EditTransactionDescriptorBuilder withTransactionType(String transactionType) {"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "        descriptor.setTransactionType(new TransactionType(transactionType));"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "    }"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "weiyang13"
        },
        "content": ""
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "weiyang13"
        },
        "content": ""
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "weiyang13"
        },
        "content": ""
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "    public EditTransactionDescriptor build() {"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "        return descriptor;"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "    }"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "}"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "weiyang13"
        },
        "content": ""
      }
    ],
    "authorContributionMap": {
      "weiyang13": 104
    }
  },
  {
    "path": "src/test/java/seedu/ichifund/testutil/FundBookBuilder.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "nexolute"
        },
        "content": "package seedu.ichifund.testutil;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "nexolute"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "nexolute"
        },
        "content": "import seedu.ichifund.model.FundBook;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "nexolute"
        },
        "content": "import seedu.ichifund.model.person.Person;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "nexolute"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "nexolute"
        },
        "content": "/**"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "nexolute"
        },
        "content": " * A utility class to help with building FundBook objects."
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "nexolute"
        },
        "content": " * Example usage: \u003cbr\u003e"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "nexolute"
        },
        "content": " *     {@code FundBook ab \u003d new FundBookBuilder().withPerson(\"John\", \"Doe\").build();}"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "nexolute"
        },
        "content": " */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "nexolute"
        },
        "content": "public class FundBookBuilder {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "nexolute"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "nexolute"
        },
        "content": "    private FundBook fundBook;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "nexolute"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "nexolute"
        },
        "content": "    public FundBookBuilder() {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "nexolute"
        },
        "content": "        fundBook \u003d new FundBook();"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "nexolute"
        },
        "content": "    }"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "nexolute"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "nexolute"
        },
        "content": "    public FundBookBuilder(FundBook fundBook) {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "nexolute"
        },
        "content": "        this.fundBook \u003d fundBook;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "nexolute"
        },
        "content": "    }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "nexolute"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "nexolute"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "nexolute"
        },
        "content": "     * Adds a new {@code Person} to the {@code FundBook} that we are building."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "nexolute"
        },
        "content": "     */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "nexolute"
        },
        "content": "    public FundBookBuilder withPerson(Person person) {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "nexolute"
        },
        "content": "        fundBook.addPerson(person);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "nexolute"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "nexolute"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "nexolute"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "nexolute"
        },
        "content": "    public FundBook build() {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "nexolute"
        },
        "content": "        return fundBook;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "nexolute"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "nexolute"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "nexolute": 34
    }
  },
  {
    "path": "src/test/java/seedu/ichifund/testutil/ModelStub.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "package seedu.ichifund.testutil;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "weiyang13"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "import java.util.function.Predicate;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "weiyang13"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "import javafx.beans.property.ReadOnlyProperty;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "import seedu.ichifund.commons.core.GuiSettings;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "import seedu.ichifund.model.Model;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "import seedu.ichifund.model.ReadOnlyFundBook;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "import seedu.ichifund.model.ReadOnlyUserPrefs;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "import seedu.ichifund.model.analytics.Data;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "import seedu.ichifund.model.budget.Budget;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "import seedu.ichifund.model.context.TransactionContext;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "import seedu.ichifund.model.person.Person;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "import seedu.ichifund.model.repeater.Repeater;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "import seedu.ichifund.model.repeater.RepeaterUniqueId;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "import seedu.ichifund.model.transaction.Transaction;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "weiyang13"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "/**"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "weiyang13"
        },
        "content": " * A stub for Model that throws errors for any method called."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "weiyang13"
        },
        "content": " */"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "public class ModelStub implements Model {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "weiyang13"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "    public void setUserPrefs(ReadOnlyUserPrefs userPrefs) {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "        throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "weiyang13"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "    public ReadOnlyUserPrefs getUserPrefs() {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "        throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "weiyang13"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "    public GuiSettings getGuiSettings() {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "        throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "weiyang13"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "    public void setGuiSettings(GuiSettings guiSettings) {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "        throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "weiyang13"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "    public Path getFundBookFilePath() {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "        throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "    }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "weiyang13"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "    public void setFundBookFilePath(Path addressBookFilePath) {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "        throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "    }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "weiyang13"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "    public RepeaterUniqueId getCurrentRepeaterUniqueId() {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "        throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "    }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "weiyang13"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "    public void setCurrentRepeaterUniqueId(RepeaterUniqueId uniqueId) {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "        throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "    }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "weiyang13"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "    public void addPerson(Person person) {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "        throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "    }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "weiyang13"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "    public boolean hasPerson(Person person) {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "        throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "    }"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "weiyang13"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "    public void deletePerson(Person target) {"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "        throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "    }"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "weiyang13"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "    public void setPerson(Person target, Person editedPerson) {"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "        throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "    }"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "weiyang13"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "    public ObservableList\u003cPerson\u003e getFilteredPersonList() {"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "        throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "    }"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "weiyang13"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "    public void updateFilteredPersonList(Predicate\u003cPerson\u003e predicate) {"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "        throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "    }"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "weiyang13"
        },
        "content": ""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "    public void addTransaction(Transaction transaction) {"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "        throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "    }"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "weiyang13"
        },
        "content": ""
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "    public void deleteTransaction(Transaction target) {"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "        throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "    }"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "weiyang13"
        },
        "content": ""
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "    public void setTransaction(Transaction target, Transaction editedTransaction) {"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "        throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "    }"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "weiyang13"
        },
        "content": ""
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "    public ObservableList\u003cTransaction\u003e getFilteredTransactionList() {"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "        throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "    }"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "weiyang13"
        },
        "content": ""
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "    public TransactionContext getTransactionContext() {"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "        throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "    }"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "weiyang13"
        },
        "content": ""
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "    public void setTransactionContext(TransactionContext transactionContext) {"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "        throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "    }"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "weiyang13"
        },
        "content": ""
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "    public void updateTransactionContext(Transaction transaction) {"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "        throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "    }"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "weiyang13"
        },
        "content": ""
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "    public ObservableList\u003cTransaction\u003e getAssociatedTransactions(RepeaterUniqueId repeaterUniqueId) {"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "        throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "    }"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "weiyang13"
        },
        "content": ""
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "    public void addRepeater(Repeater repeater) {"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "        throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "    }"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "weiyang13"
        },
        "content": ""
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "    public boolean hasRepeater(Repeater repeater) {"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "        throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "    }"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "weiyang13"
        },
        "content": ""
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "    public void deleteRepeater(Repeater target) {"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "        throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "    }"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "    public void setRepeater(Repeater target, Repeater editedRepeater) {"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "        throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "    }"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "weiyang13"
        },
        "content": ""
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "    public ObservableList\u003cRepeater\u003e getFilteredRepeaterList() {"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "        throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "    }"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "weiyang13"
        },
        "content": ""
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "    public void updateFilteredRepeaterList(Predicate\u003cRepeater\u003e predicate) {"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "        throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "    }"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "weiyang13"
        },
        "content": ""
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "weiyang13"
        },
        "content": ""
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "    public void addBudget(Budget budget) {"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "        throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "    }"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "weiyang13"
        },
        "content": ""
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "    public boolean hasBudget(Budget budget) {"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "        throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "    }"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "weiyang13"
        },
        "content": ""
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "    public void deleteBudget(Budget target) {"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "        throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "    }"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "    public void setBudget(Budget target, Budget editedBudget) {"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "        throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "    }"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "weiyang13"
        },
        "content": ""
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "    public ObservableList\u003cBudget\u003e getFilteredBudgetList() {"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "        throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "    }"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "weiyang13"
        },
        "content": ""
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "    public void updateFilteredBudgetList(Predicate\u003cBudget\u003e predicate) {"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "        throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "    }"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "weiyang13"
        },
        "content": ""
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "    public ReadOnlyProperty\u003cTransactionContext\u003e getTransactionContextProperty() {"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "        throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "    }"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "weiyang13"
        },
        "content": ""
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "    public ObservableList\u003cData\u003e getDataList() {"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "        throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "    }"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "weiyang13"
        },
        "content": ""
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "    public void updateDataList(List\u003cData\u003e datas) {"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "        throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "    }"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "weiyang13"
        },
        "content": ""
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "    public void setFundBook(ReadOnlyFundBook newData) {"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "        throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "    }"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "weiyang13"
        },
        "content": ""
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "    public ReadOnlyFundBook getFundBook() {"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "        throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "    }"
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "weiyang13": 219
    }
  },
  {
    "path": "src/test/java/seedu/ichifund/testutil/PersonBuilder.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "nexolute"
        },
        "content": "package seedu.ichifund.testutil;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.HashSet;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "nexolute"
        },
        "content": "import seedu.ichifund.model.person.Address;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "nexolute"
        },
        "content": "import seedu.ichifund.model.person.Email;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "nexolute"
        },
        "content": "import seedu.ichifund.model.person.Name;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "nexolute"
        },
        "content": "import seedu.ichifund.model.person.Person;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "nexolute"
        },
        "content": "import seedu.ichifund.model.person.Phone;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "nexolute"
        },
        "content": "import seedu.ichifund.model.tag.Tag;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "nexolute"
        },
        "content": "import seedu.ichifund.model.util.SampleDataUtil;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": " * A utility class to help with building Person objects."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "public class PersonBuilder {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String DEFAULT_NAME \u003d \"Alice Pauline\";"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String DEFAULT_PHONE \u003d \"85355255\";"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String DEFAULT_EMAIL \u003d \"alice@gmail.com\";"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String DEFAULT_ADDRESS \u003d \"123, Jurong West Ave 6, #08-111\";"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    private Name name;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    private Phone phone;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    private Email email;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    private Address address;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    private Set\u003cTag\u003e tags;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    public PersonBuilder() {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        name \u003d new Name(DEFAULT_NAME);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        phone \u003d new Phone(DEFAULT_PHONE);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "        email \u003d new Email(DEFAULT_EMAIL);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        address \u003d new Address(DEFAULT_ADDRESS);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "        tags \u003d new HashSet\u003c\u003e();"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "     * Initializes the PersonBuilder with the data of {@code personToCopy}."
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    public PersonBuilder(Person personToCopy) {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "        name \u003d personToCopy.getName();"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        phone \u003d personToCopy.getPhone();"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        email \u003d personToCopy.getEmail();"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        address \u003d personToCopy.getAddress();"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        tags \u003d new HashSet\u003c\u003e(personToCopy.getTags());"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "     * Sets the {@code Name} of the {@code Person} that we are building."
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    public PersonBuilder withName(String name) {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "        this.name \u003d new Name(name);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "     * Parses the {@code tags} into a {@code Set\u003cTag\u003e} and set it to the {@code Person} that we are building."
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    public PersonBuilder withTags(String ... tags) {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "        this.tags \u003d SampleDataUtil.getTagSet(tags);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "     * Sets the {@code Address} of the {@code Person} that we are building."
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "    public PersonBuilder withAddress(String address) {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "        this.address \u003d new Address(address);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "     * Sets the {@code Phone} of the {@code Person} that we are building."
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "    public PersonBuilder withPhone(String phone) {"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "        this.phone \u003d new Phone(phone);"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "     * Sets the {@code Email} of the {@code Person} that we are building."
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "    public PersonBuilder withEmail(String email) {"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "        this.email \u003d new Email(email);"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "    public Person build() {"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "        return new Person(name, phone, email, address, tags);"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "nexolute": 8,
      "-": 85
    }
  },
  {
    "path": "src/test/java/seedu/ichifund/testutil/PersonUtil.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "nexolute"
        },
        "content": "package seedu.ichifund.testutil;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "nexolute"
        },
        "content": "import static seedu.ichifund.logic.parser.CliSyntax.PREFIX_ADDRESS;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "nexolute"
        },
        "content": "import static seedu.ichifund.logic.parser.CliSyntax.PREFIX_EMAIL;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "nexolute"
        },
        "content": "import static seedu.ichifund.logic.parser.CliSyntax.PREFIX_NAME;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "nexolute"
        },
        "content": "import static seedu.ichifund.logic.parser.CliSyntax.PREFIX_PHONE;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "nexolute"
        },
        "content": "import static seedu.ichifund.logic.parser.CliSyntax.PREFIX_TAG;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "nexolute"
        },
        "content": "import seedu.ichifund.logic.commands.AddCommand;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "nexolute"
        },
        "content": "import seedu.ichifund.logic.commands.EditCommand.EditPersonDescriptor;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "nexolute"
        },
        "content": "import seedu.ichifund.model.person.Person;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "nexolute"
        },
        "content": "import seedu.ichifund.model.tag.Tag;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": " * A utility class for Person."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "public class PersonUtil {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns an add command string for adding the {@code person}."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    public static String getAddCommand(Person person) {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "        return AddCommand.COMMAND_WORD + \" \" + getPersonDetails(person);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns the part of command string for the given {@code person}\u0027s details."
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    public static String getPersonDetails(Person person) {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        StringBuilder sb \u003d new StringBuilder();"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "        sb.append(PREFIX_NAME + person.getName().fullName + \" \");"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        sb.append(PREFIX_PHONE + person.getPhone().value + \" \");"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "        sb.append(PREFIX_EMAIL + person.getEmail().value + \" \");"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        sb.append(PREFIX_ADDRESS + person.getAddress().value + \" \");"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        person.getTags().stream().forEach("
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "            s -\u003e sb.append(PREFIX_TAG + s.tagName + \" \")"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        );"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "        return sb.toString();"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns the part of command string for the given {@code EditPersonDescriptor}\u0027s details."
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    public static String getEditPersonDescriptorDetails(EditPersonDescriptor descriptor) {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        StringBuilder sb \u003d new StringBuilder();"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        descriptor.getName().ifPresent(name -\u003e sb.append(PREFIX_NAME).append(name.fullName).append(\" \"));"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        descriptor.getPhone().ifPresent(phone -\u003e sb.append(PREFIX_PHONE).append(phone.value).append(\" \"));"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "        descriptor.getEmail().ifPresent(email -\u003e sb.append(PREFIX_EMAIL).append(email.value).append(\" \"));"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        descriptor.getAddress().ifPresent(address -\u003e sb.append(PREFIX_ADDRESS).append(address.value).append(\" \"));"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        if (descriptor.getTags().isPresent()) {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "            Set\u003cTag\u003e tags \u003d descriptor.getTags().get();"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "            if (tags.isEmpty()) {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "                sb.append(PREFIX_TAG);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "                tags.forEach(s -\u003e sb.append(PREFIX_TAG).append(s.tagName).append(\" \"));"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "        return sb.toString();"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "nexolute": 10,
      "-": 52
    }
  },
  {
    "path": "src/test/java/seedu/ichifund/testutil/RepeaterBuilder.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "LeeYiyuan"
        },
        "content": "package seedu.ichifund.testutil;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "LeeYiyuan"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "import seedu.ichifund.model.Description;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "import seedu.ichifund.model.amount.Amount;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "LeeYiyuan"
        },
        "content": "import seedu.ichifund.model.date.Date;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "LeeYiyuan"
        },
        "content": "import seedu.ichifund.model.date.Day;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "LeeYiyuan"
        },
        "content": "import seedu.ichifund.model.date.Month;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "LeeYiyuan"
        },
        "content": "import seedu.ichifund.model.date.Year;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "LeeYiyuan"
        },
        "content": "import seedu.ichifund.model.repeater.MonthOffset;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "LeeYiyuan"
        },
        "content": "import seedu.ichifund.model.repeater.Repeater;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "LeeYiyuan"
        },
        "content": "import seedu.ichifund.model.repeater.RepeaterUniqueId;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "LeeYiyuan"
        },
        "content": "import seedu.ichifund.model.transaction.Category;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "LeeYiyuan"
        },
        "content": "import seedu.ichifund.model.transaction.TransactionType;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "LeeYiyuan"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "LeeYiyuan"
        },
        "content": "/**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "LeeYiyuan"
        },
        "content": " * A utility class to help with building Repeater objects."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "LeeYiyuan"
        },
        "content": " */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "LeeYiyuan"
        },
        "content": "public class RepeaterBuilder {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "LeeYiyuan"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "LeeYiyuan"
        },
        "content": "    public static final String DEFAULT_UNIQUE_ID \u003d \"0\";"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "LeeYiyuan"
        },
        "content": "    public static final String DEFAULT_DESCRIPTION \u003d \"Phone bills\";"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "LeeYiyuan"
        },
        "content": "    public static final String DEFAULT_AMOUNT \u003d \"42.06\";"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "LeeYiyuan"
        },
        "content": "    public static final String DEFAULT_CATEGORY \u003d \"utilities\";"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "LeeYiyuan"
        },
        "content": "    public static final String DEFAULT_TRANSACTION_TYPE \u003d \"exp\";"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "LeeYiyuan"
        },
        "content": "    public static final String DEFAULT_MONTH_START_OFFSET \u003d \"1\";"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "LeeYiyuan"
        },
        "content": "    public static final String DEFAULT_MONTH_END_OFFSET \u003d \"\";"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "LeeYiyuan"
        },
        "content": "    public static final String DEFAULT_START_DAY \u003d \"1\";"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "LeeYiyuan"
        },
        "content": "    public static final String DEFAULT_START_MONTH \u003d \"1\";"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "LeeYiyuan"
        },
        "content": "    public static final String DEFAULT_START_YEAR \u003d \"2019\";"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "LeeYiyuan"
        },
        "content": "    public static final String DEFAULT_END_DAY \u003d \"31\";"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "LeeYiyuan"
        },
        "content": "    public static final String DEFAULT_END_MONTH \u003d \"12\";"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "LeeYiyuan"
        },
        "content": "    public static final String DEFAULT_END_YEAR \u003d \"2019\";"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "LeeYiyuan"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "LeeYiyuan"
        },
        "content": "    private RepeaterUniqueId uniqueId;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "LeeYiyuan"
        },
        "content": "    private Description description;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "LeeYiyuan"
        },
        "content": "    private Amount amount;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "LeeYiyuan"
        },
        "content": "    private Category category;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "LeeYiyuan"
        },
        "content": "    private TransactionType transactionType;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "LeeYiyuan"
        },
        "content": "    private MonthOffset monthStartOffset;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "LeeYiyuan"
        },
        "content": "    private MonthOffset monthEndOffset;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "LeeYiyuan"
        },
        "content": "    private Date startDate;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "LeeYiyuan"
        },
        "content": "    private Date endDate;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "LeeYiyuan"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "LeeYiyuan"
        },
        "content": "    public RepeaterBuilder() {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "LeeYiyuan"
        },
        "content": "        uniqueId \u003d new RepeaterUniqueId(DEFAULT_UNIQUE_ID);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "LeeYiyuan"
        },
        "content": "        description \u003d new Description(DEFAULT_DESCRIPTION);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "LeeYiyuan"
        },
        "content": "        amount \u003d new Amount(DEFAULT_AMOUNT);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "LeeYiyuan"
        },
        "content": "        category \u003d new Category(DEFAULT_CATEGORY);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "LeeYiyuan"
        },
        "content": "        transactionType \u003d new TransactionType(DEFAULT_TRANSACTION_TYPE);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "LeeYiyuan"
        },
        "content": "        monthStartOffset \u003d new MonthOffset(DEFAULT_MONTH_START_OFFSET);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "LeeYiyuan"
        },
        "content": "        monthEndOffset \u003d new MonthOffset(DEFAULT_MONTH_END_OFFSET);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "LeeYiyuan"
        },
        "content": "        startDate \u003d new Date("
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "LeeYiyuan"
        },
        "content": "                new Day(DEFAULT_START_DAY),"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "LeeYiyuan"
        },
        "content": "                new Month(DEFAULT_START_MONTH),"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "LeeYiyuan"
        },
        "content": "                new Year(DEFAULT_START_YEAR));"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "LeeYiyuan"
        },
        "content": "        endDate \u003d new Date("
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "LeeYiyuan"
        },
        "content": "                new Day(DEFAULT_END_DAY),"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "LeeYiyuan"
        },
        "content": "                new Month(DEFAULT_END_MONTH),"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "LeeYiyuan"
        },
        "content": "                new Year(DEFAULT_END_YEAR));"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "LeeYiyuan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "LeeYiyuan"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "LeeYiyuan"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "LeeYiyuan"
        },
        "content": "     * Initializes the RepeaterBuilder with the data of {@code repeaterToCopy}."
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "LeeYiyuan"
        },
        "content": "     */"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "LeeYiyuan"
        },
        "content": "    public RepeaterBuilder(Repeater repeaterToCopy) {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "LeeYiyuan"
        },
        "content": "        uniqueId \u003d repeaterToCopy.getUniqueId();"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "LeeYiyuan"
        },
        "content": "        description \u003d repeaterToCopy.getDescription();"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "LeeYiyuan"
        },
        "content": "        amount \u003d repeaterToCopy.getAmount();"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "LeeYiyuan"
        },
        "content": "        category \u003d repeaterToCopy.getCategory();"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "LeeYiyuan"
        },
        "content": "        monthStartOffset \u003d repeaterToCopy.getMonthStartOffset();"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "LeeYiyuan"
        },
        "content": "        monthEndOffset \u003d repeaterToCopy.getMonthEndOffset();"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "LeeYiyuan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "LeeYiyuan"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "LeeYiyuan"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "LeeYiyuan"
        },
        "content": "     * Sets the {@code Description} of the {@code Repeater} that we are building."
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "LeeYiyuan"
        },
        "content": "     */"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "LeeYiyuan"
        },
        "content": "    public RepeaterBuilder withDescription(String description) {"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "LeeYiyuan"
        },
        "content": "        this.description \u003d new Description(description);"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "LeeYiyuan"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "LeeYiyuan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "LeeYiyuan"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "LeeYiyuan"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "LeeYiyuan"
        },
        "content": "     * Sets the {@code Amount} of the {@code Repeater} that we are building."
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "LeeYiyuan"
        },
        "content": "     */"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "LeeYiyuan"
        },
        "content": "    public RepeaterBuilder withAmount(String amount) {"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "LeeYiyuan"
        },
        "content": "        this.amount \u003d new Amount(amount);"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "LeeYiyuan"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "LeeYiyuan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "LeeYiyuan"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "LeeYiyuan"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "LeeYiyuan"
        },
        "content": "     * Builds the repeater."
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "LeeYiyuan"
        },
        "content": "     */"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "LeeYiyuan"
        },
        "content": "    public Repeater build() {"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "LeeYiyuan"
        },
        "content": "        return new Repeater(uniqueId, description, amount, category, transactionType,"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "LeeYiyuan"
        },
        "content": "                monthStartOffset, monthEndOffset, startDate, endDate);"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "LeeYiyuan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "LeeYiyuan"
        },
        "content": ""
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "LeeYiyuan"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "LeeYiyuan": 96,
      "weiyang13": 2
    }
  },
  {
    "path": "src/test/java/seedu/ichifund/testutil/SerializableTestClass.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "nexolute"
        },
        "content": "package seedu.ichifund.testutil;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.time.LocalDateTime;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.HashMap;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": " * A class used to test serialization and deserialization"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "public class SerializableTestClass {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String JSON_STRING_REPRESENTATION \u003d String.format(\"{%n\""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"  \\\"name\\\" : \\\"This is a test class\\\",%n\""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"  \\\"listOfLocalDateTimes\\\" : \""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"[ \\\"-999999999-01-01T00:00:00\\\", \\\"+999999999-12-31T23:59:59.999999999\\\", \""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"\\\"0001-01-01T01:01:00\\\" ],%n\""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"  \\\"mapOfIntegerToString\\\" : {%n\""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"    \\\"1\\\" : \\\"One\\\",%n\""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"    \\\"2\\\" : \\\"Two\\\",%n\""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"    \\\"3\\\" : \\\"Three\\\"%n\""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"  }%n\""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"}\");"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String NAME_TEST_VALUE \u003d \"This is a test class\";"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    private String name;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    private List\u003cLocalDateTime\u003e listOfLocalDateTimes;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    private HashMap\u003cInteger, String\u003e mapOfIntegerToString;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    public static String getNameTestValue() {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        return NAME_TEST_VALUE;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    public static List\u003cLocalDateTime\u003e getListTestValues() {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        List\u003cLocalDateTime\u003e listOfLocalDateTimes \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        listOfLocalDateTimes.add(LocalDateTime.MIN);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        listOfLocalDateTimes.add(LocalDateTime.MAX);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "        listOfLocalDateTimes.add(LocalDateTime.of(1, 1, 1, 1, 1));"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "        return listOfLocalDateTimes;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    public static HashMap\u003cInteger, String\u003e getHashMapTestValues() {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        HashMap\u003cInteger, String\u003e mapOfIntegerToString \u003d new HashMap\u003c\u003e();"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        mapOfIntegerToString.put(1, \"One\");"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        mapOfIntegerToString.put(2, \"Two\");"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "        mapOfIntegerToString.put(3, \"Three\");"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        return mapOfIntegerToString;"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setTestValues() {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "        name \u003d getNameTestValue();"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "        listOfLocalDateTimes \u003d getListTestValues();"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "        mapOfIntegerToString \u003d getHashMapTestValues();"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    public String getName() {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "        return name;"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "    public List\u003cLocalDateTime\u003e getListOfLocalDateTimes() {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "        return listOfLocalDateTimes;"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "    public HashMap\u003cInteger, String\u003e getMapOfIntegerToString() {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "        return mapOfIntegerToString;"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "nexolute": 1,
      "-": 71
    }
  },
  {
    "path": "src/test/java/seedu/ichifund/testutil/TestUtil.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "nexolute"
        },
        "content": "package seedu.ichifund.testutil;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Files;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Paths;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "nexolute"
        },
        "content": "import seedu.ichifund.commons.core.index.Index;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "nexolute"
        },
        "content": "import seedu.ichifund.model.Model;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "nexolute"
        },
        "content": "import seedu.ichifund.model.person.Person;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": " * A utility class for test cases."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "public class TestUtil {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "     * Folder used for temp files created during testing. Ignored by Git."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final Path SANDBOX_FOLDER \u003d Paths.get(\"src\", \"test\", \"data\", \"sandbox\");"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "     * Appends {@code fileName} to the sandbox folder path and returns the resulting path."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "     * Creates the sandbox folder if it doesn\u0027t exist."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    public static Path getFilePathInSandboxFolder(String fileName) {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "            Files.createDirectories(SANDBOX_FOLDER);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new RuntimeException(e);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        return SANDBOX_FOLDER.resolve(fileName);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns the middle index of the person in the {@code model}\u0027s person list."
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    public static Index getMidIndex(Model model) {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        return Index.fromOneBased(model.getFilteredPersonList().size() / 2);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns the last index of the person in the {@code model}\u0027s person list."
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    public static Index getLastIndex(Model model) {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        return Index.fromOneBased(model.getFilteredPersonList().size());"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns the person in the {@code model}\u0027s person list at {@code index}."
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    public static Person getPerson(Model model, Index index) {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "        return model.getFilteredPersonList().get(index.getZeroBased());"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "nexolute": 4,
      "-": 51
    }
  },
  {
    "path": "src/test/java/seedu/ichifund/testutil/TransactionBuilder.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "package seedu.ichifund.testutil;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "weiyang13"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "import seedu.ichifund.model.Description;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "import seedu.ichifund.model.amount.Amount;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "import seedu.ichifund.model.date.Date;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "LeeYiyuan"
        },
        "content": "import seedu.ichifund.model.repeater.RepeaterUniqueId;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "import seedu.ichifund.model.transaction.Category;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "import seedu.ichifund.model.transaction.Transaction;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "import seedu.ichifund.model.transaction.TransactionType;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "weiyang13"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "/**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "weiyang13"
        },
        "content": " * A utility class to help with building Transaction objects."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "weiyang13"
        },
        "content": " */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "public class TransactionBuilder {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "weiyang13"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "    public static final String DEFAULT_AMOUNT \u003d \"20.45\";"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "    public static final String DEFAULT_DESCRIPTION \u003d \"Spiderman\";"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "    public static final String DEFAULT_CATEGORY \u003d \"Entertainment\";"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "    public static final String DEFAULT_TRANSACTION_TYPE \u003d \"exp\";"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "weiyang13"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "    private Description description;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "    private Amount amount;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "    private Category category;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "    private Date date;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "    private TransactionType transactionType;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "weiyang13"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "    public TransactionBuilder() {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "        description \u003d new Description(DEFAULT_DESCRIPTION);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "        amount \u003d new Amount(DEFAULT_AMOUNT);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "        category \u003d new Category(DEFAULT_CATEGORY);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "        date \u003d new DateBuilder().build();"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "        transactionType \u003d new TransactionType(DEFAULT_TRANSACTION_TYPE);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "weiyang13"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "     * Initializes the TransactionBuilder with the data of {@code transactionToCopy}."
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "     */"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "    public TransactionBuilder(Transaction transactionToCopy) {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "        description \u003d transactionToCopy.getDescription();"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "        amount \u003d transactionToCopy.getAmount();"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "        category \u003d transactionToCopy.getCategory();"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "        date \u003d transactionToCopy.getDate();"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "        transactionType \u003d transactionToCopy.getTransactionType();"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "weiyang13"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "     * Sets the {@code Description} of the {@code Transaction} that we are building."
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "     */"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "    public TransactionBuilder withDescription(String description) {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "        this.description \u003d new Description(description);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "weiyang13"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "     * Sets the {@code Amount} of the {@code Transaction} that we are building."
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "     */"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "    public TransactionBuilder withAmount(String amount) {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "        this.amount \u003d new Amount(amount);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "    }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "weiyang13"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "     * Sets the {@code Category} of the {@code Transaction} that we are building."
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "     */"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "    public TransactionBuilder withCategory(String category) {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "        this.category \u003d new Category(category);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "    }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "weiyang13"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "     * Sets the {@code Date} of the {@code Transaction} that we are building."
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "     */"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "    public TransactionBuilder withDate(Date date) {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "        this.date \u003d date;"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "    }"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "weiyang13"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "     * Sets the {@code TransactionType} of the {@code Transaction} that we are building."
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "     */"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "    public TransactionBuilder withTransactionType(String transactionType) {"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "        this.transactionType \u003d new TransactionType(transactionType);"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "    }"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "weiyang13"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "    public Transaction build() {"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "LeeYiyuan"
        },
        "content": "        return new Transaction(description, amount, category, date, transactionType, new RepeaterUniqueId(\"\"));"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "    }"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "weiyang13"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "LeeYiyuan": 2,
      "weiyang13": 88
    }
  },
  {
    "path": "src/test/java/seedu/ichifund/testutil/TransactionUtil.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "package seedu.ichifund.testutil;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "weiyang13"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "import static seedu.ichifund.logic.parser.CliSyntax.PREFIX_AMOUNT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "import static seedu.ichifund.logic.parser.CliSyntax.PREFIX_CATEGORY;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "import static seedu.ichifund.logic.parser.CliSyntax.PREFIX_DAY;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "import static seedu.ichifund.logic.parser.CliSyntax.PREFIX_DESCRIPTION;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "import static seedu.ichifund.logic.parser.CliSyntax.PREFIX_MONTH;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "import static seedu.ichifund.logic.parser.CliSyntax.PREFIX_TRANSACTION_TYPE;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "import static seedu.ichifund.logic.parser.CliSyntax.PREFIX_YEAR;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "weiyang13"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "import seedu.ichifund.logic.commands.transaction.AddTransactionCommand;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "import seedu.ichifund.logic.commands.transaction.EditTransactionCommand.EditTransactionDescriptor;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "import seedu.ichifund.model.transaction.Transaction;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "weiyang13"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "/**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "weiyang13"
        },
        "content": " * A utility class for Transaction."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "weiyang13"
        },
        "content": " */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "public class TransactionUtil {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "weiyang13"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "     * Returns a full add transaction command string for adding the {@code transaction}."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "     */"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "    public static String getAddTransactionCommand(Transaction transaction) {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "        return AddTransactionCommand.COMMAND_WORD + \" \" + getTransactionDetails(transaction);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "    }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "weiyang13"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "     * Returns the part of transactionCommand string for the given {@code transaction}\u0027s details."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "     */"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "    public static String getTransactionDetails(Transaction transaction) {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "        StringBuilder sb \u003d new StringBuilder();"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "        sb.append(PREFIX_DESCRIPTION + transaction.getDescription().toString() + \" \");"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "        sb.append(PREFIX_AMOUNT + transaction.getAmount().toString() + \" \");"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "        sb.append(PREFIX_DAY + transaction.getDay().toString() + \" \");"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "        sb.append(PREFIX_MONTH + transaction.getMonth().toString() + \" \");"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "        sb.append(PREFIX_YEAR + transaction.getYear().toString() + \" \");"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "        sb.append(PREFIX_CATEGORY + transaction.getCategory().toString() + \" \");"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "        sb.append(PREFIX_TRANSACTION_TYPE + transaction.getTransactionType().toString() + \" \");"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "        return sb.toString();"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "weiyang13"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "     * Returns the part of transactionCommand string for the given {@code EditTransactionDescriptor}\u0027s details."
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "     */"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "    public static String getEditTransactionDescriptorDetails(EditTransactionDescriptor descriptor) {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "        StringBuilder sb \u003d new StringBuilder();"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "        descriptor.getDescription().ifPresent(description -\u003e sb.append(PREFIX_DESCRIPTION)"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "                .append(description.toString()).append(\" \"));"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "        descriptor.getAmount().ifPresent(amount -\u003e sb.append(PREFIX_AMOUNT).append(amount.toString()).append(\" \"));"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "        descriptor.getCategory().ifPresent(category -\u003e sb.append(PREFIX_CATEGORY)"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "                .append(category.toString()).append(\" \"));"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "        descriptor.getDay().ifPresent(day -\u003e sb.append(PREFIX_DAY).append(day.toString()).append(\" \"));"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "        descriptor.getMonth().ifPresent(month -\u003e sb.append(PREFIX_MONTH).append(month.toString()).append(\" \"));"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "        descriptor.getYear().ifPresent(year -\u003e sb.append(PREFIX_YEAR).append(year.toString()).append(\" \"));"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "        descriptor.getTransactionType().ifPresent(transactionType -\u003e sb.append(PREFIX_TRANSACTION_TYPE)"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "                .append(transactionType.toString()).append(\" \"));"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "        return sb.toString();"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "    }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "weiyang13": 59
    }
  },
  {
    "path": "src/test/java/seedu/ichifund/testutil/TypicalFundBook.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "nexolute"
        },
        "content": "package seedu.ichifund.testutil;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "nexolute"
        },
        "content": "import static seedu.ichifund.logic.commands.CommandTestUtil.VALID_ADDRESS_AMY;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "nexolute"
        },
        "content": "import static seedu.ichifund.logic.commands.CommandTestUtil.VALID_ADDRESS_BOB;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "import static seedu.ichifund.logic.commands.CommandTestUtil.VALID_AMOUNT_ALLOWANCE;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "import static seedu.ichifund.logic.commands.CommandTestUtil.VALID_AMOUNT_BUS;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "import static seedu.ichifund.logic.commands.CommandTestUtil.VALID_CATEGORY_ALLOWANCE;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "import static seedu.ichifund.logic.commands.CommandTestUtil.VALID_CATEGORY_BUS;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "import static seedu.ichifund.logic.commands.CommandTestUtil.VALID_DAY_ALLOWANCE;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "import static seedu.ichifund.logic.commands.CommandTestUtil.VALID_DAY_BUS;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "import static seedu.ichifund.logic.commands.CommandTestUtil.VALID_DESCRIPTION_ALLOWANCE;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "import static seedu.ichifund.logic.commands.CommandTestUtil.VALID_DESCRIPTION_BUS;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "nexolute"
        },
        "content": "import static seedu.ichifund.logic.commands.CommandTestUtil.VALID_EMAIL_AMY;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "nexolute"
        },
        "content": "import static seedu.ichifund.logic.commands.CommandTestUtil.VALID_EMAIL_BOB;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "import static seedu.ichifund.logic.commands.CommandTestUtil.VALID_MONTH_ALLOWANCE;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "import static seedu.ichifund.logic.commands.CommandTestUtil.VALID_MONTH_BUS;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "nexolute"
        },
        "content": "import static seedu.ichifund.logic.commands.CommandTestUtil.VALID_NAME_AMY;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "nexolute"
        },
        "content": "import static seedu.ichifund.logic.commands.CommandTestUtil.VALID_NAME_BOB;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "nexolute"
        },
        "content": "import static seedu.ichifund.logic.commands.CommandTestUtil.VALID_PHONE_AMY;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "nexolute"
        },
        "content": "import static seedu.ichifund.logic.commands.CommandTestUtil.VALID_PHONE_BOB;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "nexolute"
        },
        "content": "import static seedu.ichifund.logic.commands.CommandTestUtil.VALID_TAG_FRIEND;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "nexolute"
        },
        "content": "import static seedu.ichifund.logic.commands.CommandTestUtil.VALID_TAG_HUSBAND;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "import static seedu.ichifund.logic.commands.CommandTestUtil.VALID_TRANSACTION_TYPE_ALLOWANCE;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "import static seedu.ichifund.logic.commands.CommandTestUtil.VALID_TRANSACTION_TYPE_BUS;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "import static seedu.ichifund.logic.commands.CommandTestUtil.VALID_YEAR_ALLOWANCE;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "import static seedu.ichifund.logic.commands.CommandTestUtil.VALID_YEAR_BUS;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "nexolute"
        },
        "content": "import seedu.ichifund.model.FundBook;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "nexolute"
        },
        "content": "import seedu.ichifund.model.budget.Budget;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "import seedu.ichifund.model.date.Date;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "nexolute"
        },
        "content": "import seedu.ichifund.model.person.Person;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "import seedu.ichifund.model.transaction.Transaction;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "nexolute"
        },
        "content": " * A utility class containing a list of {@code FundBook} related objects to be used in tests."
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "nexolute"
        },
        "content": "public class TypicalFundBook {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "weiyang13"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "nexolute"
        },
        "content": "    public static final Person PERSON_ALICE \u003d new PersonBuilder().withName(\"Alice Pauline\")"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "            .withAddress(\"123, Jurong West Ave 6, #08-111\").withEmail(\"alice@example.com\")"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "            .withPhone(\"94351253\")"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "            .withTags(\"friends\").build();"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "nexolute"
        },
        "content": "    public static final Person PERSON_BENSON \u003d new PersonBuilder().withName(\"Benson Meier\")"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "            .withAddress(\"311, Clementi Ave 2, #02-25\")"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "            .withEmail(\"johnd@example.com\").withPhone(\"98765432\")"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "            .withTags(\"owesMoney\", \"friends\").build();"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "nexolute"
        },
        "content": "    public static final Person PERSON_CARL \u003d new PersonBuilder().withName(\"Carl Kurz\").withPhone(\"95352563\")"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "            .withEmail(\"heinz@example.com\").withAddress(\"wall street\").build();"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "nexolute"
        },
        "content": "    public static final Person PERSON_DANIEL \u003d new PersonBuilder().withName(\"Daniel Meier\").withPhone(\"87652533\")"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "            .withEmail(\"cornelia@example.com\").withAddress(\"10th street\").withTags(\"friends\").build();"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "nexolute"
        },
        "content": "    public static final Person PERSON_ELLE \u003d new PersonBuilder().withName(\"Elle Meyer\").withPhone(\"9482224\")"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "            .withEmail(\"werner@example.com\").withAddress(\"michegan ave\").build();"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "nexolute"
        },
        "content": "    public static final Person PERSON_FIONA \u003d new PersonBuilder().withName(\"Fiona Kunz\").withPhone(\"9482427\")"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "            .withEmail(\"lydia@example.com\").withAddress(\"little tokyo\").build();"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "nexolute"
        },
        "content": "    public static final Person PERSON_GEORGE \u003d new PersonBuilder().withName(\"George Best\").withPhone(\"9482442\")"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "            .withEmail(\"anna@example.com\").withAddress(\"4th street\").build();"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "    // Manually added"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "nexolute"
        },
        "content": "    public static final Person PERSON_HOON \u003d new PersonBuilder().withName(\"Hoon Meier\").withPhone(\"8482424\")"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "            .withEmail(\"stefan@example.com\").withAddress(\"little india\").build();"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "nexolute"
        },
        "content": "    public static final Person PERSON_IDA \u003d new PersonBuilder().withName(\"Ida Mueller\").withPhone(\"8482131\")"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "            .withEmail(\"hans@example.com\").withAddress(\"chicago ave\").build();"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "    // Manually added - Person\u0027s details found in {@code CommandTestUtil}"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "nexolute"
        },
        "content": "    public static final Person PERSON_AMY \u003d new PersonBuilder().withName(VALID_NAME_AMY).withPhone(VALID_PHONE_AMY)"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "            .withEmail(VALID_EMAIL_AMY).withAddress(VALID_ADDRESS_AMY).withTags(VALID_TAG_FRIEND).build();"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "nexolute"
        },
        "content": "    public static final Person PERSON_BOB \u003d new PersonBuilder().withName(VALID_NAME_BOB).withPhone(VALID_PHONE_BOB)"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "            .withEmail(VALID_EMAIL_BOB).withAddress(VALID_ADDRESS_BOB).withTags(VALID_TAG_HUSBAND, VALID_TAG_FRIEND)"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "            .build();"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "    public static final Date DATE_ALLOWANCE \u003d new DateBuilder().withDay(VALID_DAY_ALLOWANCE)"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "            .withMonth(VALID_MONTH_ALLOWANCE).withYear(VALID_YEAR_ALLOWANCE).build();"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "    public static final Date DATE_BUS \u003d new DateBuilder().withDay(VALID_DAY_BUS)"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "            .withMonth(VALID_MONTH_BUS).withYear(VALID_YEAR_BUS).build();"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "weiyang13"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "    public static final Transaction TRANSACTION_ALLOWANCE \u003d new TransactionBuilder()"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "            .withDescription(VALID_DESCRIPTION_ALLOWANCE).withAmount(VALID_AMOUNT_ALLOWANCE)"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "            .withDate(DATE_ALLOWANCE).withCategory(VALID_CATEGORY_ALLOWANCE)"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "            .withTransactionType(VALID_TRANSACTION_TYPE_ALLOWANCE).build();"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "    public static final Transaction TRANSACTION_BUS \u003d new TransactionBuilder()"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "            .withDescription(VALID_DESCRIPTION_BUS).withAmount(VALID_AMOUNT_BUS)"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "            .withDate(DATE_BUS).withCategory(VALID_CATEGORY_BUS)"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "            .withTransactionType(VALID_TRANSACTION_TYPE_BUS).build();"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "weiyang13"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "nexolute"
        },
        "content": "    public static final Budget BUDGET_OVERALL \u003d new BudgetBuilder().withDescription(\"Overall budget\")"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "nexolute"
        },
        "content": "            .withAmount(\"1337\").withMonthAndYear(\"12\", \"2012\").build();"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "nexolute"
        },
        "content": "    public static final Budget BUDGET_FOOD \u003d new BudgetBuilder().withDescription(\"Budget for food\")"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "nexolute"
        },
        "content": "            .withAmount(\"420.69\").withMonthAndYear(\"12\", \"2012\")"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "nexolute"
        },
        "content": "            .withCategory(\"food\").build();"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "nexolute"
        },
        "content": "    public static final Budget BUDGET_ANIME \u003d new BudgetBuilder().withDescription(\"Budget for anime\")"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "nexolute"
        },
        "content": "            .withAmount(\"300.00\").withMonthAndYear(\"12\", \"2012\")"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "nexolute"
        },
        "content": "            .withCategory(\"entertainment\").build();"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "nexolute"
        },
        "content": ""
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String KEYWORD_MATCHING_MEIER \u003d \"Meier\"; // A keyword that matches MEIER"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "nexolute"
        },
        "content": "    private TypicalFundBook() {} // prevents instantiation"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "nexolute"
        },
        "content": "     * Returns an {@code FundBok} with all the typical persons."
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "nexolute"
        },
        "content": "    public static FundBook getTypicalFundBook() {"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "nexolute"
        },
        "content": "        FundBook fb \u003d new FundBook();"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "        for (Person person : getTypicalPersons()) {"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "nexolute"
        },
        "content": "            fb.addPerson(person);"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "nexolute"
        },
        "content": "        }"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "nexolute"
        },
        "content": "        for (Budget budget : getTypicalBudgets()) {"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "nexolute"
        },
        "content": "            fb.addBudget(budget);"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "nexolute"
        },
        "content": "        return fb;"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "    public static List\u003cPerson\u003e getTypicalPersons() {"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "nexolute"
        },
        "content": "        return new ArrayList\u003c\u003e(Arrays.asList(PERSON_ALICE, PERSON_BENSON, PERSON_CARL, PERSON_DANIEL,"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "nexolute"
        },
        "content": "                PERSON_ELLE, PERSON_FIONA, PERSON_GEORGE));"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "nexolute"
        },
        "content": "    }"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "nexolute"
        },
        "content": ""
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "nexolute"
        },
        "content": "    public static List\u003cBudget\u003e getTypicalBudgets() {"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "nexolute"
        },
        "content": "        return new ArrayList\u003c\u003e(Arrays.asList(BUDGET_OVERALL, BUDGET_FOOD, BUDGET_ANIME));"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "nexolute": 51,
      "weiyang13": 31,
      "-": 43
    }
  },
  {
    "path": "src/test/java/seedu/ichifund/testutil/TypicalIndexes.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "nexolute"
        },
        "content": "package seedu.ichifund.testutil;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "nexolute"
        },
        "content": "import seedu.ichifund.commons.core.index.Index;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": " * A utility class containing a list of {@code Index} objects to be used in tests."
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "public class TypicalIndexes {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final Index INDEX_FIRST_PERSON \u003d Index.fromOneBased(1);"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final Index INDEX_SECOND_PERSON \u003d Index.fromOneBased(2);"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final Index INDEX_THIRD_PERSON \u003d Index.fromOneBased(3);"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "nexolute"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "    public static final Index INDEX_FIRST \u003d Index.fromOneBased(1);"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "    public static final Index INDEX_SECOND \u003d Index.fromOneBased(2);"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "weiyang13"
        },
        "content": "    public static final Index INDEX_THIRD \u003d Index.fromOneBased(3);"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "weiyang13"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "nexolute"
        },
        "content": "    public static final Index INDEX_FIRST_BUDGET \u003d Index.fromOneBased(1);"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "nexolute"
        },
        "content": "    public static final Index INDEX_SECOND_BUDGET \u003d Index.fromOneBased(2);"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "nexolute"
        },
        "content": "    public static final Index INDEX_THIRD_BUDGET \u003d Index.fromOneBased(3);"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "nexolute": 6,
      "weiyang13": 4,
      "-": 10
    }
  },
  {
    "path": "src/test/java/seedu/ichifund/ui/TestFxmlObject.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "nexolute"
        },
        "content": "package seedu.ichifund.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.beans.DefaultProperty;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": " * A test object which can be constructed via an FXML file."
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": " * Unlike other JavaFX classes, this class can be constructed without the JavaFX toolkit being initialized."
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "@DefaultProperty(\"text\")"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "public class TestFxmlObject {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    private String text;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    public TestFxmlObject() {}"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    public TestFxmlObject(String text) {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "        setText(text);"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    public String getText() {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "        return text;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setText(String text) {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "        this.text \u003d text;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "                || (other instanceof TestFxmlObject // instanceof handles nulls"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "                        \u0026\u0026 text.equals(((TestFxmlObject) other).getText()));"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "nexolute": 1,
      "-": 34
    }
  },
  {
    "path": "src/test/java/seedu/ichifund/ui/UiPartTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "nexolute"
        },
        "content": "package seedu.ichifund.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertNotNull;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "nexolute"
        },
        "content": "import static seedu.ichifund.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.net.URL;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.io.TempDir;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "nexolute"
        },
        "content": "import seedu.ichifund.MainApp;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "public class UiPartTest {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String MISSING_FILE_PATH \u003d \"UiPartTest/missingFile.fxml\";"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String INVALID_FILE_PATH \u003d \"UiPartTest/invalidFile.fxml\";"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String VALID_FILE_PATH \u003d \"UiPartTest/validFile.fxml\";"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String VALID_FILE_WITH_FX_ROOT_PATH \u003d \"UiPartTest/validFileWithFxRoot.fxml\";"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final TestFxmlObject VALID_FILE_ROOT \u003d new TestFxmlObject(\"Hello World!\");"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    @TempDir"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    public Path testFolder;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    public void constructor_nullFileUrl_throwsNullPointerException() {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e new TestUiPart\u003cObject\u003e((URL) null));"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e new TestUiPart\u003cObject\u003e((URL) null, new Object()));"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    public void constructor_missingFileUrl_throwsAssertionError() throws Exception {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "        URL missingFileUrl \u003d new URL(testFolder.toUri().toURL(), MISSING_FILE_PATH);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(AssertionError.class, () -\u003e new TestUiPart\u003cObject\u003e(missingFileUrl));"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(AssertionError.class, () -\u003e new TestUiPart\u003cObject\u003e(missingFileUrl, new Object()));"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    public void constructor_invalidFileUrl_throwsAssertionError() {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "        URL invalidFileUrl \u003d getTestFileUrl(INVALID_FILE_PATH);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(AssertionError.class, () -\u003e new TestUiPart\u003cObject\u003e(invalidFileUrl));"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(AssertionError.class, () -\u003e new TestUiPart\u003cObject\u003e(invalidFileUrl, new Object()));"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    public void constructor_validFileUrl_loadsFile() {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        URL validFileUrl \u003d getTestFileUrl(VALID_FILE_PATH);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(VALID_FILE_ROOT, new TestUiPart\u003cTestFxmlObject\u003e(validFileUrl).getRoot());"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    public void constructor_validFileWithFxRootUrl_loadsFile() {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "        URL validFileUrl \u003d getTestFileUrl(VALID_FILE_WITH_FX_ROOT_PATH);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "        TestFxmlObject root \u003d new TestFxmlObject();"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(VALID_FILE_ROOT, new TestUiPart\u003cTestFxmlObject\u003e(validFileUrl, root).getRoot());"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    public void constructor_nullFileName_throwsNullPointerException() {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e new TestUiPart\u003cObject\u003e((String) null));"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e new TestUiPart\u003cObject\u003e((String) null, new Object()));"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "    public void constructor_missingFileName_throwsNullPointerException() {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e new TestUiPart\u003cObject\u003e(MISSING_FILE_PATH));"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e new TestUiPart\u003cObject\u003e(MISSING_FILE_PATH, new Object()));"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "    public void constructor_invalidFileName_throwsAssertionError() {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(AssertionError.class, () -\u003e new TestUiPart\u003cObject\u003e(INVALID_FILE_PATH));"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(AssertionError.class, () -\u003e new TestUiPart\u003cObject\u003e(INVALID_FILE_PATH, new Object()));"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "    private URL getTestFileUrl(String testFilePath) {"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "        String testFilePathInView \u003d \"/view/\" + testFilePath;"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "        URL testFileUrl \u003d MainApp.class.getResource(testFilePathInView);"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "        assertNotNull(testFileUrl, testFilePathInView + \" does not exist.\");"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "        return testFileUrl;"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "     * UiPart used for testing."
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "nexolute"
        },
        "content": "     * It should only be used with invalid FXML files or the valid file located at {@link UiPartTest#VALID_FILE_PATH}."
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "    private static class TestUiPart\u003cT\u003e extends UiPart\u003cT\u003e {"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "        @FXML"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "        private TestFxmlObject validFileRoot; // Check that @FXML annotations work"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "        TestUiPart(URL fxmlFileUrl, T root) {"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "            super(fxmlFileUrl, root);"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "        TestUiPart(String fxmlFileName, T root) {"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "            super(fxmlFileName, root);"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "        TestUiPart(URL fxmlFileUrl) {"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "            super(fxmlFileUrl);"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "            assertEquals(VALID_FILE_ROOT, validFileRoot);"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "        TestUiPart(String fxmlFileName) {"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "            super(fxmlFileName);"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "            assertEquals(VALID_FILE_ROOT, validFileRoot);"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "nexolute": 4,
      "-": 110
    }
  },
  {
    "path": "src/test/resources/view/UiPartTest/validFile.fxml",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "nexolute"
        },
        "content": "\u003c?import seedu.ichifund.ui.TestFxmlObject?\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "\u003cTestFxmlObject xmlns:fx\u003d\"http://javafx.com/fxml/1\" fx:id\u003d\"validFileRoot\"\u003eHello World!\u003c/TestFxmlObject\u003e"
      }
    ],
    "authorContributionMap": {
      "nexolute": 1,
      "-": 3
    }
  },
  {
    "path": "src/test/resources/view/UiPartTest/validFileWithFxRoot.fxml",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "nexolute"
        },
        "content": "\u003cfx:root type\u003d\"seedu.ichifund.ui.TestFxmlObject\" xmlns\u003d\"http://javafx.com/javafx\""
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "         xmlns:fx\u003d\"http://javafx.com/fxml\"\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003ctext\u003eHello World!\u003c/text\u003e"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c/fx:root\u003e"
      }
    ],
    "authorContributionMap": {
      "nexolute": 1,
      "-": 5
    }
  }
]
